
Projekt_URA_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08008008  08008008  00018008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008684  08008684  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800868c  0800868c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008690  08008690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  200001e0  08008874  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  08008874  00020b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017829  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003109  00000000  00000000  00037a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0003ab48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  0003bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004748  00000000  00000000  0003c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f44  00000000  00000000  00041038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebb81  00000000  00000000  00055f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141afd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000509c  00000000  00000000  00141b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fec 	.word	0x08007fec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08007fec 	.word	0x08007fec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <GFX_SetFont+0x1c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000614 	.word	0x20000614

08000f00 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <GFX_SetFontSize+0x16>
		size = size_t;
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <GFX_SetFontSize+0x24>)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	7013      	strb	r3, [r2, #0]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000

08000f28 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b7e      	cmp	r3, #126	; 0x7e
 8000f42:	f200 80a3 	bhi.w	800108c <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000f46:	2300      	movs	r3, #0
 8000f48:	75fb      	strb	r3, [r7, #23]
 8000f4a:	e096      	b.n	800107a <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000f4c:	4b51      	ldr	r3, [pc, #324]	; (8001094 <GFX_DrawChar+0x16c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	3b20      	subs	r3, #32
 8000f54:	494f      	ldr	r1, [pc, #316]	; (8001094 <GFX_DrawChar+0x16c>)
 8000f56:	6809      	ldr	r1, [r1, #0]
 8000f58:	3101      	adds	r1, #1
 8000f5a:	7809      	ldrb	r1, [r1, #0]
 8000f5c:	fb01 f103 	mul.w	r1, r1, r3
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	440b      	add	r3, r1
 8000f64:	3302      	adds	r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	757b      	strb	r3, [r7, #21]
 8000f70:	e078      	b.n	8001064 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000f72:	7dbb      	ldrb	r3, [r7, #22]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d032      	beq.n	8000fe2 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000f7c:	4b46      	ldr	r3, [pc, #280]	; (8001098 <GFX_DrawChar+0x170>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d113      	bne.n	8000fac <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b218      	sxth	r0, r3
 8000f92:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	79ba      	ldrb	r2, [r7, #6]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f000 fa2f 	bl	8001408 <SSD1306_DrawPixel>
 8000faa:	e052      	b.n	8001052 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	4a3a      	ldr	r2, [pc, #232]	; (8001098 <GFX_DrawChar+0x170>)
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	fb02 f203 	mul.w	r2, r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	18d0      	adds	r0, r2, r3
 8000fba:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fbe:	4a36      	ldr	r2, [pc, #216]	; (8001098 <GFX_DrawChar+0x170>)
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	fb02 f203 	mul.w	r2, r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	18d1      	adds	r1, r2, r3
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <GFX_DrawChar+0x170>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b31      	ldr	r3, [pc, #196]	; (8001098 <GFX_DrawChar+0x170>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b29c      	uxth	r4, r3
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4623      	mov	r3, r4
 8000fdc:	f000 f9bd 	bl	800135a <GFX_DrawFillRectangle>
 8000fe0:	e037      	b.n	8001052 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8000fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d133      	bne.n	8001052 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000fea:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <GFX_DrawChar+0x170>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d114      	bne.n	800101c <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b218      	sxth	r0, r3
 8001000:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001004:	b29a      	uxth	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	b29b      	uxth	r3, r3
 800100a:	4413      	add	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	b21b      	sxth	r3, r3
 8001010:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001014:	4619      	mov	r1, r3
 8001016:	f000 f9f7 	bl	8001408 <SSD1306_DrawPixel>
 800101a:	e01a      	b.n	8001052 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <GFX_DrawChar+0x170>)
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	fb02 f203 	mul.w	r2, r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	18d0      	adds	r0, r2, r3
 800102a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800102e:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <GFX_DrawChar+0x170>)
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	fb02 f203 	mul.w	r2, r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	18d1      	adds	r1, r2, r3
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <GFX_DrawChar+0x170>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <GFX_DrawChar+0x170>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b29c      	uxth	r4, r3
 8001046:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4623      	mov	r3, r4
 800104e:	f000 f984 	bl	800135a <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001052:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	757b      	strb	r3, [r7, #21]
 800105e:	7dbb      	ldrb	r3, [r7, #22]
 8001060:	085b      	lsrs	r3, r3, #1
 8001062:	75bb      	strb	r3, [r7, #22]
 8001064:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <GFX_DrawChar+0x16c>)
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	4293      	cmp	r3, r2
 8001070:	f6ff af7f 	blt.w	8000f72 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	3301      	adds	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <GFX_DrawChar+0x16c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	7dfa      	ldrb	r2, [r7, #23]
 8001084:	429a      	cmp	r2, r3
 8001086:	f4ff af61 	bcc.w	8000f4c <GFX_DrawChar+0x24>
 800108a:	e000      	b.n	800108e <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 800108c:	bf00      	nop
            }
        }
    }
}
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd90      	pop	{r4, r7, pc}
 8001094:	20000614 	.word	0x20000614
 8001098:	20000000 	.word	0x20000000

0800109c <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80010b4:	e03e      	b.n	8001134 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 80010b6:	78f9      	ldrb	r1, [r7, #3]
 80010b8:	7cfa      	ldrb	r2, [r7, #19]
 80010ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	460b      	mov	r3, r1
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f7ff ff2f 	bl	8000f28 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <GFX_DrawString+0xb0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <GFX_DrawString+0xb4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	fb03 f302 	mul.w	r3, r3, r2
 80010dc:	3301      	adds	r3, #1
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 80010e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d120      	bne.n	800112e <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	74bb      	strb	r3, [r7, #18]
 80010f0:	e012      	b.n	8001118 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3b01      	subs	r3, #1
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b218      	sxth	r0, r3
 80010fc:	7cbb      	ldrb	r3, [r7, #18]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	b29b      	uxth	r3, r3
 8001108:	b21b      	sxth	r3, r3
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	f000 f97b 	bl	8001408 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001112:	7cbb      	ldrb	r3, [r7, #18]
 8001114:	3301      	adds	r3, #1
 8001116:	74bb      	strb	r3, [r7, #18]
 8001118:	7cba      	ldrb	r2, [r7, #18]
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <GFX_DrawString+0xb0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <GFX_DrawString+0xb4>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	fb03 f301 	mul.w	r3, r3, r1
 800112a:	429a      	cmp	r2, r3
 800112c:	dbe1      	blt.n	80010f2 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1ba      	bne.n	80010b6 <GFX_DrawString+0x1a>
	}
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000614 	.word	0x20000614
 8001150:	20000000 	.word	0x20000000

08001154 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800116c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	1acb      	subs	r3, r1, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	bfb8      	it	lt
 800117a:	425b      	neglt	r3, r3
 800117c:	429a      	cmp	r2, r3
 800117e:	bfcc      	ite	gt
 8001180:	2301      	movgt	r3, #1
 8001182:	2300      	movle	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001188:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	623b      	str	r3, [r7, #32]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	dd0b      	ble.n	80011c8 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bfb8      	it	lt
 80011e0:	425b      	neglt	r3, r3
 80011e2:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80011e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	da00      	bge.n	80011ee <GFX_WriteLine+0x9a>
 80011ec:	3301      	adds	r3, #1
 80011ee:	105b      	asrs	r3, r3, #1
 80011f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	da02      	bge.n	8001200 <GFX_WriteLine+0xac>
	        ystep = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80011fe:	e030      	b.n	8001262 <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 8001200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001204:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001206:	e02c      	b.n	8001262 <GFX_WriteLine+0x10e>
	        if (steep) {
 8001208:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800120c:	2b00      	cmp	r3, #0
 800120e:	d009      	beq.n	8001224 <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	b21b      	sxth	r3, r3
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	b211      	sxth	r1, r2
 8001218:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f8f3 	bl	8001408 <SSD1306_DrawPixel>
 8001222:	e008      	b.n	8001236 <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	b21b      	sxth	r3, r3
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	b211      	sxth	r1, r2
 800122c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f8e9 	bl	8001408 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8001236:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001238:	8abb      	ldrh	r3, [r7, #20]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001240:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001244:	2b00      	cmp	r3, #0
 8001246:	da09      	bge.n	800125c <GFX_WriteLine+0x108>
	            y_start += ystep;
 8001248:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	4413      	add	r3, r2
 8001250:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001252:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001254:	8afb      	ldrh	r3, [r7, #22]
 8001256:	4413      	add	r3, r2
 8001258:	b29b      	uxth	r3, r3
 800125a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	429a      	cmp	r2, r3
 8001268:	ddce      	ble.n	8001208 <GFX_WriteLine+0xb4>
	        }
	    }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3730      	adds	r7, #48	; 0x30
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af02      	add	r7, sp, #8
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4613      	mov	r3, r2
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	68b9      	ldr	r1, [r7, #8]
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f7ff ff5d 	bl	8001154 <GFX_WriteLine>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af02      	add	r7, sp, #8
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ff47 	bl	8001154 <GFX_WriteLine>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b088      	sub	sp, #32
 80012d2:	af02      	add	r7, sp, #8
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d114      	bne.n	800130e <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dd05      	ble.n	80012f8 <GFX_DrawLine+0x2a>
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f7ff ffb4 	bl	8001274 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 800130c:	e021      	b.n	8001352 <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d114      	bne.n	8001340 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	dd05      	ble.n	800132a <GFX_DrawLine+0x5c>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff ffb2 	bl	80012a2 <GFX_DrawFastHLine>
}
 800133e:	e008      	b.n	8001352 <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 8001340:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f7ff ff01 	bl	8001154 <GFX_WriteLine>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	4611      	mov	r1, r2
 8001366:	461a      	mov	r2, r3
 8001368:	460b      	mov	r3, r1
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	4613      	mov	r3, r2
 800136e:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e009      	b.n	800138a <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001376:	88ba      	ldrh	r2, [r7, #4]
 8001378:	f897 3020 	ldrb.w	r3, [r7, #32]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff78 	bl	8001274 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	88fa      	ldrh	r2, [r7, #6]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbef      	blt.n	8001376 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af04      	add	r7, sp, #16
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <SSD1306_Command+0x30>)
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	2301      	movs	r3, #1
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	2200      	movs	r2, #0
 80013c0:	2178      	movs	r1, #120	; 0x78
 80013c2:	f001 fa27 	bl	8002814 <HAL_I2C_Mem_Write>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000618 	.word	0x20000618

080013d4 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af04      	add	r7, sp, #16
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <SSD1306_Data+0x30>)
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	2240      	movs	r2, #64	; 0x40
 80013f6:	2178      	movs	r1, #120	; 0x78
 80013f8:	f001 fa0c 	bl	8002814 <HAL_I2C_Mem_Write>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000618 	.word	0x20000618

08001408 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
 8001412:	460b      	mov	r3, r1
 8001414:	80bb      	strh	r3, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db79      	blt.n	8001516 <SSD1306_DrawPixel+0x10e>
 8001422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001426:	2b7f      	cmp	r3, #127	; 0x7f
 8001428:	dc75      	bgt.n	8001516 <SSD1306_DrawPixel+0x10e>
 800142a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db71      	blt.n	8001516 <SSD1306_DrawPixel+0x10e>
 8001432:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001436:	2b3f      	cmp	r3, #63	; 0x3f
 8001438:	dc6d      	bgt.n	8001516 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d049      	beq.n	80014d4 <SSD1306_DrawPixel+0xcc>
 8001440:	2b02      	cmp	r3, #2
 8001442:	dc69      	bgt.n	8001518 <SSD1306_DrawPixel+0x110>
 8001444:	2b00      	cmp	r3, #0
 8001446:	d022      	beq.n	800148e <SSD1306_DrawPixel+0x86>
 8001448:	2b01      	cmp	r3, #1
 800144a:	d165      	bne.n	8001518 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800144c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001450:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	da00      	bge.n	800145a <SSD1306_DrawPixel+0x52>
 8001458:	3307      	adds	r3, #7
 800145a:	10db      	asrs	r3, r3, #3
 800145c:	b218      	sxth	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	01db      	lsls	r3, r3, #7
 8001462:	4413      	add	r3, r2
 8001464:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	b25a      	sxtb	r2, r3
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	2101      	movs	r1, #1
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b259      	sxtb	r1, r3
 800147c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001480:	4603      	mov	r3, r0
 8001482:	01db      	lsls	r3, r3, #7
 8001484:	4413      	add	r3, r2
 8001486:	b2c9      	uxtb	r1, r1
 8001488:	4a26      	ldr	r2, [pc, #152]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 800148a:	54d1      	strb	r1, [r2, r3]
      break;
 800148c:	e044      	b.n	8001518 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800148e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001492:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	da00      	bge.n	800149c <SSD1306_DrawPixel+0x94>
 800149a:	3307      	adds	r3, #7
 800149c:	10db      	asrs	r3, r3, #3
 800149e:	b218      	sxth	r0, r3
 80014a0:	4603      	mov	r3, r0
 80014a2:	01db      	lsls	r3, r3, #7
 80014a4:	4413      	add	r3, r2
 80014a6:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	b25a      	sxtb	r2, r3
 80014ac:	88bb      	ldrh	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	4013      	ands	r3, r2
 80014c0:	b259      	sxtb	r1, r3
 80014c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014c6:	4603      	mov	r3, r0
 80014c8:	01db      	lsls	r3, r3, #7
 80014ca:	4413      	add	r3, r2
 80014cc:	b2c9      	uxtb	r1, r1
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 80014d0:	54d1      	strb	r1, [r2, r3]
      break;
 80014d2:	e021      	b.n	8001518 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 80014d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da00      	bge.n	80014e2 <SSD1306_DrawPixel+0xda>
 80014e0:	3307      	adds	r3, #7
 80014e2:	10db      	asrs	r3, r3, #3
 80014e4:	b218      	sxth	r0, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	4413      	add	r3, r2
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	b25a      	sxtb	r2, r3
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4053      	eors	r3, r2
 8001502:	b259      	sxtb	r1, r3
 8001504:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001508:	4603      	mov	r3, r0
 800150a:	01db      	lsls	r3, r3, #7
 800150c:	4413      	add	r3, r2
 800150e:	b2c9      	uxtb	r1, r1
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 8001512:	54d1      	strb	r1, [r2, r3]
      break;
 8001514:	e000      	b.n	8001518 <SSD1306_DrawPixel+0x110>
	  return;
 8001516:	bf00      	nop
    }
}
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200001fc 	.word	0x200001fc

08001528 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <SSD1306_Clear+0x22>
 8001538:	2b01      	cmp	r3, #1
 800153a:	d10d      	bne.n	8001558 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 800153c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001540:	21ff      	movs	r1, #255	; 0xff
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <SSD1306_Clear+0x38>)
 8001544:	f003 feb4 	bl	80052b0 <memset>
		break;
 8001548:	e006      	b.n	8001558 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154e:	2100      	movs	r1, #0
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <SSD1306_Clear+0x38>)
 8001552:	f003 fead 	bl	80052b0 <memset>
		break;
 8001556:	bf00      	nop
	}
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200001fc 	.word	0x200001fc

08001564 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001568:	2022      	movs	r0, #34	; 0x22
 800156a:	f7ff ff19 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff ff16 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8001574:	20ff      	movs	r0, #255	; 0xff
 8001576:	f7ff ff13 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800157a:	2021      	movs	r0, #33	; 0x21
 800157c:	f7ff ff10 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff ff0d 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001586:	207f      	movs	r0, #127	; 0x7f
 8001588:	f7ff ff0a 	bl	80013a0 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 800158c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <SSD1306_Display+0x38>)
 8001592:	f7ff ff1f 	bl	80013d4 <SSD1306_Data>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200001fc 	.word	0x200001fc

080015a0 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 80015a8:	4a28      	ldr	r2, [pc, #160]	; (800164c <SSD1306_Init+0xac>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 80015ae:	20ae      	movs	r0, #174	; 0xae
 80015b0:	f7ff fef6 	bl	80013a0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80015b4:	20d5      	movs	r0, #213	; 0xd5
 80015b6:	f7ff fef3 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0x80);
 80015ba:	2080      	movs	r0, #128	; 0x80
 80015bc:	f7ff fef0 	bl	80013a0 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80015c0:	203f      	movs	r0, #63	; 0x3f
 80015c2:	f7ff feed 	bl	80013a0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80015c6:	20d3      	movs	r0, #211	; 0xd3
 80015c8:	f7ff feea 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0x00);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fee7 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 80015d2:	2040      	movs	r0, #64	; 0x40
 80015d4:	f7ff fee4 	bl	80013a0 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 80015d8:	208d      	movs	r0, #141	; 0x8d
 80015da:	f7ff fee1 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0x14);
 80015de:	2014      	movs	r0, #20
 80015e0:	f7ff fede 	bl	80013a0 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 80015e4:	2020      	movs	r0, #32
 80015e6:	f7ff fedb 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff fed8 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80015f0:	20a1      	movs	r0, #161	; 0xa1
 80015f2:	f7ff fed5 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80015f6:	20c8      	movs	r0, #200	; 0xc8
 80015f8:	f7ff fed2 	bl	80013a0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80015fc:	20da      	movs	r0, #218	; 0xda
 80015fe:	f7ff fecf 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001602:	2012      	movs	r0, #18
 8001604:	f7ff fecc 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8001608:	2081      	movs	r0, #129	; 0x81
 800160a:	f7ff fec9 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0xFF);
 800160e:	20ff      	movs	r0, #255	; 0xff
 8001610:	f7ff fec6 	bl	80013a0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001614:	20d9      	movs	r0, #217	; 0xd9
 8001616:	f7ff fec3 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800161a:	20f1      	movs	r0, #241	; 0xf1
 800161c:	f7ff fec0 	bl	80013a0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001620:	20db      	movs	r0, #219	; 0xdb
 8001622:	f7ff febd 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(0x40);
 8001626:	2040      	movs	r0, #64	; 0x40
 8001628:	f7ff feba 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 800162c:	20a4      	movs	r0, #164	; 0xa4
 800162e:	f7ff feb7 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001632:	20a6      	movs	r0, #166	; 0xa6
 8001634:	f7ff feb4 	bl	80013a0 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8001638:	202e      	movs	r0, #46	; 0x2e
 800163a:	f7ff feb1 	bl	80013a0 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 800163e:	20af      	movs	r0, #175	; 0xaf
 8001640:	f7ff feae 	bl	80013a0 <SSD1306_Command>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000618 	.word	0x20000618

08001650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	; 0x30
 8001654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <MX_GPIO_Init+0x134>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a46      	ldr	r2, [pc, #280]	; (8001784 <MX_GPIO_Init+0x134>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <MX_GPIO_Init+0x134>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <MX_GPIO_Init+0x134>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a40      	ldr	r2, [pc, #256]	; (8001784 <MX_GPIO_Init+0x134>)
 8001684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <MX_GPIO_Init+0x134>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <MX_GPIO_Init+0x134>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a3a      	ldr	r2, [pc, #232]	; (8001784 <MX_GPIO_Init+0x134>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <MX_GPIO_Init+0x134>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <MX_GPIO_Init+0x134>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a34      	ldr	r2, [pc, #208]	; (8001784 <MX_GPIO_Init+0x134>)
 80016b4:	f043 0308 	orr.w	r3, r3, #8
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <MX_GPIO_Init+0x134>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016c6:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <MX_GPIO_Init+0x134>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a2e      	ldr	r2, [pc, #184]	; (8001784 <MX_GPIO_Init+0x134>)
 80016cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <MX_GPIO_Init+0x134>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <MX_GPIO_Init+0x134>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a28      	ldr	r2, [pc, #160]	; (8001784 <MX_GPIO_Init+0x134>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <MX_GPIO_Init+0x134>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80016fc:	4822      	ldr	r0, [pc, #136]	; (8001788 <MX_GPIO_Init+0x138>)
 80016fe:	f000 ffdf 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	2140      	movs	r1, #64	; 0x40
 8001706:	4821      	ldr	r0, [pc, #132]	; (800178c <MX_GPIO_Init+0x13c>)
 8001708:	f000 ffda 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800170c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001712:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	481b      	ldr	r0, [pc, #108]	; (8001790 <MX_GPIO_Init+0x140>)
 8001724:	f000 fe20 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001728:	f244 0381 	movw	r3, #16513	; 0x4081
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4811      	ldr	r0, [pc, #68]	; (8001788 <MX_GPIO_Init+0x138>)
 8001742:	f000 fe11 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001746:	2340      	movs	r3, #64	; 0x40
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <MX_GPIO_Init+0x13c>)
 800175e:	f000 fe03 	bl	8002368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_GPIO_Init+0x13c>)
 8001776:	f000 fdf7 	bl	8002368 <HAL_GPIO_Init>

}
 800177a:	bf00      	nop
 800177c:	3730      	adds	r7, #48	; 0x30
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40020400 	.word	0x40020400
 800178c:	40021800 	.word	0x40021800
 8001790:	40020800 	.word	0x40020800

08001794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_I2C1_Init+0x74>)
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <MX_I2C1_Init+0x78>)
 800179c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_I2C1_Init+0x74>)
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <MX_I2C1_Init+0x7c>)
 80017a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_I2C1_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_I2C1_Init+0x74>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_I2C1_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_I2C1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_I2C1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_I2C1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_I2C1_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ce:	480e      	ldr	r0, [pc, #56]	; (8001808 <MX_I2C1_Init+0x74>)
 80017d0:	f000 ff90 	bl	80026f4 <HAL_I2C_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017da:	f000 f9d1 	bl	8001b80 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017de:	2100      	movs	r1, #0
 80017e0:	4809      	ldr	r0, [pc, #36]	; (8001808 <MX_I2C1_Init+0x74>)
 80017e2:	f001 fb7d 	bl	8002ee0 <HAL_I2CEx_ConfigAnalogFilter>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017ec:	f000 f9c8 	bl	8001b80 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f0:	2100      	movs	r1, #0
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_I2C1_Init+0x74>)
 80017f4:	f001 fbbf 	bl	8002f76 <HAL_I2CEx_ConfigDigitalFilter>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017fe:	f000 f9bf 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000061c 	.word	0x2000061c
 800180c:	40005400 	.word	0x40005400
 8001810:	00301739 	.word	0x00301739

08001814 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0aa      	sub	sp, #168	; 0xa8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	2284      	movs	r2, #132	; 0x84
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fd3b 	bl	80052b0 <memset>
  if(i2cHandle->Instance==I2C1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <HAL_I2C_MspInit+0xb4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d13c      	bne.n	80018be <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001844:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001848:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800184a:	2300      	movs	r3, #0
 800184c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	4618      	mov	r0, r3
 8001854:	f002 f9da 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800185e:	f000 f98f 	bl	8001b80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_I2C_MspInit+0xb8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a19      	ldr	r2, [pc, #100]	; (80018cc <HAL_I2C_MspInit+0xb8>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_I2C_MspInit+0xb8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800187a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800187e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001882:	2312      	movs	r3, #18
 8001884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001894:	2304      	movs	r3, #4
 8001896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800189e:	4619      	mov	r1, r3
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <HAL_I2C_MspInit+0xbc>)
 80018a2:	f000 fd61 	bl	8002368 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_I2C_MspInit+0xb8>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <HAL_I2C_MspInit+0xb8>)
 80018ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_I2C_MspInit+0xb8>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018be:	bf00      	nop
 80018c0:	37a8      	adds	r7, #168	; 0xa8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40005400 	.word	0x40005400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020400 	.word	0x40020400

080018d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018da:	f000 fbde 	bl	800209a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80018de:	f000 f8e7 	bl	8001ab0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80018e2:	f7ff feb5 	bl	8001650 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80018e6:	f000 fa77 	bl	8001dd8 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80018ea:	f000 fb05 	bl	8001ef8 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 80018ee:	f7ff ff51 	bl	8001794 <MX_I2C1_Init>
	//BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);

	//
	// Ustawienie Wyświetlacza OLED
	//
	SSD1306_Init(&hi2c1);
 80018f2:	485e      	ldr	r0, [pc, #376]	; (8001a6c <main+0x198>)
 80018f4:	f7ff fe54 	bl	80015a0 <SSD1306_Init>
	GFX_SetFont(font_8x5);
 80018f8:	485d      	ldr	r0, [pc, #372]	; (8001a70 <main+0x19c>)
 80018fa:	f7ff faf1 	bl	8000ee0 <GFX_SetFont>
	GFX_SetFontSize(1);
 80018fe:	2001      	movs	r0, #1
 8001900:	f7ff fafe 	bl	8000f00 <GFX_SetFontSize>
	SSD1306_Clear(BLACK);
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff fe0f 	bl	8001528 <SSD1306_Clear>
	SSD1306_Display();
 800190a:	f7ff fe2b 	bl	8001564 <SSD1306_Display>
		//	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);

		//
		//Wyświetlanie danych na wyświetlaczu OLED
		//
		if((HAL_GetTick() - SoftTimerOled) > 100){
 800190e:	f000 fc15 	bl	800213c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	4b57      	ldr	r3, [pc, #348]	; (8001a74 <main+0x1a0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d9f7      	bls.n	800190e <main+0x3a>
			SoftTimerOled = HAL_GetTick();
 800191e:	f000 fc0d 	bl	800213c <HAL_GetTick>
 8001922:	4603      	mov	r3, r0
 8001924:	4a53      	ldr	r2, [pc, #332]	; (8001a74 <main+0x1a0>)
 8001926:	6013      	str	r3, [r2, #0]
			SSD1306_Clear(BLACK);
 8001928:	2000      	movs	r0, #0
 800192a:	f7ff fdfd 	bl	8001528 <SSD1306_Clear>
			sprintf(Message, "Regulacja Temperatury");
 800192e:	4952      	ldr	r1, [pc, #328]	; (8001a78 <main+0x1a4>)
 8001930:	4852      	ldr	r0, [pc, #328]	; (8001a7c <main+0x1a8>)
 8001932:	f004 f92f 	bl	8005b94 <siprintf>
			GFX_DrawString(0, 0, Message, WHITE, 0);
 8001936:	2300      	movs	r3, #0
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2301      	movs	r3, #1
 800193c:	4a4f      	ldr	r2, [pc, #316]	; (8001a7c <main+0x1a8>)
 800193e:	2100      	movs	r1, #0
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff fbab 	bl	800109c <GFX_DrawString>
			GFX_DrawLine(0, 9, 128, 9, WHITE);
 8001946:	2301      	movs	r3, #1
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2309      	movs	r3, #9
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	2109      	movs	r1, #9
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fcbc 	bl	80012ce <GFX_DrawLine>
			sprintf(Message, "Aktualna temp: %.2f C", temperature);
 8001956:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <main+0x1ac>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fe14 	bl	8000588 <__aeabi_f2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4947      	ldr	r1, [pc, #284]	; (8001a84 <main+0x1b0>)
 8001966:	4845      	ldr	r0, [pc, #276]	; (8001a7c <main+0x1a8>)
 8001968:	f004 f914 	bl	8005b94 <siprintf>
			GFX_DrawString(0, 12, Message, WHITE, 0);
 800196c:	2300      	movs	r3, #0
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	4a42      	ldr	r2, [pc, #264]	; (8001a7c <main+0x1a8>)
 8001974:	210c      	movs	r1, #12
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff fb90 	bl	800109c <GFX_DrawString>
			sprintf(Message, "Zadana temp: %.2f C", temperature_set);
 800197c:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <main+0x1b4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fe01 	bl	8000588 <__aeabi_f2d>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4940      	ldr	r1, [pc, #256]	; (8001a8c <main+0x1b8>)
 800198c:	483b      	ldr	r0, [pc, #236]	; (8001a7c <main+0x1a8>)
 800198e:	f004 f901 	bl	8005b94 <siprintf>
			GFX_DrawString(0, 22, Message, WHITE, 0);
 8001992:	2300      	movs	r3, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	4a38      	ldr	r2, [pc, #224]	; (8001a7c <main+0x1a8>)
 800199a:	2116      	movs	r1, #22
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fb7d 	bl	800109c <GFX_DrawString>
			sprintf(Message, "Cisnienie: %.1f HPa", ((float)pressure/100.0));
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <main+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ae:	ee17 0a90 	vmov	r0, s15
 80019b2:	f7fe fde9 	bl	8000588 <__aeabi_f2d>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <main+0x1c0>)
 80019bc:	f7fe ff66 	bl	800088c <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4934      	ldr	r1, [pc, #208]	; (8001a98 <main+0x1c4>)
 80019c6:	482d      	ldr	r0, [pc, #180]	; (8001a7c <main+0x1a8>)
 80019c8:	f004 f8e4 	bl	8005b94 <siprintf>
			GFX_DrawString(0, 32, Message, WHITE, 0);
 80019cc:	2300      	movs	r3, #0
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <main+0x1a8>)
 80019d4:	2120      	movs	r1, #32
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff fb60 	bl	800109c <GFX_DrawString>
			switch (status){
 80019dc:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <main+0x1c8>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d83e      	bhi.n	8001a64 <main+0x190>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <main+0x118>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001a17 	.word	0x08001a17
 80019f4:	08001a31 	.word	0x08001a31
 80019f8:	08001a4b 	.word	0x08001a4b
			case 1:
				sprintf(Message, "Status: Grzanie");
 80019fc:	4928      	ldr	r1, [pc, #160]	; (8001aa0 <main+0x1cc>)
 80019fe:	481f      	ldr	r0, [pc, #124]	; (8001a7c <main+0x1a8>)
 8001a00:	f004 f8c8 	bl	8005b94 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 8001a04:	2300      	movs	r3, #0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <main+0x1a8>)
 8001a0c:	212a      	movs	r1, #42	; 0x2a
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fb44 	bl	800109c <GFX_DrawString>
				break;
 8001a14:	e026      	b.n	8001a64 <main+0x190>
			case 2:
				sprintf(Message, "Status: Chlodzenie");
 8001a16:	4923      	ldr	r1, [pc, #140]	; (8001aa4 <main+0x1d0>)
 8001a18:	4818      	ldr	r0, [pc, #96]	; (8001a7c <main+0x1a8>)
 8001a1a:	f004 f8bb 	bl	8005b94 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2301      	movs	r3, #1
 8001a24:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <main+0x1a8>)
 8001a26:	212a      	movs	r1, #42	; 0x2a
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fb37 	bl	800109c <GFX_DrawString>
				break;
 8001a2e:	e019      	b.n	8001a64 <main+0x190>
			case 3:
				sprintf(Message, "Status: ERROR!!!");
 8001a30:	491d      	ldr	r1, [pc, #116]	; (8001aa8 <main+0x1d4>)
 8001a32:	4812      	ldr	r0, [pc, #72]	; (8001a7c <main+0x1a8>)
 8001a34:	f004 f8ae 	bl	8005b94 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <main+0x1a8>)
 8001a40:	212a      	movs	r1, #42	; 0x2a
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff fb2a 	bl	800109c <GFX_DrawString>
				break;
 8001a48:	e00c      	b.n	8001a64 <main+0x190>
			case 4:
				sprintf(Message, "Status: STOP");
 8001a4a:	4918      	ldr	r1, [pc, #96]	; (8001aac <main+0x1d8>)
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <main+0x1a8>)
 8001a4e:	f004 f8a1 	bl	8005b94 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 8001a52:	2300      	movs	r3, #0
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <main+0x1a8>)
 8001a5a:	212a      	movs	r1, #42	; 0x2a
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fb1d 	bl	800109c <GFX_DrawString>
				break;
 8001a62:	bf00      	nop
			}
			SSD1306_Display();
 8001a64:	f7ff fd7e 	bl	8001564 <SSD1306_Display>
		if((HAL_GetTick() - SoftTimerOled) > 100){
 8001a68:	e751      	b.n	800190e <main+0x3a>
 8001a6a:	bf00      	nop
 8001a6c:	2000061c 	.word	0x2000061c
 8001a70:	080080a8 	.word	0x080080a8
 8001a74:	20000688 	.word	0x20000688
 8001a78:	08008008 	.word	0x08008008
 8001a7c:	20000668 	.word	0x20000668
 8001a80:	20000600 	.word	0x20000600
 8001a84:	08008020 	.word	0x08008020
 8001a88:	20000604 	.word	0x20000604
 8001a8c:	08008038 	.word	0x08008038
 8001a90:	200005fc 	.word	0x200005fc
 8001a94:	40590000 	.word	0x40590000
 8001a98:	0800804c 	.word	0x0800804c
 8001a9c:	20000001 	.word	0x20000001
 8001aa0:	08008060 	.word	0x08008060
 8001aa4:	08008070 	.word	0x08008070
 8001aa8:	08008084 	.word	0x08008084
 8001aac:	08008098 	.word	0x08008098

08001ab0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b094      	sub	sp, #80	; 0x50
 8001ab4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab6:	f107 0320 	add.w	r3, r7, #32
 8001aba:	2230      	movs	r2, #48	; 0x30
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fbf6 	bl	80052b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001ad4:	f001 fbe4 	bl	80032a0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <SystemClock_Config+0xc8>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <SystemClock_Config+0xc8>)
 8001ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <SystemClock_Config+0xc8>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <SystemClock_Config+0xcc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001af8:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <SystemClock_Config+0xcc>)
 8001afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <SystemClock_Config+0xcc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b16:	2302      	movs	r3, #2
 8001b18:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001b20:	2304      	movs	r3, #4
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001b24:	2348      	movs	r3, #72	; 0x48
 8001b26:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b30:	f107 0320 	add.w	r3, r7, #32
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 fbc3 	bl	80032c0 <HAL_RCC_OscConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001b40:	f000 f81e 	bl	8001b80 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b44:	230f      	movs	r3, #15
 8001b46:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fe51 	bl	8003808 <HAL_RCC_ClockConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001b6c:	f000 f808 	bl	8001b80 <Error_Handler>
	}
}
 8001b70:	bf00      	nop
 8001b72:	3750      	adds	r7, #80	; 0x50
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000

08001b80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>
	...

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_MspInit+0x44>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler+0x4>

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler+0x4>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c20:	f000 fa78 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
	return 1;
 8001c2c:	2301      	movs	r3, #1
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_kill>:

int _kill(int pid, int sig)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c42:	f003 fb0b 	bl	800525c <__errno>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2216      	movs	r2, #22
 8001c4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_exit>:

void _exit (int status)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ffe7 	bl	8001c38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c6a:	e7fe      	b.n	8001c6a <_exit+0x12>

08001c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e00a      	b.n	8001c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c7e:	f3af 8000 	nop.w
 8001c82:	4601      	mov	r1, r0
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf0      	blt.n	8001c7e <_read+0x12>
	}

return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e009      	b.n	8001ccc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	60ba      	str	r2, [r7, #8]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf1      	blt.n	8001cb8 <_write+0x12>
	}
	return len;
 8001cd4:	687b      	ldr	r3, [r7, #4]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_close>:

int _close(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d06:	605a      	str	r2, [r3, #4]
	return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_isatty>:

int _isatty(int file)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f003 fa70 	bl	800525c <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20050000 	.word	0x20050000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	20000608 	.word	0x20000608
 8001db0:	20000b28 	.word	0x20000b28

08001db4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <SystemInit+0x20>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <SystemInit+0x20>)
 8001dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <MX_USART3_UART_Init+0x5c>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_USART3_UART_Init+0x58>)
 8001e1c:	f002 fae6 	bl	80043ec <HAL_UART_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e26:	f7ff feab 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000068c 	.word	0x2000068c
 8001e34:	40004800 	.word	0x40004800

08001e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b0aa      	sub	sp, #168	; 0xa8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	2284      	movs	r2, #132	; 0x84
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fa29 	bl	80052b0 <memset>
  if(uartHandle->Instance==USART3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_UART_MspInit+0xb4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d13c      	bne.n	8001ee2 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 fec8 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e82:	f7ff fe7d 	bl	8001b80 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_UART_MspInit+0xb8>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_UART_MspInit+0xb8>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_UART_MspInit+0xb8>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_UART_MspInit+0xb8>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_UART_MspInit+0xb8>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_UART_MspInit+0xb8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001eb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001eda:	4619      	mov	r1, r3
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <HAL_UART_MspInit+0xbc>)
 8001ede:	f000 fa43 	bl	8002368 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	37a8      	adds	r7, #168	; 0xa8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40004800 	.word	0x40004800
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020c00 	.word	0x40020c00

08001ef8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001efe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f06:	2206      	movs	r2, #6
 8001f08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f18:	2202      	movs	r2, #2
 8001f1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f3c:	f001 f867 	bl	800300e <HAL_PCD_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001f46:	f7ff fe1b 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000710 	.word	0x20000710

08001f54 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0ac      	sub	sp, #176	; 0xb0
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	2284      	movs	r2, #132	; 0x84
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 f99b 	bl	80052b0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f82:	d159      	bne.n	8002038 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f90:	f107 0318 	add.w	r3, r7, #24
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fe39 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fa0:	f7ff fdee 	bl	8001b80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa4:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_PCD_MspInit+0xec>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a25      	ldr	r2, [pc, #148]	; (8002040 <HAL_PCD_MspInit+0xec>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_PCD_MspInit+0xec>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fbc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4818      	ldr	r0, [pc, #96]	; (8002044 <HAL_PCD_MspInit+0xf0>)
 8001fe4:	f000 f9c0 	bl	8002368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002000:	4619      	mov	r1, r3
 8002002:	4810      	ldr	r0, [pc, #64]	; (8002044 <HAL_PCD_MspInit+0xf0>)
 8002004:	f000 f9b0 	bl	8002368 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_PCD_MspInit+0xec>)
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <HAL_PCD_MspInit+0xec>)
 800200e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002012:	6353      	str	r3, [r2, #52]	; 0x34
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_PCD_MspInit+0xec>)
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_PCD_MspInit+0xec>)
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	4a06      	ldr	r2, [pc, #24]	; (8002040 <HAL_PCD_MspInit+0xec>)
 8002026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202a:	6453      	str	r3, [r2, #68]	; 0x44
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_PCD_MspInit+0xec>)
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002038:	bf00      	nop
 800203a:	37b0      	adds	r7, #176	; 0xb0
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	40020000 	.word	0x40020000

08002048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800204e:	490e      	ldr	r1, [pc, #56]	; (8002088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002064:	4c0b      	ldr	r4, [pc, #44]	; (8002094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002072:	f7ff fe9f 	bl	8001db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002076:	f003 f8f7 	bl	8005268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207a:	f7ff fc2b 	bl	80018d4 <main>
  bx  lr    
 800207e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002080:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800208c:	08008694 	.word	0x08008694
  ldr r2, =_sbss
 8002090:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002094:	20000b28 	.word	0x20000b28

08002098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC_IRQHandler>

0800209a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209e:	2003      	movs	r0, #3
 80020a0:	f000 f92e 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f000 f805 	bl	80020b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020aa:	f7ff fd6f 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_InitTick+0x54>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x58>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f93b 	bl	800234e <HAL_SYSTICK_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00e      	b.n	8002100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d80a      	bhi.n	80020fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f000 f911 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_InitTick+0x5c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000004 	.word	0x20000004
 800210c:	2000000c 	.word	0x2000000c
 8002110:	20000008 	.word	0x20000008

08002114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_IncTick+0x20>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_IncTick+0x24>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	2000000c 	.word	0x2000000c
 8002138:	20000b14 	.word	0x20000b14

0800213c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_GetTick+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000b14 	.word	0x20000b14

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff ffee 	bl	800213c <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffde 	bl	800213c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000000c 	.word	0x2000000c

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <__NVIC_SetPriorityGrouping+0x40>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ca:	4a04      	ldr	r2, [pc, #16]	; (80021dc <__NVIC_SetPriorityGrouping+0x40>)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	60d3      	str	r3, [r2, #12]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	05fa0000 	.word	0x05fa0000

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	; (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff8e 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff47 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff5c 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff8e 	bl	8002254 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5d 	bl	8002200 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffb0 	bl	80022bc <SysTick_Config>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e175      	b.n	8002674 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 8164 	bne.w	800266e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d005      	beq.n	80023be <HAL_GPIO_Init+0x56>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d130      	bne.n	8002420 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 0201 	and.w	r2, r3, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b03      	cmp	r3, #3
 800242a:	d017      	beq.n	800245c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d123      	bne.n	80024b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	08da      	lsrs	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3208      	adds	r2, #8
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	08da      	lsrs	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3208      	adds	r2, #8
 80024aa:	69b9      	ldr	r1, [r7, #24]
 80024ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	2203      	movs	r2, #3
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0203 	and.w	r2, r3, #3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80be 	beq.w	800266e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	4b66      	ldr	r3, [pc, #408]	; (800268c <HAL_GPIO_Init+0x324>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	4a65      	ldr	r2, [pc, #404]	; (800268c <HAL_GPIO_Init+0x324>)
 80024f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fc:	6453      	str	r3, [r2, #68]	; 0x44
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_GPIO_Init+0x324>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800250a:	4a61      	ldr	r2, [pc, #388]	; (8002690 <HAL_GPIO_Init+0x328>)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	220f      	movs	r2, #15
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a58      	ldr	r2, [pc, #352]	; (8002694 <HAL_GPIO_Init+0x32c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d037      	beq.n	80025a6 <HAL_GPIO_Init+0x23e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a57      	ldr	r2, [pc, #348]	; (8002698 <HAL_GPIO_Init+0x330>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d031      	beq.n	80025a2 <HAL_GPIO_Init+0x23a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a56      	ldr	r2, [pc, #344]	; (800269c <HAL_GPIO_Init+0x334>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d02b      	beq.n	800259e <HAL_GPIO_Init+0x236>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a55      	ldr	r2, [pc, #340]	; (80026a0 <HAL_GPIO_Init+0x338>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d025      	beq.n	800259a <HAL_GPIO_Init+0x232>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a54      	ldr	r2, [pc, #336]	; (80026a4 <HAL_GPIO_Init+0x33c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01f      	beq.n	8002596 <HAL_GPIO_Init+0x22e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a53      	ldr	r2, [pc, #332]	; (80026a8 <HAL_GPIO_Init+0x340>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x22a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_GPIO_Init+0x344>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x226>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <HAL_GPIO_Init+0x348>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x222>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a50      	ldr	r2, [pc, #320]	; (80026b4 <HAL_GPIO_Init+0x34c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x21e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4f      	ldr	r2, [pc, #316]	; (80026b8 <HAL_GPIO_Init+0x350>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x21a>
 800257e:	2309      	movs	r3, #9
 8002580:	e012      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 8002582:	230a      	movs	r3, #10
 8002584:	e010      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 8002586:	2308      	movs	r3, #8
 8002588:	e00e      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 800258a:	2307      	movs	r3, #7
 800258c:	e00c      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 800258e:	2306      	movs	r3, #6
 8002590:	e00a      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x240>
 80025a6:	2300      	movs	r3, #0
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025b8:	4935      	ldr	r1, [pc, #212]	; (8002690 <HAL_GPIO_Init+0x328>)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_GPIO_Init+0x354>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ea:	4a34      	ldr	r2, [pc, #208]	; (80026bc <HAL_GPIO_Init+0x354>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f0:	4b32      	ldr	r3, [pc, #200]	; (80026bc <HAL_GPIO_Init+0x354>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <HAL_GPIO_Init+0x354>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_GPIO_Init+0x354>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800263e:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <HAL_GPIO_Init+0x354>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_GPIO_Init+0x354>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <HAL_GPIO_Init+0x354>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b0f      	cmp	r3, #15
 8002678:	f67f ae86 	bls.w	8002388 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	40013800 	.word	0x40013800
 8002694:	40020000 	.word	0x40020000
 8002698:	40020400 	.word	0x40020400
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40021400 	.word	0x40021400
 80026ac:	40021800 	.word	0x40021800
 80026b0:	40021c00 	.word	0x40021c00
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40022400 	.word	0x40022400
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026dc:	e003      	b.n	80026e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e07f      	b.n	8002806 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff f87a 	bl	8001814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002744:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002754:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d107      	bne.n	800276e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	e006      	b.n	800277c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800277a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d104      	bne.n	800278e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800278c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6859      	ldr	r1, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <HAL_I2C_Init+0x11c>)
 800279a:	430b      	orrs	r3, r1
 800279c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69d9      	ldr	r1, [r3, #28]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	02008000 	.word	0x02008000

08002814 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	817b      	strh	r3, [r7, #10]
 8002826:	460b      	mov	r3, r1
 8002828:	813b      	strh	r3, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	f040 80f9 	bne.w	8002a2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_I2C_Mem_Write+0x34>
 8002842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0ed      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Mem_Write+0x4e>
 800285e:	2302      	movs	r3, #2
 8002860:	e0e6      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800286a:	f7ff fc67 	bl	800213c <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2319      	movs	r3, #25
 8002876:	2201      	movs	r2, #1
 8002878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f955 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0d1      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2221      	movs	r2, #33	; 0x21
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a3a      	ldr	r2, [r7, #32]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028b4:	88f8      	ldrh	r0, [r7, #6]
 80028b6:	893a      	ldrh	r2, [r7, #8]
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4603      	mov	r3, r0
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f8b9 	bl	8002a3c <I2C_RequestMemoryWrite>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0a9      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2bff      	cmp	r3, #255	; 0xff
 80028e4:	d90e      	bls.n	8002904 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	22ff      	movs	r2, #255	; 0xff
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	8979      	ldrh	r1, [r7, #10]
 80028f4:	2300      	movs	r3, #0
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fabd 	bl	8002e7c <I2C_TransferConfig>
 8002902:	e00f      	b.n	8002924 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	b2da      	uxtb	r2, r3
 8002914:	8979      	ldrh	r1, [r7, #10]
 8002916:	2300      	movs	r3, #0
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 faac 	bl	8002e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f93f 	bl	8002bac <I2C_WaitOnTXISFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e07b      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d034      	beq.n	80029dc <HAL_I2C_Mem_Write+0x1c8>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d130      	bne.n	80029dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	2200      	movs	r2, #0
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f8d1 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e04d      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2bff      	cmp	r3, #255	; 0xff
 800299c:	d90e      	bls.n	80029bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	8979      	ldrh	r1, [r7, #10]
 80029ac:	2300      	movs	r3, #0
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fa61 	bl	8002e7c <I2C_TransferConfig>
 80029ba:	e00f      	b.n	80029dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fa50 	bl	8002e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d19e      	bne.n	8002924 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f91e 	bl	8002c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e01a      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2220      	movs	r2, #32
 8002a00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_I2C_Mem_Write+0x224>)
 8002a0e:	400b      	ands	r3, r1
 8002a10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	4608      	mov	r0, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	817b      	strh	r3, [r7, #10]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	813b      	strh	r3, [r7, #8]
 8002a52:	4613      	mov	r3, r2
 8002a54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	8979      	ldrh	r1, [r7, #10]
 8002a5c:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <I2C_RequestMemoryWrite+0xa4>)
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fa09 	bl	8002e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	69b9      	ldr	r1, [r7, #24]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f89c 	bl	8002bac <I2C_WaitOnTXISFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02c      	b.n	8002ad8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a84:	893b      	ldrh	r3, [r7, #8]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a8e:	e015      	b.n	8002abc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a90:	893b      	ldrh	r3, [r7, #8]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	69b9      	ldr	r1, [r7, #24]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f882 	bl	8002bac <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e012      	b.n	8002ad8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab2:	893b      	ldrh	r3, [r7, #8]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f830 	bl	8002b2c <I2C_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	80002000 	.word	0x80002000

08002ae4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d103      	bne.n	8002b02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d007      	beq.n	8002b20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	619a      	str	r2, [r3, #24]
  }
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3c:	e022      	b.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d01e      	beq.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b46:	f7ff faf9 	bl	800213c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d113      	bne.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	f043 0220 	orr.w	r2, r3, #32
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e00f      	b.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d0cd      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bb8:	e02c      	b.n	8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f870 	bl	8002ca4 <I2C_IsErrorOccurred>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e02a      	b.n	8002c24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d01e      	beq.n	8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	f7ff fab1 	bl	800213c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d113      	bne.n	8002c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e007      	b.n	8002c24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d1cb      	bne.n	8002bba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c38:	e028      	b.n	8002c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f830 	bl	8002ca4 <I2C_IsErrorOccurred>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e026      	b.n	8002c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7ff fa75 	bl	800213c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d113      	bne.n	8002c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e007      	b.n	8002c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d1cf      	bne.n	8002c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d075      	beq.n	8002dbc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cd8:	e056      	b.n	8002d88 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d052      	beq.n	8002d88 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ce2:	f7ff fa2b 	bl	800213c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d302      	bcc.n	8002cf8 <I2C_IsErrorOccurred+0x54>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d147      	bne.n	8002d88 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d1a:	d12e      	bne.n	8002d7a <I2C_IsErrorOccurred+0xd6>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d22:	d02a      	beq.n	8002d7a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d027      	beq.n	8002d7a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d38:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d3a:	f7ff f9ff 	bl	800213c <HAL_GetTick>
 8002d3e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d40:	e01b      	b.n	8002d7a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d42:	f7ff f9fb 	bl	800213c <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b19      	cmp	r3, #25
 8002d4e:	d914      	bls.n	8002d7a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d1dc      	bne.n	8002d42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d003      	beq.n	8002d9e <I2C_IsErrorOccurred+0xfa>
 8002d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d09d      	beq.n	8002cda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2220      	movs	r2, #32
 8002dac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00b      	beq.n	8002e08 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01c      	beq.n	8002e6c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f7ff fe56 	bl	8002ae4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <I2C_IsErrorOccurred+0x1d4>)
 8002e44:	400b      	ands	r3, r1
 8002e46:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	fe00e800 	.word	0xfe00e800

08002e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e8e:	897b      	ldrh	r3, [r7, #10]
 8002e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e94:	7a7b      	ldrb	r3, [r7, #9]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e9c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eaa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	0d5b      	lsrs	r3, r3, #21
 8002eb6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <I2C_TransferConfig+0x60>)
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	ea02 0103 	and.w	r1, r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	03ff63ff 	.word	0x03ff63ff

08002ee0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d138      	bne.n	8002f68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e032      	b.n	8002f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d139      	bne.n	8003000 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e033      	b.n	8003002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2224      	movs	r2, #36	; 0x24
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800300e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003010:	b08f      	sub	sp, #60	; 0x3c
 8003012:	af0a      	add	r7, sp, #40	; 0x28
 8003014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e116      	b.n	800324e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe ff8a 	bl	8001f54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2203      	movs	r2, #3
 8003044:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f001 fe66 	bl	8004d30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	687e      	ldr	r6, [r7, #4]
 800306c:	466d      	mov	r5, sp
 800306e:	f106 0410 	add.w	r4, r6, #16
 8003072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800307a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800307e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003082:	1d33      	adds	r3, r6, #4
 8003084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003086:	6838      	ldr	r0, [r7, #0]
 8003088:	f001 fdfa 	bl	8004c80 <USB_CoreInit>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0d7      	b.n	800324e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fe54 	bl	8004d52 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	e04a      	b.n	8003146 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	333d      	adds	r3, #61	; 0x3d
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	333c      	adds	r3, #60	; 0x3c
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	b298      	uxth	r0, r3
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	3342      	adds	r3, #66	; 0x42
 80030ec:	4602      	mov	r2, r0
 80030ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	333f      	adds	r3, #63	; 0x3f
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3344      	adds	r3, #68	; 0x44
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3348      	adds	r3, #72	; 0x48
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3350      	adds	r3, #80	; 0x50
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	3301      	adds	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d3af      	bcc.n	80030b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	e044      	b.n	80031e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	3301      	adds	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d3b5      	bcc.n	8003156 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	687e      	ldr	r6, [r7, #4]
 80031f2:	466d      	mov	r5, sp
 80031f4:	f106 0410 	add.w	r4, r6, #16
 80031f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003200:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003204:	e885 0003 	stmia.w	r5, {r0, r1}
 8003208:	1d33      	adds	r3, r6, #4
 800320a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320c:	6838      	ldr	r0, [r7, #0]
 800320e:	f001 fded 	bl	8004dec <USB_DevInit>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e014      	b.n	800324e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b01      	cmp	r3, #1
 800323a:	d102      	bne.n	8003242 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f80b 	bl	8003258 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f001 ffa7 	bl	800519a <USB_DevDisconnect>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003258 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_PCDEx_ActivateLPM+0x44>)
 8003288:	4313      	orrs	r3, r2
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	10000003 	.word	0x10000003

080032a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40007000 	.word	0x40007000

080032c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032c8:	2300      	movs	r3, #0
 80032ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e291      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8087 	beq.w	80033f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e4:	4b96      	ldr	r3, [pc, #600]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d00c      	beq.n	800330a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f0:	4b93      	ldr	r3, [pc, #588]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d112      	bne.n	8003322 <HAL_RCC_OscConfig+0x62>
 80032fc:	4b90      	ldr	r3, [pc, #576]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003308:	d10b      	bne.n	8003322 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330a:	4b8d      	ldr	r3, [pc, #564]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d06c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x130>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d168      	bne.n	80033f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e26b      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x7a>
 800332c:	4b84      	ldr	r3, [pc, #528]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a83      	ldr	r2, [pc, #524]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e02e      	b.n	8003398 <HAL_RCC_OscConfig+0xd8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x9c>
 8003342:	4b7f      	ldr	r3, [pc, #508]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7e      	ldr	r2, [pc, #504]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b7c      	ldr	r3, [pc, #496]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7b      	ldr	r2, [pc, #492]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e01d      	b.n	8003398 <HAL_RCC_OscConfig+0xd8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0xc0>
 8003366:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a75      	ldr	r2, [pc, #468]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b73      	ldr	r3, [pc, #460]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a72      	ldr	r2, [pc, #456]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0xd8>
 8003380:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6e      	ldr	r2, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b6c      	ldr	r3, [pc, #432]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6b      	ldr	r2, [pc, #428]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe fecc 	bl	800213c <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe fec8 	bl	800213c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e21f      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b61      	ldr	r3, [pc, #388]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0xe8>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe feb8 	bl	800213c <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe feb4 	bl	800213c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e20b      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	4b57      	ldr	r3, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x110>
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d069      	beq.n	80034d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fe:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340a:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b08      	cmp	r3, #8
 8003414:	d11c      	bne.n	8003450 <HAL_RCC_OscConfig+0x190>
 8003416:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x17a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e1df      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	493d      	ldr	r1, [pc, #244]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	e040      	b.n	80034d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d023      	beq.n	80034a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003458:	4b39      	ldr	r3, [pc, #228]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a38      	ldr	r2, [pc, #224]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe fe6a 	bl	800213c <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346c:	f7fe fe66 	bl	800213c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e1bd      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	4b30      	ldr	r3, [pc, #192]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4929      	ldr	r1, [pc, #164]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
 800349e:	e018      	b.n	80034d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe fe46 	bl	800213c <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe fe42 	bl	800213c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e199      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d038      	beq.n	8003550 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d019      	beq.n	800351a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ea:	4a15      	ldr	r2, [pc, #84]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fe fe23 	bl	800213c <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fa:	f7fe fe1f 	bl	800213c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e176      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x23a>
 8003518:	e01a      	b.n	8003550 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_RCC_OscConfig+0x280>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003526:	f7fe fe09 	bl	800213c <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352e:	f7fe fe05 	bl	800213c <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d903      	bls.n	8003544 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e15c      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
 8003540:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	4b91      	ldr	r3, [pc, #580]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ee      	bne.n	800352e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a4 	beq.w	80036a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b8b      	ldr	r3, [pc, #556]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	4b88      	ldr	r3, [pc, #544]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a87      	ldr	r2, [pc, #540]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b85      	ldr	r3, [pc, #532]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003586:	4b82      	ldr	r3, [pc, #520]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d118      	bne.n	80035c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003592:	4b7f      	ldr	r3, [pc, #508]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7e      	ldr	r2, [pc, #504]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359e:	f7fe fdcd 	bl	800213c <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a6:	f7fe fdc9 	bl	800213c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b64      	cmp	r3, #100	; 0x64
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e120      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b8:	4b75      	ldr	r3, [pc, #468]	; (8003790 <HAL_RCC_OscConfig+0x4d0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x31a>
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
 80035d8:	e02d      	b.n	8003636 <HAL_RCC_OscConfig+0x376>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0x33c>
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a69      	ldr	r2, [pc, #420]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
 80035ee:	4b67      	ldr	r3, [pc, #412]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a66      	ldr	r2, [pc, #408]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70
 80035fa:	e01c      	b.n	8003636 <HAL_RCC_OscConfig+0x376>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d10c      	bne.n	800361e <HAL_RCC_OscConfig+0x35e>
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	4a60      	ldr	r2, [pc, #384]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	4b5e      	ldr	r3, [pc, #376]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a5d      	ldr	r2, [pc, #372]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
 800361c:	e00b      	b.n	8003636 <HAL_RCC_OscConfig+0x376>
 800361e:	4b5b      	ldr	r3, [pc, #364]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a5a      	ldr	r2, [pc, #360]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
 800362a:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a57      	ldr	r2, [pc, #348]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d015      	beq.n	800366a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fe fd7d 	bl	800213c <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fe fd79 	bl	800213c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0ce      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	4b4b      	ldr	r3, [pc, #300]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ee      	beq.n	8003646 <HAL_RCC_OscConfig+0x386>
 8003668:	e014      	b.n	8003694 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fe fd67 	bl	800213c <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe fd63 	bl	800213c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e0b8      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ee      	bne.n	8003672 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b3c      	ldr	r3, [pc, #240]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a3b      	ldr	r2, [pc, #236]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80a4 	beq.w	80037f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d06b      	beq.n	8003794 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d149      	bne.n	8003758 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b31      	ldr	r3, [pc, #196]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a30      	ldr	r2, [pc, #192]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80036ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fd34 	bl	800213c <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fe fd30 	bl	800213c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e087      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	4b28      	ldr	r3, [pc, #160]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	3b01      	subs	r3, #1
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	4313      	orrs	r3, r2
 800371c:	4a1b      	ldr	r2, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800371e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003722:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a18      	ldr	r2, [pc, #96]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe fd04 	bl	800213c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe fd00 	bl	800213c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e057      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x478>
 8003756:	e04f      	b.n	80037f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0b      	ldr	r2, [pc, #44]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 800375e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe fcea 	bl	800213c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fce6 	bl	800213c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e03d      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_RCC_OscConfig+0x4cc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x4ac>
 800378a:	e035      	b.n	80037f8 <HAL_RCC_OscConfig+0x538>
 800378c:	40023800 	.word	0x40023800
 8003790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x544>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d028      	beq.n	80037f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d121      	bne.n	80037f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d11a      	bne.n	80037f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d111      	bne.n	80037f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0d0      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b6a      	ldr	r3, [pc, #424]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d910      	bls.n	8003850 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b67      	ldr	r3, [pc, #412]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 020f 	bic.w	r2, r3, #15
 8003836:	4965      	ldr	r1, [pc, #404]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b63      	ldr	r3, [pc, #396]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0b8      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800386e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800388a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	494d      	ldr	r1, [pc, #308]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d040      	beq.n	800392c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d115      	bne.n	80038ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e073      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06b      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ea:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4936      	ldr	r1, [pc, #216]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fc:	f7fe fc1e 	bl	800213c <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	e00a      	b.n	800391a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003904:	f7fe fc1a 	bl	800213c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e053      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 020c 	and.w	r2, r3, #12
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	429a      	cmp	r2, r3
 800392a:	d1eb      	bne.n	8003904 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b27      	ldr	r3, [pc, #156]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d210      	bcs.n	800395c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 020f 	bic.w	r2, r3, #15
 8003942:	4922      	ldr	r1, [pc, #136]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e032      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4916      	ldr	r1, [pc, #88]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490e      	ldr	r1, [pc, #56]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800399a:	f000 f821 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	490a      	ldr	r1, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1cc>)
 80039ac:	5ccb      	ldrb	r3, [r1, r3]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1d0>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1d4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fb7a 	bl	80020b4 <HAL_InitTick>

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	08008288 	.word	0x08008288
 80039d8:	20000004 	.word	0x20000004
 80039dc:	20000008 	.word	0x20000008

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	2300      	movs	r3, #0
 80039f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f8:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d00d      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x40>
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	f200 80bd 	bhi.w	8003b84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a12:	e0b7      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a14:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a16:	60bb      	str	r3, [r7, #8]
      break;
 8003a18:	e0b7      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1a:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a1c:	60bb      	str	r3, [r7, #8]
      break;
 8003a1e:	e0b4      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a20:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a28:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a2a:	4b5b      	ldr	r3, [pc, #364]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d04d      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a36:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	ea02 0800 	and.w	r8, r2, r0
 8003a4e:	ea03 0901 	and.w	r9, r3, r1
 8003a52:	4640      	mov	r0, r8
 8003a54:	4649      	mov	r1, r9
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	014b      	lsls	r3, r1, #5
 8003a60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a64:	0142      	lsls	r2, r0, #5
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	ebb0 0008 	subs.w	r0, r0, r8
 8003a6e:	eb61 0109 	sbc.w	r1, r1, r9
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	018b      	lsls	r3, r1, #6
 8003a7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a80:	0182      	lsls	r2, r0, #6
 8003a82:	1a12      	subs	r2, r2, r0
 8003a84:	eb63 0301 	sbc.w	r3, r3, r1
 8003a88:	f04f 0000 	mov.w	r0, #0
 8003a8c:	f04f 0100 	mov.w	r1, #0
 8003a90:	00d9      	lsls	r1, r3, #3
 8003a92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a96:	00d0      	lsls	r0, r2, #3
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	eb12 0208 	adds.w	r2, r2, r8
 8003aa0:	eb43 0309 	adc.w	r3, r3, r9
 8003aa4:	f04f 0000 	mov.w	r0, #0
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	0259      	lsls	r1, r3, #9
 8003aae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ab2:	0250      	lsls	r0, r2, #9
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	f7fd f890 	bl	8000be8 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e04a      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad2:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	ea02 0400 	and.w	r4, r2, r0
 8003aea:	ea03 0501 	and.w	r5, r3, r1
 8003aee:	4620      	mov	r0, r4
 8003af0:	4629      	mov	r1, r5
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	014b      	lsls	r3, r1, #5
 8003afc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b00:	0142      	lsls	r2, r0, #5
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	1b00      	subs	r0, r0, r4
 8003b08:	eb61 0105 	sbc.w	r1, r1, r5
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	018b      	lsls	r3, r1, #6
 8003b16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b1a:	0182      	lsls	r2, r0, #6
 8003b1c:	1a12      	subs	r2, r2, r0
 8003b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f04f 0100 	mov.w	r1, #0
 8003b2a:	00d9      	lsls	r1, r3, #3
 8003b2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b30:	00d0      	lsls	r0, r2, #3
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	1912      	adds	r2, r2, r4
 8003b38:	eb45 0303 	adc.w	r3, r5, r3
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	0299      	lsls	r1, r3, #10
 8003b46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b4a:	0290      	lsls	r0, r2, #10
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	f7fd f844 	bl	8000be8 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	3301      	adds	r3, #1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	60bb      	str	r3, [r7, #8]
      break;
 8003b82:	e002      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b86:	60bb      	str	r3, [r7, #8]
      break;
 8003b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	00f42400 	.word	0x00f42400
 8003ba0:	007a1200 	.word	0x007a1200

08003ba4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000004 	.word	0x20000004

08003bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc0:	f7ff fff0 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	0a9b      	lsrs	r3, r3, #10
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4903      	ldr	r1, [pc, #12]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	08008298 	.word	0x08008298

08003be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be8:	f7ff ffdc 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	0b5b      	lsrs	r3, r3, #13
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4903      	ldr	r1, [pc, #12]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40023800 	.word	0x40023800
 8003c08:	08008298 	.word	0x08008298

08003c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d012      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c34:	4b69      	ldr	r3, [pc, #420]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a68      	ldr	r2, [pc, #416]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c3e:	6093      	str	r3, [r2, #8]
 8003c40:	4b66      	ldr	r3, [pc, #408]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	4964      	ldr	r1, [pc, #400]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c66:	4b5d      	ldr	r3, [pc, #372]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	4959      	ldr	r1, [pc, #356]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c84:	d101      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d017      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ca2:	4b4e      	ldr	r3, [pc, #312]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	494a      	ldr	r1, [pc, #296]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 808b 	beq.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	4a39      	ldr	r2, [pc, #228]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfc:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d08:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a34      	ldr	r2, [pc, #208]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fe fa12 	bl	800213c <HAL_GetTick>
 8003d18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1c:	f7fe fa0e 	bl	800213c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e357      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d3a:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d035      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d02e      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d58:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d7a:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d80:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d114      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe f9d6 	bl	800213c <HAL_GetTick>
 8003d90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d92:	e00a      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d94:	f7fe f9d2 	bl	800213c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e319      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0ee      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	4901      	ldr	r1, [pc, #4]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
 8003dda:	e00b      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	0ffffcff 	.word	0x0ffffcff
 8003de8:	4bb1      	ldr	r3, [pc, #708]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4ab0      	ldr	r2, [pc, #704]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003df2:	6093      	str	r3, [r2, #8]
 8003df4:	4bae      	ldr	r3, [pc, #696]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003df6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e00:	49ab      	ldr	r1, [pc, #684]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d010      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e12:	4ba7      	ldr	r3, [pc, #668]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e18:	4aa5      	ldr	r2, [pc, #660]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e22:	4ba3      	ldr	r3, [pc, #652]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	49a0      	ldr	r1, [pc, #640]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e40:	4b9b      	ldr	r3, [pc, #620]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e4e:	4998      	ldr	r1, [pc, #608]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e62:	4b93      	ldr	r3, [pc, #588]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e70:	498f      	ldr	r1, [pc, #572]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e84:	4b8a      	ldr	r3, [pc, #552]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e92:	4987      	ldr	r1, [pc, #540]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea6:	4b82      	ldr	r3, [pc, #520]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	497e      	ldr	r1, [pc, #504]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec8:	4b79      	ldr	r3, [pc, #484]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	4976      	ldr	r1, [pc, #472]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eea:	4b71      	ldr	r3, [pc, #452]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f023 020c 	bic.w	r2, r3, #12
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef8:	496d      	ldr	r1, [pc, #436]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f0c:	4b68      	ldr	r3, [pc, #416]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	4965      	ldr	r1, [pc, #404]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f2e:	4b60      	ldr	r3, [pc, #384]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3c:	495c      	ldr	r1, [pc, #368]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f50:	4b57      	ldr	r3, [pc, #348]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	4954      	ldr	r1, [pc, #336]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f72:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	494b      	ldr	r1, [pc, #300]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f94:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	4943      	ldr	r1, [pc, #268]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003fb6:	4b3e      	ldr	r3, [pc, #248]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc4:	493a      	ldr	r1, [pc, #232]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fd8:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe6:	4932      	ldr	r1, [pc, #200]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d011      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004008:	4929      	ldr	r1, [pc, #164]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800402a:	2301      	movs	r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800403a:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004048:	4919      	ldr	r1, [pc, #100]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004062:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406c:	4910      	ldr	r1, [pc, #64]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d006      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80d9 	beq.w	800423a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800408e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004094:	f7fe f852 	bl	800213c <HAL_GetTick>
 8004098:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800409a:	e00b      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800409c:	f7fe f84e 	bl	800213c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d904      	bls.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e197      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040b4:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ed      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d021      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d11d      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040d4:	4b64      	ldr	r3, [pc, #400]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040e2:	4b61      	ldr	r3, [pc, #388]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e8:	0e1b      	lsrs	r3, r3, #24
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	019a      	lsls	r2, r3, #6
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	061b      	lsls	r3, r3, #24
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	071b      	lsls	r3, r3, #28
 8004108:	4957      	ldr	r1, [pc, #348]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d004      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800412e:	2b00      	cmp	r3, #0
 8004130:	d02e      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800413a:	d129      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800413c:	4b4a      	ldr	r3, [pc, #296]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004142:	0c1b      	lsrs	r3, r3, #16
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004150:	0f1b      	lsrs	r3, r3, #28
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	019a      	lsls	r2, r3, #6
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	071b      	lsls	r3, r3, #28
 8004170:	493d      	ldr	r1, [pc, #244]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004178:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800417a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800417e:	f023 021f 	bic.w	r2, r3, #31
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	3b01      	subs	r3, #1
 8004188:	4937      	ldr	r1, [pc, #220]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01d      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800419c:	4b32      	ldr	r3, [pc, #200]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a2:	0e1b      	lsrs	r3, r3, #24
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041aa:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b0:	0f1b      	lsrs	r3, r3, #28
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	019a      	lsls	r2, r3, #6
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	431a      	orrs	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	431a      	orrs	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	071b      	lsls	r3, r3, #28
 80041d0:	4925      	ldr	r1, [pc, #148]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d011      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	019a      	lsls	r2, r3, #6
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	071b      	lsls	r3, r3, #28
 8004200:	4919      	ldr	r1, [pc, #100]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004208:	4b17      	ldr	r3, [pc, #92]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800420e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7fd ff92 	bl	800213c <HAL_GetTick>
 8004218:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800421c:	f7fd ff8e 	bl	800213c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e0d7      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800422e:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b01      	cmp	r3, #1
 800423e:	f040 80cd 	bne.w	80043dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a08      	ldr	r2, [pc, #32]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424e:	f7fd ff75 	bl	800213c <HAL_GetTick>
 8004252:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004256:	f7fd ff71 	bl	800213c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b64      	cmp	r3, #100	; 0x64
 8004262:	d903      	bls.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e0ba      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004268:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800426c:	4b5e      	ldr	r3, [pc, #376]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004278:	d0ed      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004296:	2b00      	cmp	r3, #0
 8004298:	d02e      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d12a      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042a2:	4b51      	ldr	r3, [pc, #324]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042b0:	4b4d      	ldr	r3, [pc, #308]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	0f1b      	lsrs	r3, r3, #28
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	019a      	lsls	r2, r3, #6
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	061b      	lsls	r3, r3, #24
 80042d0:	431a      	orrs	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	071b      	lsls	r3, r3, #28
 80042d6:	4944      	ldr	r1, [pc, #272]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042de:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	493d      	ldr	r1, [pc, #244]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d022      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800430c:	d11d      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800430e:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	0e1b      	lsrs	r3, r3, #24
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800431c:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	0f1b      	lsrs	r3, r3, #28
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	019a      	lsls	r2, r3, #6
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	431a      	orrs	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	071b      	lsls	r3, r3, #28
 8004342:	4929      	ldr	r1, [pc, #164]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d028      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004356:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	0e1b      	lsrs	r3, r3, #24
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004364:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	0c1b      	lsrs	r3, r3, #16
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	019a      	lsls	r2, r3, #6
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	431a      	orrs	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	071b      	lsls	r3, r3, #28
 800438a:	4917      	ldr	r1, [pc, #92]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	4911      	ldr	r1, [pc, #68]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b4:	f7fd fec2 	bl	800213c <HAL_GetTick>
 80043b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043bc:	f7fd febe 	bl	800213c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	; 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e007      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043da:	d1ef      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800

080043ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e040      	b.n	8004480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd fd12 	bl	8001e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2224      	movs	r2, #36	; 0x24
 8004418:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f82c 	bl	8004488 <UART_SetConfig>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa82 	bl	800494c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fb09 	bl	8004a90 <UART_CheckIdleState>
 800447e:	4603      	mov	r3, r0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4ba7      	ldr	r3, [pc, #668]	; (8004750 <UART_SetConfig+0x2c8>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	6979      	ldr	r1, [r7, #20]
 80044bc:	430b      	orrs	r3, r1
 80044be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a95      	ldr	r2, [pc, #596]	; (8004754 <UART_SetConfig+0x2cc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d120      	bne.n	8004546 <UART_SetConfig+0xbe>
 8004504:	4b94      	ldr	r3, [pc, #592]	; (8004758 <UART_SetConfig+0x2d0>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b03      	cmp	r3, #3
 8004510:	d816      	bhi.n	8004540 <UART_SetConfig+0xb8>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x90>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	08004529 	.word	0x08004529
 800451c:	08004535 	.word	0x08004535
 8004520:	0800452f 	.word	0x0800452f
 8004524:	0800453b 	.word	0x0800453b
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e14f      	b.n	80047ce <UART_SetConfig+0x346>
 800452e:	2302      	movs	r3, #2
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e14c      	b.n	80047ce <UART_SetConfig+0x346>
 8004534:	2304      	movs	r3, #4
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e149      	b.n	80047ce <UART_SetConfig+0x346>
 800453a:	2308      	movs	r3, #8
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e146      	b.n	80047ce <UART_SetConfig+0x346>
 8004540:	2310      	movs	r3, #16
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e143      	b.n	80047ce <UART_SetConfig+0x346>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a84      	ldr	r2, [pc, #528]	; (800475c <UART_SetConfig+0x2d4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d132      	bne.n	80045b6 <UART_SetConfig+0x12e>
 8004550:	4b81      	ldr	r3, [pc, #516]	; (8004758 <UART_SetConfig+0x2d0>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d828      	bhi.n	80045b0 <UART_SetConfig+0x128>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0xdc>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004599 	.word	0x08004599
 8004568:	080045b1 	.word	0x080045b1
 800456c:	080045b1 	.word	0x080045b1
 8004570:	080045b1 	.word	0x080045b1
 8004574:	080045a5 	.word	0x080045a5
 8004578:	080045b1 	.word	0x080045b1
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045b1 	.word	0x080045b1
 8004584:	0800459f 	.word	0x0800459f
 8004588:	080045b1 	.word	0x080045b1
 800458c:	080045b1 	.word	0x080045b1
 8004590:	080045b1 	.word	0x080045b1
 8004594:	080045ab 	.word	0x080045ab
 8004598:	2300      	movs	r3, #0
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e117      	b.n	80047ce <UART_SetConfig+0x346>
 800459e:	2302      	movs	r3, #2
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e114      	b.n	80047ce <UART_SetConfig+0x346>
 80045a4:	2304      	movs	r3, #4
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e111      	b.n	80047ce <UART_SetConfig+0x346>
 80045aa:	2308      	movs	r3, #8
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e10e      	b.n	80047ce <UART_SetConfig+0x346>
 80045b0:	2310      	movs	r3, #16
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	e10b      	b.n	80047ce <UART_SetConfig+0x346>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a69      	ldr	r2, [pc, #420]	; (8004760 <UART_SetConfig+0x2d8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d120      	bne.n	8004602 <UART_SetConfig+0x17a>
 80045c0:	4b65      	ldr	r3, [pc, #404]	; (8004758 <UART_SetConfig+0x2d0>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045ca:	2b30      	cmp	r3, #48	; 0x30
 80045cc:	d013      	beq.n	80045f6 <UART_SetConfig+0x16e>
 80045ce:	2b30      	cmp	r3, #48	; 0x30
 80045d0:	d814      	bhi.n	80045fc <UART_SetConfig+0x174>
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d009      	beq.n	80045ea <UART_SetConfig+0x162>
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d810      	bhi.n	80045fc <UART_SetConfig+0x174>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <UART_SetConfig+0x15c>
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d006      	beq.n	80045f0 <UART_SetConfig+0x168>
 80045e2:	e00b      	b.n	80045fc <UART_SetConfig+0x174>
 80045e4:	2300      	movs	r3, #0
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e0f1      	b.n	80047ce <UART_SetConfig+0x346>
 80045ea:	2302      	movs	r3, #2
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e0ee      	b.n	80047ce <UART_SetConfig+0x346>
 80045f0:	2304      	movs	r3, #4
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e0eb      	b.n	80047ce <UART_SetConfig+0x346>
 80045f6:	2308      	movs	r3, #8
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e0e8      	b.n	80047ce <UART_SetConfig+0x346>
 80045fc:	2310      	movs	r3, #16
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e0e5      	b.n	80047ce <UART_SetConfig+0x346>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a57      	ldr	r2, [pc, #348]	; (8004764 <UART_SetConfig+0x2dc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d120      	bne.n	800464e <UART_SetConfig+0x1c6>
 800460c:	4b52      	ldr	r3, [pc, #328]	; (8004758 <UART_SetConfig+0x2d0>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004616:	2bc0      	cmp	r3, #192	; 0xc0
 8004618:	d013      	beq.n	8004642 <UART_SetConfig+0x1ba>
 800461a:	2bc0      	cmp	r3, #192	; 0xc0
 800461c:	d814      	bhi.n	8004648 <UART_SetConfig+0x1c0>
 800461e:	2b80      	cmp	r3, #128	; 0x80
 8004620:	d009      	beq.n	8004636 <UART_SetConfig+0x1ae>
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d810      	bhi.n	8004648 <UART_SetConfig+0x1c0>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <UART_SetConfig+0x1a8>
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d006      	beq.n	800463c <UART_SetConfig+0x1b4>
 800462e:	e00b      	b.n	8004648 <UART_SetConfig+0x1c0>
 8004630:	2300      	movs	r3, #0
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e0cb      	b.n	80047ce <UART_SetConfig+0x346>
 8004636:	2302      	movs	r3, #2
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e0c8      	b.n	80047ce <UART_SetConfig+0x346>
 800463c:	2304      	movs	r3, #4
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e0c5      	b.n	80047ce <UART_SetConfig+0x346>
 8004642:	2308      	movs	r3, #8
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e0c2      	b.n	80047ce <UART_SetConfig+0x346>
 8004648:	2310      	movs	r3, #16
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e0bf      	b.n	80047ce <UART_SetConfig+0x346>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a45      	ldr	r2, [pc, #276]	; (8004768 <UART_SetConfig+0x2e0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d125      	bne.n	80046a4 <UART_SetConfig+0x21c>
 8004658:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <UART_SetConfig+0x2d0>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d017      	beq.n	8004698 <UART_SetConfig+0x210>
 8004668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466c:	d817      	bhi.n	800469e <UART_SetConfig+0x216>
 800466e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004672:	d00b      	beq.n	800468c <UART_SetConfig+0x204>
 8004674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004678:	d811      	bhi.n	800469e <UART_SetConfig+0x216>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <UART_SetConfig+0x1fe>
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d006      	beq.n	8004692 <UART_SetConfig+0x20a>
 8004684:	e00b      	b.n	800469e <UART_SetConfig+0x216>
 8004686:	2300      	movs	r3, #0
 8004688:	77fb      	strb	r3, [r7, #31]
 800468a:	e0a0      	b.n	80047ce <UART_SetConfig+0x346>
 800468c:	2302      	movs	r3, #2
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e09d      	b.n	80047ce <UART_SetConfig+0x346>
 8004692:	2304      	movs	r3, #4
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e09a      	b.n	80047ce <UART_SetConfig+0x346>
 8004698:	2308      	movs	r3, #8
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e097      	b.n	80047ce <UART_SetConfig+0x346>
 800469e:	2310      	movs	r3, #16
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e094      	b.n	80047ce <UART_SetConfig+0x346>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a30      	ldr	r2, [pc, #192]	; (800476c <UART_SetConfig+0x2e4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d125      	bne.n	80046fa <UART_SetConfig+0x272>
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <UART_SetConfig+0x2d0>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046bc:	d017      	beq.n	80046ee <UART_SetConfig+0x266>
 80046be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c2:	d817      	bhi.n	80046f4 <UART_SetConfig+0x26c>
 80046c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c8:	d00b      	beq.n	80046e2 <UART_SetConfig+0x25a>
 80046ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ce:	d811      	bhi.n	80046f4 <UART_SetConfig+0x26c>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <UART_SetConfig+0x254>
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d8:	d006      	beq.n	80046e8 <UART_SetConfig+0x260>
 80046da:	e00b      	b.n	80046f4 <UART_SetConfig+0x26c>
 80046dc:	2301      	movs	r3, #1
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e075      	b.n	80047ce <UART_SetConfig+0x346>
 80046e2:	2302      	movs	r3, #2
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e072      	b.n	80047ce <UART_SetConfig+0x346>
 80046e8:	2304      	movs	r3, #4
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e06f      	b.n	80047ce <UART_SetConfig+0x346>
 80046ee:	2308      	movs	r3, #8
 80046f0:	77fb      	strb	r3, [r7, #31]
 80046f2:	e06c      	b.n	80047ce <UART_SetConfig+0x346>
 80046f4:	2310      	movs	r3, #16
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e069      	b.n	80047ce <UART_SetConfig+0x346>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <UART_SetConfig+0x2e8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d137      	bne.n	8004774 <UART_SetConfig+0x2ec>
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <UART_SetConfig+0x2d0>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800470e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004712:	d017      	beq.n	8004744 <UART_SetConfig+0x2bc>
 8004714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004718:	d817      	bhi.n	800474a <UART_SetConfig+0x2c2>
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	d00b      	beq.n	8004738 <UART_SetConfig+0x2b0>
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004724:	d811      	bhi.n	800474a <UART_SetConfig+0x2c2>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <UART_SetConfig+0x2aa>
 800472a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472e:	d006      	beq.n	800473e <UART_SetConfig+0x2b6>
 8004730:	e00b      	b.n	800474a <UART_SetConfig+0x2c2>
 8004732:	2300      	movs	r3, #0
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e04a      	b.n	80047ce <UART_SetConfig+0x346>
 8004738:	2302      	movs	r3, #2
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e047      	b.n	80047ce <UART_SetConfig+0x346>
 800473e:	2304      	movs	r3, #4
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e044      	b.n	80047ce <UART_SetConfig+0x346>
 8004744:	2308      	movs	r3, #8
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e041      	b.n	80047ce <UART_SetConfig+0x346>
 800474a:	2310      	movs	r3, #16
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e03e      	b.n	80047ce <UART_SetConfig+0x346>
 8004750:	efff69f3 	.word	0xefff69f3
 8004754:	40011000 	.word	0x40011000
 8004758:	40023800 	.word	0x40023800
 800475c:	40004400 	.word	0x40004400
 8004760:	40004800 	.word	0x40004800
 8004764:	40004c00 	.word	0x40004c00
 8004768:	40005000 	.word	0x40005000
 800476c:	40011400 	.word	0x40011400
 8004770:	40007800 	.word	0x40007800
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a71      	ldr	r2, [pc, #452]	; (8004940 <UART_SetConfig+0x4b8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d125      	bne.n	80047ca <UART_SetConfig+0x342>
 800477e:	4b71      	ldr	r3, [pc, #452]	; (8004944 <UART_SetConfig+0x4bc>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004788:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800478c:	d017      	beq.n	80047be <UART_SetConfig+0x336>
 800478e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004792:	d817      	bhi.n	80047c4 <UART_SetConfig+0x33c>
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	d00b      	beq.n	80047b2 <UART_SetConfig+0x32a>
 800479a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479e:	d811      	bhi.n	80047c4 <UART_SetConfig+0x33c>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <UART_SetConfig+0x324>
 80047a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a8:	d006      	beq.n	80047b8 <UART_SetConfig+0x330>
 80047aa:	e00b      	b.n	80047c4 <UART_SetConfig+0x33c>
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e00d      	b.n	80047ce <UART_SetConfig+0x346>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e00a      	b.n	80047ce <UART_SetConfig+0x346>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e007      	b.n	80047ce <UART_SetConfig+0x346>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e004      	b.n	80047ce <UART_SetConfig+0x346>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e001      	b.n	80047ce <UART_SetConfig+0x346>
 80047ca:	2310      	movs	r3, #16
 80047cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d6:	d15a      	bne.n	800488e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d827      	bhi.n	800482e <UART_SetConfig+0x3a6>
 80047de:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <UART_SetConfig+0x35c>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004811 	.word	0x08004811
 80047ec:	08004819 	.word	0x08004819
 80047f0:	0800482f 	.word	0x0800482f
 80047f4:	0800481f 	.word	0x0800481f
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800482f 	.word	0x0800482f
 8004800:	0800482f 	.word	0x0800482f
 8004804:	08004827 	.word	0x08004827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004808:	f7ff f9d8 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 800480c:	61b8      	str	r0, [r7, #24]
        break;
 800480e:	e013      	b.n	8004838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004810:	f7ff f9e8 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8004814:	61b8      	str	r0, [r7, #24]
        break;
 8004816:	e00f      	b.n	8004838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004818:	4b4b      	ldr	r3, [pc, #300]	; (8004948 <UART_SetConfig+0x4c0>)
 800481a:	61bb      	str	r3, [r7, #24]
        break;
 800481c:	e00c      	b.n	8004838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481e:	f7ff f8df 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8004822:	61b8      	str	r0, [r7, #24]
        break;
 8004824:	e008      	b.n	8004838 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482a:	61bb      	str	r3, [r7, #24]
        break;
 800482c:	e004      	b.n	8004838 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	77bb      	strb	r3, [r7, #30]
        break;
 8004836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d074      	beq.n	8004928 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	005a      	lsls	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d916      	bls.n	8004888 <UART_SetConfig+0x400>
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d212      	bcs.n	8004888 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f023 030f 	bic.w	r3, r3, #15
 800486a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	b29b      	uxth	r3, r3
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	b29a      	uxth	r2, r3
 8004878:	89fb      	ldrh	r3, [r7, #14]
 800487a:	4313      	orrs	r3, r2
 800487c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	89fa      	ldrh	r2, [r7, #14]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	e04f      	b.n	8004928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	77bb      	strb	r3, [r7, #30]
 800488c:	e04c      	b.n	8004928 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800488e:	7ffb      	ldrb	r3, [r7, #31]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d828      	bhi.n	80048e6 <UART_SetConfig+0x45e>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0x414>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	080048e7 	.word	0x080048e7
 80048ac:	080048d7 	.word	0x080048d7
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	080048e7 	.word	0x080048e7
 80048b8:	080048e7 	.word	0x080048e7
 80048bc:	080048df 	.word	0x080048df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c0:	f7ff f97c 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 80048c4:	61b8      	str	r0, [r7, #24]
        break;
 80048c6:	e013      	b.n	80048f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c8:	f7ff f98c 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 80048cc:	61b8      	str	r0, [r7, #24]
        break;
 80048ce:	e00f      	b.n	80048f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d0:	4b1d      	ldr	r3, [pc, #116]	; (8004948 <UART_SetConfig+0x4c0>)
 80048d2:	61bb      	str	r3, [r7, #24]
        break;
 80048d4:	e00c      	b.n	80048f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d6:	f7ff f883 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 80048da:	61b8      	str	r0, [r7, #24]
        break;
 80048dc:	e008      	b.n	80048f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e2:	61bb      	str	r3, [r7, #24]
        break;
 80048e4:	e004      	b.n	80048f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	77bb      	strb	r3, [r7, #30]
        break;
 80048ee:	bf00      	nop
    }

    if (pclk != 0U)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d018      	beq.n	8004928 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	085a      	lsrs	r2, r3, #1
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b0f      	cmp	r3, #15
 800490e:	d909      	bls.n	8004924 <UART_SetConfig+0x49c>
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004916:	d205      	bcs.n	8004924 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	b29a      	uxth	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	e001      	b.n	8004928 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004934:	7fbb      	ldrb	r3, [r7, #30]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40007c00 	.word	0x40007c00
 8004944:	40023800 	.word	0x40023800
 8004948:	00f42400 	.word	0x00f42400

0800494c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01a      	beq.n	8004a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4a:	d10a      	bne.n	8004a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	605a      	str	r2, [r3, #4]
  }
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aa0:	f7fd fb4c 	bl	800213c <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d10e      	bne.n	8004ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f817 	bl	8004af6 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e00d      	b.n	8004aee <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b09c      	sub	sp, #112	; 0x70
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b06:	e0a5      	b.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	f000 80a1 	beq.w	8004c54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fd fb13 	bl	800213c <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d13e      	bne.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	663b      	str	r3, [r7, #96]	; 0x60
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e5      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e067      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d04f      	beq.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc2:	d147      	bne.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bcc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34
 8004bee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e6      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c20:	623a      	str	r2, [r7, #32]
 8004c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	69f9      	ldr	r1, [r7, #28]
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e5      	bne.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e010      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	bf0c      	ite	eq
 8004c64:	2301      	moveq	r3, #1
 8004c66:	2300      	movne	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	f43f af4a 	beq.w	8004b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3770      	adds	r7, #112	; 0x70
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c80:	b084      	sub	sp, #16
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	f107 001c 	add.w	r0, r7, #28
 8004c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d120      	bne.n	8004cda <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <USB_CoreInit+0xac>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa92 	bl	80051f8 <USB_CoreReset>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e010      	b.n	8004cfc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa86 	bl	80051f8 <USB_CoreReset>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10b      	bne.n	8004d1a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f043 0206 	orr.w	r2, r3, #6
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d26:	b004      	add	sp, #16
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	ffbdffbf 	.word	0xffbdffbf

08004d30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f023 0201 	bic.w	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d115      	bne.n	8004da0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d80:	2001      	movs	r0, #1
 8004d82:	f7fd f9e7 	bl	8002154 <HAL_Delay>
      ms++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fa25 	bl	80051dc <USB_GetMode>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d01e      	beq.n	8004dd6 <USB_SetCurrentMode+0x84>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b31      	cmp	r3, #49	; 0x31
 8004d9c:	d9f0      	bls.n	8004d80 <USB_SetCurrentMode+0x2e>
 8004d9e:	e01a      	b.n	8004dd6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d115      	bne.n	8004dd2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004db2:	2001      	movs	r0, #1
 8004db4:	f7fd f9ce 	bl	8002154 <HAL_Delay>
      ms++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa0c 	bl	80051dc <USB_GetMode>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <USB_SetCurrentMode+0x84>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b31      	cmp	r3, #49	; 0x31
 8004dce:	d9f0      	bls.n	8004db2 <USB_SetCurrentMode+0x60>
 8004dd0:	e001      	b.n	8004dd6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e005      	b.n	8004de2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b32      	cmp	r3, #50	; 0x32
 8004dda:	d101      	bne.n	8004de0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dec:	b084      	sub	sp, #16
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e009      	b.n	8004e20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	3340      	adds	r3, #64	; 0x40
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	2200      	movs	r2, #0
 8004e18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b0e      	cmp	r3, #14
 8004e24:	d9f2      	bls.n	8004e0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d11c      	bne.n	8004e66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e3a:	f043 0302 	orr.w	r3, r3, #2
 8004e3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e005      	b.n	8004e72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e84:	4619      	mov	r1, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	680b      	ldr	r3, [r1, #0]
 8004e90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10c      	bne.n	8004eb2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d104      	bne.n	8004ea8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f961 	bl	8005168 <USB_SetDevSpeed>
 8004ea6:	e008      	b.n	8004eba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f95c 	bl	8005168 <USB_SetDevSpeed>
 8004eb0:	e003      	b.n	8004eba <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004eb2:	2103      	movs	r1, #3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f957 	bl	8005168 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004eba:	2110      	movs	r1, #16
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8f3 	bl	80050a8 <USB_FlushTxFifo>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f91d 	bl	800510c <USB_FlushRxFifo>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efa:	461a      	mov	r2, r3
 8004efc:	2300      	movs	r3, #0
 8004efe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e043      	b.n	8004f8e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f1c:	d118      	bne.n	8004f50 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	461a      	mov	r2, r3
 8004f32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	e013      	b.n	8004f62 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	461a      	mov	r2, r3
 8004f48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e008      	b.n	8004f62 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	461a      	mov	r2, r3
 8004f82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d3b7      	bcc.n	8004f06 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	e043      	b.n	8005024 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb2:	d118      	bne.n	8004fe6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e013      	b.n	8004ff8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e008      	b.n	8004ff8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005004:	461a      	mov	r2, r3
 8005006:	2300      	movs	r3, #0
 8005008:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	461a      	mov	r2, r3
 8005018:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800501c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3301      	adds	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	429a      	cmp	r2, r3
 800502a:	d3b7      	bcc.n	8004f9c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800503a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800503e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800504c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f043 0210 	orr.w	r2, r3, #16
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <USB_DevInit+0x2b4>)
 8005066:	4313      	orrs	r3, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800506c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f043 0208 	orr.w	r2, r3, #8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800507e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d105      	bne.n	8005090 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <USB_DevInit+0x2b8>)
 800508a:	4313      	orrs	r3, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005090:	7dfb      	ldrb	r3, [r7, #23]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800509c:	b004      	add	sp, #16
 800509e:	4770      	bx	lr
 80050a0:	803c3800 	.word	0x803c3800
 80050a4:	40000004 	.word	0x40000004

080050a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3301      	adds	r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	4a12      	ldr	r2, [pc, #72]	; (8005108 <USB_FlushTxFifo+0x60>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e01a      	b.n	80050fc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	daf3      	bge.n	80050b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	019b      	lsls	r3, r3, #6
 80050d6:	f043 0220 	orr.w	r2, r3, #32
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3301      	adds	r3, #1
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	4a08      	ldr	r2, [pc, #32]	; (8005108 <USB_FlushTxFifo+0x60>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e006      	b.n	80050fc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	d0f1      	beq.n	80050de <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	00030d40 	.word	0x00030d40

0800510c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3301      	adds	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	4a11      	ldr	r2, [pc, #68]	; (8005164 <USB_FlushRxFifo+0x58>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d901      	bls.n	8005128 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e017      	b.n	8005158 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	daf3      	bge.n	8005118 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2210      	movs	r2, #16
 8005138:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3301      	adds	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	4a08      	ldr	r2, [pc, #32]	; (8005164 <USB_FlushRxFifo+0x58>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d901      	bls.n	800514a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e006      	b.n	8005158 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b10      	cmp	r3, #16
 8005154:	d0f1      	beq.n	800513a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	00030d40 	.word	0x00030d40

08005168 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005188:	4313      	orrs	r3, r2
 800518a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051b4:	f023 0303 	bic.w	r3, r3, #3
 80051b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c8:	f043 0302 	orr.w	r3, r3, #2
 80051cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f003 0301 	and.w	r3, r3, #1
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3301      	adds	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	4a13      	ldr	r2, [pc, #76]	; (8005258 <USB_CoreReset+0x60>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d901      	bls.n	8005214 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e01a      	b.n	800524a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	daf3      	bge.n	8005204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f043 0201 	orr.w	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	4a09      	ldr	r2, [pc, #36]	; (8005258 <USB_CoreReset+0x60>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d901      	bls.n	800523c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e006      	b.n	800524a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d0f1      	beq.n	800522c <USB_CoreReset+0x34>

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	00030d40 	.word	0x00030d40

0800525c <__errno>:
 800525c:	4b01      	ldr	r3, [pc, #4]	; (8005264 <__errno+0x8>)
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000010 	.word	0x20000010

08005268 <__libc_init_array>:
 8005268:	b570      	push	{r4, r5, r6, lr}
 800526a:	4d0d      	ldr	r5, [pc, #52]	; (80052a0 <__libc_init_array+0x38>)
 800526c:	4c0d      	ldr	r4, [pc, #52]	; (80052a4 <__libc_init_array+0x3c>)
 800526e:	1b64      	subs	r4, r4, r5
 8005270:	10a4      	asrs	r4, r4, #2
 8005272:	2600      	movs	r6, #0
 8005274:	42a6      	cmp	r6, r4
 8005276:	d109      	bne.n	800528c <__libc_init_array+0x24>
 8005278:	4d0b      	ldr	r5, [pc, #44]	; (80052a8 <__libc_init_array+0x40>)
 800527a:	4c0c      	ldr	r4, [pc, #48]	; (80052ac <__libc_init_array+0x44>)
 800527c:	f002 feb6 	bl	8007fec <_init>
 8005280:	1b64      	subs	r4, r4, r5
 8005282:	10a4      	asrs	r4, r4, #2
 8005284:	2600      	movs	r6, #0
 8005286:	42a6      	cmp	r6, r4
 8005288:	d105      	bne.n	8005296 <__libc_init_array+0x2e>
 800528a:	bd70      	pop	{r4, r5, r6, pc}
 800528c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005290:	4798      	blx	r3
 8005292:	3601      	adds	r6, #1
 8005294:	e7ee      	b.n	8005274 <__libc_init_array+0xc>
 8005296:	f855 3b04 	ldr.w	r3, [r5], #4
 800529a:	4798      	blx	r3
 800529c:	3601      	adds	r6, #1
 800529e:	e7f2      	b.n	8005286 <__libc_init_array+0x1e>
 80052a0:	0800868c 	.word	0x0800868c
 80052a4:	0800868c 	.word	0x0800868c
 80052a8:	0800868c 	.word	0x0800868c
 80052ac:	08008690 	.word	0x08008690

080052b0 <memset>:
 80052b0:	4402      	add	r2, r0
 80052b2:	4603      	mov	r3, r0
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d100      	bne.n	80052ba <memset+0xa>
 80052b8:	4770      	bx	lr
 80052ba:	f803 1b01 	strb.w	r1, [r3], #1
 80052be:	e7f9      	b.n	80052b4 <memset+0x4>

080052c0 <__cvt>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	ec55 4b10 	vmov	r4, r5, d0
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	460e      	mov	r6, r1
 80052cc:	4619      	mov	r1, r3
 80052ce:	462b      	mov	r3, r5
 80052d0:	bfbb      	ittet	lt
 80052d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052d6:	461d      	movlt	r5, r3
 80052d8:	2300      	movge	r3, #0
 80052da:	232d      	movlt	r3, #45	; 0x2d
 80052dc:	700b      	strb	r3, [r1, #0]
 80052de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052e4:	4691      	mov	r9, r2
 80052e6:	f023 0820 	bic.w	r8, r3, #32
 80052ea:	bfbc      	itt	lt
 80052ec:	4622      	movlt	r2, r4
 80052ee:	4614      	movlt	r4, r2
 80052f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052f4:	d005      	beq.n	8005302 <__cvt+0x42>
 80052f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052fa:	d100      	bne.n	80052fe <__cvt+0x3e>
 80052fc:	3601      	adds	r6, #1
 80052fe:	2102      	movs	r1, #2
 8005300:	e000      	b.n	8005304 <__cvt+0x44>
 8005302:	2103      	movs	r1, #3
 8005304:	ab03      	add	r3, sp, #12
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	ab02      	add	r3, sp, #8
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	ec45 4b10 	vmov	d0, r4, r5
 8005310:	4653      	mov	r3, sl
 8005312:	4632      	mov	r2, r6
 8005314:	f000 fcec 	bl	8005cf0 <_dtoa_r>
 8005318:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800531c:	4607      	mov	r7, r0
 800531e:	d102      	bne.n	8005326 <__cvt+0x66>
 8005320:	f019 0f01 	tst.w	r9, #1
 8005324:	d022      	beq.n	800536c <__cvt+0xac>
 8005326:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800532a:	eb07 0906 	add.w	r9, r7, r6
 800532e:	d110      	bne.n	8005352 <__cvt+0x92>
 8005330:	783b      	ldrb	r3, [r7, #0]
 8005332:	2b30      	cmp	r3, #48	; 0x30
 8005334:	d10a      	bne.n	800534c <__cvt+0x8c>
 8005336:	2200      	movs	r2, #0
 8005338:	2300      	movs	r3, #0
 800533a:	4620      	mov	r0, r4
 800533c:	4629      	mov	r1, r5
 800533e:	f7fb fbe3 	bl	8000b08 <__aeabi_dcmpeq>
 8005342:	b918      	cbnz	r0, 800534c <__cvt+0x8c>
 8005344:	f1c6 0601 	rsb	r6, r6, #1
 8005348:	f8ca 6000 	str.w	r6, [sl]
 800534c:	f8da 3000 	ldr.w	r3, [sl]
 8005350:	4499      	add	r9, r3
 8005352:	2200      	movs	r2, #0
 8005354:	2300      	movs	r3, #0
 8005356:	4620      	mov	r0, r4
 8005358:	4629      	mov	r1, r5
 800535a:	f7fb fbd5 	bl	8000b08 <__aeabi_dcmpeq>
 800535e:	b108      	cbz	r0, 8005364 <__cvt+0xa4>
 8005360:	f8cd 900c 	str.w	r9, [sp, #12]
 8005364:	2230      	movs	r2, #48	; 0x30
 8005366:	9b03      	ldr	r3, [sp, #12]
 8005368:	454b      	cmp	r3, r9
 800536a:	d307      	bcc.n	800537c <__cvt+0xbc>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005370:	1bdb      	subs	r3, r3, r7
 8005372:	4638      	mov	r0, r7
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	b004      	add	sp, #16
 8005378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537c:	1c59      	adds	r1, r3, #1
 800537e:	9103      	str	r1, [sp, #12]
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e7f0      	b.n	8005366 <__cvt+0xa6>

08005384 <__exponent>:
 8005384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005386:	4603      	mov	r3, r0
 8005388:	2900      	cmp	r1, #0
 800538a:	bfb8      	it	lt
 800538c:	4249      	neglt	r1, r1
 800538e:	f803 2b02 	strb.w	r2, [r3], #2
 8005392:	bfb4      	ite	lt
 8005394:	222d      	movlt	r2, #45	; 0x2d
 8005396:	222b      	movge	r2, #43	; 0x2b
 8005398:	2909      	cmp	r1, #9
 800539a:	7042      	strb	r2, [r0, #1]
 800539c:	dd2a      	ble.n	80053f4 <__exponent+0x70>
 800539e:	f10d 0407 	add.w	r4, sp, #7
 80053a2:	46a4      	mov	ip, r4
 80053a4:	270a      	movs	r7, #10
 80053a6:	46a6      	mov	lr, r4
 80053a8:	460a      	mov	r2, r1
 80053aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80053ae:	fb07 1516 	mls	r5, r7, r6, r1
 80053b2:	3530      	adds	r5, #48	; 0x30
 80053b4:	2a63      	cmp	r2, #99	; 0x63
 80053b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80053ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053be:	4631      	mov	r1, r6
 80053c0:	dcf1      	bgt.n	80053a6 <__exponent+0x22>
 80053c2:	3130      	adds	r1, #48	; 0x30
 80053c4:	f1ae 0502 	sub.w	r5, lr, #2
 80053c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053cc:	1c44      	adds	r4, r0, #1
 80053ce:	4629      	mov	r1, r5
 80053d0:	4561      	cmp	r1, ip
 80053d2:	d30a      	bcc.n	80053ea <__exponent+0x66>
 80053d4:	f10d 0209 	add.w	r2, sp, #9
 80053d8:	eba2 020e 	sub.w	r2, r2, lr
 80053dc:	4565      	cmp	r5, ip
 80053de:	bf88      	it	hi
 80053e0:	2200      	movhi	r2, #0
 80053e2:	4413      	add	r3, r2
 80053e4:	1a18      	subs	r0, r3, r0
 80053e6:	b003      	add	sp, #12
 80053e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80053f2:	e7ed      	b.n	80053d0 <__exponent+0x4c>
 80053f4:	2330      	movs	r3, #48	; 0x30
 80053f6:	3130      	adds	r1, #48	; 0x30
 80053f8:	7083      	strb	r3, [r0, #2]
 80053fa:	70c1      	strb	r1, [r0, #3]
 80053fc:	1d03      	adds	r3, r0, #4
 80053fe:	e7f1      	b.n	80053e4 <__exponent+0x60>

08005400 <_printf_float>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	ed2d 8b02 	vpush	{d8}
 8005408:	b08d      	sub	sp, #52	; 0x34
 800540a:	460c      	mov	r4, r1
 800540c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005410:	4616      	mov	r6, r2
 8005412:	461f      	mov	r7, r3
 8005414:	4605      	mov	r5, r0
 8005416:	f001 fa57 	bl	80068c8 <_localeconv_r>
 800541a:	f8d0 a000 	ldr.w	sl, [r0]
 800541e:	4650      	mov	r0, sl
 8005420:	f7fa fef6 	bl	8000210 <strlen>
 8005424:	2300      	movs	r3, #0
 8005426:	930a      	str	r3, [sp, #40]	; 0x28
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	f8d8 3000 	ldr.w	r3, [r8]
 8005430:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005434:	3307      	adds	r3, #7
 8005436:	f023 0307 	bic.w	r3, r3, #7
 800543a:	f103 0208 	add.w	r2, r3, #8
 800543e:	f8c8 2000 	str.w	r2, [r8]
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800544a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800544e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005452:	9307      	str	r3, [sp, #28]
 8005454:	f8cd 8018 	str.w	r8, [sp, #24]
 8005458:	ee08 0a10 	vmov	s16, r0
 800545c:	4b9f      	ldr	r3, [pc, #636]	; (80056dc <_printf_float+0x2dc>)
 800545e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005462:	f04f 32ff 	mov.w	r2, #4294967295
 8005466:	f7fb fb81 	bl	8000b6c <__aeabi_dcmpun>
 800546a:	bb88      	cbnz	r0, 80054d0 <_printf_float+0xd0>
 800546c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005470:	4b9a      	ldr	r3, [pc, #616]	; (80056dc <_printf_float+0x2dc>)
 8005472:	f04f 32ff 	mov.w	r2, #4294967295
 8005476:	f7fb fb5b 	bl	8000b30 <__aeabi_dcmple>
 800547a:	bb48      	cbnz	r0, 80054d0 <_printf_float+0xd0>
 800547c:	2200      	movs	r2, #0
 800547e:	2300      	movs	r3, #0
 8005480:	4640      	mov	r0, r8
 8005482:	4649      	mov	r1, r9
 8005484:	f7fb fb4a 	bl	8000b1c <__aeabi_dcmplt>
 8005488:	b110      	cbz	r0, 8005490 <_printf_float+0x90>
 800548a:	232d      	movs	r3, #45	; 0x2d
 800548c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005490:	4b93      	ldr	r3, [pc, #588]	; (80056e0 <_printf_float+0x2e0>)
 8005492:	4894      	ldr	r0, [pc, #592]	; (80056e4 <_printf_float+0x2e4>)
 8005494:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005498:	bf94      	ite	ls
 800549a:	4698      	movls	r8, r3
 800549c:	4680      	movhi	r8, r0
 800549e:	2303      	movs	r3, #3
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	9b05      	ldr	r3, [sp, #20]
 80054a4:	f023 0204 	bic.w	r2, r3, #4
 80054a8:	6022      	str	r2, [r4, #0]
 80054aa:	f04f 0900 	mov.w	r9, #0
 80054ae:	9700      	str	r7, [sp, #0]
 80054b0:	4633      	mov	r3, r6
 80054b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80054b4:	4621      	mov	r1, r4
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 f9d8 	bl	800586c <_printf_common>
 80054bc:	3001      	adds	r0, #1
 80054be:	f040 8090 	bne.w	80055e2 <_printf_float+0x1e2>
 80054c2:	f04f 30ff 	mov.w	r0, #4294967295
 80054c6:	b00d      	add	sp, #52	; 0x34
 80054c8:	ecbd 8b02 	vpop	{d8}
 80054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d0:	4642      	mov	r2, r8
 80054d2:	464b      	mov	r3, r9
 80054d4:	4640      	mov	r0, r8
 80054d6:	4649      	mov	r1, r9
 80054d8:	f7fb fb48 	bl	8000b6c <__aeabi_dcmpun>
 80054dc:	b140      	cbz	r0, 80054f0 <_printf_float+0xf0>
 80054de:	464b      	mov	r3, r9
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bfbc      	itt	lt
 80054e4:	232d      	movlt	r3, #45	; 0x2d
 80054e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054ea:	487f      	ldr	r0, [pc, #508]	; (80056e8 <_printf_float+0x2e8>)
 80054ec:	4b7f      	ldr	r3, [pc, #508]	; (80056ec <_printf_float+0x2ec>)
 80054ee:	e7d1      	b.n	8005494 <_printf_float+0x94>
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054f6:	9206      	str	r2, [sp, #24]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	d13f      	bne.n	800557c <_printf_float+0x17c>
 80054fc:	2306      	movs	r3, #6
 80054fe:	6063      	str	r3, [r4, #4]
 8005500:	9b05      	ldr	r3, [sp, #20]
 8005502:	6861      	ldr	r1, [r4, #4]
 8005504:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005508:	2300      	movs	r3, #0
 800550a:	9303      	str	r3, [sp, #12]
 800550c:	ab0a      	add	r3, sp, #40	; 0x28
 800550e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005512:	ab09      	add	r3, sp, #36	; 0x24
 8005514:	ec49 8b10 	vmov	d0, r8, r9
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	6022      	str	r2, [r4, #0]
 800551c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005520:	4628      	mov	r0, r5
 8005522:	f7ff fecd 	bl	80052c0 <__cvt>
 8005526:	9b06      	ldr	r3, [sp, #24]
 8005528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800552a:	2b47      	cmp	r3, #71	; 0x47
 800552c:	4680      	mov	r8, r0
 800552e:	d108      	bne.n	8005542 <_printf_float+0x142>
 8005530:	1cc8      	adds	r0, r1, #3
 8005532:	db02      	blt.n	800553a <_printf_float+0x13a>
 8005534:	6863      	ldr	r3, [r4, #4]
 8005536:	4299      	cmp	r1, r3
 8005538:	dd41      	ble.n	80055be <_printf_float+0x1be>
 800553a:	f1ab 0b02 	sub.w	fp, fp, #2
 800553e:	fa5f fb8b 	uxtb.w	fp, fp
 8005542:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005546:	d820      	bhi.n	800558a <_printf_float+0x18a>
 8005548:	3901      	subs	r1, #1
 800554a:	465a      	mov	r2, fp
 800554c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005550:	9109      	str	r1, [sp, #36]	; 0x24
 8005552:	f7ff ff17 	bl	8005384 <__exponent>
 8005556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005558:	1813      	adds	r3, r2, r0
 800555a:	2a01      	cmp	r2, #1
 800555c:	4681      	mov	r9, r0
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	dc02      	bgt.n	8005568 <_printf_float+0x168>
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	07d2      	lsls	r2, r2, #31
 8005566:	d501      	bpl.n	800556c <_printf_float+0x16c>
 8005568:	3301      	adds	r3, #1
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005570:	2b00      	cmp	r3, #0
 8005572:	d09c      	beq.n	80054ae <_printf_float+0xae>
 8005574:	232d      	movs	r3, #45	; 0x2d
 8005576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557a:	e798      	b.n	80054ae <_printf_float+0xae>
 800557c:	9a06      	ldr	r2, [sp, #24]
 800557e:	2a47      	cmp	r2, #71	; 0x47
 8005580:	d1be      	bne.n	8005500 <_printf_float+0x100>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1bc      	bne.n	8005500 <_printf_float+0x100>
 8005586:	2301      	movs	r3, #1
 8005588:	e7b9      	b.n	80054fe <_printf_float+0xfe>
 800558a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800558e:	d118      	bne.n	80055c2 <_printf_float+0x1c2>
 8005590:	2900      	cmp	r1, #0
 8005592:	6863      	ldr	r3, [r4, #4]
 8005594:	dd0b      	ble.n	80055ae <_printf_float+0x1ae>
 8005596:	6121      	str	r1, [r4, #16]
 8005598:	b913      	cbnz	r3, 80055a0 <_printf_float+0x1a0>
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	07d0      	lsls	r0, r2, #31
 800559e:	d502      	bpl.n	80055a6 <_printf_float+0x1a6>
 80055a0:	3301      	adds	r3, #1
 80055a2:	440b      	add	r3, r1
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80055a8:	f04f 0900 	mov.w	r9, #0
 80055ac:	e7de      	b.n	800556c <_printf_float+0x16c>
 80055ae:	b913      	cbnz	r3, 80055b6 <_printf_float+0x1b6>
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	07d2      	lsls	r2, r2, #31
 80055b4:	d501      	bpl.n	80055ba <_printf_float+0x1ba>
 80055b6:	3302      	adds	r3, #2
 80055b8:	e7f4      	b.n	80055a4 <_printf_float+0x1a4>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e7f2      	b.n	80055a4 <_printf_float+0x1a4>
 80055be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c4:	4299      	cmp	r1, r3
 80055c6:	db05      	blt.n	80055d4 <_printf_float+0x1d4>
 80055c8:	6823      	ldr	r3, [r4, #0]
 80055ca:	6121      	str	r1, [r4, #16]
 80055cc:	07d8      	lsls	r0, r3, #31
 80055ce:	d5ea      	bpl.n	80055a6 <_printf_float+0x1a6>
 80055d0:	1c4b      	adds	r3, r1, #1
 80055d2:	e7e7      	b.n	80055a4 <_printf_float+0x1a4>
 80055d4:	2900      	cmp	r1, #0
 80055d6:	bfd4      	ite	le
 80055d8:	f1c1 0202 	rsble	r2, r1, #2
 80055dc:	2201      	movgt	r2, #1
 80055de:	4413      	add	r3, r2
 80055e0:	e7e0      	b.n	80055a4 <_printf_float+0x1a4>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	055a      	lsls	r2, r3, #21
 80055e6:	d407      	bmi.n	80055f8 <_printf_float+0x1f8>
 80055e8:	6923      	ldr	r3, [r4, #16]
 80055ea:	4642      	mov	r2, r8
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	d12c      	bne.n	8005650 <_printf_float+0x250>
 80055f6:	e764      	b.n	80054c2 <_printf_float+0xc2>
 80055f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055fc:	f240 80e0 	bls.w	80057c0 <_printf_float+0x3c0>
 8005600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005604:	2200      	movs	r2, #0
 8005606:	2300      	movs	r3, #0
 8005608:	f7fb fa7e 	bl	8000b08 <__aeabi_dcmpeq>
 800560c:	2800      	cmp	r0, #0
 800560e:	d034      	beq.n	800567a <_printf_float+0x27a>
 8005610:	4a37      	ldr	r2, [pc, #220]	; (80056f0 <_printf_float+0x2f0>)
 8005612:	2301      	movs	r3, #1
 8005614:	4631      	mov	r1, r6
 8005616:	4628      	mov	r0, r5
 8005618:	47b8      	blx	r7
 800561a:	3001      	adds	r0, #1
 800561c:	f43f af51 	beq.w	80054c2 <_printf_float+0xc2>
 8005620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005624:	429a      	cmp	r2, r3
 8005626:	db02      	blt.n	800562e <_printf_float+0x22e>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	07d8      	lsls	r0, r3, #31
 800562c:	d510      	bpl.n	8005650 <_printf_float+0x250>
 800562e:	ee18 3a10 	vmov	r3, s16
 8005632:	4652      	mov	r2, sl
 8005634:	4631      	mov	r1, r6
 8005636:	4628      	mov	r0, r5
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f43f af41 	beq.w	80054c2 <_printf_float+0xc2>
 8005640:	f04f 0800 	mov.w	r8, #0
 8005644:	f104 091a 	add.w	r9, r4, #26
 8005648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564a:	3b01      	subs	r3, #1
 800564c:	4543      	cmp	r3, r8
 800564e:	dc09      	bgt.n	8005664 <_printf_float+0x264>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	079b      	lsls	r3, r3, #30
 8005654:	f100 8105 	bmi.w	8005862 <_printf_float+0x462>
 8005658:	68e0      	ldr	r0, [r4, #12]
 800565a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800565c:	4298      	cmp	r0, r3
 800565e:	bfb8      	it	lt
 8005660:	4618      	movlt	r0, r3
 8005662:	e730      	b.n	80054c6 <_printf_float+0xc6>
 8005664:	2301      	movs	r3, #1
 8005666:	464a      	mov	r2, r9
 8005668:	4631      	mov	r1, r6
 800566a:	4628      	mov	r0, r5
 800566c:	47b8      	blx	r7
 800566e:	3001      	adds	r0, #1
 8005670:	f43f af27 	beq.w	80054c2 <_printf_float+0xc2>
 8005674:	f108 0801 	add.w	r8, r8, #1
 8005678:	e7e6      	b.n	8005648 <_printf_float+0x248>
 800567a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	dc39      	bgt.n	80056f4 <_printf_float+0x2f4>
 8005680:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <_printf_float+0x2f0>)
 8005682:	2301      	movs	r3, #1
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f af19 	beq.w	80054c2 <_printf_float+0xc2>
 8005690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005694:	4313      	orrs	r3, r2
 8005696:	d102      	bne.n	800569e <_printf_float+0x29e>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	07d9      	lsls	r1, r3, #31
 800569c:	d5d8      	bpl.n	8005650 <_printf_float+0x250>
 800569e:	ee18 3a10 	vmov	r3, s16
 80056a2:	4652      	mov	r2, sl
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	f43f af09 	beq.w	80054c2 <_printf_float+0xc2>
 80056b0:	f04f 0900 	mov.w	r9, #0
 80056b4:	f104 0a1a 	add.w	sl, r4, #26
 80056b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ba:	425b      	negs	r3, r3
 80056bc:	454b      	cmp	r3, r9
 80056be:	dc01      	bgt.n	80056c4 <_printf_float+0x2c4>
 80056c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c2:	e792      	b.n	80055ea <_printf_float+0x1ea>
 80056c4:	2301      	movs	r3, #1
 80056c6:	4652      	mov	r2, sl
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f aef7 	beq.w	80054c2 <_printf_float+0xc2>
 80056d4:	f109 0901 	add.w	r9, r9, #1
 80056d8:	e7ee      	b.n	80056b8 <_printf_float+0x2b8>
 80056da:	bf00      	nop
 80056dc:	7fefffff 	.word	0x7fefffff
 80056e0:	080082a4 	.word	0x080082a4
 80056e4:	080082a8 	.word	0x080082a8
 80056e8:	080082b0 	.word	0x080082b0
 80056ec:	080082ac 	.word	0x080082ac
 80056f0:	080082b4 	.word	0x080082b4
 80056f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056f8:	429a      	cmp	r2, r3
 80056fa:	bfa8      	it	ge
 80056fc:	461a      	movge	r2, r3
 80056fe:	2a00      	cmp	r2, #0
 8005700:	4691      	mov	r9, r2
 8005702:	dc37      	bgt.n	8005774 <_printf_float+0x374>
 8005704:	f04f 0b00 	mov.w	fp, #0
 8005708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800570c:	f104 021a 	add.w	r2, r4, #26
 8005710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005712:	9305      	str	r3, [sp, #20]
 8005714:	eba3 0309 	sub.w	r3, r3, r9
 8005718:	455b      	cmp	r3, fp
 800571a:	dc33      	bgt.n	8005784 <_printf_float+0x384>
 800571c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005720:	429a      	cmp	r2, r3
 8005722:	db3b      	blt.n	800579c <_printf_float+0x39c>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	07da      	lsls	r2, r3, #31
 8005728:	d438      	bmi.n	800579c <_printf_float+0x39c>
 800572a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800572c:	9b05      	ldr	r3, [sp, #20]
 800572e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	eba2 0901 	sub.w	r9, r2, r1
 8005736:	4599      	cmp	r9, r3
 8005738:	bfa8      	it	ge
 800573a:	4699      	movge	r9, r3
 800573c:	f1b9 0f00 	cmp.w	r9, #0
 8005740:	dc35      	bgt.n	80057ae <_printf_float+0x3ae>
 8005742:	f04f 0800 	mov.w	r8, #0
 8005746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800574a:	f104 0a1a 	add.w	sl, r4, #26
 800574e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	eba3 0309 	sub.w	r3, r3, r9
 8005758:	4543      	cmp	r3, r8
 800575a:	f77f af79 	ble.w	8005650 <_printf_float+0x250>
 800575e:	2301      	movs	r3, #1
 8005760:	4652      	mov	r2, sl
 8005762:	4631      	mov	r1, r6
 8005764:	4628      	mov	r0, r5
 8005766:	47b8      	blx	r7
 8005768:	3001      	adds	r0, #1
 800576a:	f43f aeaa 	beq.w	80054c2 <_printf_float+0xc2>
 800576e:	f108 0801 	add.w	r8, r8, #1
 8005772:	e7ec      	b.n	800574e <_printf_float+0x34e>
 8005774:	4613      	mov	r3, r2
 8005776:	4631      	mov	r1, r6
 8005778:	4642      	mov	r2, r8
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	d1c0      	bne.n	8005704 <_printf_float+0x304>
 8005782:	e69e      	b.n	80054c2 <_printf_float+0xc2>
 8005784:	2301      	movs	r3, #1
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	9205      	str	r2, [sp, #20]
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	f43f ae97 	beq.w	80054c2 <_printf_float+0xc2>
 8005794:	9a05      	ldr	r2, [sp, #20]
 8005796:	f10b 0b01 	add.w	fp, fp, #1
 800579a:	e7b9      	b.n	8005710 <_printf_float+0x310>
 800579c:	ee18 3a10 	vmov	r3, s16
 80057a0:	4652      	mov	r2, sl
 80057a2:	4631      	mov	r1, r6
 80057a4:	4628      	mov	r0, r5
 80057a6:	47b8      	blx	r7
 80057a8:	3001      	adds	r0, #1
 80057aa:	d1be      	bne.n	800572a <_printf_float+0x32a>
 80057ac:	e689      	b.n	80054c2 <_printf_float+0xc2>
 80057ae:	9a05      	ldr	r2, [sp, #20]
 80057b0:	464b      	mov	r3, r9
 80057b2:	4442      	add	r2, r8
 80057b4:	4631      	mov	r1, r6
 80057b6:	4628      	mov	r0, r5
 80057b8:	47b8      	blx	r7
 80057ba:	3001      	adds	r0, #1
 80057bc:	d1c1      	bne.n	8005742 <_printf_float+0x342>
 80057be:	e680      	b.n	80054c2 <_printf_float+0xc2>
 80057c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057c2:	2a01      	cmp	r2, #1
 80057c4:	dc01      	bgt.n	80057ca <_printf_float+0x3ca>
 80057c6:	07db      	lsls	r3, r3, #31
 80057c8:	d538      	bpl.n	800583c <_printf_float+0x43c>
 80057ca:	2301      	movs	r3, #1
 80057cc:	4642      	mov	r2, r8
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae74 	beq.w	80054c2 <_printf_float+0xc2>
 80057da:	ee18 3a10 	vmov	r3, s16
 80057de:	4652      	mov	r2, sl
 80057e0:	4631      	mov	r1, r6
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b8      	blx	r7
 80057e6:	3001      	adds	r0, #1
 80057e8:	f43f ae6b 	beq.w	80054c2 <_printf_float+0xc2>
 80057ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	f7fb f988 	bl	8000b08 <__aeabi_dcmpeq>
 80057f8:	b9d8      	cbnz	r0, 8005832 <_printf_float+0x432>
 80057fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057fc:	f108 0201 	add.w	r2, r8, #1
 8005800:	3b01      	subs	r3, #1
 8005802:	4631      	mov	r1, r6
 8005804:	4628      	mov	r0, r5
 8005806:	47b8      	blx	r7
 8005808:	3001      	adds	r0, #1
 800580a:	d10e      	bne.n	800582a <_printf_float+0x42a>
 800580c:	e659      	b.n	80054c2 <_printf_float+0xc2>
 800580e:	2301      	movs	r3, #1
 8005810:	4652      	mov	r2, sl
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	f43f ae52 	beq.w	80054c2 <_printf_float+0xc2>
 800581e:	f108 0801 	add.w	r8, r8, #1
 8005822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	4543      	cmp	r3, r8
 8005828:	dcf1      	bgt.n	800580e <_printf_float+0x40e>
 800582a:	464b      	mov	r3, r9
 800582c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005830:	e6dc      	b.n	80055ec <_printf_float+0x1ec>
 8005832:	f04f 0800 	mov.w	r8, #0
 8005836:	f104 0a1a 	add.w	sl, r4, #26
 800583a:	e7f2      	b.n	8005822 <_printf_float+0x422>
 800583c:	2301      	movs	r3, #1
 800583e:	4642      	mov	r2, r8
 8005840:	e7df      	b.n	8005802 <_printf_float+0x402>
 8005842:	2301      	movs	r3, #1
 8005844:	464a      	mov	r2, r9
 8005846:	4631      	mov	r1, r6
 8005848:	4628      	mov	r0, r5
 800584a:	47b8      	blx	r7
 800584c:	3001      	adds	r0, #1
 800584e:	f43f ae38 	beq.w	80054c2 <_printf_float+0xc2>
 8005852:	f108 0801 	add.w	r8, r8, #1
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800585a:	1a5b      	subs	r3, r3, r1
 800585c:	4543      	cmp	r3, r8
 800585e:	dcf0      	bgt.n	8005842 <_printf_float+0x442>
 8005860:	e6fa      	b.n	8005658 <_printf_float+0x258>
 8005862:	f04f 0800 	mov.w	r8, #0
 8005866:	f104 0919 	add.w	r9, r4, #25
 800586a:	e7f4      	b.n	8005856 <_printf_float+0x456>

0800586c <_printf_common>:
 800586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	4616      	mov	r6, r2
 8005872:	4699      	mov	r9, r3
 8005874:	688a      	ldr	r2, [r1, #8]
 8005876:	690b      	ldr	r3, [r1, #16]
 8005878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800587c:	4293      	cmp	r3, r2
 800587e:	bfb8      	it	lt
 8005880:	4613      	movlt	r3, r2
 8005882:	6033      	str	r3, [r6, #0]
 8005884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005888:	4607      	mov	r7, r0
 800588a:	460c      	mov	r4, r1
 800588c:	b10a      	cbz	r2, 8005892 <_printf_common+0x26>
 800588e:	3301      	adds	r3, #1
 8005890:	6033      	str	r3, [r6, #0]
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	0699      	lsls	r1, r3, #26
 8005896:	bf42      	ittt	mi
 8005898:	6833      	ldrmi	r3, [r6, #0]
 800589a:	3302      	addmi	r3, #2
 800589c:	6033      	strmi	r3, [r6, #0]
 800589e:	6825      	ldr	r5, [r4, #0]
 80058a0:	f015 0506 	ands.w	r5, r5, #6
 80058a4:	d106      	bne.n	80058b4 <_printf_common+0x48>
 80058a6:	f104 0a19 	add.w	sl, r4, #25
 80058aa:	68e3      	ldr	r3, [r4, #12]
 80058ac:	6832      	ldr	r2, [r6, #0]
 80058ae:	1a9b      	subs	r3, r3, r2
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	dc26      	bgt.n	8005902 <_printf_common+0x96>
 80058b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058b8:	1e13      	subs	r3, r2, #0
 80058ba:	6822      	ldr	r2, [r4, #0]
 80058bc:	bf18      	it	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	0692      	lsls	r2, r2, #26
 80058c2:	d42b      	bmi.n	800591c <_printf_common+0xb0>
 80058c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058c8:	4649      	mov	r1, r9
 80058ca:	4638      	mov	r0, r7
 80058cc:	47c0      	blx	r8
 80058ce:	3001      	adds	r0, #1
 80058d0:	d01e      	beq.n	8005910 <_printf_common+0xa4>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	68e5      	ldr	r5, [r4, #12]
 80058d6:	6832      	ldr	r2, [r6, #0]
 80058d8:	f003 0306 	and.w	r3, r3, #6
 80058dc:	2b04      	cmp	r3, #4
 80058de:	bf08      	it	eq
 80058e0:	1aad      	subeq	r5, r5, r2
 80058e2:	68a3      	ldr	r3, [r4, #8]
 80058e4:	6922      	ldr	r2, [r4, #16]
 80058e6:	bf0c      	ite	eq
 80058e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058ec:	2500      	movne	r5, #0
 80058ee:	4293      	cmp	r3, r2
 80058f0:	bfc4      	itt	gt
 80058f2:	1a9b      	subgt	r3, r3, r2
 80058f4:	18ed      	addgt	r5, r5, r3
 80058f6:	2600      	movs	r6, #0
 80058f8:	341a      	adds	r4, #26
 80058fa:	42b5      	cmp	r5, r6
 80058fc:	d11a      	bne.n	8005934 <_printf_common+0xc8>
 80058fe:	2000      	movs	r0, #0
 8005900:	e008      	b.n	8005914 <_printf_common+0xa8>
 8005902:	2301      	movs	r3, #1
 8005904:	4652      	mov	r2, sl
 8005906:	4649      	mov	r1, r9
 8005908:	4638      	mov	r0, r7
 800590a:	47c0      	blx	r8
 800590c:	3001      	adds	r0, #1
 800590e:	d103      	bne.n	8005918 <_printf_common+0xac>
 8005910:	f04f 30ff 	mov.w	r0, #4294967295
 8005914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005918:	3501      	adds	r5, #1
 800591a:	e7c6      	b.n	80058aa <_printf_common+0x3e>
 800591c:	18e1      	adds	r1, r4, r3
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	2030      	movs	r0, #48	; 0x30
 8005922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005926:	4422      	add	r2, r4
 8005928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800592c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005930:	3302      	adds	r3, #2
 8005932:	e7c7      	b.n	80058c4 <_printf_common+0x58>
 8005934:	2301      	movs	r3, #1
 8005936:	4622      	mov	r2, r4
 8005938:	4649      	mov	r1, r9
 800593a:	4638      	mov	r0, r7
 800593c:	47c0      	blx	r8
 800593e:	3001      	adds	r0, #1
 8005940:	d0e6      	beq.n	8005910 <_printf_common+0xa4>
 8005942:	3601      	adds	r6, #1
 8005944:	e7d9      	b.n	80058fa <_printf_common+0x8e>
	...

08005948 <_printf_i>:
 8005948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	460c      	mov	r4, r1
 800594e:	4691      	mov	r9, r2
 8005950:	7e27      	ldrb	r7, [r4, #24]
 8005952:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005954:	2f78      	cmp	r7, #120	; 0x78
 8005956:	4680      	mov	r8, r0
 8005958:	469a      	mov	sl, r3
 800595a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800595e:	d807      	bhi.n	8005970 <_printf_i+0x28>
 8005960:	2f62      	cmp	r7, #98	; 0x62
 8005962:	d80a      	bhi.n	800597a <_printf_i+0x32>
 8005964:	2f00      	cmp	r7, #0
 8005966:	f000 80d8 	beq.w	8005b1a <_printf_i+0x1d2>
 800596a:	2f58      	cmp	r7, #88	; 0x58
 800596c:	f000 80a3 	beq.w	8005ab6 <_printf_i+0x16e>
 8005970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005978:	e03a      	b.n	80059f0 <_printf_i+0xa8>
 800597a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800597e:	2b15      	cmp	r3, #21
 8005980:	d8f6      	bhi.n	8005970 <_printf_i+0x28>
 8005982:	a001      	add	r0, pc, #4	; (adr r0, 8005988 <_printf_i+0x40>)
 8005984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005988:	080059e1 	.word	0x080059e1
 800598c:	080059f5 	.word	0x080059f5
 8005990:	08005971 	.word	0x08005971
 8005994:	08005971 	.word	0x08005971
 8005998:	08005971 	.word	0x08005971
 800599c:	08005971 	.word	0x08005971
 80059a0:	080059f5 	.word	0x080059f5
 80059a4:	08005971 	.word	0x08005971
 80059a8:	08005971 	.word	0x08005971
 80059ac:	08005971 	.word	0x08005971
 80059b0:	08005971 	.word	0x08005971
 80059b4:	08005b01 	.word	0x08005b01
 80059b8:	08005a25 	.word	0x08005a25
 80059bc:	08005ae3 	.word	0x08005ae3
 80059c0:	08005971 	.word	0x08005971
 80059c4:	08005971 	.word	0x08005971
 80059c8:	08005b23 	.word	0x08005b23
 80059cc:	08005971 	.word	0x08005971
 80059d0:	08005a25 	.word	0x08005a25
 80059d4:	08005971 	.word	0x08005971
 80059d8:	08005971 	.word	0x08005971
 80059dc:	08005aeb 	.word	0x08005aeb
 80059e0:	680b      	ldr	r3, [r1, #0]
 80059e2:	1d1a      	adds	r2, r3, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	600a      	str	r2, [r1, #0]
 80059e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059f0:	2301      	movs	r3, #1
 80059f2:	e0a3      	b.n	8005b3c <_printf_i+0x1f4>
 80059f4:	6825      	ldr	r5, [r4, #0]
 80059f6:	6808      	ldr	r0, [r1, #0]
 80059f8:	062e      	lsls	r6, r5, #24
 80059fa:	f100 0304 	add.w	r3, r0, #4
 80059fe:	d50a      	bpl.n	8005a16 <_printf_i+0xce>
 8005a00:	6805      	ldr	r5, [r0, #0]
 8005a02:	600b      	str	r3, [r1, #0]
 8005a04:	2d00      	cmp	r5, #0
 8005a06:	da03      	bge.n	8005a10 <_printf_i+0xc8>
 8005a08:	232d      	movs	r3, #45	; 0x2d
 8005a0a:	426d      	negs	r5, r5
 8005a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a10:	485e      	ldr	r0, [pc, #376]	; (8005b8c <_printf_i+0x244>)
 8005a12:	230a      	movs	r3, #10
 8005a14:	e019      	b.n	8005a4a <_printf_i+0x102>
 8005a16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a1a:	6805      	ldr	r5, [r0, #0]
 8005a1c:	600b      	str	r3, [r1, #0]
 8005a1e:	bf18      	it	ne
 8005a20:	b22d      	sxthne	r5, r5
 8005a22:	e7ef      	b.n	8005a04 <_printf_i+0xbc>
 8005a24:	680b      	ldr	r3, [r1, #0]
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	1d18      	adds	r0, r3, #4
 8005a2a:	6008      	str	r0, [r1, #0]
 8005a2c:	0628      	lsls	r0, r5, #24
 8005a2e:	d501      	bpl.n	8005a34 <_printf_i+0xec>
 8005a30:	681d      	ldr	r5, [r3, #0]
 8005a32:	e002      	b.n	8005a3a <_printf_i+0xf2>
 8005a34:	0669      	lsls	r1, r5, #25
 8005a36:	d5fb      	bpl.n	8005a30 <_printf_i+0xe8>
 8005a38:	881d      	ldrh	r5, [r3, #0]
 8005a3a:	4854      	ldr	r0, [pc, #336]	; (8005b8c <_printf_i+0x244>)
 8005a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a3e:	bf0c      	ite	eq
 8005a40:	2308      	moveq	r3, #8
 8005a42:	230a      	movne	r3, #10
 8005a44:	2100      	movs	r1, #0
 8005a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a4a:	6866      	ldr	r6, [r4, #4]
 8005a4c:	60a6      	str	r6, [r4, #8]
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	bfa2      	ittt	ge
 8005a52:	6821      	ldrge	r1, [r4, #0]
 8005a54:	f021 0104 	bicge.w	r1, r1, #4
 8005a58:	6021      	strge	r1, [r4, #0]
 8005a5a:	b90d      	cbnz	r5, 8005a60 <_printf_i+0x118>
 8005a5c:	2e00      	cmp	r6, #0
 8005a5e:	d04d      	beq.n	8005afc <_printf_i+0x1b4>
 8005a60:	4616      	mov	r6, r2
 8005a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a66:	fb03 5711 	mls	r7, r3, r1, r5
 8005a6a:	5dc7      	ldrb	r7, [r0, r7]
 8005a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a70:	462f      	mov	r7, r5
 8005a72:	42bb      	cmp	r3, r7
 8005a74:	460d      	mov	r5, r1
 8005a76:	d9f4      	bls.n	8005a62 <_printf_i+0x11a>
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d10b      	bne.n	8005a94 <_printf_i+0x14c>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	07df      	lsls	r7, r3, #31
 8005a80:	d508      	bpl.n	8005a94 <_printf_i+0x14c>
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	6861      	ldr	r1, [r4, #4]
 8005a86:	4299      	cmp	r1, r3
 8005a88:	bfde      	ittt	le
 8005a8a:	2330      	movle	r3, #48	; 0x30
 8005a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a94:	1b92      	subs	r2, r2, r6
 8005a96:	6122      	str	r2, [r4, #16]
 8005a98:	f8cd a000 	str.w	sl, [sp]
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	aa03      	add	r2, sp, #12
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	f7ff fee2 	bl	800586c <_printf_common>
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d14c      	bne.n	8005b46 <_printf_i+0x1fe>
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	b004      	add	sp, #16
 8005ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab6:	4835      	ldr	r0, [pc, #212]	; (8005b8c <_printf_i+0x244>)
 8005ab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	680e      	ldr	r6, [r1, #0]
 8005ac0:	061f      	lsls	r7, r3, #24
 8005ac2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005ac6:	600e      	str	r6, [r1, #0]
 8005ac8:	d514      	bpl.n	8005af4 <_printf_i+0x1ac>
 8005aca:	07d9      	lsls	r1, r3, #31
 8005acc:	bf44      	itt	mi
 8005ace:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad2:	6023      	strmi	r3, [r4, #0]
 8005ad4:	b91d      	cbnz	r5, 8005ade <_printf_i+0x196>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	f023 0320 	bic.w	r3, r3, #32
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	2310      	movs	r3, #16
 8005ae0:	e7b0      	b.n	8005a44 <_printf_i+0xfc>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f043 0320 	orr.w	r3, r3, #32
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	2378      	movs	r3, #120	; 0x78
 8005aec:	4828      	ldr	r0, [pc, #160]	; (8005b90 <_printf_i+0x248>)
 8005aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005af2:	e7e3      	b.n	8005abc <_printf_i+0x174>
 8005af4:	065e      	lsls	r6, r3, #25
 8005af6:	bf48      	it	mi
 8005af8:	b2ad      	uxthmi	r5, r5
 8005afa:	e7e6      	b.n	8005aca <_printf_i+0x182>
 8005afc:	4616      	mov	r6, r2
 8005afe:	e7bb      	b.n	8005a78 <_printf_i+0x130>
 8005b00:	680b      	ldr	r3, [r1, #0]
 8005b02:	6826      	ldr	r6, [r4, #0]
 8005b04:	6960      	ldr	r0, [r4, #20]
 8005b06:	1d1d      	adds	r5, r3, #4
 8005b08:	600d      	str	r5, [r1, #0]
 8005b0a:	0635      	lsls	r5, r6, #24
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	d501      	bpl.n	8005b14 <_printf_i+0x1cc>
 8005b10:	6018      	str	r0, [r3, #0]
 8005b12:	e002      	b.n	8005b1a <_printf_i+0x1d2>
 8005b14:	0671      	lsls	r1, r6, #25
 8005b16:	d5fb      	bpl.n	8005b10 <_printf_i+0x1c8>
 8005b18:	8018      	strh	r0, [r3, #0]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	4616      	mov	r6, r2
 8005b20:	e7ba      	b.n	8005a98 <_printf_i+0x150>
 8005b22:	680b      	ldr	r3, [r1, #0]
 8005b24:	1d1a      	adds	r2, r3, #4
 8005b26:	600a      	str	r2, [r1, #0]
 8005b28:	681e      	ldr	r6, [r3, #0]
 8005b2a:	6862      	ldr	r2, [r4, #4]
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f7fa fb76 	bl	8000220 <memchr>
 8005b34:	b108      	cbz	r0, 8005b3a <_printf_i+0x1f2>
 8005b36:	1b80      	subs	r0, r0, r6
 8005b38:	6060      	str	r0, [r4, #4]
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	6123      	str	r3, [r4, #16]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b44:	e7a8      	b.n	8005a98 <_printf_i+0x150>
 8005b46:	6923      	ldr	r3, [r4, #16]
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	47d0      	blx	sl
 8005b50:	3001      	adds	r0, #1
 8005b52:	d0ab      	beq.n	8005aac <_printf_i+0x164>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	079b      	lsls	r3, r3, #30
 8005b58:	d413      	bmi.n	8005b82 <_printf_i+0x23a>
 8005b5a:	68e0      	ldr	r0, [r4, #12]
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	4298      	cmp	r0, r3
 8005b60:	bfb8      	it	lt
 8005b62:	4618      	movlt	r0, r3
 8005b64:	e7a4      	b.n	8005ab0 <_printf_i+0x168>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4632      	mov	r2, r6
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	47d0      	blx	sl
 8005b70:	3001      	adds	r0, #1
 8005b72:	d09b      	beq.n	8005aac <_printf_i+0x164>
 8005b74:	3501      	adds	r5, #1
 8005b76:	68e3      	ldr	r3, [r4, #12]
 8005b78:	9903      	ldr	r1, [sp, #12]
 8005b7a:	1a5b      	subs	r3, r3, r1
 8005b7c:	42ab      	cmp	r3, r5
 8005b7e:	dcf2      	bgt.n	8005b66 <_printf_i+0x21e>
 8005b80:	e7eb      	b.n	8005b5a <_printf_i+0x212>
 8005b82:	2500      	movs	r5, #0
 8005b84:	f104 0619 	add.w	r6, r4, #25
 8005b88:	e7f5      	b.n	8005b76 <_printf_i+0x22e>
 8005b8a:	bf00      	nop
 8005b8c:	080082b6 	.word	0x080082b6
 8005b90:	080082c7 	.word	0x080082c7

08005b94 <siprintf>:
 8005b94:	b40e      	push	{r1, r2, r3}
 8005b96:	b500      	push	{lr}
 8005b98:	b09c      	sub	sp, #112	; 0x70
 8005b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b9c:	9002      	str	r0, [sp, #8]
 8005b9e:	9006      	str	r0, [sp, #24]
 8005ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ba4:	4809      	ldr	r0, [pc, #36]	; (8005bcc <siprintf+0x38>)
 8005ba6:	9107      	str	r1, [sp, #28]
 8005ba8:	9104      	str	r1, [sp, #16]
 8005baa:	4909      	ldr	r1, [pc, #36]	; (8005bd0 <siprintf+0x3c>)
 8005bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb0:	9105      	str	r1, [sp, #20]
 8005bb2:	6800      	ldr	r0, [r0, #0]
 8005bb4:	9301      	str	r3, [sp, #4]
 8005bb6:	a902      	add	r1, sp, #8
 8005bb8:	f001 fb34 	bl	8007224 <_svfiprintf_r>
 8005bbc:	9b02      	ldr	r3, [sp, #8]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	b01c      	add	sp, #112	; 0x70
 8005bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc8:	b003      	add	sp, #12
 8005bca:	4770      	bx	lr
 8005bcc:	20000010 	.word	0x20000010
 8005bd0:	ffff0208 	.word	0xffff0208

08005bd4 <quorem>:
 8005bd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	6903      	ldr	r3, [r0, #16]
 8005bda:	690c      	ldr	r4, [r1, #16]
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	4607      	mov	r7, r0
 8005be0:	f2c0 8081 	blt.w	8005ce6 <quorem+0x112>
 8005be4:	3c01      	subs	r4, #1
 8005be6:	f101 0814 	add.w	r8, r1, #20
 8005bea:	f100 0514 	add.w	r5, r0, #20
 8005bee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005bf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c08:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c0c:	d331      	bcc.n	8005c72 <quorem+0x9e>
 8005c0e:	f04f 0e00 	mov.w	lr, #0
 8005c12:	4640      	mov	r0, r8
 8005c14:	46ac      	mov	ip, r5
 8005c16:	46f2      	mov	sl, lr
 8005c18:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c1c:	b293      	uxth	r3, r2
 8005c1e:	fb06 e303 	mla	r3, r6, r3, lr
 8005c22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ebaa 0303 	sub.w	r3, sl, r3
 8005c2c:	0c12      	lsrs	r2, r2, #16
 8005c2e:	f8dc a000 	ldr.w	sl, [ip]
 8005c32:	fb06 e202 	mla	r2, r6, r2, lr
 8005c36:	fa13 f38a 	uxtah	r3, r3, sl
 8005c3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c3e:	fa1f fa82 	uxth.w	sl, r2
 8005c42:	f8dc 2000 	ldr.w	r2, [ip]
 8005c46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005c4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c54:	4581      	cmp	r9, r0
 8005c56:	f84c 3b04 	str.w	r3, [ip], #4
 8005c5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c5e:	d2db      	bcs.n	8005c18 <quorem+0x44>
 8005c60:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c64:	b92b      	cbnz	r3, 8005c72 <quorem+0x9e>
 8005c66:	9b01      	ldr	r3, [sp, #4]
 8005c68:	3b04      	subs	r3, #4
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	d32e      	bcc.n	8005cce <quorem+0xfa>
 8005c70:	613c      	str	r4, [r7, #16]
 8005c72:	4638      	mov	r0, r7
 8005c74:	f001 f8c0 	bl	8006df8 <__mcmp>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	db24      	blt.n	8005cc6 <quorem+0xf2>
 8005c7c:	3601      	adds	r6, #1
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f04f 0c00 	mov.w	ip, #0
 8005c84:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c88:	f8d0 e000 	ldr.w	lr, [r0]
 8005c8c:	b293      	uxth	r3, r2
 8005c8e:	ebac 0303 	sub.w	r3, ip, r3
 8005c92:	0c12      	lsrs	r2, r2, #16
 8005c94:	fa13 f38e 	uxtah	r3, r3, lr
 8005c98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ca6:	45c1      	cmp	r9, r8
 8005ca8:	f840 3b04 	str.w	r3, [r0], #4
 8005cac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cb0:	d2e8      	bcs.n	8005c84 <quorem+0xb0>
 8005cb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cba:	b922      	cbnz	r2, 8005cc6 <quorem+0xf2>
 8005cbc:	3b04      	subs	r3, #4
 8005cbe:	429d      	cmp	r5, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	d30a      	bcc.n	8005cda <quorem+0x106>
 8005cc4:	613c      	str	r4, [r7, #16]
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	b003      	add	sp, #12
 8005cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	3b04      	subs	r3, #4
 8005cd2:	2a00      	cmp	r2, #0
 8005cd4:	d1cc      	bne.n	8005c70 <quorem+0x9c>
 8005cd6:	3c01      	subs	r4, #1
 8005cd8:	e7c7      	b.n	8005c6a <quorem+0x96>
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	3b04      	subs	r3, #4
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	d1f0      	bne.n	8005cc4 <quorem+0xf0>
 8005ce2:	3c01      	subs	r4, #1
 8005ce4:	e7eb      	b.n	8005cbe <quorem+0xea>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e7ee      	b.n	8005cc8 <quorem+0xf4>
 8005cea:	0000      	movs	r0, r0
 8005cec:	0000      	movs	r0, r0
	...

08005cf0 <_dtoa_r>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	ed2d 8b02 	vpush	{d8}
 8005cf8:	ec57 6b10 	vmov	r6, r7, d0
 8005cfc:	b095      	sub	sp, #84	; 0x54
 8005cfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d04:	9105      	str	r1, [sp, #20]
 8005d06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d10:	b975      	cbnz	r5, 8005d30 <_dtoa_r+0x40>
 8005d12:	2010      	movs	r0, #16
 8005d14:	f000 fddc 	bl	80068d0 <malloc>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d1c:	b920      	cbnz	r0, 8005d28 <_dtoa_r+0x38>
 8005d1e:	4bb2      	ldr	r3, [pc, #712]	; (8005fe8 <_dtoa_r+0x2f8>)
 8005d20:	21ea      	movs	r1, #234	; 0xea
 8005d22:	48b2      	ldr	r0, [pc, #712]	; (8005fec <_dtoa_r+0x2fc>)
 8005d24:	f001 fb8e 	bl	8007444 <__assert_func>
 8005d28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d2c:	6005      	str	r5, [r0, #0]
 8005d2e:	60c5      	str	r5, [r0, #12]
 8005d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d32:	6819      	ldr	r1, [r3, #0]
 8005d34:	b151      	cbz	r1, 8005d4c <_dtoa_r+0x5c>
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	604a      	str	r2, [r1, #4]
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4093      	lsls	r3, r2
 8005d3e:	608b      	str	r3, [r1, #8]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fe1b 	bl	800697c <_Bfree>
 8005d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	1e3b      	subs	r3, r7, #0
 8005d4e:	bfb9      	ittee	lt
 8005d50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d54:	9303      	strlt	r3, [sp, #12]
 8005d56:	2300      	movge	r3, #0
 8005d58:	f8c8 3000 	strge.w	r3, [r8]
 8005d5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005d60:	4ba3      	ldr	r3, [pc, #652]	; (8005ff0 <_dtoa_r+0x300>)
 8005d62:	bfbc      	itt	lt
 8005d64:	2201      	movlt	r2, #1
 8005d66:	f8c8 2000 	strlt.w	r2, [r8]
 8005d6a:	ea33 0309 	bics.w	r3, r3, r9
 8005d6e:	d11b      	bne.n	8005da8 <_dtoa_r+0xb8>
 8005d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d72:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d7c:	4333      	orrs	r3, r6
 8005d7e:	f000 857a 	beq.w	8006876 <_dtoa_r+0xb86>
 8005d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d84:	b963      	cbnz	r3, 8005da0 <_dtoa_r+0xb0>
 8005d86:	4b9b      	ldr	r3, [pc, #620]	; (8005ff4 <_dtoa_r+0x304>)
 8005d88:	e024      	b.n	8005dd4 <_dtoa_r+0xe4>
 8005d8a:	4b9b      	ldr	r3, [pc, #620]	; (8005ff8 <_dtoa_r+0x308>)
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	3308      	adds	r3, #8
 8005d90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	9800      	ldr	r0, [sp, #0]
 8005d96:	b015      	add	sp, #84	; 0x54
 8005d98:	ecbd 8b02 	vpop	{d8}
 8005d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da0:	4b94      	ldr	r3, [pc, #592]	; (8005ff4 <_dtoa_r+0x304>)
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	3303      	adds	r3, #3
 8005da6:	e7f3      	b.n	8005d90 <_dtoa_r+0xa0>
 8005da8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dac:	2200      	movs	r2, #0
 8005dae:	ec51 0b17 	vmov	r0, r1, d7
 8005db2:	2300      	movs	r3, #0
 8005db4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005db8:	f7fa fea6 	bl	8000b08 <__aeabi_dcmpeq>
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	b158      	cbz	r0, 8005dd8 <_dtoa_r+0xe8>
 8005dc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8551 	beq.w	8006870 <_dtoa_r+0xb80>
 8005dce:	488b      	ldr	r0, [pc, #556]	; (8005ffc <_dtoa_r+0x30c>)
 8005dd0:	6018      	str	r0, [r3, #0]
 8005dd2:	1e43      	subs	r3, r0, #1
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	e7dd      	b.n	8005d94 <_dtoa_r+0xa4>
 8005dd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005ddc:	aa12      	add	r2, sp, #72	; 0x48
 8005dde:	a913      	add	r1, sp, #76	; 0x4c
 8005de0:	4620      	mov	r0, r4
 8005de2:	f001 f8ad 	bl	8006f40 <__d2b>
 8005de6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005dea:	4683      	mov	fp, r0
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	d07c      	beq.n	8005eea <_dtoa_r+0x1fa>
 8005df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005df2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dfa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005dfe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e0a:	4b7d      	ldr	r3, [pc, #500]	; (8006000 <_dtoa_r+0x310>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4630      	mov	r0, r6
 8005e10:	4639      	mov	r1, r7
 8005e12:	f7fa fa59 	bl	80002c8 <__aeabi_dsub>
 8005e16:	a36e      	add	r3, pc, #440	; (adr r3, 8005fd0 <_dtoa_r+0x2e0>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f7fa fc0c 	bl	8000638 <__aeabi_dmul>
 8005e20:	a36d      	add	r3, pc, #436	; (adr r3, 8005fd8 <_dtoa_r+0x2e8>)
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	f7fa fa51 	bl	80002cc <__adddf3>
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	460f      	mov	r7, r1
 8005e30:	f7fa fb98 	bl	8000564 <__aeabi_i2d>
 8005e34:	a36a      	add	r3, pc, #424	; (adr r3, 8005fe0 <_dtoa_r+0x2f0>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa fbfd 	bl	8000638 <__aeabi_dmul>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4630      	mov	r0, r6
 8005e44:	4639      	mov	r1, r7
 8005e46:	f7fa fa41 	bl	80002cc <__adddf3>
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	460f      	mov	r7, r1
 8005e4e:	f7fa fea3 	bl	8000b98 <__aeabi_d2iz>
 8005e52:	2200      	movs	r2, #0
 8005e54:	4682      	mov	sl, r0
 8005e56:	2300      	movs	r3, #0
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	f7fa fe5e 	bl	8000b1c <__aeabi_dcmplt>
 8005e60:	b148      	cbz	r0, 8005e76 <_dtoa_r+0x186>
 8005e62:	4650      	mov	r0, sl
 8005e64:	f7fa fb7e 	bl	8000564 <__aeabi_i2d>
 8005e68:	4632      	mov	r2, r6
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	f7fa fe4c 	bl	8000b08 <__aeabi_dcmpeq>
 8005e70:	b908      	cbnz	r0, 8005e76 <_dtoa_r+0x186>
 8005e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e76:	f1ba 0f16 	cmp.w	sl, #22
 8005e7a:	d854      	bhi.n	8005f26 <_dtoa_r+0x236>
 8005e7c:	4b61      	ldr	r3, [pc, #388]	; (8006004 <_dtoa_r+0x314>)
 8005e7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e8a:	f7fa fe47 	bl	8000b1c <__aeabi_dcmplt>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d04b      	beq.n	8005f2a <_dtoa_r+0x23a>
 8005e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e96:	2300      	movs	r3, #0
 8005e98:	930e      	str	r3, [sp, #56]	; 0x38
 8005e9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e9c:	1b5d      	subs	r5, r3, r5
 8005e9e:	1e6b      	subs	r3, r5, #1
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	bf43      	ittte	mi
 8005ea4:	2300      	movmi	r3, #0
 8005ea6:	f1c5 0801 	rsbmi	r8, r5, #1
 8005eaa:	9304      	strmi	r3, [sp, #16]
 8005eac:	f04f 0800 	movpl.w	r8, #0
 8005eb0:	f1ba 0f00 	cmp.w	sl, #0
 8005eb4:	db3b      	blt.n	8005f2e <_dtoa_r+0x23e>
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005ebc:	4453      	add	r3, sl
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9306      	str	r3, [sp, #24]
 8005ec4:	9b05      	ldr	r3, [sp, #20]
 8005ec6:	2b09      	cmp	r3, #9
 8005ec8:	d869      	bhi.n	8005f9e <_dtoa_r+0x2ae>
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	bfc4      	itt	gt
 8005ece:	3b04      	subgt	r3, #4
 8005ed0:	9305      	strgt	r3, [sp, #20]
 8005ed2:	9b05      	ldr	r3, [sp, #20]
 8005ed4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ed8:	bfcc      	ite	gt
 8005eda:	2500      	movgt	r5, #0
 8005edc:	2501      	movle	r5, #1
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d869      	bhi.n	8005fb6 <_dtoa_r+0x2c6>
 8005ee2:	e8df f003 	tbb	[pc, r3]
 8005ee6:	4e2c      	.short	0x4e2c
 8005ee8:	5a4c      	.short	0x5a4c
 8005eea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005eee:	441d      	add	r5, r3
 8005ef0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	bfc1      	itttt	gt
 8005ef8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005efc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f00:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f08:	bfda      	itte	le
 8005f0a:	f1c3 0320 	rsble	r3, r3, #32
 8005f0e:	fa06 f003 	lslle.w	r0, r6, r3
 8005f12:	4318      	orrgt	r0, r3
 8005f14:	f7fa fb16 	bl	8000544 <__aeabi_ui2d>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f20:	3d01      	subs	r5, #1
 8005f22:	9310      	str	r3, [sp, #64]	; 0x40
 8005f24:	e771      	b.n	8005e0a <_dtoa_r+0x11a>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e7b6      	b.n	8005e98 <_dtoa_r+0x1a8>
 8005f2a:	900e      	str	r0, [sp, #56]	; 0x38
 8005f2c:	e7b5      	b.n	8005e9a <_dtoa_r+0x1aa>
 8005f2e:	f1ca 0300 	rsb	r3, sl, #0
 8005f32:	9306      	str	r3, [sp, #24]
 8005f34:	2300      	movs	r3, #0
 8005f36:	eba8 080a 	sub.w	r8, r8, sl
 8005f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8005f3c:	e7c2      	b.n	8005ec4 <_dtoa_r+0x1d4>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9308      	str	r3, [sp, #32]
 8005f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	dc39      	bgt.n	8005fbc <_dtoa_r+0x2cc>
 8005f48:	f04f 0901 	mov.w	r9, #1
 8005f4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f50:	464b      	mov	r3, r9
 8005f52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005f56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f58:	2200      	movs	r2, #0
 8005f5a:	6042      	str	r2, [r0, #4]
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	f102 0614 	add.w	r6, r2, #20
 8005f62:	429e      	cmp	r6, r3
 8005f64:	6841      	ldr	r1, [r0, #4]
 8005f66:	d92f      	bls.n	8005fc8 <_dtoa_r+0x2d8>
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f000 fcc7 	bl	80068fc <_Balloc>
 8005f6e:	9000      	str	r0, [sp, #0]
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d14b      	bne.n	800600c <_dtoa_r+0x31c>
 8005f74:	4b24      	ldr	r3, [pc, #144]	; (8006008 <_dtoa_r+0x318>)
 8005f76:	4602      	mov	r2, r0
 8005f78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f7c:	e6d1      	b.n	8005d22 <_dtoa_r+0x32>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7de      	b.n	8005f40 <_dtoa_r+0x250>
 8005f82:	2300      	movs	r3, #0
 8005f84:	9308      	str	r3, [sp, #32]
 8005f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f88:	eb0a 0903 	add.w	r9, sl, r3
 8005f8c:	f109 0301 	add.w	r3, r9, #1
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	bfb8      	it	lt
 8005f96:	2301      	movlt	r3, #1
 8005f98:	e7dd      	b.n	8005f56 <_dtoa_r+0x266>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e7f2      	b.n	8005f84 <_dtoa_r+0x294>
 8005f9e:	2501      	movs	r5, #1
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9305      	str	r3, [sp, #20]
 8005fa4:	9508      	str	r5, [sp, #32]
 8005fa6:	f04f 39ff 	mov.w	r9, #4294967295
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fb0:	2312      	movs	r3, #18
 8005fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8005fb4:	e7cf      	b.n	8005f56 <_dtoa_r+0x266>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	9308      	str	r3, [sp, #32]
 8005fba:	e7f4      	b.n	8005fa6 <_dtoa_r+0x2b6>
 8005fbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005fc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	e7c6      	b.n	8005f56 <_dtoa_r+0x266>
 8005fc8:	3101      	adds	r1, #1
 8005fca:	6041      	str	r1, [r0, #4]
 8005fcc:	0052      	lsls	r2, r2, #1
 8005fce:	e7c6      	b.n	8005f5e <_dtoa_r+0x26e>
 8005fd0:	636f4361 	.word	0x636f4361
 8005fd4:	3fd287a7 	.word	0x3fd287a7
 8005fd8:	8b60c8b3 	.word	0x8b60c8b3
 8005fdc:	3fc68a28 	.word	0x3fc68a28
 8005fe0:	509f79fb 	.word	0x509f79fb
 8005fe4:	3fd34413 	.word	0x3fd34413
 8005fe8:	080082e5 	.word	0x080082e5
 8005fec:	080082fc 	.word	0x080082fc
 8005ff0:	7ff00000 	.word	0x7ff00000
 8005ff4:	080082e1 	.word	0x080082e1
 8005ff8:	080082d8 	.word	0x080082d8
 8005ffc:	080082b5 	.word	0x080082b5
 8006000:	3ff80000 	.word	0x3ff80000
 8006004:	080083f8 	.word	0x080083f8
 8006008:	0800835b 	.word	0x0800835b
 800600c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800600e:	9a00      	ldr	r2, [sp, #0]
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	9b01      	ldr	r3, [sp, #4]
 8006014:	2b0e      	cmp	r3, #14
 8006016:	f200 80ad 	bhi.w	8006174 <_dtoa_r+0x484>
 800601a:	2d00      	cmp	r5, #0
 800601c:	f000 80aa 	beq.w	8006174 <_dtoa_r+0x484>
 8006020:	f1ba 0f00 	cmp.w	sl, #0
 8006024:	dd36      	ble.n	8006094 <_dtoa_r+0x3a4>
 8006026:	4ac3      	ldr	r2, [pc, #780]	; (8006334 <_dtoa_r+0x644>)
 8006028:	f00a 030f 	and.w	r3, sl, #15
 800602c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006030:	ed93 7b00 	vldr	d7, [r3]
 8006034:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006038:	ea4f 172a 	mov.w	r7, sl, asr #4
 800603c:	eeb0 8a47 	vmov.f32	s16, s14
 8006040:	eef0 8a67 	vmov.f32	s17, s15
 8006044:	d016      	beq.n	8006074 <_dtoa_r+0x384>
 8006046:	4bbc      	ldr	r3, [pc, #752]	; (8006338 <_dtoa_r+0x648>)
 8006048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800604c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006050:	f7fa fc1c 	bl	800088c <__aeabi_ddiv>
 8006054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006058:	f007 070f 	and.w	r7, r7, #15
 800605c:	2503      	movs	r5, #3
 800605e:	4eb6      	ldr	r6, [pc, #728]	; (8006338 <_dtoa_r+0x648>)
 8006060:	b957      	cbnz	r7, 8006078 <_dtoa_r+0x388>
 8006062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006066:	ec53 2b18 	vmov	r2, r3, d8
 800606a:	f7fa fc0f 	bl	800088c <__aeabi_ddiv>
 800606e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006072:	e029      	b.n	80060c8 <_dtoa_r+0x3d8>
 8006074:	2502      	movs	r5, #2
 8006076:	e7f2      	b.n	800605e <_dtoa_r+0x36e>
 8006078:	07f9      	lsls	r1, r7, #31
 800607a:	d508      	bpl.n	800608e <_dtoa_r+0x39e>
 800607c:	ec51 0b18 	vmov	r0, r1, d8
 8006080:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006084:	f7fa fad8 	bl	8000638 <__aeabi_dmul>
 8006088:	ec41 0b18 	vmov	d8, r0, r1
 800608c:	3501      	adds	r5, #1
 800608e:	107f      	asrs	r7, r7, #1
 8006090:	3608      	adds	r6, #8
 8006092:	e7e5      	b.n	8006060 <_dtoa_r+0x370>
 8006094:	f000 80a6 	beq.w	80061e4 <_dtoa_r+0x4f4>
 8006098:	f1ca 0600 	rsb	r6, sl, #0
 800609c:	4ba5      	ldr	r3, [pc, #660]	; (8006334 <_dtoa_r+0x644>)
 800609e:	4fa6      	ldr	r7, [pc, #664]	; (8006338 <_dtoa_r+0x648>)
 80060a0:	f006 020f 	and.w	r2, r6, #15
 80060a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060b0:	f7fa fac2 	bl	8000638 <__aeabi_dmul>
 80060b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b8:	1136      	asrs	r6, r6, #4
 80060ba:	2300      	movs	r3, #0
 80060bc:	2502      	movs	r5, #2
 80060be:	2e00      	cmp	r6, #0
 80060c0:	f040 8085 	bne.w	80061ce <_dtoa_r+0x4de>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1d2      	bne.n	800606e <_dtoa_r+0x37e>
 80060c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 808c 	beq.w	80061e8 <_dtoa_r+0x4f8>
 80060d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060d4:	4b99      	ldr	r3, [pc, #612]	; (800633c <_dtoa_r+0x64c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	4630      	mov	r0, r6
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fa fd1e 	bl	8000b1c <__aeabi_dcmplt>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f000 8081 	beq.w	80061e8 <_dtoa_r+0x4f8>
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d07d      	beq.n	80061e8 <_dtoa_r+0x4f8>
 80060ec:	f1b9 0f00 	cmp.w	r9, #0
 80060f0:	dd3c      	ble.n	800616c <_dtoa_r+0x47c>
 80060f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	2200      	movs	r2, #0
 80060fa:	4b91      	ldr	r3, [pc, #580]	; (8006340 <_dtoa_r+0x650>)
 80060fc:	4630      	mov	r0, r6
 80060fe:	4639      	mov	r1, r7
 8006100:	f7fa fa9a 	bl	8000638 <__aeabi_dmul>
 8006104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006108:	3501      	adds	r5, #1
 800610a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800610e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006112:	4628      	mov	r0, r5
 8006114:	f7fa fa26 	bl	8000564 <__aeabi_i2d>
 8006118:	4632      	mov	r2, r6
 800611a:	463b      	mov	r3, r7
 800611c:	f7fa fa8c 	bl	8000638 <__aeabi_dmul>
 8006120:	4b88      	ldr	r3, [pc, #544]	; (8006344 <_dtoa_r+0x654>)
 8006122:	2200      	movs	r2, #0
 8006124:	f7fa f8d2 	bl	80002cc <__adddf3>
 8006128:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800612c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006130:	9303      	str	r3, [sp, #12]
 8006132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006134:	2b00      	cmp	r3, #0
 8006136:	d15c      	bne.n	80061f2 <_dtoa_r+0x502>
 8006138:	4b83      	ldr	r3, [pc, #524]	; (8006348 <_dtoa_r+0x658>)
 800613a:	2200      	movs	r2, #0
 800613c:	4630      	mov	r0, r6
 800613e:	4639      	mov	r1, r7
 8006140:	f7fa f8c2 	bl	80002c8 <__aeabi_dsub>
 8006144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006148:	4606      	mov	r6, r0
 800614a:	460f      	mov	r7, r1
 800614c:	f7fa fd04 	bl	8000b58 <__aeabi_dcmpgt>
 8006150:	2800      	cmp	r0, #0
 8006152:	f040 8296 	bne.w	8006682 <_dtoa_r+0x992>
 8006156:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800615a:	4630      	mov	r0, r6
 800615c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006160:	4639      	mov	r1, r7
 8006162:	f7fa fcdb 	bl	8000b1c <__aeabi_dcmplt>
 8006166:	2800      	cmp	r0, #0
 8006168:	f040 8288 	bne.w	800667c <_dtoa_r+0x98c>
 800616c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006170:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006176:	2b00      	cmp	r3, #0
 8006178:	f2c0 8158 	blt.w	800642c <_dtoa_r+0x73c>
 800617c:	f1ba 0f0e 	cmp.w	sl, #14
 8006180:	f300 8154 	bgt.w	800642c <_dtoa_r+0x73c>
 8006184:	4b6b      	ldr	r3, [pc, #428]	; (8006334 <_dtoa_r+0x644>)
 8006186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800618a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800618e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	f280 80e3 	bge.w	800635c <_dtoa_r+0x66c>
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f300 80df 	bgt.w	800635c <_dtoa_r+0x66c>
 800619e:	f040 826d 	bne.w	800667c <_dtoa_r+0x98c>
 80061a2:	4b69      	ldr	r3, [pc, #420]	; (8006348 <_dtoa_r+0x658>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	4640      	mov	r0, r8
 80061a8:	4649      	mov	r1, r9
 80061aa:	f7fa fa45 	bl	8000638 <__aeabi_dmul>
 80061ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061b2:	f7fa fcc7 	bl	8000b44 <__aeabi_dcmpge>
 80061b6:	9e01      	ldr	r6, [sp, #4]
 80061b8:	4637      	mov	r7, r6
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f040 8243 	bne.w	8006646 <_dtoa_r+0x956>
 80061c0:	9d00      	ldr	r5, [sp, #0]
 80061c2:	2331      	movs	r3, #49	; 0x31
 80061c4:	f805 3b01 	strb.w	r3, [r5], #1
 80061c8:	f10a 0a01 	add.w	sl, sl, #1
 80061cc:	e23f      	b.n	800664e <_dtoa_r+0x95e>
 80061ce:	07f2      	lsls	r2, r6, #31
 80061d0:	d505      	bpl.n	80061de <_dtoa_r+0x4ee>
 80061d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d6:	f7fa fa2f 	bl	8000638 <__aeabi_dmul>
 80061da:	3501      	adds	r5, #1
 80061dc:	2301      	movs	r3, #1
 80061de:	1076      	asrs	r6, r6, #1
 80061e0:	3708      	adds	r7, #8
 80061e2:	e76c      	b.n	80060be <_dtoa_r+0x3ce>
 80061e4:	2502      	movs	r5, #2
 80061e6:	e76f      	b.n	80060c8 <_dtoa_r+0x3d8>
 80061e8:	9b01      	ldr	r3, [sp, #4]
 80061ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80061ee:	930c      	str	r3, [sp, #48]	; 0x30
 80061f0:	e78d      	b.n	800610e <_dtoa_r+0x41e>
 80061f2:	9900      	ldr	r1, [sp, #0]
 80061f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80061f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061f8:	4b4e      	ldr	r3, [pc, #312]	; (8006334 <_dtoa_r+0x644>)
 80061fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061fe:	4401      	add	r1, r0
 8006200:	9102      	str	r1, [sp, #8]
 8006202:	9908      	ldr	r1, [sp, #32]
 8006204:	eeb0 8a47 	vmov.f32	s16, s14
 8006208:	eef0 8a67 	vmov.f32	s17, s15
 800620c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006210:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006214:	2900      	cmp	r1, #0
 8006216:	d045      	beq.n	80062a4 <_dtoa_r+0x5b4>
 8006218:	494c      	ldr	r1, [pc, #304]	; (800634c <_dtoa_r+0x65c>)
 800621a:	2000      	movs	r0, #0
 800621c:	f7fa fb36 	bl	800088c <__aeabi_ddiv>
 8006220:	ec53 2b18 	vmov	r2, r3, d8
 8006224:	f7fa f850 	bl	80002c8 <__aeabi_dsub>
 8006228:	9d00      	ldr	r5, [sp, #0]
 800622a:	ec41 0b18 	vmov	d8, r0, r1
 800622e:	4639      	mov	r1, r7
 8006230:	4630      	mov	r0, r6
 8006232:	f7fa fcb1 	bl	8000b98 <__aeabi_d2iz>
 8006236:	900c      	str	r0, [sp, #48]	; 0x30
 8006238:	f7fa f994 	bl	8000564 <__aeabi_i2d>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4630      	mov	r0, r6
 8006242:	4639      	mov	r1, r7
 8006244:	f7fa f840 	bl	80002c8 <__aeabi_dsub>
 8006248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800624a:	3330      	adds	r3, #48	; 0x30
 800624c:	f805 3b01 	strb.w	r3, [r5], #1
 8006250:	ec53 2b18 	vmov	r2, r3, d8
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	f7fa fc60 	bl	8000b1c <__aeabi_dcmplt>
 800625c:	2800      	cmp	r0, #0
 800625e:	d165      	bne.n	800632c <_dtoa_r+0x63c>
 8006260:	4632      	mov	r2, r6
 8006262:	463b      	mov	r3, r7
 8006264:	4935      	ldr	r1, [pc, #212]	; (800633c <_dtoa_r+0x64c>)
 8006266:	2000      	movs	r0, #0
 8006268:	f7fa f82e 	bl	80002c8 <__aeabi_dsub>
 800626c:	ec53 2b18 	vmov	r2, r3, d8
 8006270:	f7fa fc54 	bl	8000b1c <__aeabi_dcmplt>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 80b9 	bne.w	80063ec <_dtoa_r+0x6fc>
 800627a:	9b02      	ldr	r3, [sp, #8]
 800627c:	429d      	cmp	r5, r3
 800627e:	f43f af75 	beq.w	800616c <_dtoa_r+0x47c>
 8006282:	4b2f      	ldr	r3, [pc, #188]	; (8006340 <_dtoa_r+0x650>)
 8006284:	ec51 0b18 	vmov	r0, r1, d8
 8006288:	2200      	movs	r2, #0
 800628a:	f7fa f9d5 	bl	8000638 <__aeabi_dmul>
 800628e:	4b2c      	ldr	r3, [pc, #176]	; (8006340 <_dtoa_r+0x650>)
 8006290:	ec41 0b18 	vmov	d8, r0, r1
 8006294:	2200      	movs	r2, #0
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7fa f9cd 	bl	8000638 <__aeabi_dmul>
 800629e:	4606      	mov	r6, r0
 80062a0:	460f      	mov	r7, r1
 80062a2:	e7c4      	b.n	800622e <_dtoa_r+0x53e>
 80062a4:	ec51 0b17 	vmov	r0, r1, d7
 80062a8:	f7fa f9c6 	bl	8000638 <__aeabi_dmul>
 80062ac:	9b02      	ldr	r3, [sp, #8]
 80062ae:	9d00      	ldr	r5, [sp, #0]
 80062b0:	930c      	str	r3, [sp, #48]	; 0x30
 80062b2:	ec41 0b18 	vmov	d8, r0, r1
 80062b6:	4639      	mov	r1, r7
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7fa fc6d 	bl	8000b98 <__aeabi_d2iz>
 80062be:	9011      	str	r0, [sp, #68]	; 0x44
 80062c0:	f7fa f950 	bl	8000564 <__aeabi_i2d>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f7f9 fffc 	bl	80002c8 <__aeabi_dsub>
 80062d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062d2:	3330      	adds	r3, #48	; 0x30
 80062d4:	f805 3b01 	strb.w	r3, [r5], #1
 80062d8:	9b02      	ldr	r3, [sp, #8]
 80062da:	429d      	cmp	r5, r3
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	d134      	bne.n	8006350 <_dtoa_r+0x660>
 80062e6:	4b19      	ldr	r3, [pc, #100]	; (800634c <_dtoa_r+0x65c>)
 80062e8:	ec51 0b18 	vmov	r0, r1, d8
 80062ec:	f7f9 ffee 	bl	80002cc <__adddf3>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4630      	mov	r0, r6
 80062f6:	4639      	mov	r1, r7
 80062f8:	f7fa fc2e 	bl	8000b58 <__aeabi_dcmpgt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d175      	bne.n	80063ec <_dtoa_r+0x6fc>
 8006300:	ec53 2b18 	vmov	r2, r3, d8
 8006304:	4911      	ldr	r1, [pc, #68]	; (800634c <_dtoa_r+0x65c>)
 8006306:	2000      	movs	r0, #0
 8006308:	f7f9 ffde 	bl	80002c8 <__aeabi_dsub>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7fa fc02 	bl	8000b1c <__aeabi_dcmplt>
 8006318:	2800      	cmp	r0, #0
 800631a:	f43f af27 	beq.w	800616c <_dtoa_r+0x47c>
 800631e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006320:	1e6b      	subs	r3, r5, #1
 8006322:	930c      	str	r3, [sp, #48]	; 0x30
 8006324:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006328:	2b30      	cmp	r3, #48	; 0x30
 800632a:	d0f8      	beq.n	800631e <_dtoa_r+0x62e>
 800632c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006330:	e04a      	b.n	80063c8 <_dtoa_r+0x6d8>
 8006332:	bf00      	nop
 8006334:	080083f8 	.word	0x080083f8
 8006338:	080083d0 	.word	0x080083d0
 800633c:	3ff00000 	.word	0x3ff00000
 8006340:	40240000 	.word	0x40240000
 8006344:	401c0000 	.word	0x401c0000
 8006348:	40140000 	.word	0x40140000
 800634c:	3fe00000 	.word	0x3fe00000
 8006350:	4baf      	ldr	r3, [pc, #700]	; (8006610 <_dtoa_r+0x920>)
 8006352:	f7fa f971 	bl	8000638 <__aeabi_dmul>
 8006356:	4606      	mov	r6, r0
 8006358:	460f      	mov	r7, r1
 800635a:	e7ac      	b.n	80062b6 <_dtoa_r+0x5c6>
 800635c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006360:	9d00      	ldr	r5, [sp, #0]
 8006362:	4642      	mov	r2, r8
 8006364:	464b      	mov	r3, r9
 8006366:	4630      	mov	r0, r6
 8006368:	4639      	mov	r1, r7
 800636a:	f7fa fa8f 	bl	800088c <__aeabi_ddiv>
 800636e:	f7fa fc13 	bl	8000b98 <__aeabi_d2iz>
 8006372:	9002      	str	r0, [sp, #8]
 8006374:	f7fa f8f6 	bl	8000564 <__aeabi_i2d>
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	f7fa f95c 	bl	8000638 <__aeabi_dmul>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4630      	mov	r0, r6
 8006386:	4639      	mov	r1, r7
 8006388:	f7f9 ff9e 	bl	80002c8 <__aeabi_dsub>
 800638c:	9e02      	ldr	r6, [sp, #8]
 800638e:	9f01      	ldr	r7, [sp, #4]
 8006390:	3630      	adds	r6, #48	; 0x30
 8006392:	f805 6b01 	strb.w	r6, [r5], #1
 8006396:	9e00      	ldr	r6, [sp, #0]
 8006398:	1bae      	subs	r6, r5, r6
 800639a:	42b7      	cmp	r7, r6
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	d137      	bne.n	8006412 <_dtoa_r+0x722>
 80063a2:	f7f9 ff93 	bl	80002cc <__adddf3>
 80063a6:	4642      	mov	r2, r8
 80063a8:	464b      	mov	r3, r9
 80063aa:	4606      	mov	r6, r0
 80063ac:	460f      	mov	r7, r1
 80063ae:	f7fa fbd3 	bl	8000b58 <__aeabi_dcmpgt>
 80063b2:	b9c8      	cbnz	r0, 80063e8 <_dtoa_r+0x6f8>
 80063b4:	4642      	mov	r2, r8
 80063b6:	464b      	mov	r3, r9
 80063b8:	4630      	mov	r0, r6
 80063ba:	4639      	mov	r1, r7
 80063bc:	f7fa fba4 	bl	8000b08 <__aeabi_dcmpeq>
 80063c0:	b110      	cbz	r0, 80063c8 <_dtoa_r+0x6d8>
 80063c2:	9b02      	ldr	r3, [sp, #8]
 80063c4:	07d9      	lsls	r1, r3, #31
 80063c6:	d40f      	bmi.n	80063e8 <_dtoa_r+0x6f8>
 80063c8:	4620      	mov	r0, r4
 80063ca:	4659      	mov	r1, fp
 80063cc:	f000 fad6 	bl	800697c <_Bfree>
 80063d0:	2300      	movs	r3, #0
 80063d2:	702b      	strb	r3, [r5, #0]
 80063d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063d6:	f10a 0001 	add.w	r0, sl, #1
 80063da:	6018      	str	r0, [r3, #0]
 80063dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f43f acd8 	beq.w	8005d94 <_dtoa_r+0xa4>
 80063e4:	601d      	str	r5, [r3, #0]
 80063e6:	e4d5      	b.n	8005d94 <_dtoa_r+0xa4>
 80063e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80063ec:	462b      	mov	r3, r5
 80063ee:	461d      	mov	r5, r3
 80063f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063f4:	2a39      	cmp	r2, #57	; 0x39
 80063f6:	d108      	bne.n	800640a <_dtoa_r+0x71a>
 80063f8:	9a00      	ldr	r2, [sp, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d1f7      	bne.n	80063ee <_dtoa_r+0x6fe>
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	9900      	ldr	r1, [sp, #0]
 8006402:	3201      	adds	r2, #1
 8006404:	9207      	str	r2, [sp, #28]
 8006406:	2230      	movs	r2, #48	; 0x30
 8006408:	700a      	strb	r2, [r1, #0]
 800640a:	781a      	ldrb	r2, [r3, #0]
 800640c:	3201      	adds	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e78c      	b.n	800632c <_dtoa_r+0x63c>
 8006412:	4b7f      	ldr	r3, [pc, #508]	; (8006610 <_dtoa_r+0x920>)
 8006414:	2200      	movs	r2, #0
 8006416:	f7fa f90f 	bl	8000638 <__aeabi_dmul>
 800641a:	2200      	movs	r2, #0
 800641c:	2300      	movs	r3, #0
 800641e:	4606      	mov	r6, r0
 8006420:	460f      	mov	r7, r1
 8006422:	f7fa fb71 	bl	8000b08 <__aeabi_dcmpeq>
 8006426:	2800      	cmp	r0, #0
 8006428:	d09b      	beq.n	8006362 <_dtoa_r+0x672>
 800642a:	e7cd      	b.n	80063c8 <_dtoa_r+0x6d8>
 800642c:	9a08      	ldr	r2, [sp, #32]
 800642e:	2a00      	cmp	r2, #0
 8006430:	f000 80c4 	beq.w	80065bc <_dtoa_r+0x8cc>
 8006434:	9a05      	ldr	r2, [sp, #20]
 8006436:	2a01      	cmp	r2, #1
 8006438:	f300 80a8 	bgt.w	800658c <_dtoa_r+0x89c>
 800643c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800643e:	2a00      	cmp	r2, #0
 8006440:	f000 80a0 	beq.w	8006584 <_dtoa_r+0x894>
 8006444:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006448:	9e06      	ldr	r6, [sp, #24]
 800644a:	4645      	mov	r5, r8
 800644c:	9a04      	ldr	r2, [sp, #16]
 800644e:	2101      	movs	r1, #1
 8006450:	441a      	add	r2, r3
 8006452:	4620      	mov	r0, r4
 8006454:	4498      	add	r8, r3
 8006456:	9204      	str	r2, [sp, #16]
 8006458:	f000 fb4c 	bl	8006af4 <__i2b>
 800645c:	4607      	mov	r7, r0
 800645e:	2d00      	cmp	r5, #0
 8006460:	dd0b      	ble.n	800647a <_dtoa_r+0x78a>
 8006462:	9b04      	ldr	r3, [sp, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	dd08      	ble.n	800647a <_dtoa_r+0x78a>
 8006468:	42ab      	cmp	r3, r5
 800646a:	9a04      	ldr	r2, [sp, #16]
 800646c:	bfa8      	it	ge
 800646e:	462b      	movge	r3, r5
 8006470:	eba8 0803 	sub.w	r8, r8, r3
 8006474:	1aed      	subs	r5, r5, r3
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	b1fb      	cbz	r3, 80064be <_dtoa_r+0x7ce>
 800647e:	9b08      	ldr	r3, [sp, #32]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 809f 	beq.w	80065c4 <_dtoa_r+0x8d4>
 8006486:	2e00      	cmp	r6, #0
 8006488:	dd11      	ble.n	80064ae <_dtoa_r+0x7be>
 800648a:	4639      	mov	r1, r7
 800648c:	4632      	mov	r2, r6
 800648e:	4620      	mov	r0, r4
 8006490:	f000 fbec 	bl	8006c6c <__pow5mult>
 8006494:	465a      	mov	r2, fp
 8006496:	4601      	mov	r1, r0
 8006498:	4607      	mov	r7, r0
 800649a:	4620      	mov	r0, r4
 800649c:	f000 fb40 	bl	8006b20 <__multiply>
 80064a0:	4659      	mov	r1, fp
 80064a2:	9007      	str	r0, [sp, #28]
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fa69 	bl	800697c <_Bfree>
 80064aa:	9b07      	ldr	r3, [sp, #28]
 80064ac:	469b      	mov	fp, r3
 80064ae:	9b06      	ldr	r3, [sp, #24]
 80064b0:	1b9a      	subs	r2, r3, r6
 80064b2:	d004      	beq.n	80064be <_dtoa_r+0x7ce>
 80064b4:	4659      	mov	r1, fp
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 fbd8 	bl	8006c6c <__pow5mult>
 80064bc:	4683      	mov	fp, r0
 80064be:	2101      	movs	r1, #1
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fb17 	bl	8006af4 <__i2b>
 80064c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	4606      	mov	r6, r0
 80064cc:	dd7c      	ble.n	80065c8 <_dtoa_r+0x8d8>
 80064ce:	461a      	mov	r2, r3
 80064d0:	4601      	mov	r1, r0
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 fbca 	bl	8006c6c <__pow5mult>
 80064d8:	9b05      	ldr	r3, [sp, #20]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	4606      	mov	r6, r0
 80064de:	dd76      	ble.n	80065ce <_dtoa_r+0x8de>
 80064e0:	2300      	movs	r3, #0
 80064e2:	9306      	str	r3, [sp, #24]
 80064e4:	6933      	ldr	r3, [r6, #16]
 80064e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064ea:	6918      	ldr	r0, [r3, #16]
 80064ec:	f000 fab2 	bl	8006a54 <__hi0bits>
 80064f0:	f1c0 0020 	rsb	r0, r0, #32
 80064f4:	9b04      	ldr	r3, [sp, #16]
 80064f6:	4418      	add	r0, r3
 80064f8:	f010 001f 	ands.w	r0, r0, #31
 80064fc:	f000 8086 	beq.w	800660c <_dtoa_r+0x91c>
 8006500:	f1c0 0320 	rsb	r3, r0, #32
 8006504:	2b04      	cmp	r3, #4
 8006506:	dd7f      	ble.n	8006608 <_dtoa_r+0x918>
 8006508:	f1c0 001c 	rsb	r0, r0, #28
 800650c:	9b04      	ldr	r3, [sp, #16]
 800650e:	4403      	add	r3, r0
 8006510:	4480      	add	r8, r0
 8006512:	4405      	add	r5, r0
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	f1b8 0f00 	cmp.w	r8, #0
 800651a:	dd05      	ble.n	8006528 <_dtoa_r+0x838>
 800651c:	4659      	mov	r1, fp
 800651e:	4642      	mov	r2, r8
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fbfd 	bl	8006d20 <__lshift>
 8006526:	4683      	mov	fp, r0
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dd05      	ble.n	800653a <_dtoa_r+0x84a>
 800652e:	4631      	mov	r1, r6
 8006530:	461a      	mov	r2, r3
 8006532:	4620      	mov	r0, r4
 8006534:	f000 fbf4 	bl	8006d20 <__lshift>
 8006538:	4606      	mov	r6, r0
 800653a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d069      	beq.n	8006614 <_dtoa_r+0x924>
 8006540:	4631      	mov	r1, r6
 8006542:	4658      	mov	r0, fp
 8006544:	f000 fc58 	bl	8006df8 <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	da63      	bge.n	8006614 <_dtoa_r+0x924>
 800654c:	2300      	movs	r3, #0
 800654e:	4659      	mov	r1, fp
 8006550:	220a      	movs	r2, #10
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fa34 	bl	80069c0 <__multadd>
 8006558:	9b08      	ldr	r3, [sp, #32]
 800655a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800655e:	4683      	mov	fp, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 818f 	beq.w	8006884 <_dtoa_r+0xb94>
 8006566:	4639      	mov	r1, r7
 8006568:	2300      	movs	r3, #0
 800656a:	220a      	movs	r2, #10
 800656c:	4620      	mov	r0, r4
 800656e:	f000 fa27 	bl	80069c0 <__multadd>
 8006572:	f1b9 0f00 	cmp.w	r9, #0
 8006576:	4607      	mov	r7, r0
 8006578:	f300 808e 	bgt.w	8006698 <_dtoa_r+0x9a8>
 800657c:	9b05      	ldr	r3, [sp, #20]
 800657e:	2b02      	cmp	r3, #2
 8006580:	dc50      	bgt.n	8006624 <_dtoa_r+0x934>
 8006582:	e089      	b.n	8006698 <_dtoa_r+0x9a8>
 8006584:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800658a:	e75d      	b.n	8006448 <_dtoa_r+0x758>
 800658c:	9b01      	ldr	r3, [sp, #4]
 800658e:	1e5e      	subs	r6, r3, #1
 8006590:	9b06      	ldr	r3, [sp, #24]
 8006592:	42b3      	cmp	r3, r6
 8006594:	bfbf      	itttt	lt
 8006596:	9b06      	ldrlt	r3, [sp, #24]
 8006598:	9606      	strlt	r6, [sp, #24]
 800659a:	1af2      	sublt	r2, r6, r3
 800659c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800659e:	bfb6      	itet	lt
 80065a0:	189b      	addlt	r3, r3, r2
 80065a2:	1b9e      	subge	r6, r3, r6
 80065a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	bfb8      	it	lt
 80065aa:	2600      	movlt	r6, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bfb5      	itete	lt
 80065b0:	eba8 0503 	sublt.w	r5, r8, r3
 80065b4:	9b01      	ldrge	r3, [sp, #4]
 80065b6:	2300      	movlt	r3, #0
 80065b8:	4645      	movge	r5, r8
 80065ba:	e747      	b.n	800644c <_dtoa_r+0x75c>
 80065bc:	9e06      	ldr	r6, [sp, #24]
 80065be:	9f08      	ldr	r7, [sp, #32]
 80065c0:	4645      	mov	r5, r8
 80065c2:	e74c      	b.n	800645e <_dtoa_r+0x76e>
 80065c4:	9a06      	ldr	r2, [sp, #24]
 80065c6:	e775      	b.n	80064b4 <_dtoa_r+0x7c4>
 80065c8:	9b05      	ldr	r3, [sp, #20]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	dc18      	bgt.n	8006600 <_dtoa_r+0x910>
 80065ce:	9b02      	ldr	r3, [sp, #8]
 80065d0:	b9b3      	cbnz	r3, 8006600 <_dtoa_r+0x910>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065d8:	b9a3      	cbnz	r3, 8006604 <_dtoa_r+0x914>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065e0:	0d1b      	lsrs	r3, r3, #20
 80065e2:	051b      	lsls	r3, r3, #20
 80065e4:	b12b      	cbz	r3, 80065f2 <_dtoa_r+0x902>
 80065e6:	9b04      	ldr	r3, [sp, #16]
 80065e8:	3301      	adds	r3, #1
 80065ea:	9304      	str	r3, [sp, #16]
 80065ec:	f108 0801 	add.w	r8, r8, #1
 80065f0:	2301      	movs	r3, #1
 80065f2:	9306      	str	r3, [sp, #24]
 80065f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f47f af74 	bne.w	80064e4 <_dtoa_r+0x7f4>
 80065fc:	2001      	movs	r0, #1
 80065fe:	e779      	b.n	80064f4 <_dtoa_r+0x804>
 8006600:	2300      	movs	r3, #0
 8006602:	e7f6      	b.n	80065f2 <_dtoa_r+0x902>
 8006604:	9b02      	ldr	r3, [sp, #8]
 8006606:	e7f4      	b.n	80065f2 <_dtoa_r+0x902>
 8006608:	d085      	beq.n	8006516 <_dtoa_r+0x826>
 800660a:	4618      	mov	r0, r3
 800660c:	301c      	adds	r0, #28
 800660e:	e77d      	b.n	800650c <_dtoa_r+0x81c>
 8006610:	40240000 	.word	0x40240000
 8006614:	9b01      	ldr	r3, [sp, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	dc38      	bgt.n	800668c <_dtoa_r+0x99c>
 800661a:	9b05      	ldr	r3, [sp, #20]
 800661c:	2b02      	cmp	r3, #2
 800661e:	dd35      	ble.n	800668c <_dtoa_r+0x99c>
 8006620:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006624:	f1b9 0f00 	cmp.w	r9, #0
 8006628:	d10d      	bne.n	8006646 <_dtoa_r+0x956>
 800662a:	4631      	mov	r1, r6
 800662c:	464b      	mov	r3, r9
 800662e:	2205      	movs	r2, #5
 8006630:	4620      	mov	r0, r4
 8006632:	f000 f9c5 	bl	80069c0 <__multadd>
 8006636:	4601      	mov	r1, r0
 8006638:	4606      	mov	r6, r0
 800663a:	4658      	mov	r0, fp
 800663c:	f000 fbdc 	bl	8006df8 <__mcmp>
 8006640:	2800      	cmp	r0, #0
 8006642:	f73f adbd 	bgt.w	80061c0 <_dtoa_r+0x4d0>
 8006646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006648:	9d00      	ldr	r5, [sp, #0]
 800664a:	ea6f 0a03 	mvn.w	sl, r3
 800664e:	f04f 0800 	mov.w	r8, #0
 8006652:	4631      	mov	r1, r6
 8006654:	4620      	mov	r0, r4
 8006656:	f000 f991 	bl	800697c <_Bfree>
 800665a:	2f00      	cmp	r7, #0
 800665c:	f43f aeb4 	beq.w	80063c8 <_dtoa_r+0x6d8>
 8006660:	f1b8 0f00 	cmp.w	r8, #0
 8006664:	d005      	beq.n	8006672 <_dtoa_r+0x982>
 8006666:	45b8      	cmp	r8, r7
 8006668:	d003      	beq.n	8006672 <_dtoa_r+0x982>
 800666a:	4641      	mov	r1, r8
 800666c:	4620      	mov	r0, r4
 800666e:	f000 f985 	bl	800697c <_Bfree>
 8006672:	4639      	mov	r1, r7
 8006674:	4620      	mov	r0, r4
 8006676:	f000 f981 	bl	800697c <_Bfree>
 800667a:	e6a5      	b.n	80063c8 <_dtoa_r+0x6d8>
 800667c:	2600      	movs	r6, #0
 800667e:	4637      	mov	r7, r6
 8006680:	e7e1      	b.n	8006646 <_dtoa_r+0x956>
 8006682:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006684:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006688:	4637      	mov	r7, r6
 800668a:	e599      	b.n	80061c0 <_dtoa_r+0x4d0>
 800668c:	9b08      	ldr	r3, [sp, #32]
 800668e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80fd 	beq.w	8006892 <_dtoa_r+0xba2>
 8006698:	2d00      	cmp	r5, #0
 800669a:	dd05      	ble.n	80066a8 <_dtoa_r+0x9b8>
 800669c:	4639      	mov	r1, r7
 800669e:	462a      	mov	r2, r5
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 fb3d 	bl	8006d20 <__lshift>
 80066a6:	4607      	mov	r7, r0
 80066a8:	9b06      	ldr	r3, [sp, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d05c      	beq.n	8006768 <_dtoa_r+0xa78>
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 f923 	bl	80068fc <_Balloc>
 80066b6:	4605      	mov	r5, r0
 80066b8:	b928      	cbnz	r0, 80066c6 <_dtoa_r+0x9d6>
 80066ba:	4b80      	ldr	r3, [pc, #512]	; (80068bc <_dtoa_r+0xbcc>)
 80066bc:	4602      	mov	r2, r0
 80066be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066c2:	f7ff bb2e 	b.w	8005d22 <_dtoa_r+0x32>
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	3202      	adds	r2, #2
 80066ca:	0092      	lsls	r2, r2, #2
 80066cc:	f107 010c 	add.w	r1, r7, #12
 80066d0:	300c      	adds	r0, #12
 80066d2:	f000 f905 	bl	80068e0 <memcpy>
 80066d6:	2201      	movs	r2, #1
 80066d8:	4629      	mov	r1, r5
 80066da:	4620      	mov	r0, r4
 80066dc:	f000 fb20 	bl	8006d20 <__lshift>
 80066e0:	9b00      	ldr	r3, [sp, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	9b00      	ldr	r3, [sp, #0]
 80066e8:	444b      	add	r3, r9
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	9b02      	ldr	r3, [sp, #8]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	46b8      	mov	r8, r7
 80066f4:	9306      	str	r3, [sp, #24]
 80066f6:	4607      	mov	r7, r0
 80066f8:	9b01      	ldr	r3, [sp, #4]
 80066fa:	4631      	mov	r1, r6
 80066fc:	3b01      	subs	r3, #1
 80066fe:	4658      	mov	r0, fp
 8006700:	9302      	str	r3, [sp, #8]
 8006702:	f7ff fa67 	bl	8005bd4 <quorem>
 8006706:	4603      	mov	r3, r0
 8006708:	3330      	adds	r3, #48	; 0x30
 800670a:	9004      	str	r0, [sp, #16]
 800670c:	4641      	mov	r1, r8
 800670e:	4658      	mov	r0, fp
 8006710:	9308      	str	r3, [sp, #32]
 8006712:	f000 fb71 	bl	8006df8 <__mcmp>
 8006716:	463a      	mov	r2, r7
 8006718:	4681      	mov	r9, r0
 800671a:	4631      	mov	r1, r6
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fb87 	bl	8006e30 <__mdiff>
 8006722:	68c2      	ldr	r2, [r0, #12]
 8006724:	9b08      	ldr	r3, [sp, #32]
 8006726:	4605      	mov	r5, r0
 8006728:	bb02      	cbnz	r2, 800676c <_dtoa_r+0xa7c>
 800672a:	4601      	mov	r1, r0
 800672c:	4658      	mov	r0, fp
 800672e:	f000 fb63 	bl	8006df8 <__mcmp>
 8006732:	9b08      	ldr	r3, [sp, #32]
 8006734:	4602      	mov	r2, r0
 8006736:	4629      	mov	r1, r5
 8006738:	4620      	mov	r0, r4
 800673a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800673e:	f000 f91d 	bl	800697c <_Bfree>
 8006742:	9b05      	ldr	r3, [sp, #20]
 8006744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006746:	9d01      	ldr	r5, [sp, #4]
 8006748:	ea43 0102 	orr.w	r1, r3, r2
 800674c:	9b06      	ldr	r3, [sp, #24]
 800674e:	430b      	orrs	r3, r1
 8006750:	9b08      	ldr	r3, [sp, #32]
 8006752:	d10d      	bne.n	8006770 <_dtoa_r+0xa80>
 8006754:	2b39      	cmp	r3, #57	; 0x39
 8006756:	d029      	beq.n	80067ac <_dtoa_r+0xabc>
 8006758:	f1b9 0f00 	cmp.w	r9, #0
 800675c:	dd01      	ble.n	8006762 <_dtoa_r+0xa72>
 800675e:	9b04      	ldr	r3, [sp, #16]
 8006760:	3331      	adds	r3, #49	; 0x31
 8006762:	9a02      	ldr	r2, [sp, #8]
 8006764:	7013      	strb	r3, [r2, #0]
 8006766:	e774      	b.n	8006652 <_dtoa_r+0x962>
 8006768:	4638      	mov	r0, r7
 800676a:	e7b9      	b.n	80066e0 <_dtoa_r+0x9f0>
 800676c:	2201      	movs	r2, #1
 800676e:	e7e2      	b.n	8006736 <_dtoa_r+0xa46>
 8006770:	f1b9 0f00 	cmp.w	r9, #0
 8006774:	db06      	blt.n	8006784 <_dtoa_r+0xa94>
 8006776:	9905      	ldr	r1, [sp, #20]
 8006778:	ea41 0909 	orr.w	r9, r1, r9
 800677c:	9906      	ldr	r1, [sp, #24]
 800677e:	ea59 0101 	orrs.w	r1, r9, r1
 8006782:	d120      	bne.n	80067c6 <_dtoa_r+0xad6>
 8006784:	2a00      	cmp	r2, #0
 8006786:	ddec      	ble.n	8006762 <_dtoa_r+0xa72>
 8006788:	4659      	mov	r1, fp
 800678a:	2201      	movs	r2, #1
 800678c:	4620      	mov	r0, r4
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	f000 fac6 	bl	8006d20 <__lshift>
 8006794:	4631      	mov	r1, r6
 8006796:	4683      	mov	fp, r0
 8006798:	f000 fb2e 	bl	8006df8 <__mcmp>
 800679c:	2800      	cmp	r0, #0
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	dc02      	bgt.n	80067a8 <_dtoa_r+0xab8>
 80067a2:	d1de      	bne.n	8006762 <_dtoa_r+0xa72>
 80067a4:	07da      	lsls	r2, r3, #31
 80067a6:	d5dc      	bpl.n	8006762 <_dtoa_r+0xa72>
 80067a8:	2b39      	cmp	r3, #57	; 0x39
 80067aa:	d1d8      	bne.n	800675e <_dtoa_r+0xa6e>
 80067ac:	9a02      	ldr	r2, [sp, #8]
 80067ae:	2339      	movs	r3, #57	; 0x39
 80067b0:	7013      	strb	r3, [r2, #0]
 80067b2:	462b      	mov	r3, r5
 80067b4:	461d      	mov	r5, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067bc:	2a39      	cmp	r2, #57	; 0x39
 80067be:	d050      	beq.n	8006862 <_dtoa_r+0xb72>
 80067c0:	3201      	adds	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e745      	b.n	8006652 <_dtoa_r+0x962>
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	dd03      	ble.n	80067d2 <_dtoa_r+0xae2>
 80067ca:	2b39      	cmp	r3, #57	; 0x39
 80067cc:	d0ee      	beq.n	80067ac <_dtoa_r+0xabc>
 80067ce:	3301      	adds	r3, #1
 80067d0:	e7c7      	b.n	8006762 <_dtoa_r+0xa72>
 80067d2:	9a01      	ldr	r2, [sp, #4]
 80067d4:	9907      	ldr	r1, [sp, #28]
 80067d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067da:	428a      	cmp	r2, r1
 80067dc:	d02a      	beq.n	8006834 <_dtoa_r+0xb44>
 80067de:	4659      	mov	r1, fp
 80067e0:	2300      	movs	r3, #0
 80067e2:	220a      	movs	r2, #10
 80067e4:	4620      	mov	r0, r4
 80067e6:	f000 f8eb 	bl	80069c0 <__multadd>
 80067ea:	45b8      	cmp	r8, r7
 80067ec:	4683      	mov	fp, r0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	f04f 020a 	mov.w	r2, #10
 80067f6:	4641      	mov	r1, r8
 80067f8:	4620      	mov	r0, r4
 80067fa:	d107      	bne.n	800680c <_dtoa_r+0xb1c>
 80067fc:	f000 f8e0 	bl	80069c0 <__multadd>
 8006800:	4680      	mov	r8, r0
 8006802:	4607      	mov	r7, r0
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	3301      	adds	r3, #1
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	e775      	b.n	80066f8 <_dtoa_r+0xa08>
 800680c:	f000 f8d8 	bl	80069c0 <__multadd>
 8006810:	4639      	mov	r1, r7
 8006812:	4680      	mov	r8, r0
 8006814:	2300      	movs	r3, #0
 8006816:	220a      	movs	r2, #10
 8006818:	4620      	mov	r0, r4
 800681a:	f000 f8d1 	bl	80069c0 <__multadd>
 800681e:	4607      	mov	r7, r0
 8006820:	e7f0      	b.n	8006804 <_dtoa_r+0xb14>
 8006822:	f1b9 0f00 	cmp.w	r9, #0
 8006826:	9a00      	ldr	r2, [sp, #0]
 8006828:	bfcc      	ite	gt
 800682a:	464d      	movgt	r5, r9
 800682c:	2501      	movle	r5, #1
 800682e:	4415      	add	r5, r2
 8006830:	f04f 0800 	mov.w	r8, #0
 8006834:	4659      	mov	r1, fp
 8006836:	2201      	movs	r2, #1
 8006838:	4620      	mov	r0, r4
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	f000 fa70 	bl	8006d20 <__lshift>
 8006840:	4631      	mov	r1, r6
 8006842:	4683      	mov	fp, r0
 8006844:	f000 fad8 	bl	8006df8 <__mcmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	dcb2      	bgt.n	80067b2 <_dtoa_r+0xac2>
 800684c:	d102      	bne.n	8006854 <_dtoa_r+0xb64>
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	07db      	lsls	r3, r3, #31
 8006852:	d4ae      	bmi.n	80067b2 <_dtoa_r+0xac2>
 8006854:	462b      	mov	r3, r5
 8006856:	461d      	mov	r5, r3
 8006858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800685c:	2a30      	cmp	r2, #48	; 0x30
 800685e:	d0fa      	beq.n	8006856 <_dtoa_r+0xb66>
 8006860:	e6f7      	b.n	8006652 <_dtoa_r+0x962>
 8006862:	9a00      	ldr	r2, [sp, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d1a5      	bne.n	80067b4 <_dtoa_r+0xac4>
 8006868:	f10a 0a01 	add.w	sl, sl, #1
 800686c:	2331      	movs	r3, #49	; 0x31
 800686e:	e779      	b.n	8006764 <_dtoa_r+0xa74>
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <_dtoa_r+0xbd0>)
 8006872:	f7ff baaf 	b.w	8005dd4 <_dtoa_r+0xe4>
 8006876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006878:	2b00      	cmp	r3, #0
 800687a:	f47f aa86 	bne.w	8005d8a <_dtoa_r+0x9a>
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <_dtoa_r+0xbd4>)
 8006880:	f7ff baa8 	b.w	8005dd4 <_dtoa_r+0xe4>
 8006884:	f1b9 0f00 	cmp.w	r9, #0
 8006888:	dc03      	bgt.n	8006892 <_dtoa_r+0xba2>
 800688a:	9b05      	ldr	r3, [sp, #20]
 800688c:	2b02      	cmp	r3, #2
 800688e:	f73f aec9 	bgt.w	8006624 <_dtoa_r+0x934>
 8006892:	9d00      	ldr	r5, [sp, #0]
 8006894:	4631      	mov	r1, r6
 8006896:	4658      	mov	r0, fp
 8006898:	f7ff f99c 	bl	8005bd4 <quorem>
 800689c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80068a0:	f805 3b01 	strb.w	r3, [r5], #1
 80068a4:	9a00      	ldr	r2, [sp, #0]
 80068a6:	1aaa      	subs	r2, r5, r2
 80068a8:	4591      	cmp	r9, r2
 80068aa:	ddba      	ble.n	8006822 <_dtoa_r+0xb32>
 80068ac:	4659      	mov	r1, fp
 80068ae:	2300      	movs	r3, #0
 80068b0:	220a      	movs	r2, #10
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 f884 	bl	80069c0 <__multadd>
 80068b8:	4683      	mov	fp, r0
 80068ba:	e7eb      	b.n	8006894 <_dtoa_r+0xba4>
 80068bc:	0800835b 	.word	0x0800835b
 80068c0:	080082b4 	.word	0x080082b4
 80068c4:	080082d8 	.word	0x080082d8

080068c8 <_localeconv_r>:
 80068c8:	4800      	ldr	r0, [pc, #0]	; (80068cc <_localeconv_r+0x4>)
 80068ca:	4770      	bx	lr
 80068cc:	20000164 	.word	0x20000164

080068d0 <malloc>:
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <malloc+0xc>)
 80068d2:	4601      	mov	r1, r0
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f000 bbef 	b.w	80070b8 <_malloc_r>
 80068da:	bf00      	nop
 80068dc:	20000010 	.word	0x20000010

080068e0 <memcpy>:
 80068e0:	440a      	add	r2, r1
 80068e2:	4291      	cmp	r1, r2
 80068e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80068e8:	d100      	bne.n	80068ec <memcpy+0xc>
 80068ea:	4770      	bx	lr
 80068ec:	b510      	push	{r4, lr}
 80068ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068f6:	4291      	cmp	r1, r2
 80068f8:	d1f9      	bne.n	80068ee <memcpy+0xe>
 80068fa:	bd10      	pop	{r4, pc}

080068fc <_Balloc>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	b976      	cbnz	r6, 8006924 <_Balloc+0x28>
 8006906:	2010      	movs	r0, #16
 8006908:	f7ff ffe2 	bl	80068d0 <malloc>
 800690c:	4602      	mov	r2, r0
 800690e:	6260      	str	r0, [r4, #36]	; 0x24
 8006910:	b920      	cbnz	r0, 800691c <_Balloc+0x20>
 8006912:	4b18      	ldr	r3, [pc, #96]	; (8006974 <_Balloc+0x78>)
 8006914:	4818      	ldr	r0, [pc, #96]	; (8006978 <_Balloc+0x7c>)
 8006916:	2166      	movs	r1, #102	; 0x66
 8006918:	f000 fd94 	bl	8007444 <__assert_func>
 800691c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006920:	6006      	str	r6, [r0, #0]
 8006922:	60c6      	str	r6, [r0, #12]
 8006924:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006926:	68f3      	ldr	r3, [r6, #12]
 8006928:	b183      	cbz	r3, 800694c <_Balloc+0x50>
 800692a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006932:	b9b8      	cbnz	r0, 8006964 <_Balloc+0x68>
 8006934:	2101      	movs	r1, #1
 8006936:	fa01 f605 	lsl.w	r6, r1, r5
 800693a:	1d72      	adds	r2, r6, #5
 800693c:	0092      	lsls	r2, r2, #2
 800693e:	4620      	mov	r0, r4
 8006940:	f000 fb5a 	bl	8006ff8 <_calloc_r>
 8006944:	b160      	cbz	r0, 8006960 <_Balloc+0x64>
 8006946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800694a:	e00e      	b.n	800696a <_Balloc+0x6e>
 800694c:	2221      	movs	r2, #33	; 0x21
 800694e:	2104      	movs	r1, #4
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fb51 	bl	8006ff8 <_calloc_r>
 8006956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006958:	60f0      	str	r0, [r6, #12]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e4      	bne.n	800692a <_Balloc+0x2e>
 8006960:	2000      	movs	r0, #0
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	6802      	ldr	r2, [r0, #0]
 8006966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800696a:	2300      	movs	r3, #0
 800696c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006970:	e7f7      	b.n	8006962 <_Balloc+0x66>
 8006972:	bf00      	nop
 8006974:	080082e5 	.word	0x080082e5
 8006978:	0800836c 	.word	0x0800836c

0800697c <_Bfree>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006980:	4605      	mov	r5, r0
 8006982:	460c      	mov	r4, r1
 8006984:	b976      	cbnz	r6, 80069a4 <_Bfree+0x28>
 8006986:	2010      	movs	r0, #16
 8006988:	f7ff ffa2 	bl	80068d0 <malloc>
 800698c:	4602      	mov	r2, r0
 800698e:	6268      	str	r0, [r5, #36]	; 0x24
 8006990:	b920      	cbnz	r0, 800699c <_Bfree+0x20>
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <_Bfree+0x3c>)
 8006994:	4809      	ldr	r0, [pc, #36]	; (80069bc <_Bfree+0x40>)
 8006996:	218a      	movs	r1, #138	; 0x8a
 8006998:	f000 fd54 	bl	8007444 <__assert_func>
 800699c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069a0:	6006      	str	r6, [r0, #0]
 80069a2:	60c6      	str	r6, [r0, #12]
 80069a4:	b13c      	cbz	r4, 80069b6 <_Bfree+0x3a>
 80069a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069a8:	6862      	ldr	r2, [r4, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069b0:	6021      	str	r1, [r4, #0]
 80069b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	080082e5 	.word	0x080082e5
 80069bc:	0800836c 	.word	0x0800836c

080069c0 <__multadd>:
 80069c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c4:	690e      	ldr	r6, [r1, #16]
 80069c6:	4607      	mov	r7, r0
 80069c8:	4698      	mov	r8, r3
 80069ca:	460c      	mov	r4, r1
 80069cc:	f101 0014 	add.w	r0, r1, #20
 80069d0:	2300      	movs	r3, #0
 80069d2:	6805      	ldr	r5, [r0, #0]
 80069d4:	b2a9      	uxth	r1, r5
 80069d6:	fb02 8101 	mla	r1, r2, r1, r8
 80069da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80069de:	0c2d      	lsrs	r5, r5, #16
 80069e0:	fb02 c505 	mla	r5, r2, r5, ip
 80069e4:	b289      	uxth	r1, r1
 80069e6:	3301      	adds	r3, #1
 80069e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80069ec:	429e      	cmp	r6, r3
 80069ee:	f840 1b04 	str.w	r1, [r0], #4
 80069f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80069f6:	dcec      	bgt.n	80069d2 <__multadd+0x12>
 80069f8:	f1b8 0f00 	cmp.w	r8, #0
 80069fc:	d022      	beq.n	8006a44 <__multadd+0x84>
 80069fe:	68a3      	ldr	r3, [r4, #8]
 8006a00:	42b3      	cmp	r3, r6
 8006a02:	dc19      	bgt.n	8006a38 <__multadd+0x78>
 8006a04:	6861      	ldr	r1, [r4, #4]
 8006a06:	4638      	mov	r0, r7
 8006a08:	3101      	adds	r1, #1
 8006a0a:	f7ff ff77 	bl	80068fc <_Balloc>
 8006a0e:	4605      	mov	r5, r0
 8006a10:	b928      	cbnz	r0, 8006a1e <__multadd+0x5e>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <__multadd+0x8c>)
 8006a16:	480e      	ldr	r0, [pc, #56]	; (8006a50 <__multadd+0x90>)
 8006a18:	21b5      	movs	r1, #181	; 0xb5
 8006a1a:	f000 fd13 	bl	8007444 <__assert_func>
 8006a1e:	6922      	ldr	r2, [r4, #16]
 8006a20:	3202      	adds	r2, #2
 8006a22:	f104 010c 	add.w	r1, r4, #12
 8006a26:	0092      	lsls	r2, r2, #2
 8006a28:	300c      	adds	r0, #12
 8006a2a:	f7ff ff59 	bl	80068e0 <memcpy>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff ffa3 	bl	800697c <_Bfree>
 8006a36:	462c      	mov	r4, r5
 8006a38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006a42:	6126      	str	r6, [r4, #16]
 8006a44:	4620      	mov	r0, r4
 8006a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4a:	bf00      	nop
 8006a4c:	0800835b 	.word	0x0800835b
 8006a50:	0800836c 	.word	0x0800836c

08006a54 <__hi0bits>:
 8006a54:	0c03      	lsrs	r3, r0, #16
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	b9d3      	cbnz	r3, 8006a90 <__hi0bits+0x3c>
 8006a5a:	0400      	lsls	r0, r0, #16
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a62:	bf04      	itt	eq
 8006a64:	0200      	lsleq	r0, r0, #8
 8006a66:	3308      	addeq	r3, #8
 8006a68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a6c:	bf04      	itt	eq
 8006a6e:	0100      	lsleq	r0, r0, #4
 8006a70:	3304      	addeq	r3, #4
 8006a72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a76:	bf04      	itt	eq
 8006a78:	0080      	lsleq	r0, r0, #2
 8006a7a:	3302      	addeq	r3, #2
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	db05      	blt.n	8006a8c <__hi0bits+0x38>
 8006a80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a84:	f103 0301 	add.w	r3, r3, #1
 8006a88:	bf08      	it	eq
 8006a8a:	2320      	moveq	r3, #32
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	4770      	bx	lr
 8006a90:	2300      	movs	r3, #0
 8006a92:	e7e4      	b.n	8006a5e <__hi0bits+0xa>

08006a94 <__lo0bits>:
 8006a94:	6803      	ldr	r3, [r0, #0]
 8006a96:	f013 0207 	ands.w	r2, r3, #7
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	d00b      	beq.n	8006ab6 <__lo0bits+0x22>
 8006a9e:	07da      	lsls	r2, r3, #31
 8006aa0:	d424      	bmi.n	8006aec <__lo0bits+0x58>
 8006aa2:	0798      	lsls	r0, r3, #30
 8006aa4:	bf49      	itett	mi
 8006aa6:	085b      	lsrmi	r3, r3, #1
 8006aa8:	089b      	lsrpl	r3, r3, #2
 8006aaa:	2001      	movmi	r0, #1
 8006aac:	600b      	strmi	r3, [r1, #0]
 8006aae:	bf5c      	itt	pl
 8006ab0:	600b      	strpl	r3, [r1, #0]
 8006ab2:	2002      	movpl	r0, #2
 8006ab4:	4770      	bx	lr
 8006ab6:	b298      	uxth	r0, r3
 8006ab8:	b9b0      	cbnz	r0, 8006ae8 <__lo0bits+0x54>
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	2010      	movs	r0, #16
 8006abe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ac2:	bf04      	itt	eq
 8006ac4:	0a1b      	lsreq	r3, r3, #8
 8006ac6:	3008      	addeq	r0, #8
 8006ac8:	071a      	lsls	r2, r3, #28
 8006aca:	bf04      	itt	eq
 8006acc:	091b      	lsreq	r3, r3, #4
 8006ace:	3004      	addeq	r0, #4
 8006ad0:	079a      	lsls	r2, r3, #30
 8006ad2:	bf04      	itt	eq
 8006ad4:	089b      	lsreq	r3, r3, #2
 8006ad6:	3002      	addeq	r0, #2
 8006ad8:	07da      	lsls	r2, r3, #31
 8006ada:	d403      	bmi.n	8006ae4 <__lo0bits+0x50>
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	f100 0001 	add.w	r0, r0, #1
 8006ae2:	d005      	beq.n	8006af0 <__lo0bits+0x5c>
 8006ae4:	600b      	str	r3, [r1, #0]
 8006ae6:	4770      	bx	lr
 8006ae8:	4610      	mov	r0, r2
 8006aea:	e7e8      	b.n	8006abe <__lo0bits+0x2a>
 8006aec:	2000      	movs	r0, #0
 8006aee:	4770      	bx	lr
 8006af0:	2020      	movs	r0, #32
 8006af2:	4770      	bx	lr

08006af4 <__i2b>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	460c      	mov	r4, r1
 8006af8:	2101      	movs	r1, #1
 8006afa:	f7ff feff 	bl	80068fc <_Balloc>
 8006afe:	4602      	mov	r2, r0
 8006b00:	b928      	cbnz	r0, 8006b0e <__i2b+0x1a>
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <__i2b+0x24>)
 8006b04:	4805      	ldr	r0, [pc, #20]	; (8006b1c <__i2b+0x28>)
 8006b06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b0a:	f000 fc9b 	bl	8007444 <__assert_func>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	6144      	str	r4, [r0, #20]
 8006b12:	6103      	str	r3, [r0, #16]
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	bf00      	nop
 8006b18:	0800835b 	.word	0x0800835b
 8006b1c:	0800836c 	.word	0x0800836c

08006b20 <__multiply>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	4614      	mov	r4, r2
 8006b26:	690a      	ldr	r2, [r1, #16]
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	bfb8      	it	lt
 8006b2e:	460b      	movlt	r3, r1
 8006b30:	460d      	mov	r5, r1
 8006b32:	bfbc      	itt	lt
 8006b34:	4625      	movlt	r5, r4
 8006b36:	461c      	movlt	r4, r3
 8006b38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006b3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b40:	68ab      	ldr	r3, [r5, #8]
 8006b42:	6869      	ldr	r1, [r5, #4]
 8006b44:	eb0a 0709 	add.w	r7, sl, r9
 8006b48:	42bb      	cmp	r3, r7
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	bfb8      	it	lt
 8006b4e:	3101      	addlt	r1, #1
 8006b50:	f7ff fed4 	bl	80068fc <_Balloc>
 8006b54:	b930      	cbnz	r0, 8006b64 <__multiply+0x44>
 8006b56:	4602      	mov	r2, r0
 8006b58:	4b42      	ldr	r3, [pc, #264]	; (8006c64 <__multiply+0x144>)
 8006b5a:	4843      	ldr	r0, [pc, #268]	; (8006c68 <__multiply+0x148>)
 8006b5c:	f240 115d 	movw	r1, #349	; 0x15d
 8006b60:	f000 fc70 	bl	8007444 <__assert_func>
 8006b64:	f100 0614 	add.w	r6, r0, #20
 8006b68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006b6c:	4633      	mov	r3, r6
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4543      	cmp	r3, r8
 8006b72:	d31e      	bcc.n	8006bb2 <__multiply+0x92>
 8006b74:	f105 0c14 	add.w	ip, r5, #20
 8006b78:	f104 0314 	add.w	r3, r4, #20
 8006b7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006b80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006b84:	9202      	str	r2, [sp, #8]
 8006b86:	ebac 0205 	sub.w	r2, ip, r5
 8006b8a:	3a15      	subs	r2, #21
 8006b8c:	f022 0203 	bic.w	r2, r2, #3
 8006b90:	3204      	adds	r2, #4
 8006b92:	f105 0115 	add.w	r1, r5, #21
 8006b96:	458c      	cmp	ip, r1
 8006b98:	bf38      	it	cc
 8006b9a:	2204      	movcc	r2, #4
 8006b9c:	9201      	str	r2, [sp, #4]
 8006b9e:	9a02      	ldr	r2, [sp, #8]
 8006ba0:	9303      	str	r3, [sp, #12]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d808      	bhi.n	8006bb8 <__multiply+0x98>
 8006ba6:	2f00      	cmp	r7, #0
 8006ba8:	dc55      	bgt.n	8006c56 <__multiply+0x136>
 8006baa:	6107      	str	r7, [r0, #16]
 8006bac:	b005      	add	sp, #20
 8006bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb2:	f843 2b04 	str.w	r2, [r3], #4
 8006bb6:	e7db      	b.n	8006b70 <__multiply+0x50>
 8006bb8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bbc:	f1ba 0f00 	cmp.w	sl, #0
 8006bc0:	d020      	beq.n	8006c04 <__multiply+0xe4>
 8006bc2:	f105 0e14 	add.w	lr, r5, #20
 8006bc6:	46b1      	mov	r9, r6
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006bce:	f8d9 b000 	ldr.w	fp, [r9]
 8006bd2:	b2a1      	uxth	r1, r4
 8006bd4:	fa1f fb8b 	uxth.w	fp, fp
 8006bd8:	fb0a b101 	mla	r1, sl, r1, fp
 8006bdc:	4411      	add	r1, r2
 8006bde:	f8d9 2000 	ldr.w	r2, [r9]
 8006be2:	0c24      	lsrs	r4, r4, #16
 8006be4:	0c12      	lsrs	r2, r2, #16
 8006be6:	fb0a 2404 	mla	r4, sl, r4, r2
 8006bea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006bee:	b289      	uxth	r1, r1
 8006bf0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006bf4:	45f4      	cmp	ip, lr
 8006bf6:	f849 1b04 	str.w	r1, [r9], #4
 8006bfa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006bfe:	d8e4      	bhi.n	8006bca <__multiply+0xaa>
 8006c00:	9901      	ldr	r1, [sp, #4]
 8006c02:	5072      	str	r2, [r6, r1]
 8006c04:	9a03      	ldr	r2, [sp, #12]
 8006c06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	f1b9 0f00 	cmp.w	r9, #0
 8006c10:	d01f      	beq.n	8006c52 <__multiply+0x132>
 8006c12:	6834      	ldr	r4, [r6, #0]
 8006c14:	f105 0114 	add.w	r1, r5, #20
 8006c18:	46b6      	mov	lr, r6
 8006c1a:	f04f 0a00 	mov.w	sl, #0
 8006c1e:	880a      	ldrh	r2, [r1, #0]
 8006c20:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c24:	fb09 b202 	mla	r2, r9, r2, fp
 8006c28:	4492      	add	sl, r2
 8006c2a:	b2a4      	uxth	r4, r4
 8006c2c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c30:	f84e 4b04 	str.w	r4, [lr], #4
 8006c34:	f851 4b04 	ldr.w	r4, [r1], #4
 8006c38:	f8be 2000 	ldrh.w	r2, [lr]
 8006c3c:	0c24      	lsrs	r4, r4, #16
 8006c3e:	fb09 2404 	mla	r4, r9, r4, r2
 8006c42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006c46:	458c      	cmp	ip, r1
 8006c48:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c4c:	d8e7      	bhi.n	8006c1e <__multiply+0xfe>
 8006c4e:	9a01      	ldr	r2, [sp, #4]
 8006c50:	50b4      	str	r4, [r6, r2]
 8006c52:	3604      	adds	r6, #4
 8006c54:	e7a3      	b.n	8006b9e <__multiply+0x7e>
 8006c56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1a5      	bne.n	8006baa <__multiply+0x8a>
 8006c5e:	3f01      	subs	r7, #1
 8006c60:	e7a1      	b.n	8006ba6 <__multiply+0x86>
 8006c62:	bf00      	nop
 8006c64:	0800835b 	.word	0x0800835b
 8006c68:	0800836c 	.word	0x0800836c

08006c6c <__pow5mult>:
 8006c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c70:	4615      	mov	r5, r2
 8006c72:	f012 0203 	ands.w	r2, r2, #3
 8006c76:	4606      	mov	r6, r0
 8006c78:	460f      	mov	r7, r1
 8006c7a:	d007      	beq.n	8006c8c <__pow5mult+0x20>
 8006c7c:	4c25      	ldr	r4, [pc, #148]	; (8006d14 <__pow5mult+0xa8>)
 8006c7e:	3a01      	subs	r2, #1
 8006c80:	2300      	movs	r3, #0
 8006c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c86:	f7ff fe9b 	bl	80069c0 <__multadd>
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	10ad      	asrs	r5, r5, #2
 8006c8e:	d03d      	beq.n	8006d0c <__pow5mult+0xa0>
 8006c90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c92:	b97c      	cbnz	r4, 8006cb4 <__pow5mult+0x48>
 8006c94:	2010      	movs	r0, #16
 8006c96:	f7ff fe1b 	bl	80068d0 <malloc>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6270      	str	r0, [r6, #36]	; 0x24
 8006c9e:	b928      	cbnz	r0, 8006cac <__pow5mult+0x40>
 8006ca0:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <__pow5mult+0xac>)
 8006ca2:	481e      	ldr	r0, [pc, #120]	; (8006d1c <__pow5mult+0xb0>)
 8006ca4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ca8:	f000 fbcc 	bl	8007444 <__assert_func>
 8006cac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cb0:	6004      	str	r4, [r0, #0]
 8006cb2:	60c4      	str	r4, [r0, #12]
 8006cb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cbc:	b94c      	cbnz	r4, 8006cd2 <__pow5mult+0x66>
 8006cbe:	f240 2171 	movw	r1, #625	; 0x271
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff ff16 	bl	8006af4 <__i2b>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cce:	4604      	mov	r4, r0
 8006cd0:	6003      	str	r3, [r0, #0]
 8006cd2:	f04f 0900 	mov.w	r9, #0
 8006cd6:	07eb      	lsls	r3, r5, #31
 8006cd8:	d50a      	bpl.n	8006cf0 <__pow5mult+0x84>
 8006cda:	4639      	mov	r1, r7
 8006cdc:	4622      	mov	r2, r4
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f7ff ff1e 	bl	8006b20 <__multiply>
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff fe47 	bl	800697c <_Bfree>
 8006cee:	4647      	mov	r7, r8
 8006cf0:	106d      	asrs	r5, r5, #1
 8006cf2:	d00b      	beq.n	8006d0c <__pow5mult+0xa0>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	b938      	cbnz	r0, 8006d08 <__pow5mult+0x9c>
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f7ff ff0f 	bl	8006b20 <__multiply>
 8006d02:	6020      	str	r0, [r4, #0]
 8006d04:	f8c0 9000 	str.w	r9, [r0]
 8006d08:	4604      	mov	r4, r0
 8006d0a:	e7e4      	b.n	8006cd6 <__pow5mult+0x6a>
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d12:	bf00      	nop
 8006d14:	080084c0 	.word	0x080084c0
 8006d18:	080082e5 	.word	0x080082e5
 8006d1c:	0800836c 	.word	0x0800836c

08006d20 <__lshift>:
 8006d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	460c      	mov	r4, r1
 8006d26:	6849      	ldr	r1, [r1, #4]
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d2e:	68a3      	ldr	r3, [r4, #8]
 8006d30:	4607      	mov	r7, r0
 8006d32:	4691      	mov	r9, r2
 8006d34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d38:	f108 0601 	add.w	r6, r8, #1
 8006d3c:	42b3      	cmp	r3, r6
 8006d3e:	db0b      	blt.n	8006d58 <__lshift+0x38>
 8006d40:	4638      	mov	r0, r7
 8006d42:	f7ff fddb 	bl	80068fc <_Balloc>
 8006d46:	4605      	mov	r5, r0
 8006d48:	b948      	cbnz	r0, 8006d5e <__lshift+0x3e>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <__lshift+0xd0>)
 8006d4e:	4829      	ldr	r0, [pc, #164]	; (8006df4 <__lshift+0xd4>)
 8006d50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d54:	f000 fb76 	bl	8007444 <__assert_func>
 8006d58:	3101      	adds	r1, #1
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	e7ee      	b.n	8006d3c <__lshift+0x1c>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f100 0114 	add.w	r1, r0, #20
 8006d64:	f100 0210 	add.w	r2, r0, #16
 8006d68:	4618      	mov	r0, r3
 8006d6a:	4553      	cmp	r3, sl
 8006d6c:	db33      	blt.n	8006dd6 <__lshift+0xb6>
 8006d6e:	6920      	ldr	r0, [r4, #16]
 8006d70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d74:	f104 0314 	add.w	r3, r4, #20
 8006d78:	f019 091f 	ands.w	r9, r9, #31
 8006d7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d84:	d02b      	beq.n	8006dde <__lshift+0xbe>
 8006d86:	f1c9 0e20 	rsb	lr, r9, #32
 8006d8a:	468a      	mov	sl, r1
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	fa00 f009 	lsl.w	r0, r0, r9
 8006d94:	4302      	orrs	r2, r0
 8006d96:	f84a 2b04 	str.w	r2, [sl], #4
 8006d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9e:	459c      	cmp	ip, r3
 8006da0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006da4:	d8f3      	bhi.n	8006d8e <__lshift+0x6e>
 8006da6:	ebac 0304 	sub.w	r3, ip, r4
 8006daa:	3b15      	subs	r3, #21
 8006dac:	f023 0303 	bic.w	r3, r3, #3
 8006db0:	3304      	adds	r3, #4
 8006db2:	f104 0015 	add.w	r0, r4, #21
 8006db6:	4584      	cmp	ip, r0
 8006db8:	bf38      	it	cc
 8006dba:	2304      	movcc	r3, #4
 8006dbc:	50ca      	str	r2, [r1, r3]
 8006dbe:	b10a      	cbz	r2, 8006dc4 <__lshift+0xa4>
 8006dc0:	f108 0602 	add.w	r6, r8, #2
 8006dc4:	3e01      	subs	r6, #1
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	612e      	str	r6, [r5, #16]
 8006dca:	4621      	mov	r1, r4
 8006dcc:	f7ff fdd6 	bl	800697c <_Bfree>
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dda:	3301      	adds	r3, #1
 8006ddc:	e7c5      	b.n	8006d6a <__lshift+0x4a>
 8006dde:	3904      	subs	r1, #4
 8006de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006de8:	459c      	cmp	ip, r3
 8006dea:	d8f9      	bhi.n	8006de0 <__lshift+0xc0>
 8006dec:	e7ea      	b.n	8006dc4 <__lshift+0xa4>
 8006dee:	bf00      	nop
 8006df0:	0800835b 	.word	0x0800835b
 8006df4:	0800836c 	.word	0x0800836c

08006df8 <__mcmp>:
 8006df8:	b530      	push	{r4, r5, lr}
 8006dfa:	6902      	ldr	r2, [r0, #16]
 8006dfc:	690c      	ldr	r4, [r1, #16]
 8006dfe:	1b12      	subs	r2, r2, r4
 8006e00:	d10e      	bne.n	8006e20 <__mcmp+0x28>
 8006e02:	f100 0314 	add.w	r3, r0, #20
 8006e06:	3114      	adds	r1, #20
 8006e08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e18:	42a5      	cmp	r5, r4
 8006e1a:	d003      	beq.n	8006e24 <__mcmp+0x2c>
 8006e1c:	d305      	bcc.n	8006e2a <__mcmp+0x32>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4610      	mov	r0, r2
 8006e22:	bd30      	pop	{r4, r5, pc}
 8006e24:	4283      	cmp	r3, r0
 8006e26:	d3f3      	bcc.n	8006e10 <__mcmp+0x18>
 8006e28:	e7fa      	b.n	8006e20 <__mcmp+0x28>
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2e:	e7f7      	b.n	8006e20 <__mcmp+0x28>

08006e30 <__mdiff>:
 8006e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	460c      	mov	r4, r1
 8006e36:	4606      	mov	r6, r0
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4617      	mov	r7, r2
 8006e3e:	f7ff ffdb 	bl	8006df8 <__mcmp>
 8006e42:	1e05      	subs	r5, r0, #0
 8006e44:	d110      	bne.n	8006e68 <__mdiff+0x38>
 8006e46:	4629      	mov	r1, r5
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7ff fd57 	bl	80068fc <_Balloc>
 8006e4e:	b930      	cbnz	r0, 8006e5e <__mdiff+0x2e>
 8006e50:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <__mdiff+0x108>)
 8006e52:	4602      	mov	r2, r0
 8006e54:	f240 2132 	movw	r1, #562	; 0x232
 8006e58:	4838      	ldr	r0, [pc, #224]	; (8006f3c <__mdiff+0x10c>)
 8006e5a:	f000 faf3 	bl	8007444 <__assert_func>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e68:	bfa4      	itt	ge
 8006e6a:	463b      	movge	r3, r7
 8006e6c:	4627      	movge	r7, r4
 8006e6e:	4630      	mov	r0, r6
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	bfa6      	itte	ge
 8006e74:	461c      	movge	r4, r3
 8006e76:	2500      	movge	r5, #0
 8006e78:	2501      	movlt	r5, #1
 8006e7a:	f7ff fd3f 	bl	80068fc <_Balloc>
 8006e7e:	b920      	cbnz	r0, 8006e8a <__mdiff+0x5a>
 8006e80:	4b2d      	ldr	r3, [pc, #180]	; (8006f38 <__mdiff+0x108>)
 8006e82:	4602      	mov	r2, r0
 8006e84:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e88:	e7e6      	b.n	8006e58 <__mdiff+0x28>
 8006e8a:	693e      	ldr	r6, [r7, #16]
 8006e8c:	60c5      	str	r5, [r0, #12]
 8006e8e:	6925      	ldr	r5, [r4, #16]
 8006e90:	f107 0114 	add.w	r1, r7, #20
 8006e94:	f104 0914 	add.w	r9, r4, #20
 8006e98:	f100 0e14 	add.w	lr, r0, #20
 8006e9c:	f107 0210 	add.w	r2, r7, #16
 8006ea0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006ea4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006ea8:	46f2      	mov	sl, lr
 8006eaa:	2700      	movs	r7, #0
 8006eac:	f859 3b04 	ldr.w	r3, [r9], #4
 8006eb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006eb4:	fa1f f883 	uxth.w	r8, r3
 8006eb8:	fa17 f78b 	uxtah	r7, r7, fp
 8006ebc:	0c1b      	lsrs	r3, r3, #16
 8006ebe:	eba7 0808 	sub.w	r8, r7, r8
 8006ec2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ec6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006eca:	fa1f f888 	uxth.w	r8, r8
 8006ece:	141f      	asrs	r7, r3, #16
 8006ed0:	454d      	cmp	r5, r9
 8006ed2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ed6:	f84a 3b04 	str.w	r3, [sl], #4
 8006eda:	d8e7      	bhi.n	8006eac <__mdiff+0x7c>
 8006edc:	1b2b      	subs	r3, r5, r4
 8006ede:	3b15      	subs	r3, #21
 8006ee0:	f023 0303 	bic.w	r3, r3, #3
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	3415      	adds	r4, #21
 8006ee8:	42a5      	cmp	r5, r4
 8006eea:	bf38      	it	cc
 8006eec:	2304      	movcc	r3, #4
 8006eee:	4419      	add	r1, r3
 8006ef0:	4473      	add	r3, lr
 8006ef2:	469e      	mov	lr, r3
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	4565      	cmp	r5, ip
 8006ef8:	d30e      	bcc.n	8006f18 <__mdiff+0xe8>
 8006efa:	f10c 0203 	add.w	r2, ip, #3
 8006efe:	1a52      	subs	r2, r2, r1
 8006f00:	f022 0203 	bic.w	r2, r2, #3
 8006f04:	3903      	subs	r1, #3
 8006f06:	458c      	cmp	ip, r1
 8006f08:	bf38      	it	cc
 8006f0a:	2200      	movcc	r2, #0
 8006f0c:	441a      	add	r2, r3
 8006f0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f12:	b17b      	cbz	r3, 8006f34 <__mdiff+0x104>
 8006f14:	6106      	str	r6, [r0, #16]
 8006f16:	e7a5      	b.n	8006e64 <__mdiff+0x34>
 8006f18:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f1c:	fa17 f488 	uxtah	r4, r7, r8
 8006f20:	1422      	asrs	r2, r4, #16
 8006f22:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006f26:	b2a4      	uxth	r4, r4
 8006f28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006f2c:	f84e 4b04 	str.w	r4, [lr], #4
 8006f30:	1417      	asrs	r7, r2, #16
 8006f32:	e7e0      	b.n	8006ef6 <__mdiff+0xc6>
 8006f34:	3e01      	subs	r6, #1
 8006f36:	e7ea      	b.n	8006f0e <__mdiff+0xde>
 8006f38:	0800835b 	.word	0x0800835b
 8006f3c:	0800836c 	.word	0x0800836c

08006f40 <__d2b>:
 8006f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4689      	mov	r9, r1
 8006f46:	2101      	movs	r1, #1
 8006f48:	ec57 6b10 	vmov	r6, r7, d0
 8006f4c:	4690      	mov	r8, r2
 8006f4e:	f7ff fcd5 	bl	80068fc <_Balloc>
 8006f52:	4604      	mov	r4, r0
 8006f54:	b930      	cbnz	r0, 8006f64 <__d2b+0x24>
 8006f56:	4602      	mov	r2, r0
 8006f58:	4b25      	ldr	r3, [pc, #148]	; (8006ff0 <__d2b+0xb0>)
 8006f5a:	4826      	ldr	r0, [pc, #152]	; (8006ff4 <__d2b+0xb4>)
 8006f5c:	f240 310a 	movw	r1, #778	; 0x30a
 8006f60:	f000 fa70 	bl	8007444 <__assert_func>
 8006f64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f6c:	bb35      	cbnz	r5, 8006fbc <__d2b+0x7c>
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	d028      	beq.n	8006fc6 <__d2b+0x86>
 8006f74:	4668      	mov	r0, sp
 8006f76:	9600      	str	r6, [sp, #0]
 8006f78:	f7ff fd8c 	bl	8006a94 <__lo0bits>
 8006f7c:	9900      	ldr	r1, [sp, #0]
 8006f7e:	b300      	cbz	r0, 8006fc2 <__d2b+0x82>
 8006f80:	9a01      	ldr	r2, [sp, #4]
 8006f82:	f1c0 0320 	rsb	r3, r0, #32
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	40c2      	lsrs	r2, r0
 8006f8e:	6163      	str	r3, [r4, #20]
 8006f90:	9201      	str	r2, [sp, #4]
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	61a3      	str	r3, [r4, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bf14      	ite	ne
 8006f9a:	2202      	movne	r2, #2
 8006f9c:	2201      	moveq	r2, #1
 8006f9e:	6122      	str	r2, [r4, #16]
 8006fa0:	b1d5      	cbz	r5, 8006fd8 <__d2b+0x98>
 8006fa2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fa6:	4405      	add	r5, r0
 8006fa8:	f8c9 5000 	str.w	r5, [r9]
 8006fac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fb0:	f8c8 0000 	str.w	r0, [r8]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	b003      	add	sp, #12
 8006fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc0:	e7d5      	b.n	8006f6e <__d2b+0x2e>
 8006fc2:	6161      	str	r1, [r4, #20]
 8006fc4:	e7e5      	b.n	8006f92 <__d2b+0x52>
 8006fc6:	a801      	add	r0, sp, #4
 8006fc8:	f7ff fd64 	bl	8006a94 <__lo0bits>
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	6163      	str	r3, [r4, #20]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	6122      	str	r2, [r4, #16]
 8006fd4:	3020      	adds	r0, #32
 8006fd6:	e7e3      	b.n	8006fa0 <__d2b+0x60>
 8006fd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fe0:	f8c9 0000 	str.w	r0, [r9]
 8006fe4:	6918      	ldr	r0, [r3, #16]
 8006fe6:	f7ff fd35 	bl	8006a54 <__hi0bits>
 8006fea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fee:	e7df      	b.n	8006fb0 <__d2b+0x70>
 8006ff0:	0800835b 	.word	0x0800835b
 8006ff4:	0800836c 	.word	0x0800836c

08006ff8 <_calloc_r>:
 8006ff8:	b513      	push	{r0, r1, r4, lr}
 8006ffa:	434a      	muls	r2, r1
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	9201      	str	r2, [sp, #4]
 8007000:	f000 f85a 	bl	80070b8 <_malloc_r>
 8007004:	4604      	mov	r4, r0
 8007006:	b118      	cbz	r0, 8007010 <_calloc_r+0x18>
 8007008:	9a01      	ldr	r2, [sp, #4]
 800700a:	2100      	movs	r1, #0
 800700c:	f7fe f950 	bl	80052b0 <memset>
 8007010:	4620      	mov	r0, r4
 8007012:	b002      	add	sp, #8
 8007014:	bd10      	pop	{r4, pc}
	...

08007018 <_free_r>:
 8007018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800701a:	2900      	cmp	r1, #0
 800701c:	d048      	beq.n	80070b0 <_free_r+0x98>
 800701e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007022:	9001      	str	r0, [sp, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f1a1 0404 	sub.w	r4, r1, #4
 800702a:	bfb8      	it	lt
 800702c:	18e4      	addlt	r4, r4, r3
 800702e:	f000 fa65 	bl	80074fc <__malloc_lock>
 8007032:	4a20      	ldr	r2, [pc, #128]	; (80070b4 <_free_r+0x9c>)
 8007034:	9801      	ldr	r0, [sp, #4]
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	4615      	mov	r5, r2
 800703a:	b933      	cbnz	r3, 800704a <_free_r+0x32>
 800703c:	6063      	str	r3, [r4, #4]
 800703e:	6014      	str	r4, [r2, #0]
 8007040:	b003      	add	sp, #12
 8007042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007046:	f000 ba5f 	b.w	8007508 <__malloc_unlock>
 800704a:	42a3      	cmp	r3, r4
 800704c:	d90b      	bls.n	8007066 <_free_r+0x4e>
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	1862      	adds	r2, r4, r1
 8007052:	4293      	cmp	r3, r2
 8007054:	bf04      	itt	eq
 8007056:	681a      	ldreq	r2, [r3, #0]
 8007058:	685b      	ldreq	r3, [r3, #4]
 800705a:	6063      	str	r3, [r4, #4]
 800705c:	bf04      	itt	eq
 800705e:	1852      	addeq	r2, r2, r1
 8007060:	6022      	streq	r2, [r4, #0]
 8007062:	602c      	str	r4, [r5, #0]
 8007064:	e7ec      	b.n	8007040 <_free_r+0x28>
 8007066:	461a      	mov	r2, r3
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b10b      	cbz	r3, 8007070 <_free_r+0x58>
 800706c:	42a3      	cmp	r3, r4
 800706e:	d9fa      	bls.n	8007066 <_free_r+0x4e>
 8007070:	6811      	ldr	r1, [r2, #0]
 8007072:	1855      	adds	r5, r2, r1
 8007074:	42a5      	cmp	r5, r4
 8007076:	d10b      	bne.n	8007090 <_free_r+0x78>
 8007078:	6824      	ldr	r4, [r4, #0]
 800707a:	4421      	add	r1, r4
 800707c:	1854      	adds	r4, r2, r1
 800707e:	42a3      	cmp	r3, r4
 8007080:	6011      	str	r1, [r2, #0]
 8007082:	d1dd      	bne.n	8007040 <_free_r+0x28>
 8007084:	681c      	ldr	r4, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	6053      	str	r3, [r2, #4]
 800708a:	4421      	add	r1, r4
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	e7d7      	b.n	8007040 <_free_r+0x28>
 8007090:	d902      	bls.n	8007098 <_free_r+0x80>
 8007092:	230c      	movs	r3, #12
 8007094:	6003      	str	r3, [r0, #0]
 8007096:	e7d3      	b.n	8007040 <_free_r+0x28>
 8007098:	6825      	ldr	r5, [r4, #0]
 800709a:	1961      	adds	r1, r4, r5
 800709c:	428b      	cmp	r3, r1
 800709e:	bf04      	itt	eq
 80070a0:	6819      	ldreq	r1, [r3, #0]
 80070a2:	685b      	ldreq	r3, [r3, #4]
 80070a4:	6063      	str	r3, [r4, #4]
 80070a6:	bf04      	itt	eq
 80070a8:	1949      	addeq	r1, r1, r5
 80070aa:	6021      	streq	r1, [r4, #0]
 80070ac:	6054      	str	r4, [r2, #4]
 80070ae:	e7c7      	b.n	8007040 <_free_r+0x28>
 80070b0:	b003      	add	sp, #12
 80070b2:	bd30      	pop	{r4, r5, pc}
 80070b4:	2000060c 	.word	0x2000060c

080070b8 <_malloc_r>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	1ccd      	adds	r5, r1, #3
 80070bc:	f025 0503 	bic.w	r5, r5, #3
 80070c0:	3508      	adds	r5, #8
 80070c2:	2d0c      	cmp	r5, #12
 80070c4:	bf38      	it	cc
 80070c6:	250c      	movcc	r5, #12
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	4606      	mov	r6, r0
 80070cc:	db01      	blt.n	80070d2 <_malloc_r+0x1a>
 80070ce:	42a9      	cmp	r1, r5
 80070d0:	d903      	bls.n	80070da <_malloc_r+0x22>
 80070d2:	230c      	movs	r3, #12
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	2000      	movs	r0, #0
 80070d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070da:	f000 fa0f 	bl	80074fc <__malloc_lock>
 80070de:	4921      	ldr	r1, [pc, #132]	; (8007164 <_malloc_r+0xac>)
 80070e0:	680a      	ldr	r2, [r1, #0]
 80070e2:	4614      	mov	r4, r2
 80070e4:	b99c      	cbnz	r4, 800710e <_malloc_r+0x56>
 80070e6:	4f20      	ldr	r7, [pc, #128]	; (8007168 <_malloc_r+0xb0>)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	b923      	cbnz	r3, 80070f6 <_malloc_r+0x3e>
 80070ec:	4621      	mov	r1, r4
 80070ee:	4630      	mov	r0, r6
 80070f0:	f000 f998 	bl	8007424 <_sbrk_r>
 80070f4:	6038      	str	r0, [r7, #0]
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	f000 f993 	bl	8007424 <_sbrk_r>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d123      	bne.n	800714a <_malloc_r+0x92>
 8007102:	230c      	movs	r3, #12
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	4630      	mov	r0, r6
 8007108:	f000 f9fe 	bl	8007508 <__malloc_unlock>
 800710c:	e7e3      	b.n	80070d6 <_malloc_r+0x1e>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	1b5b      	subs	r3, r3, r5
 8007112:	d417      	bmi.n	8007144 <_malloc_r+0x8c>
 8007114:	2b0b      	cmp	r3, #11
 8007116:	d903      	bls.n	8007120 <_malloc_r+0x68>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	441c      	add	r4, r3
 800711c:	6025      	str	r5, [r4, #0]
 800711e:	e004      	b.n	800712a <_malloc_r+0x72>
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	42a2      	cmp	r2, r4
 8007124:	bf0c      	ite	eq
 8007126:	600b      	streq	r3, [r1, #0]
 8007128:	6053      	strne	r3, [r2, #4]
 800712a:	4630      	mov	r0, r6
 800712c:	f000 f9ec 	bl	8007508 <__malloc_unlock>
 8007130:	f104 000b 	add.w	r0, r4, #11
 8007134:	1d23      	adds	r3, r4, #4
 8007136:	f020 0007 	bic.w	r0, r0, #7
 800713a:	1ac2      	subs	r2, r0, r3
 800713c:	d0cc      	beq.n	80070d8 <_malloc_r+0x20>
 800713e:	1a1b      	subs	r3, r3, r0
 8007140:	50a3      	str	r3, [r4, r2]
 8007142:	e7c9      	b.n	80070d8 <_malloc_r+0x20>
 8007144:	4622      	mov	r2, r4
 8007146:	6864      	ldr	r4, [r4, #4]
 8007148:	e7cc      	b.n	80070e4 <_malloc_r+0x2c>
 800714a:	1cc4      	adds	r4, r0, #3
 800714c:	f024 0403 	bic.w	r4, r4, #3
 8007150:	42a0      	cmp	r0, r4
 8007152:	d0e3      	beq.n	800711c <_malloc_r+0x64>
 8007154:	1a21      	subs	r1, r4, r0
 8007156:	4630      	mov	r0, r6
 8007158:	f000 f964 	bl	8007424 <_sbrk_r>
 800715c:	3001      	adds	r0, #1
 800715e:	d1dd      	bne.n	800711c <_malloc_r+0x64>
 8007160:	e7cf      	b.n	8007102 <_malloc_r+0x4a>
 8007162:	bf00      	nop
 8007164:	2000060c 	.word	0x2000060c
 8007168:	20000610 	.word	0x20000610

0800716c <__ssputs_r>:
 800716c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	688e      	ldr	r6, [r1, #8]
 8007172:	429e      	cmp	r6, r3
 8007174:	4682      	mov	sl, r0
 8007176:	460c      	mov	r4, r1
 8007178:	4690      	mov	r8, r2
 800717a:	461f      	mov	r7, r3
 800717c:	d838      	bhi.n	80071f0 <__ssputs_r+0x84>
 800717e:	898a      	ldrh	r2, [r1, #12]
 8007180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007184:	d032      	beq.n	80071ec <__ssputs_r+0x80>
 8007186:	6825      	ldr	r5, [r4, #0]
 8007188:	6909      	ldr	r1, [r1, #16]
 800718a:	eba5 0901 	sub.w	r9, r5, r1
 800718e:	6965      	ldr	r5, [r4, #20]
 8007190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007198:	3301      	adds	r3, #1
 800719a:	444b      	add	r3, r9
 800719c:	106d      	asrs	r5, r5, #1
 800719e:	429d      	cmp	r5, r3
 80071a0:	bf38      	it	cc
 80071a2:	461d      	movcc	r5, r3
 80071a4:	0553      	lsls	r3, r2, #21
 80071a6:	d531      	bpl.n	800720c <__ssputs_r+0xa0>
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7ff ff85 	bl	80070b8 <_malloc_r>
 80071ae:	4606      	mov	r6, r0
 80071b0:	b950      	cbnz	r0, 80071c8 <__ssputs_r+0x5c>
 80071b2:	230c      	movs	r3, #12
 80071b4:	f8ca 3000 	str.w	r3, [sl]
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c8:	6921      	ldr	r1, [r4, #16]
 80071ca:	464a      	mov	r2, r9
 80071cc:	f7ff fb88 	bl	80068e0 <memcpy>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	6126      	str	r6, [r4, #16]
 80071de:	6165      	str	r5, [r4, #20]
 80071e0:	444e      	add	r6, r9
 80071e2:	eba5 0509 	sub.w	r5, r5, r9
 80071e6:	6026      	str	r6, [r4, #0]
 80071e8:	60a5      	str	r5, [r4, #8]
 80071ea:	463e      	mov	r6, r7
 80071ec:	42be      	cmp	r6, r7
 80071ee:	d900      	bls.n	80071f2 <__ssputs_r+0x86>
 80071f0:	463e      	mov	r6, r7
 80071f2:	4632      	mov	r2, r6
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	4641      	mov	r1, r8
 80071f8:	f000 f966 	bl	80074c8 <memmove>
 80071fc:	68a3      	ldr	r3, [r4, #8]
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	1b9b      	subs	r3, r3, r6
 8007202:	4432      	add	r2, r6
 8007204:	60a3      	str	r3, [r4, #8]
 8007206:	6022      	str	r2, [r4, #0]
 8007208:	2000      	movs	r0, #0
 800720a:	e7db      	b.n	80071c4 <__ssputs_r+0x58>
 800720c:	462a      	mov	r2, r5
 800720e:	f000 f981 	bl	8007514 <_realloc_r>
 8007212:	4606      	mov	r6, r0
 8007214:	2800      	cmp	r0, #0
 8007216:	d1e1      	bne.n	80071dc <__ssputs_r+0x70>
 8007218:	6921      	ldr	r1, [r4, #16]
 800721a:	4650      	mov	r0, sl
 800721c:	f7ff fefc 	bl	8007018 <_free_r>
 8007220:	e7c7      	b.n	80071b2 <__ssputs_r+0x46>
	...

08007224 <_svfiprintf_r>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	4698      	mov	r8, r3
 800722a:	898b      	ldrh	r3, [r1, #12]
 800722c:	061b      	lsls	r3, r3, #24
 800722e:	b09d      	sub	sp, #116	; 0x74
 8007230:	4607      	mov	r7, r0
 8007232:	460d      	mov	r5, r1
 8007234:	4614      	mov	r4, r2
 8007236:	d50e      	bpl.n	8007256 <_svfiprintf_r+0x32>
 8007238:	690b      	ldr	r3, [r1, #16]
 800723a:	b963      	cbnz	r3, 8007256 <_svfiprintf_r+0x32>
 800723c:	2140      	movs	r1, #64	; 0x40
 800723e:	f7ff ff3b 	bl	80070b8 <_malloc_r>
 8007242:	6028      	str	r0, [r5, #0]
 8007244:	6128      	str	r0, [r5, #16]
 8007246:	b920      	cbnz	r0, 8007252 <_svfiprintf_r+0x2e>
 8007248:	230c      	movs	r3, #12
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	e0d1      	b.n	80073f6 <_svfiprintf_r+0x1d2>
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	616b      	str	r3, [r5, #20]
 8007256:	2300      	movs	r3, #0
 8007258:	9309      	str	r3, [sp, #36]	; 0x24
 800725a:	2320      	movs	r3, #32
 800725c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007260:	f8cd 800c 	str.w	r8, [sp, #12]
 8007264:	2330      	movs	r3, #48	; 0x30
 8007266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007410 <_svfiprintf_r+0x1ec>
 800726a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800726e:	f04f 0901 	mov.w	r9, #1
 8007272:	4623      	mov	r3, r4
 8007274:	469a      	mov	sl, r3
 8007276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800727a:	b10a      	cbz	r2, 8007280 <_svfiprintf_r+0x5c>
 800727c:	2a25      	cmp	r2, #37	; 0x25
 800727e:	d1f9      	bne.n	8007274 <_svfiprintf_r+0x50>
 8007280:	ebba 0b04 	subs.w	fp, sl, r4
 8007284:	d00b      	beq.n	800729e <_svfiprintf_r+0x7a>
 8007286:	465b      	mov	r3, fp
 8007288:	4622      	mov	r2, r4
 800728a:	4629      	mov	r1, r5
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff ff6d 	bl	800716c <__ssputs_r>
 8007292:	3001      	adds	r0, #1
 8007294:	f000 80aa 	beq.w	80073ec <_svfiprintf_r+0x1c8>
 8007298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800729a:	445a      	add	r2, fp
 800729c:	9209      	str	r2, [sp, #36]	; 0x24
 800729e:	f89a 3000 	ldrb.w	r3, [sl]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80a2 	beq.w	80073ec <_svfiprintf_r+0x1c8>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b2:	f10a 0a01 	add.w	sl, sl, #1
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	9307      	str	r3, [sp, #28]
 80072ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072be:	931a      	str	r3, [sp, #104]	; 0x68
 80072c0:	4654      	mov	r4, sl
 80072c2:	2205      	movs	r2, #5
 80072c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c8:	4851      	ldr	r0, [pc, #324]	; (8007410 <_svfiprintf_r+0x1ec>)
 80072ca:	f7f8 ffa9 	bl	8000220 <memchr>
 80072ce:	9a04      	ldr	r2, [sp, #16]
 80072d0:	b9d8      	cbnz	r0, 800730a <_svfiprintf_r+0xe6>
 80072d2:	06d0      	lsls	r0, r2, #27
 80072d4:	bf44      	itt	mi
 80072d6:	2320      	movmi	r3, #32
 80072d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072dc:	0711      	lsls	r1, r2, #28
 80072de:	bf44      	itt	mi
 80072e0:	232b      	movmi	r3, #43	; 0x2b
 80072e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ea:	2b2a      	cmp	r3, #42	; 0x2a
 80072ec:	d015      	beq.n	800731a <_svfiprintf_r+0xf6>
 80072ee:	9a07      	ldr	r2, [sp, #28]
 80072f0:	4654      	mov	r4, sl
 80072f2:	2000      	movs	r0, #0
 80072f4:	f04f 0c0a 	mov.w	ip, #10
 80072f8:	4621      	mov	r1, r4
 80072fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072fe:	3b30      	subs	r3, #48	; 0x30
 8007300:	2b09      	cmp	r3, #9
 8007302:	d94e      	bls.n	80073a2 <_svfiprintf_r+0x17e>
 8007304:	b1b0      	cbz	r0, 8007334 <_svfiprintf_r+0x110>
 8007306:	9207      	str	r2, [sp, #28]
 8007308:	e014      	b.n	8007334 <_svfiprintf_r+0x110>
 800730a:	eba0 0308 	sub.w	r3, r0, r8
 800730e:	fa09 f303 	lsl.w	r3, r9, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	46a2      	mov	sl, r4
 8007318:	e7d2      	b.n	80072c0 <_svfiprintf_r+0x9c>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	1d19      	adds	r1, r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	9103      	str	r1, [sp, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfbb      	ittet	lt
 8007326:	425b      	neglt	r3, r3
 8007328:	f042 0202 	orrlt.w	r2, r2, #2
 800732c:	9307      	strge	r3, [sp, #28]
 800732e:	9307      	strlt	r3, [sp, #28]
 8007330:	bfb8      	it	lt
 8007332:	9204      	strlt	r2, [sp, #16]
 8007334:	7823      	ldrb	r3, [r4, #0]
 8007336:	2b2e      	cmp	r3, #46	; 0x2e
 8007338:	d10c      	bne.n	8007354 <_svfiprintf_r+0x130>
 800733a:	7863      	ldrb	r3, [r4, #1]
 800733c:	2b2a      	cmp	r3, #42	; 0x2a
 800733e:	d135      	bne.n	80073ac <_svfiprintf_r+0x188>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	1d1a      	adds	r2, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	9203      	str	r2, [sp, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfb8      	it	lt
 800734c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007350:	3402      	adds	r4, #2
 8007352:	9305      	str	r3, [sp, #20]
 8007354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007420 <_svfiprintf_r+0x1fc>
 8007358:	7821      	ldrb	r1, [r4, #0]
 800735a:	2203      	movs	r2, #3
 800735c:	4650      	mov	r0, sl
 800735e:	f7f8 ff5f 	bl	8000220 <memchr>
 8007362:	b140      	cbz	r0, 8007376 <_svfiprintf_r+0x152>
 8007364:	2340      	movs	r3, #64	; 0x40
 8007366:	eba0 000a 	sub.w	r0, r0, sl
 800736a:	fa03 f000 	lsl.w	r0, r3, r0
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	4303      	orrs	r3, r0
 8007372:	3401      	adds	r4, #1
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737a:	4826      	ldr	r0, [pc, #152]	; (8007414 <_svfiprintf_r+0x1f0>)
 800737c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007380:	2206      	movs	r2, #6
 8007382:	f7f8 ff4d 	bl	8000220 <memchr>
 8007386:	2800      	cmp	r0, #0
 8007388:	d038      	beq.n	80073fc <_svfiprintf_r+0x1d8>
 800738a:	4b23      	ldr	r3, [pc, #140]	; (8007418 <_svfiprintf_r+0x1f4>)
 800738c:	bb1b      	cbnz	r3, 80073d6 <_svfiprintf_r+0x1b2>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	3307      	adds	r3, #7
 8007392:	f023 0307 	bic.w	r3, r3, #7
 8007396:	3308      	adds	r3, #8
 8007398:	9303      	str	r3, [sp, #12]
 800739a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739c:	4433      	add	r3, r6
 800739e:	9309      	str	r3, [sp, #36]	; 0x24
 80073a0:	e767      	b.n	8007272 <_svfiprintf_r+0x4e>
 80073a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073a6:	460c      	mov	r4, r1
 80073a8:	2001      	movs	r0, #1
 80073aa:	e7a5      	b.n	80072f8 <_svfiprintf_r+0xd4>
 80073ac:	2300      	movs	r3, #0
 80073ae:	3401      	adds	r4, #1
 80073b0:	9305      	str	r3, [sp, #20]
 80073b2:	4619      	mov	r1, r3
 80073b4:	f04f 0c0a 	mov.w	ip, #10
 80073b8:	4620      	mov	r0, r4
 80073ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073be:	3a30      	subs	r2, #48	; 0x30
 80073c0:	2a09      	cmp	r2, #9
 80073c2:	d903      	bls.n	80073cc <_svfiprintf_r+0x1a8>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0c5      	beq.n	8007354 <_svfiprintf_r+0x130>
 80073c8:	9105      	str	r1, [sp, #20]
 80073ca:	e7c3      	b.n	8007354 <_svfiprintf_r+0x130>
 80073cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d0:	4604      	mov	r4, r0
 80073d2:	2301      	movs	r3, #1
 80073d4:	e7f0      	b.n	80073b8 <_svfiprintf_r+0x194>
 80073d6:	ab03      	add	r3, sp, #12
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	462a      	mov	r2, r5
 80073dc:	4b0f      	ldr	r3, [pc, #60]	; (800741c <_svfiprintf_r+0x1f8>)
 80073de:	a904      	add	r1, sp, #16
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7fe f80d 	bl	8005400 <_printf_float>
 80073e6:	1c42      	adds	r2, r0, #1
 80073e8:	4606      	mov	r6, r0
 80073ea:	d1d6      	bne.n	800739a <_svfiprintf_r+0x176>
 80073ec:	89ab      	ldrh	r3, [r5, #12]
 80073ee:	065b      	lsls	r3, r3, #25
 80073f0:	f53f af2c 	bmi.w	800724c <_svfiprintf_r+0x28>
 80073f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073f6:	b01d      	add	sp, #116	; 0x74
 80073f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fc:	ab03      	add	r3, sp, #12
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	462a      	mov	r2, r5
 8007402:	4b06      	ldr	r3, [pc, #24]	; (800741c <_svfiprintf_r+0x1f8>)
 8007404:	a904      	add	r1, sp, #16
 8007406:	4638      	mov	r0, r7
 8007408:	f7fe fa9e 	bl	8005948 <_printf_i>
 800740c:	e7eb      	b.n	80073e6 <_svfiprintf_r+0x1c2>
 800740e:	bf00      	nop
 8007410:	080084cc 	.word	0x080084cc
 8007414:	080084d6 	.word	0x080084d6
 8007418:	08005401 	.word	0x08005401
 800741c:	0800716d 	.word	0x0800716d
 8007420:	080084d2 	.word	0x080084d2

08007424 <_sbrk_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4d06      	ldr	r5, [pc, #24]	; (8007440 <_sbrk_r+0x1c>)
 8007428:	2300      	movs	r3, #0
 800742a:	4604      	mov	r4, r0
 800742c:	4608      	mov	r0, r1
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	f7fa fc8a 	bl	8001d48 <_sbrk>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_sbrk_r+0x1a>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_sbrk_r+0x1a>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	20000b18 	.word	0x20000b18

08007444 <__assert_func>:
 8007444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007446:	4614      	mov	r4, r2
 8007448:	461a      	mov	r2, r3
 800744a:	4b09      	ldr	r3, [pc, #36]	; (8007470 <__assert_func+0x2c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4605      	mov	r5, r0
 8007450:	68d8      	ldr	r0, [r3, #12]
 8007452:	b14c      	cbz	r4, 8007468 <__assert_func+0x24>
 8007454:	4b07      	ldr	r3, [pc, #28]	; (8007474 <__assert_func+0x30>)
 8007456:	9100      	str	r1, [sp, #0]
 8007458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800745c:	4906      	ldr	r1, [pc, #24]	; (8007478 <__assert_func+0x34>)
 800745e:	462b      	mov	r3, r5
 8007460:	f000 f80e 	bl	8007480 <fiprintf>
 8007464:	f000 faa4 	bl	80079b0 <abort>
 8007468:	4b04      	ldr	r3, [pc, #16]	; (800747c <__assert_func+0x38>)
 800746a:	461c      	mov	r4, r3
 800746c:	e7f3      	b.n	8007456 <__assert_func+0x12>
 800746e:	bf00      	nop
 8007470:	20000010 	.word	0x20000010
 8007474:	080084dd 	.word	0x080084dd
 8007478:	080084ea 	.word	0x080084ea
 800747c:	08008518 	.word	0x08008518

08007480 <fiprintf>:
 8007480:	b40e      	push	{r1, r2, r3}
 8007482:	b503      	push	{r0, r1, lr}
 8007484:	4601      	mov	r1, r0
 8007486:	ab03      	add	r3, sp, #12
 8007488:	4805      	ldr	r0, [pc, #20]	; (80074a0 <fiprintf+0x20>)
 800748a:	f853 2b04 	ldr.w	r2, [r3], #4
 800748e:	6800      	ldr	r0, [r0, #0]
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	f000 f88f 	bl	80075b4 <_vfiprintf_r>
 8007496:	b002      	add	sp, #8
 8007498:	f85d eb04 	ldr.w	lr, [sp], #4
 800749c:	b003      	add	sp, #12
 800749e:	4770      	bx	lr
 80074a0:	20000010 	.word	0x20000010

080074a4 <__ascii_mbtowc>:
 80074a4:	b082      	sub	sp, #8
 80074a6:	b901      	cbnz	r1, 80074aa <__ascii_mbtowc+0x6>
 80074a8:	a901      	add	r1, sp, #4
 80074aa:	b142      	cbz	r2, 80074be <__ascii_mbtowc+0x1a>
 80074ac:	b14b      	cbz	r3, 80074c2 <__ascii_mbtowc+0x1e>
 80074ae:	7813      	ldrb	r3, [r2, #0]
 80074b0:	600b      	str	r3, [r1, #0]
 80074b2:	7812      	ldrb	r2, [r2, #0]
 80074b4:	1e10      	subs	r0, r2, #0
 80074b6:	bf18      	it	ne
 80074b8:	2001      	movne	r0, #1
 80074ba:	b002      	add	sp, #8
 80074bc:	4770      	bx	lr
 80074be:	4610      	mov	r0, r2
 80074c0:	e7fb      	b.n	80074ba <__ascii_mbtowc+0x16>
 80074c2:	f06f 0001 	mvn.w	r0, #1
 80074c6:	e7f8      	b.n	80074ba <__ascii_mbtowc+0x16>

080074c8 <memmove>:
 80074c8:	4288      	cmp	r0, r1
 80074ca:	b510      	push	{r4, lr}
 80074cc:	eb01 0402 	add.w	r4, r1, r2
 80074d0:	d902      	bls.n	80074d8 <memmove+0x10>
 80074d2:	4284      	cmp	r4, r0
 80074d4:	4623      	mov	r3, r4
 80074d6:	d807      	bhi.n	80074e8 <memmove+0x20>
 80074d8:	1e43      	subs	r3, r0, #1
 80074da:	42a1      	cmp	r1, r4
 80074dc:	d008      	beq.n	80074f0 <memmove+0x28>
 80074de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074e6:	e7f8      	b.n	80074da <memmove+0x12>
 80074e8:	4402      	add	r2, r0
 80074ea:	4601      	mov	r1, r0
 80074ec:	428a      	cmp	r2, r1
 80074ee:	d100      	bne.n	80074f2 <memmove+0x2a>
 80074f0:	bd10      	pop	{r4, pc}
 80074f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074fa:	e7f7      	b.n	80074ec <memmove+0x24>

080074fc <__malloc_lock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	; (8007504 <__malloc_lock+0x8>)
 80074fe:	f000 bc17 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 8007502:	bf00      	nop
 8007504:	20000b20 	.word	0x20000b20

08007508 <__malloc_unlock>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__malloc_unlock+0x8>)
 800750a:	f000 bc12 	b.w	8007d32 <__retarget_lock_release_recursive>
 800750e:	bf00      	nop
 8007510:	20000b20 	.word	0x20000b20

08007514 <_realloc_r>:
 8007514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007516:	4607      	mov	r7, r0
 8007518:	4614      	mov	r4, r2
 800751a:	460e      	mov	r6, r1
 800751c:	b921      	cbnz	r1, 8007528 <_realloc_r+0x14>
 800751e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007522:	4611      	mov	r1, r2
 8007524:	f7ff bdc8 	b.w	80070b8 <_malloc_r>
 8007528:	b922      	cbnz	r2, 8007534 <_realloc_r+0x20>
 800752a:	f7ff fd75 	bl	8007018 <_free_r>
 800752e:	4625      	mov	r5, r4
 8007530:	4628      	mov	r0, r5
 8007532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007534:	f000 fc62 	bl	8007dfc <_malloc_usable_size_r>
 8007538:	42a0      	cmp	r0, r4
 800753a:	d20f      	bcs.n	800755c <_realloc_r+0x48>
 800753c:	4621      	mov	r1, r4
 800753e:	4638      	mov	r0, r7
 8007540:	f7ff fdba 	bl	80070b8 <_malloc_r>
 8007544:	4605      	mov	r5, r0
 8007546:	2800      	cmp	r0, #0
 8007548:	d0f2      	beq.n	8007530 <_realloc_r+0x1c>
 800754a:	4631      	mov	r1, r6
 800754c:	4622      	mov	r2, r4
 800754e:	f7ff f9c7 	bl	80068e0 <memcpy>
 8007552:	4631      	mov	r1, r6
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff fd5f 	bl	8007018 <_free_r>
 800755a:	e7e9      	b.n	8007530 <_realloc_r+0x1c>
 800755c:	4635      	mov	r5, r6
 800755e:	e7e7      	b.n	8007530 <_realloc_r+0x1c>

08007560 <__sfputc_r>:
 8007560:	6893      	ldr	r3, [r2, #8]
 8007562:	3b01      	subs	r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	b410      	push	{r4}
 8007568:	6093      	str	r3, [r2, #8]
 800756a:	da08      	bge.n	800757e <__sfputc_r+0x1e>
 800756c:	6994      	ldr	r4, [r2, #24]
 800756e:	42a3      	cmp	r3, r4
 8007570:	db01      	blt.n	8007576 <__sfputc_r+0x16>
 8007572:	290a      	cmp	r1, #10
 8007574:	d103      	bne.n	800757e <__sfputc_r+0x1e>
 8007576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800757a:	f000 b94b 	b.w	8007814 <__swbuf_r>
 800757e:	6813      	ldr	r3, [r2, #0]
 8007580:	1c58      	adds	r0, r3, #1
 8007582:	6010      	str	r0, [r2, #0]
 8007584:	7019      	strb	r1, [r3, #0]
 8007586:	4608      	mov	r0, r1
 8007588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800758c:	4770      	bx	lr

0800758e <__sfputs_r>:
 800758e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007590:	4606      	mov	r6, r0
 8007592:	460f      	mov	r7, r1
 8007594:	4614      	mov	r4, r2
 8007596:	18d5      	adds	r5, r2, r3
 8007598:	42ac      	cmp	r4, r5
 800759a:	d101      	bne.n	80075a0 <__sfputs_r+0x12>
 800759c:	2000      	movs	r0, #0
 800759e:	e007      	b.n	80075b0 <__sfputs_r+0x22>
 80075a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a4:	463a      	mov	r2, r7
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ffda 	bl	8007560 <__sfputc_r>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d1f3      	bne.n	8007598 <__sfputs_r+0xa>
 80075b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075b4 <_vfiprintf_r>:
 80075b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	460d      	mov	r5, r1
 80075ba:	b09d      	sub	sp, #116	; 0x74
 80075bc:	4614      	mov	r4, r2
 80075be:	4698      	mov	r8, r3
 80075c0:	4606      	mov	r6, r0
 80075c2:	b118      	cbz	r0, 80075cc <_vfiprintf_r+0x18>
 80075c4:	6983      	ldr	r3, [r0, #24]
 80075c6:	b90b      	cbnz	r3, 80075cc <_vfiprintf_r+0x18>
 80075c8:	f000 fb14 	bl	8007bf4 <__sinit>
 80075cc:	4b89      	ldr	r3, [pc, #548]	; (80077f4 <_vfiprintf_r+0x240>)
 80075ce:	429d      	cmp	r5, r3
 80075d0:	d11b      	bne.n	800760a <_vfiprintf_r+0x56>
 80075d2:	6875      	ldr	r5, [r6, #4]
 80075d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075d6:	07d9      	lsls	r1, r3, #31
 80075d8:	d405      	bmi.n	80075e6 <_vfiprintf_r+0x32>
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	059a      	lsls	r2, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_vfiprintf_r+0x32>
 80075e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075e2:	f000 fba5 	bl	8007d30 <__retarget_lock_acquire_recursive>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	071b      	lsls	r3, r3, #28
 80075ea:	d501      	bpl.n	80075f0 <_vfiprintf_r+0x3c>
 80075ec:	692b      	ldr	r3, [r5, #16]
 80075ee:	b9eb      	cbnz	r3, 800762c <_vfiprintf_r+0x78>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 f96e 	bl	80078d4 <__swsetup_r>
 80075f8:	b1c0      	cbz	r0, 800762c <_vfiprintf_r+0x78>
 80075fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075fc:	07dc      	lsls	r4, r3, #31
 80075fe:	d50e      	bpl.n	800761e <_vfiprintf_r+0x6a>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	b01d      	add	sp, #116	; 0x74
 8007606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760a:	4b7b      	ldr	r3, [pc, #492]	; (80077f8 <_vfiprintf_r+0x244>)
 800760c:	429d      	cmp	r5, r3
 800760e:	d101      	bne.n	8007614 <_vfiprintf_r+0x60>
 8007610:	68b5      	ldr	r5, [r6, #8]
 8007612:	e7df      	b.n	80075d4 <_vfiprintf_r+0x20>
 8007614:	4b79      	ldr	r3, [pc, #484]	; (80077fc <_vfiprintf_r+0x248>)
 8007616:	429d      	cmp	r5, r3
 8007618:	bf08      	it	eq
 800761a:	68f5      	ldreq	r5, [r6, #12]
 800761c:	e7da      	b.n	80075d4 <_vfiprintf_r+0x20>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	0598      	lsls	r0, r3, #22
 8007622:	d4ed      	bmi.n	8007600 <_vfiprintf_r+0x4c>
 8007624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007626:	f000 fb84 	bl	8007d32 <__retarget_lock_release_recursive>
 800762a:	e7e9      	b.n	8007600 <_vfiprintf_r+0x4c>
 800762c:	2300      	movs	r3, #0
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	2320      	movs	r3, #32
 8007632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007636:	f8cd 800c 	str.w	r8, [sp, #12]
 800763a:	2330      	movs	r3, #48	; 0x30
 800763c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007800 <_vfiprintf_r+0x24c>
 8007640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007644:	f04f 0901 	mov.w	r9, #1
 8007648:	4623      	mov	r3, r4
 800764a:	469a      	mov	sl, r3
 800764c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007650:	b10a      	cbz	r2, 8007656 <_vfiprintf_r+0xa2>
 8007652:	2a25      	cmp	r2, #37	; 0x25
 8007654:	d1f9      	bne.n	800764a <_vfiprintf_r+0x96>
 8007656:	ebba 0b04 	subs.w	fp, sl, r4
 800765a:	d00b      	beq.n	8007674 <_vfiprintf_r+0xc0>
 800765c:	465b      	mov	r3, fp
 800765e:	4622      	mov	r2, r4
 8007660:	4629      	mov	r1, r5
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ff93 	bl	800758e <__sfputs_r>
 8007668:	3001      	adds	r0, #1
 800766a:	f000 80aa 	beq.w	80077c2 <_vfiprintf_r+0x20e>
 800766e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007670:	445a      	add	r2, fp
 8007672:	9209      	str	r2, [sp, #36]	; 0x24
 8007674:	f89a 3000 	ldrb.w	r3, [sl]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80a2 	beq.w	80077c2 <_vfiprintf_r+0x20e>
 800767e:	2300      	movs	r3, #0
 8007680:	f04f 32ff 	mov.w	r2, #4294967295
 8007684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007688:	f10a 0a01 	add.w	sl, sl, #1
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	9307      	str	r3, [sp, #28]
 8007690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007694:	931a      	str	r3, [sp, #104]	; 0x68
 8007696:	4654      	mov	r4, sl
 8007698:	2205      	movs	r2, #5
 800769a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769e:	4858      	ldr	r0, [pc, #352]	; (8007800 <_vfiprintf_r+0x24c>)
 80076a0:	f7f8 fdbe 	bl	8000220 <memchr>
 80076a4:	9a04      	ldr	r2, [sp, #16]
 80076a6:	b9d8      	cbnz	r0, 80076e0 <_vfiprintf_r+0x12c>
 80076a8:	06d1      	lsls	r1, r2, #27
 80076aa:	bf44      	itt	mi
 80076ac:	2320      	movmi	r3, #32
 80076ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076b2:	0713      	lsls	r3, r2, #28
 80076b4:	bf44      	itt	mi
 80076b6:	232b      	movmi	r3, #43	; 0x2b
 80076b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076bc:	f89a 3000 	ldrb.w	r3, [sl]
 80076c0:	2b2a      	cmp	r3, #42	; 0x2a
 80076c2:	d015      	beq.n	80076f0 <_vfiprintf_r+0x13c>
 80076c4:	9a07      	ldr	r2, [sp, #28]
 80076c6:	4654      	mov	r4, sl
 80076c8:	2000      	movs	r0, #0
 80076ca:	f04f 0c0a 	mov.w	ip, #10
 80076ce:	4621      	mov	r1, r4
 80076d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d4:	3b30      	subs	r3, #48	; 0x30
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d94e      	bls.n	8007778 <_vfiprintf_r+0x1c4>
 80076da:	b1b0      	cbz	r0, 800770a <_vfiprintf_r+0x156>
 80076dc:	9207      	str	r2, [sp, #28]
 80076de:	e014      	b.n	800770a <_vfiprintf_r+0x156>
 80076e0:	eba0 0308 	sub.w	r3, r0, r8
 80076e4:	fa09 f303 	lsl.w	r3, r9, r3
 80076e8:	4313      	orrs	r3, r2
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	46a2      	mov	sl, r4
 80076ee:	e7d2      	b.n	8007696 <_vfiprintf_r+0xe2>
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	1d19      	adds	r1, r3, #4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	9103      	str	r1, [sp, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bfbb      	ittet	lt
 80076fc:	425b      	neglt	r3, r3
 80076fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007702:	9307      	strge	r3, [sp, #28]
 8007704:	9307      	strlt	r3, [sp, #28]
 8007706:	bfb8      	it	lt
 8007708:	9204      	strlt	r2, [sp, #16]
 800770a:	7823      	ldrb	r3, [r4, #0]
 800770c:	2b2e      	cmp	r3, #46	; 0x2e
 800770e:	d10c      	bne.n	800772a <_vfiprintf_r+0x176>
 8007710:	7863      	ldrb	r3, [r4, #1]
 8007712:	2b2a      	cmp	r3, #42	; 0x2a
 8007714:	d135      	bne.n	8007782 <_vfiprintf_r+0x1ce>
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	1d1a      	adds	r2, r3, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	9203      	str	r2, [sp, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfb8      	it	lt
 8007722:	f04f 33ff 	movlt.w	r3, #4294967295
 8007726:	3402      	adds	r4, #2
 8007728:	9305      	str	r3, [sp, #20]
 800772a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007810 <_vfiprintf_r+0x25c>
 800772e:	7821      	ldrb	r1, [r4, #0]
 8007730:	2203      	movs	r2, #3
 8007732:	4650      	mov	r0, sl
 8007734:	f7f8 fd74 	bl	8000220 <memchr>
 8007738:	b140      	cbz	r0, 800774c <_vfiprintf_r+0x198>
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	eba0 000a 	sub.w	r0, r0, sl
 8007740:	fa03 f000 	lsl.w	r0, r3, r0
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	4303      	orrs	r3, r0
 8007748:	3401      	adds	r4, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007750:	482c      	ldr	r0, [pc, #176]	; (8007804 <_vfiprintf_r+0x250>)
 8007752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007756:	2206      	movs	r2, #6
 8007758:	f7f8 fd62 	bl	8000220 <memchr>
 800775c:	2800      	cmp	r0, #0
 800775e:	d03f      	beq.n	80077e0 <_vfiprintf_r+0x22c>
 8007760:	4b29      	ldr	r3, [pc, #164]	; (8007808 <_vfiprintf_r+0x254>)
 8007762:	bb1b      	cbnz	r3, 80077ac <_vfiprintf_r+0x1f8>
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	3307      	adds	r3, #7
 8007768:	f023 0307 	bic.w	r3, r3, #7
 800776c:	3308      	adds	r3, #8
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007772:	443b      	add	r3, r7
 8007774:	9309      	str	r3, [sp, #36]	; 0x24
 8007776:	e767      	b.n	8007648 <_vfiprintf_r+0x94>
 8007778:	fb0c 3202 	mla	r2, ip, r2, r3
 800777c:	460c      	mov	r4, r1
 800777e:	2001      	movs	r0, #1
 8007780:	e7a5      	b.n	80076ce <_vfiprintf_r+0x11a>
 8007782:	2300      	movs	r3, #0
 8007784:	3401      	adds	r4, #1
 8007786:	9305      	str	r3, [sp, #20]
 8007788:	4619      	mov	r1, r3
 800778a:	f04f 0c0a 	mov.w	ip, #10
 800778e:	4620      	mov	r0, r4
 8007790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007794:	3a30      	subs	r2, #48	; 0x30
 8007796:	2a09      	cmp	r2, #9
 8007798:	d903      	bls.n	80077a2 <_vfiprintf_r+0x1ee>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0c5      	beq.n	800772a <_vfiprintf_r+0x176>
 800779e:	9105      	str	r1, [sp, #20]
 80077a0:	e7c3      	b.n	800772a <_vfiprintf_r+0x176>
 80077a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a6:	4604      	mov	r4, r0
 80077a8:	2301      	movs	r3, #1
 80077aa:	e7f0      	b.n	800778e <_vfiprintf_r+0x1da>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4b16      	ldr	r3, [pc, #88]	; (800780c <_vfiprintf_r+0x258>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7fd fe22 	bl	8005400 <_printf_float>
 80077bc:	4607      	mov	r7, r0
 80077be:	1c78      	adds	r0, r7, #1
 80077c0:	d1d6      	bne.n	8007770 <_vfiprintf_r+0x1bc>
 80077c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c4:	07d9      	lsls	r1, r3, #31
 80077c6:	d405      	bmi.n	80077d4 <_vfiprintf_r+0x220>
 80077c8:	89ab      	ldrh	r3, [r5, #12]
 80077ca:	059a      	lsls	r2, r3, #22
 80077cc:	d402      	bmi.n	80077d4 <_vfiprintf_r+0x220>
 80077ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d0:	f000 faaf 	bl	8007d32 <__retarget_lock_release_recursive>
 80077d4:	89ab      	ldrh	r3, [r5, #12]
 80077d6:	065b      	lsls	r3, r3, #25
 80077d8:	f53f af12 	bmi.w	8007600 <_vfiprintf_r+0x4c>
 80077dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077de:	e711      	b.n	8007604 <_vfiprintf_r+0x50>
 80077e0:	ab03      	add	r3, sp, #12
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	462a      	mov	r2, r5
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <_vfiprintf_r+0x258>)
 80077e8:	a904      	add	r1, sp, #16
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7fe f8ac 	bl	8005948 <_printf_i>
 80077f0:	e7e4      	b.n	80077bc <_vfiprintf_r+0x208>
 80077f2:	bf00      	nop
 80077f4:	08008644 	.word	0x08008644
 80077f8:	08008664 	.word	0x08008664
 80077fc:	08008624 	.word	0x08008624
 8007800:	080084cc 	.word	0x080084cc
 8007804:	080084d6 	.word	0x080084d6
 8007808:	08005401 	.word	0x08005401
 800780c:	0800758f 	.word	0x0800758f
 8007810:	080084d2 	.word	0x080084d2

08007814 <__swbuf_r>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	460e      	mov	r6, r1
 8007818:	4614      	mov	r4, r2
 800781a:	4605      	mov	r5, r0
 800781c:	b118      	cbz	r0, 8007826 <__swbuf_r+0x12>
 800781e:	6983      	ldr	r3, [r0, #24]
 8007820:	b90b      	cbnz	r3, 8007826 <__swbuf_r+0x12>
 8007822:	f000 f9e7 	bl	8007bf4 <__sinit>
 8007826:	4b21      	ldr	r3, [pc, #132]	; (80078ac <__swbuf_r+0x98>)
 8007828:	429c      	cmp	r4, r3
 800782a:	d12b      	bne.n	8007884 <__swbuf_r+0x70>
 800782c:	686c      	ldr	r4, [r5, #4]
 800782e:	69a3      	ldr	r3, [r4, #24]
 8007830:	60a3      	str	r3, [r4, #8]
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	071a      	lsls	r2, r3, #28
 8007836:	d52f      	bpl.n	8007898 <__swbuf_r+0x84>
 8007838:	6923      	ldr	r3, [r4, #16]
 800783a:	b36b      	cbz	r3, 8007898 <__swbuf_r+0x84>
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	6820      	ldr	r0, [r4, #0]
 8007840:	1ac0      	subs	r0, r0, r3
 8007842:	6963      	ldr	r3, [r4, #20]
 8007844:	b2f6      	uxtb	r6, r6
 8007846:	4283      	cmp	r3, r0
 8007848:	4637      	mov	r7, r6
 800784a:	dc04      	bgt.n	8007856 <__swbuf_r+0x42>
 800784c:	4621      	mov	r1, r4
 800784e:	4628      	mov	r0, r5
 8007850:	f000 f93c 	bl	8007acc <_fflush_r>
 8007854:	bb30      	cbnz	r0, 80078a4 <__swbuf_r+0x90>
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	3b01      	subs	r3, #1
 800785a:	60a3      	str	r3, [r4, #8]
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	6022      	str	r2, [r4, #0]
 8007862:	701e      	strb	r6, [r3, #0]
 8007864:	6963      	ldr	r3, [r4, #20]
 8007866:	3001      	adds	r0, #1
 8007868:	4283      	cmp	r3, r0
 800786a:	d004      	beq.n	8007876 <__swbuf_r+0x62>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	07db      	lsls	r3, r3, #31
 8007870:	d506      	bpl.n	8007880 <__swbuf_r+0x6c>
 8007872:	2e0a      	cmp	r6, #10
 8007874:	d104      	bne.n	8007880 <__swbuf_r+0x6c>
 8007876:	4621      	mov	r1, r4
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f927 	bl	8007acc <_fflush_r>
 800787e:	b988      	cbnz	r0, 80078a4 <__swbuf_r+0x90>
 8007880:	4638      	mov	r0, r7
 8007882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <__swbuf_r+0x9c>)
 8007886:	429c      	cmp	r4, r3
 8007888:	d101      	bne.n	800788e <__swbuf_r+0x7a>
 800788a:	68ac      	ldr	r4, [r5, #8]
 800788c:	e7cf      	b.n	800782e <__swbuf_r+0x1a>
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <__swbuf_r+0xa0>)
 8007890:	429c      	cmp	r4, r3
 8007892:	bf08      	it	eq
 8007894:	68ec      	ldreq	r4, [r5, #12]
 8007896:	e7ca      	b.n	800782e <__swbuf_r+0x1a>
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f81a 	bl	80078d4 <__swsetup_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d0cb      	beq.n	800783c <__swbuf_r+0x28>
 80078a4:	f04f 37ff 	mov.w	r7, #4294967295
 80078a8:	e7ea      	b.n	8007880 <__swbuf_r+0x6c>
 80078aa:	bf00      	nop
 80078ac:	08008644 	.word	0x08008644
 80078b0:	08008664 	.word	0x08008664
 80078b4:	08008624 	.word	0x08008624

080078b8 <__ascii_wctomb>:
 80078b8:	b149      	cbz	r1, 80078ce <__ascii_wctomb+0x16>
 80078ba:	2aff      	cmp	r2, #255	; 0xff
 80078bc:	bf85      	ittet	hi
 80078be:	238a      	movhi	r3, #138	; 0x8a
 80078c0:	6003      	strhi	r3, [r0, #0]
 80078c2:	700a      	strbls	r2, [r1, #0]
 80078c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80078c8:	bf98      	it	ls
 80078ca:	2001      	movls	r0, #1
 80078cc:	4770      	bx	lr
 80078ce:	4608      	mov	r0, r1
 80078d0:	4770      	bx	lr
	...

080078d4 <__swsetup_r>:
 80078d4:	4b32      	ldr	r3, [pc, #200]	; (80079a0 <__swsetup_r+0xcc>)
 80078d6:	b570      	push	{r4, r5, r6, lr}
 80078d8:	681d      	ldr	r5, [r3, #0]
 80078da:	4606      	mov	r6, r0
 80078dc:	460c      	mov	r4, r1
 80078de:	b125      	cbz	r5, 80078ea <__swsetup_r+0x16>
 80078e0:	69ab      	ldr	r3, [r5, #24]
 80078e2:	b913      	cbnz	r3, 80078ea <__swsetup_r+0x16>
 80078e4:	4628      	mov	r0, r5
 80078e6:	f000 f985 	bl	8007bf4 <__sinit>
 80078ea:	4b2e      	ldr	r3, [pc, #184]	; (80079a4 <__swsetup_r+0xd0>)
 80078ec:	429c      	cmp	r4, r3
 80078ee:	d10f      	bne.n	8007910 <__swsetup_r+0x3c>
 80078f0:	686c      	ldr	r4, [r5, #4]
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078f8:	0719      	lsls	r1, r3, #28
 80078fa:	d42c      	bmi.n	8007956 <__swsetup_r+0x82>
 80078fc:	06dd      	lsls	r5, r3, #27
 80078fe:	d411      	bmi.n	8007924 <__swsetup_r+0x50>
 8007900:	2309      	movs	r3, #9
 8007902:	6033      	str	r3, [r6, #0]
 8007904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	f04f 30ff 	mov.w	r0, #4294967295
 800790e:	e03e      	b.n	800798e <__swsetup_r+0xba>
 8007910:	4b25      	ldr	r3, [pc, #148]	; (80079a8 <__swsetup_r+0xd4>)
 8007912:	429c      	cmp	r4, r3
 8007914:	d101      	bne.n	800791a <__swsetup_r+0x46>
 8007916:	68ac      	ldr	r4, [r5, #8]
 8007918:	e7eb      	b.n	80078f2 <__swsetup_r+0x1e>
 800791a:	4b24      	ldr	r3, [pc, #144]	; (80079ac <__swsetup_r+0xd8>)
 800791c:	429c      	cmp	r4, r3
 800791e:	bf08      	it	eq
 8007920:	68ec      	ldreq	r4, [r5, #12]
 8007922:	e7e6      	b.n	80078f2 <__swsetup_r+0x1e>
 8007924:	0758      	lsls	r0, r3, #29
 8007926:	d512      	bpl.n	800794e <__swsetup_r+0x7a>
 8007928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800792a:	b141      	cbz	r1, 800793e <__swsetup_r+0x6a>
 800792c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007930:	4299      	cmp	r1, r3
 8007932:	d002      	beq.n	800793a <__swsetup_r+0x66>
 8007934:	4630      	mov	r0, r6
 8007936:	f7ff fb6f 	bl	8007018 <_free_r>
 800793a:	2300      	movs	r3, #0
 800793c:	6363      	str	r3, [r4, #52]	; 0x34
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	2300      	movs	r3, #0
 8007948:	6063      	str	r3, [r4, #4]
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f043 0308 	orr.w	r3, r3, #8
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	b94b      	cbnz	r3, 800796e <__swsetup_r+0x9a>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007964:	d003      	beq.n	800796e <__swsetup_r+0x9a>
 8007966:	4621      	mov	r1, r4
 8007968:	4630      	mov	r0, r6
 800796a:	f000 fa07 	bl	8007d7c <__smakebuf_r>
 800796e:	89a0      	ldrh	r0, [r4, #12]
 8007970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007974:	f010 0301 	ands.w	r3, r0, #1
 8007978:	d00a      	beq.n	8007990 <__swsetup_r+0xbc>
 800797a:	2300      	movs	r3, #0
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	6963      	ldr	r3, [r4, #20]
 8007980:	425b      	negs	r3, r3
 8007982:	61a3      	str	r3, [r4, #24]
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	b943      	cbnz	r3, 800799a <__swsetup_r+0xc6>
 8007988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800798c:	d1ba      	bne.n	8007904 <__swsetup_r+0x30>
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	0781      	lsls	r1, r0, #30
 8007992:	bf58      	it	pl
 8007994:	6963      	ldrpl	r3, [r4, #20]
 8007996:	60a3      	str	r3, [r4, #8]
 8007998:	e7f4      	b.n	8007984 <__swsetup_r+0xb0>
 800799a:	2000      	movs	r0, #0
 800799c:	e7f7      	b.n	800798e <__swsetup_r+0xba>
 800799e:	bf00      	nop
 80079a0:	20000010 	.word	0x20000010
 80079a4:	08008644 	.word	0x08008644
 80079a8:	08008664 	.word	0x08008664
 80079ac:	08008624 	.word	0x08008624

080079b0 <abort>:
 80079b0:	b508      	push	{r3, lr}
 80079b2:	2006      	movs	r0, #6
 80079b4:	f000 fa52 	bl	8007e5c <raise>
 80079b8:	2001      	movs	r0, #1
 80079ba:	f7fa f94d 	bl	8001c58 <_exit>
	...

080079c0 <__sflush_r>:
 80079c0:	898a      	ldrh	r2, [r1, #12]
 80079c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c6:	4605      	mov	r5, r0
 80079c8:	0710      	lsls	r0, r2, #28
 80079ca:	460c      	mov	r4, r1
 80079cc:	d458      	bmi.n	8007a80 <__sflush_r+0xc0>
 80079ce:	684b      	ldr	r3, [r1, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dc05      	bgt.n	80079e0 <__sflush_r+0x20>
 80079d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	dc02      	bgt.n	80079e0 <__sflush_r+0x20>
 80079da:	2000      	movs	r0, #0
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079e2:	2e00      	cmp	r6, #0
 80079e4:	d0f9      	beq.n	80079da <__sflush_r+0x1a>
 80079e6:	2300      	movs	r3, #0
 80079e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079ec:	682f      	ldr	r7, [r5, #0]
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	d032      	beq.n	8007a58 <__sflush_r+0x98>
 80079f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	075a      	lsls	r2, r3, #29
 80079f8:	d505      	bpl.n	8007a06 <__sflush_r+0x46>
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	1ac0      	subs	r0, r0, r3
 80079fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a00:	b10b      	cbz	r3, 8007a06 <__sflush_r+0x46>
 8007a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a04:	1ac0      	subs	r0, r0, r3
 8007a06:	2300      	movs	r3, #0
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a0c:	6a21      	ldr	r1, [r4, #32]
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b0      	blx	r6
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	d106      	bne.n	8007a26 <__sflush_r+0x66>
 8007a18:	6829      	ldr	r1, [r5, #0]
 8007a1a:	291d      	cmp	r1, #29
 8007a1c:	d82c      	bhi.n	8007a78 <__sflush_r+0xb8>
 8007a1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ac8 <__sflush_r+0x108>)
 8007a20:	40ca      	lsrs	r2, r1
 8007a22:	07d6      	lsls	r6, r2, #31
 8007a24:	d528      	bpl.n	8007a78 <__sflush_r+0xb8>
 8007a26:	2200      	movs	r2, #0
 8007a28:	6062      	str	r2, [r4, #4]
 8007a2a:	04d9      	lsls	r1, r3, #19
 8007a2c:	6922      	ldr	r2, [r4, #16]
 8007a2e:	6022      	str	r2, [r4, #0]
 8007a30:	d504      	bpl.n	8007a3c <__sflush_r+0x7c>
 8007a32:	1c42      	adds	r2, r0, #1
 8007a34:	d101      	bne.n	8007a3a <__sflush_r+0x7a>
 8007a36:	682b      	ldr	r3, [r5, #0]
 8007a38:	b903      	cbnz	r3, 8007a3c <__sflush_r+0x7c>
 8007a3a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a3e:	602f      	str	r7, [r5, #0]
 8007a40:	2900      	cmp	r1, #0
 8007a42:	d0ca      	beq.n	80079da <__sflush_r+0x1a>
 8007a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a48:	4299      	cmp	r1, r3
 8007a4a:	d002      	beq.n	8007a52 <__sflush_r+0x92>
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f7ff fae3 	bl	8007018 <_free_r>
 8007a52:	2000      	movs	r0, #0
 8007a54:	6360      	str	r0, [r4, #52]	; 0x34
 8007a56:	e7c1      	b.n	80079dc <__sflush_r+0x1c>
 8007a58:	6a21      	ldr	r1, [r4, #32]
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b0      	blx	r6
 8007a60:	1c41      	adds	r1, r0, #1
 8007a62:	d1c7      	bne.n	80079f4 <__sflush_r+0x34>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0c4      	beq.n	80079f4 <__sflush_r+0x34>
 8007a6a:	2b1d      	cmp	r3, #29
 8007a6c:	d001      	beq.n	8007a72 <__sflush_r+0xb2>
 8007a6e:	2b16      	cmp	r3, #22
 8007a70:	d101      	bne.n	8007a76 <__sflush_r+0xb6>
 8007a72:	602f      	str	r7, [r5, #0]
 8007a74:	e7b1      	b.n	80079da <__sflush_r+0x1a>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	e7ad      	b.n	80079dc <__sflush_r+0x1c>
 8007a80:	690f      	ldr	r7, [r1, #16]
 8007a82:	2f00      	cmp	r7, #0
 8007a84:	d0a9      	beq.n	80079da <__sflush_r+0x1a>
 8007a86:	0793      	lsls	r3, r2, #30
 8007a88:	680e      	ldr	r6, [r1, #0]
 8007a8a:	bf08      	it	eq
 8007a8c:	694b      	ldreq	r3, [r1, #20]
 8007a8e:	600f      	str	r7, [r1, #0]
 8007a90:	bf18      	it	ne
 8007a92:	2300      	movne	r3, #0
 8007a94:	eba6 0807 	sub.w	r8, r6, r7
 8007a98:	608b      	str	r3, [r1, #8]
 8007a9a:	f1b8 0f00 	cmp.w	r8, #0
 8007a9e:	dd9c      	ble.n	80079da <__sflush_r+0x1a>
 8007aa0:	6a21      	ldr	r1, [r4, #32]
 8007aa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007aa4:	4643      	mov	r3, r8
 8007aa6:	463a      	mov	r2, r7
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b0      	blx	r6
 8007aac:	2800      	cmp	r0, #0
 8007aae:	dc06      	bgt.n	8007abe <__sflush_r+0xfe>
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	e78e      	b.n	80079dc <__sflush_r+0x1c>
 8007abe:	4407      	add	r7, r0
 8007ac0:	eba8 0800 	sub.w	r8, r8, r0
 8007ac4:	e7e9      	b.n	8007a9a <__sflush_r+0xda>
 8007ac6:	bf00      	nop
 8007ac8:	20400001 	.word	0x20400001

08007acc <_fflush_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	690b      	ldr	r3, [r1, #16]
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	b913      	cbnz	r3, 8007adc <_fflush_r+0x10>
 8007ad6:	2500      	movs	r5, #0
 8007ad8:	4628      	mov	r0, r5
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	b118      	cbz	r0, 8007ae6 <_fflush_r+0x1a>
 8007ade:	6983      	ldr	r3, [r0, #24]
 8007ae0:	b90b      	cbnz	r3, 8007ae6 <_fflush_r+0x1a>
 8007ae2:	f000 f887 	bl	8007bf4 <__sinit>
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <_fflush_r+0x6c>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d11b      	bne.n	8007b24 <_fflush_r+0x58>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0ef      	beq.n	8007ad6 <_fflush_r+0xa>
 8007af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007af8:	07d0      	lsls	r0, r2, #31
 8007afa:	d404      	bmi.n	8007b06 <_fflush_r+0x3a>
 8007afc:	0599      	lsls	r1, r3, #22
 8007afe:	d402      	bmi.n	8007b06 <_fflush_r+0x3a>
 8007b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b02:	f000 f915 	bl	8007d30 <__retarget_lock_acquire_recursive>
 8007b06:	4628      	mov	r0, r5
 8007b08:	4621      	mov	r1, r4
 8007b0a:	f7ff ff59 	bl	80079c0 <__sflush_r>
 8007b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b10:	07da      	lsls	r2, r3, #31
 8007b12:	4605      	mov	r5, r0
 8007b14:	d4e0      	bmi.n	8007ad8 <_fflush_r+0xc>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	059b      	lsls	r3, r3, #22
 8007b1a:	d4dd      	bmi.n	8007ad8 <_fflush_r+0xc>
 8007b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1e:	f000 f908 	bl	8007d32 <__retarget_lock_release_recursive>
 8007b22:	e7d9      	b.n	8007ad8 <_fflush_r+0xc>
 8007b24:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <_fflush_r+0x70>)
 8007b26:	429c      	cmp	r4, r3
 8007b28:	d101      	bne.n	8007b2e <_fflush_r+0x62>
 8007b2a:	68ac      	ldr	r4, [r5, #8]
 8007b2c:	e7df      	b.n	8007aee <_fflush_r+0x22>
 8007b2e:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <_fflush_r+0x74>)
 8007b30:	429c      	cmp	r4, r3
 8007b32:	bf08      	it	eq
 8007b34:	68ec      	ldreq	r4, [r5, #12]
 8007b36:	e7da      	b.n	8007aee <_fflush_r+0x22>
 8007b38:	08008644 	.word	0x08008644
 8007b3c:	08008664 	.word	0x08008664
 8007b40:	08008624 	.word	0x08008624

08007b44 <std>:
 8007b44:	2300      	movs	r3, #0
 8007b46:	b510      	push	{r4, lr}
 8007b48:	4604      	mov	r4, r0
 8007b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b52:	6083      	str	r3, [r0, #8]
 8007b54:	8181      	strh	r1, [r0, #12]
 8007b56:	6643      	str	r3, [r0, #100]	; 0x64
 8007b58:	81c2      	strh	r2, [r0, #14]
 8007b5a:	6183      	str	r3, [r0, #24]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	2208      	movs	r2, #8
 8007b60:	305c      	adds	r0, #92	; 0x5c
 8007b62:	f7fd fba5 	bl	80052b0 <memset>
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <std+0x38>)
 8007b68:	6263      	str	r3, [r4, #36]	; 0x24
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <std+0x3c>)
 8007b6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <std+0x40>)
 8007b70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <std+0x44>)
 8007b74:	6224      	str	r4, [r4, #32]
 8007b76:	6323      	str	r3, [r4, #48]	; 0x30
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08007e95 	.word	0x08007e95
 8007b80:	08007eb7 	.word	0x08007eb7
 8007b84:	08007eef 	.word	0x08007eef
 8007b88:	08007f13 	.word	0x08007f13

08007b8c <_cleanup_r>:
 8007b8c:	4901      	ldr	r1, [pc, #4]	; (8007b94 <_cleanup_r+0x8>)
 8007b8e:	f000 b8af 	b.w	8007cf0 <_fwalk_reent>
 8007b92:	bf00      	nop
 8007b94:	08007acd 	.word	0x08007acd

08007b98 <__sfmoreglue>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	1e4a      	subs	r2, r1, #1
 8007b9c:	2568      	movs	r5, #104	; 0x68
 8007b9e:	4355      	muls	r5, r2
 8007ba0:	460e      	mov	r6, r1
 8007ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ba6:	f7ff fa87 	bl	80070b8 <_malloc_r>
 8007baa:	4604      	mov	r4, r0
 8007bac:	b140      	cbz	r0, 8007bc0 <__sfmoreglue+0x28>
 8007bae:	2100      	movs	r1, #0
 8007bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8007bb4:	300c      	adds	r0, #12
 8007bb6:	60a0      	str	r0, [r4, #8]
 8007bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bbc:	f7fd fb78 	bl	80052b0 <memset>
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}

08007bc4 <__sfp_lock_acquire>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	; (8007bcc <__sfp_lock_acquire+0x8>)
 8007bc6:	f000 b8b3 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 8007bca:	bf00      	nop
 8007bcc:	20000b24 	.word	0x20000b24

08007bd0 <__sfp_lock_release>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	; (8007bd8 <__sfp_lock_release+0x8>)
 8007bd2:	f000 b8ae 	b.w	8007d32 <__retarget_lock_release_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	20000b24 	.word	0x20000b24

08007bdc <__sinit_lock_acquire>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__sinit_lock_acquire+0x8>)
 8007bde:	f000 b8a7 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	20000b1f 	.word	0x20000b1f

08007be8 <__sinit_lock_release>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sinit_lock_release+0x8>)
 8007bea:	f000 b8a2 	b.w	8007d32 <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20000b1f 	.word	0x20000b1f

08007bf4 <__sinit>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	f7ff fff0 	bl	8007bdc <__sinit_lock_acquire>
 8007bfc:	69a3      	ldr	r3, [r4, #24]
 8007bfe:	b11b      	cbz	r3, 8007c08 <__sinit+0x14>
 8007c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c04:	f7ff bff0 	b.w	8007be8 <__sinit_lock_release>
 8007c08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c0c:	6523      	str	r3, [r4, #80]	; 0x50
 8007c0e:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <__sinit+0x68>)
 8007c10:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <__sinit+0x6c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c16:	42a3      	cmp	r3, r4
 8007c18:	bf04      	itt	eq
 8007c1a:	2301      	moveq	r3, #1
 8007c1c:	61a3      	streq	r3, [r4, #24]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f820 	bl	8007c64 <__sfp>
 8007c24:	6060      	str	r0, [r4, #4]
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 f81c 	bl	8007c64 <__sfp>
 8007c2c:	60a0      	str	r0, [r4, #8]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 f818 	bl	8007c64 <__sfp>
 8007c34:	2200      	movs	r2, #0
 8007c36:	60e0      	str	r0, [r4, #12]
 8007c38:	2104      	movs	r1, #4
 8007c3a:	6860      	ldr	r0, [r4, #4]
 8007c3c:	f7ff ff82 	bl	8007b44 <std>
 8007c40:	68a0      	ldr	r0, [r4, #8]
 8007c42:	2201      	movs	r2, #1
 8007c44:	2109      	movs	r1, #9
 8007c46:	f7ff ff7d 	bl	8007b44 <std>
 8007c4a:	68e0      	ldr	r0, [r4, #12]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	2112      	movs	r1, #18
 8007c50:	f7ff ff78 	bl	8007b44 <std>
 8007c54:	2301      	movs	r3, #1
 8007c56:	61a3      	str	r3, [r4, #24]
 8007c58:	e7d2      	b.n	8007c00 <__sinit+0xc>
 8007c5a:	bf00      	nop
 8007c5c:	080082a0 	.word	0x080082a0
 8007c60:	08007b8d 	.word	0x08007b8d

08007c64 <__sfp>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	4607      	mov	r7, r0
 8007c68:	f7ff ffac 	bl	8007bc4 <__sfp_lock_acquire>
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <__sfp+0x84>)
 8007c6e:	681e      	ldr	r6, [r3, #0]
 8007c70:	69b3      	ldr	r3, [r6, #24]
 8007c72:	b913      	cbnz	r3, 8007c7a <__sfp+0x16>
 8007c74:	4630      	mov	r0, r6
 8007c76:	f7ff ffbd 	bl	8007bf4 <__sinit>
 8007c7a:	3648      	adds	r6, #72	; 0x48
 8007c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	d503      	bpl.n	8007c8c <__sfp+0x28>
 8007c84:	6833      	ldr	r3, [r6, #0]
 8007c86:	b30b      	cbz	r3, 8007ccc <__sfp+0x68>
 8007c88:	6836      	ldr	r6, [r6, #0]
 8007c8a:	e7f7      	b.n	8007c7c <__sfp+0x18>
 8007c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c90:	b9d5      	cbnz	r5, 8007cc8 <__sfp+0x64>
 8007c92:	4b16      	ldr	r3, [pc, #88]	; (8007cec <__sfp+0x88>)
 8007c94:	60e3      	str	r3, [r4, #12]
 8007c96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c9a:	6665      	str	r5, [r4, #100]	; 0x64
 8007c9c:	f000 f847 	bl	8007d2e <__retarget_lock_init_recursive>
 8007ca0:	f7ff ff96 	bl	8007bd0 <__sfp_lock_release>
 8007ca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cac:	6025      	str	r5, [r4, #0]
 8007cae:	61a5      	str	r5, [r4, #24]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cb8:	f7fd fafa 	bl	80052b0 <memset>
 8007cbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc8:	3468      	adds	r4, #104	; 0x68
 8007cca:	e7d9      	b.n	8007c80 <__sfp+0x1c>
 8007ccc:	2104      	movs	r1, #4
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f7ff ff62 	bl	8007b98 <__sfmoreglue>
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	6030      	str	r0, [r6, #0]
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d1d5      	bne.n	8007c88 <__sfp+0x24>
 8007cdc:	f7ff ff78 	bl	8007bd0 <__sfp_lock_release>
 8007ce0:	230c      	movs	r3, #12
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	e7ee      	b.n	8007cc4 <__sfp+0x60>
 8007ce6:	bf00      	nop
 8007ce8:	080082a0 	.word	0x080082a0
 8007cec:	ffff0001 	.word	0xffff0001

08007cf0 <_fwalk_reent>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	4688      	mov	r8, r1
 8007cf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cfc:	2700      	movs	r7, #0
 8007cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d02:	f1b9 0901 	subs.w	r9, r9, #1
 8007d06:	d505      	bpl.n	8007d14 <_fwalk_reent+0x24>
 8007d08:	6824      	ldr	r4, [r4, #0]
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	d1f7      	bne.n	8007cfe <_fwalk_reent+0xe>
 8007d0e:	4638      	mov	r0, r7
 8007d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d14:	89ab      	ldrh	r3, [r5, #12]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d907      	bls.n	8007d2a <_fwalk_reent+0x3a>
 8007d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	d003      	beq.n	8007d2a <_fwalk_reent+0x3a>
 8007d22:	4629      	mov	r1, r5
 8007d24:	4630      	mov	r0, r6
 8007d26:	47c0      	blx	r8
 8007d28:	4307      	orrs	r7, r0
 8007d2a:	3568      	adds	r5, #104	; 0x68
 8007d2c:	e7e9      	b.n	8007d02 <_fwalk_reent+0x12>

08007d2e <__retarget_lock_init_recursive>:
 8007d2e:	4770      	bx	lr

08007d30 <__retarget_lock_acquire_recursive>:
 8007d30:	4770      	bx	lr

08007d32 <__retarget_lock_release_recursive>:
 8007d32:	4770      	bx	lr

08007d34 <__swhatbuf_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460e      	mov	r6, r1
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	b096      	sub	sp, #88	; 0x58
 8007d40:	4614      	mov	r4, r2
 8007d42:	461d      	mov	r5, r3
 8007d44:	da07      	bge.n	8007d56 <__swhatbuf_r+0x22>
 8007d46:	2300      	movs	r3, #0
 8007d48:	602b      	str	r3, [r5, #0]
 8007d4a:	89b3      	ldrh	r3, [r6, #12]
 8007d4c:	061a      	lsls	r2, r3, #24
 8007d4e:	d410      	bmi.n	8007d72 <__swhatbuf_r+0x3e>
 8007d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d54:	e00e      	b.n	8007d74 <__swhatbuf_r+0x40>
 8007d56:	466a      	mov	r2, sp
 8007d58:	f000 f902 	bl	8007f60 <_fstat_r>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	dbf2      	blt.n	8007d46 <__swhatbuf_r+0x12>
 8007d60:	9a01      	ldr	r2, [sp, #4]
 8007d62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d6a:	425a      	negs	r2, r3
 8007d6c:	415a      	adcs	r2, r3
 8007d6e:	602a      	str	r2, [r5, #0]
 8007d70:	e7ee      	b.n	8007d50 <__swhatbuf_r+0x1c>
 8007d72:	2340      	movs	r3, #64	; 0x40
 8007d74:	2000      	movs	r0, #0
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	b016      	add	sp, #88	; 0x58
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}

08007d7c <__smakebuf_r>:
 8007d7c:	898b      	ldrh	r3, [r1, #12]
 8007d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d80:	079d      	lsls	r5, r3, #30
 8007d82:	4606      	mov	r6, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	d507      	bpl.n	8007d98 <__smakebuf_r+0x1c>
 8007d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	6123      	str	r3, [r4, #16]
 8007d90:	2301      	movs	r3, #1
 8007d92:	6163      	str	r3, [r4, #20]
 8007d94:	b002      	add	sp, #8
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	ab01      	add	r3, sp, #4
 8007d9a:	466a      	mov	r2, sp
 8007d9c:	f7ff ffca 	bl	8007d34 <__swhatbuf_r>
 8007da0:	9900      	ldr	r1, [sp, #0]
 8007da2:	4605      	mov	r5, r0
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff f987 	bl	80070b8 <_malloc_r>
 8007daa:	b948      	cbnz	r0, 8007dc0 <__smakebuf_r+0x44>
 8007dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db0:	059a      	lsls	r2, r3, #22
 8007db2:	d4ef      	bmi.n	8007d94 <__smakebuf_r+0x18>
 8007db4:	f023 0303 	bic.w	r3, r3, #3
 8007db8:	f043 0302 	orr.w	r3, r3, #2
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	e7e3      	b.n	8007d88 <__smakebuf_r+0xc>
 8007dc0:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <__smakebuf_r+0x7c>)
 8007dc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	6020      	str	r0, [r4, #0]
 8007dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dcc:	81a3      	strh	r3, [r4, #12]
 8007dce:	9b00      	ldr	r3, [sp, #0]
 8007dd0:	6163      	str	r3, [r4, #20]
 8007dd2:	9b01      	ldr	r3, [sp, #4]
 8007dd4:	6120      	str	r0, [r4, #16]
 8007dd6:	b15b      	cbz	r3, 8007df0 <__smakebuf_r+0x74>
 8007dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 f8d1 	bl	8007f84 <_isatty_r>
 8007de2:	b128      	cbz	r0, 8007df0 <__smakebuf_r+0x74>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	89a0      	ldrh	r0, [r4, #12]
 8007df2:	4305      	orrs	r5, r0
 8007df4:	81a5      	strh	r5, [r4, #12]
 8007df6:	e7cd      	b.n	8007d94 <__smakebuf_r+0x18>
 8007df8:	08007b8d 	.word	0x08007b8d

08007dfc <_malloc_usable_size_r>:
 8007dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e00:	1f18      	subs	r0, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bfbc      	itt	lt
 8007e06:	580b      	ldrlt	r3, [r1, r0]
 8007e08:	18c0      	addlt	r0, r0, r3
 8007e0a:	4770      	bx	lr

08007e0c <_raise_r>:
 8007e0c:	291f      	cmp	r1, #31
 8007e0e:	b538      	push	{r3, r4, r5, lr}
 8007e10:	4604      	mov	r4, r0
 8007e12:	460d      	mov	r5, r1
 8007e14:	d904      	bls.n	8007e20 <_raise_r+0x14>
 8007e16:	2316      	movs	r3, #22
 8007e18:	6003      	str	r3, [r0, #0]
 8007e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e22:	b112      	cbz	r2, 8007e2a <_raise_r+0x1e>
 8007e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e28:	b94b      	cbnz	r3, 8007e3e <_raise_r+0x32>
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 f830 	bl	8007e90 <_getpid_r>
 8007e30:	462a      	mov	r2, r5
 8007e32:	4601      	mov	r1, r0
 8007e34:	4620      	mov	r0, r4
 8007e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e3a:	f000 b817 	b.w	8007e6c <_kill_r>
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d00a      	beq.n	8007e58 <_raise_r+0x4c>
 8007e42:	1c59      	adds	r1, r3, #1
 8007e44:	d103      	bne.n	8007e4e <_raise_r+0x42>
 8007e46:	2316      	movs	r3, #22
 8007e48:	6003      	str	r3, [r0, #0]
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	e7e7      	b.n	8007e1e <_raise_r+0x12>
 8007e4e:	2400      	movs	r4, #0
 8007e50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e54:	4628      	mov	r0, r5
 8007e56:	4798      	blx	r3
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e7e0      	b.n	8007e1e <_raise_r+0x12>

08007e5c <raise>:
 8007e5c:	4b02      	ldr	r3, [pc, #8]	; (8007e68 <raise+0xc>)
 8007e5e:	4601      	mov	r1, r0
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	f7ff bfd3 	b.w	8007e0c <_raise_r>
 8007e66:	bf00      	nop
 8007e68:	20000010 	.word	0x20000010

08007e6c <_kill_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d07      	ldr	r5, [pc, #28]	; (8007e8c <_kill_r+0x20>)
 8007e70:	2300      	movs	r3, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	4611      	mov	r1, r2
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	f7f9 fedd 	bl	8001c38 <_kill>
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	d102      	bne.n	8007e88 <_kill_r+0x1c>
 8007e82:	682b      	ldr	r3, [r5, #0]
 8007e84:	b103      	cbz	r3, 8007e88 <_kill_r+0x1c>
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	bd38      	pop	{r3, r4, r5, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000b18 	.word	0x20000b18

08007e90 <_getpid_r>:
 8007e90:	f7f9 beca 	b.w	8001c28 <_getpid>

08007e94 <__sread>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	460c      	mov	r4, r1
 8007e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9c:	f000 f894 	bl	8007fc8 <_read_r>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	bfab      	itete	ge
 8007ea4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea8:	181b      	addge	r3, r3, r0
 8007eaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eae:	bfac      	ite	ge
 8007eb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eb2:	81a3      	strhlt	r3, [r4, #12]
 8007eb4:	bd10      	pop	{r4, pc}

08007eb6 <__swrite>:
 8007eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eba:	461f      	mov	r7, r3
 8007ebc:	898b      	ldrh	r3, [r1, #12]
 8007ebe:	05db      	lsls	r3, r3, #23
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	4616      	mov	r6, r2
 8007ec6:	d505      	bpl.n	8007ed4 <__swrite+0x1e>
 8007ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ecc:	2302      	movs	r3, #2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f000 f868 	bl	8007fa4 <_lseek_r>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	463b      	mov	r3, r7
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eea:	f000 b817 	b.w	8007f1c <_write_r>

08007eee <__sseek>:
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef6:	f000 f855 	bl	8007fa4 <_lseek_r>
 8007efa:	1c43      	adds	r3, r0, #1
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	bf15      	itete	ne
 8007f00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f0a:	81a3      	strheq	r3, [r4, #12]
 8007f0c:	bf18      	it	ne
 8007f0e:	81a3      	strhne	r3, [r4, #12]
 8007f10:	bd10      	pop	{r4, pc}

08007f12 <__sclose>:
 8007f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f16:	f000 b813 	b.w	8007f40 <_close_r>
	...

08007f1c <_write_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d07      	ldr	r5, [pc, #28]	; (8007f3c <_write_r+0x20>)
 8007f20:	4604      	mov	r4, r0
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	2200      	movs	r2, #0
 8007f28:	602a      	str	r2, [r5, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f7f9 febb 	bl	8001ca6 <_write>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_write_r+0x1e>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_write_r+0x1e>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20000b18 	.word	0x20000b18

08007f40 <_close_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d06      	ldr	r5, [pc, #24]	; (8007f5c <_close_r+0x1c>)
 8007f44:	2300      	movs	r3, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	f7f9 fec7 	bl	8001cde <_close>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_close_r+0x1a>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_close_r+0x1a>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	20000b18 	.word	0x20000b18

08007f60 <_fstat_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d07      	ldr	r5, [pc, #28]	; (8007f80 <_fstat_r+0x20>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	4611      	mov	r1, r2
 8007f6c:	602b      	str	r3, [r5, #0]
 8007f6e:	f7f9 fec2 	bl	8001cf6 <_fstat>
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	d102      	bne.n	8007f7c <_fstat_r+0x1c>
 8007f76:	682b      	ldr	r3, [r5, #0]
 8007f78:	b103      	cbz	r3, 8007f7c <_fstat_r+0x1c>
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	bd38      	pop	{r3, r4, r5, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000b18 	.word	0x20000b18

08007f84 <_isatty_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d06      	ldr	r5, [pc, #24]	; (8007fa0 <_isatty_r+0x1c>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	f7f9 fec1 	bl	8001d16 <_isatty>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_isatty_r+0x1a>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_isatty_r+0x1a>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	20000b18 	.word	0x20000b18

08007fa4 <_lseek_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d07      	ldr	r5, [pc, #28]	; (8007fc4 <_lseek_r+0x20>)
 8007fa8:	4604      	mov	r4, r0
 8007faa:	4608      	mov	r0, r1
 8007fac:	4611      	mov	r1, r2
 8007fae:	2200      	movs	r2, #0
 8007fb0:	602a      	str	r2, [r5, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f7f9 feba 	bl	8001d2c <_lseek>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d102      	bne.n	8007fc2 <_lseek_r+0x1e>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b103      	cbz	r3, 8007fc2 <_lseek_r+0x1e>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	20000b18 	.word	0x20000b18

08007fc8 <_read_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d07      	ldr	r5, [pc, #28]	; (8007fe8 <_read_r+0x20>)
 8007fcc:	4604      	mov	r4, r0
 8007fce:	4608      	mov	r0, r1
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	602a      	str	r2, [r5, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f7f9 fe48 	bl	8001c6c <_read>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_read_r+0x1e>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_read_r+0x1e>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	20000b18 	.word	0x20000b18

08007fec <_init>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	bf00      	nop
 8007ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff2:	bc08      	pop	{r3}
 8007ff4:	469e      	mov	lr, r3
 8007ff6:	4770      	bx	lr

08007ff8 <_fini>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr
