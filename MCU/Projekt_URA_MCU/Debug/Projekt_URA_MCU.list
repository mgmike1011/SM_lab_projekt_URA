
Projekt_URA_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  0800d3b0  0800d3b0  0001d3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db3c  0800db3c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800db3c  0800db3c  0001db3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db44  0800db44  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db44  0800db44  0001db44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db48  0800db48  0001db48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800db4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af8  20000208  0800dd54  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d00  0800dd54  00020d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e7b  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004429  00000000  00000000  000430b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  000474e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001690  00000000  00000000  00048d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8dc  00000000  00000000  0004a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020738  00000000  00000000  00074cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8bd2  00000000  00000000  000953ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018dfbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b5c  00000000  00000000  0018e014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d398 	.word	0x0800d398

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0800d398 	.word	0x0800d398

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <BMP280_Read8+0x50>)
 80010ec:	f002 fd10 	bl	8003b10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <BMP280_Read8+0x54>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	f107 020c 	add.w	r2, r7, #12
 80010f8:	f107 010c 	add.w	r1, r7, #12
 80010fc:	230a      	movs	r3, #10
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2302      	movs	r3, #2
 8001102:	f004 fc60 	bl	80059c6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <BMP280_Read8+0x50>)
 800110e:	f002 fcff 	bl	8003b10 <HAL_GPIO_WritePin>
	return tmp[1];
 8001112:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020400 	.word	0x40020400
 8001120:	20000650 	.word	0x20000650

08001124 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001132:	7b3b      	ldrb	r3, [r7, #12]
 8001134:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001138:	b2db      	uxtb	r3, r3
 800113a:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001142:	4810      	ldr	r0, [pc, #64]	; (8001184 <BMP280_Read16+0x60>)
 8001144:	f002 fce4 	bl	8003b10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <BMP280_Read16+0x64>)
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	f107 020c 	add.w	r2, r7, #12
 8001150:	f107 010c 	add.w	r1, r7, #12
 8001154:	230a      	movs	r3, #10
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2303      	movs	r3, #3
 800115a:	f004 fc34 	bl	80059c6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <BMP280_Read16+0x60>)
 8001166:	f002 fcd3 	bl	8003b10 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29b      	uxth	r3, r3
#endif
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020400 	.word	0x40020400
 8001188:	20000650 	.word	0x20000650

0800118c <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ffc3 	bl	8001124 <BMP280_Read16>
 800119e:	4603      	mov	r3, r0
 80011a0:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	b29b      	uxth	r3, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80011d4:	7b3b      	ldrb	r3, [r7, #12]
 80011d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <BMP280_Write8+0x58>)
 80011ea:	f002 fc91 	bl	8003b10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <BMP280_Write8+0x5c>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	f107 010c 	add.w	r1, r7, #12
 80011fa:	230a      	movs	r3, #10
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2302      	movs	r3, #2
 8001200:	f004 fbe1 	bl	80059c6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <BMP280_Write8+0x58>)
 800120c:	f002 fc80 	bl	8003b10 <HAL_GPIO_WritePin>
#endif
}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020400 	.word	0x40020400
 800121c:	20000650 	.word	0x20000650

08001220 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001234:	b2db      	uxtb	r3, r3
 8001236:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <BMP280_Read24+0x5c>)
 8001240:	f002 fc66 	bl	8003b10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <BMP280_Read24+0x60>)
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	f107 020c 	add.w	r2, r7, #12
 800124c:	f107 010c 	add.w	r1, r7, #12
 8001250:	230a      	movs	r3, #10
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2303      	movs	r3, #3
 8001256:	f004 fbb6 	bl	80059c6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001260:	4806      	ldr	r0, [pc, #24]	; (800127c <BMP280_Read24+0x5c>)
 8001262:	f002 fc55 	bl	8003b10 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8001266:	7b7b      	ldrb	r3, [r7, #13]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4313      	orrs	r3, r2
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	4313      	orrs	r3, r2
#endif
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40020400 	.word	0x40020400
 8001280:	20000650 	.word	0x20000650

08001284 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	4608      	mov	r0, r1
 800128e:	4611      	mov	r1, r2
 8001290:	461a      	mov	r2, r3
 8001292:	4603      	mov	r3, r0
 8001294:	70fb      	strb	r3, [r7, #3]
 8001296:	460b      	mov	r3, r1
 8001298:	70bb      	strb	r3, [r7, #2]
 800129a:	4613      	mov	r3, r2
 800129c:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 800129e:	4a4f      	ldr	r2, [pc, #316]	; (80013dc <BMP280_Init+0x158>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012aa:	484d      	ldr	r0, [pc, #308]	; (80013e0 <BMP280_Init+0x15c>)
 80012ac:	f002 fc30 	bl	8003b10 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012b0:	2005      	movs	r0, #5
 80012b2:	f002 f8b9 	bl	8003428 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012bc:	4848      	ldr	r0, [pc, #288]	; (80013e0 <BMP280_Init+0x15c>)
 80012be:	f002 fc27 	bl	8003b10 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 80012c2:	787b      	ldrb	r3, [r7, #1]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d901      	bls.n	80012cc <BMP280_Init+0x48>
	    mode = BMP280_NORMALMODE;
 80012c8:	2303      	movs	r3, #3
 80012ca:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012cc:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <BMP280_Init+0x160>)
 80012ce:	787b      	ldrb	r3, [r7, #1]
 80012d0:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012d2:	787b      	ldrb	r3, [r7, #1]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <BMP280_Init+0x58>
		mode = BMP280_SLEEPMODE;
 80012d8:	2300      	movs	r3, #0
 80012da:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d901      	bls.n	80012e6 <BMP280_Init+0x62>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012e2:	2305      	movs	r3, #5
 80012e4:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012e6:	4a40      	ldr	r2, [pc, #256]	; (80013e8 <BMP280_Init+0x164>)
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012ec:	78bb      	ldrb	r3, [r7, #2]
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d901      	bls.n	80012f6 <BMP280_Init+0x72>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012f2:	2305      	movs	r3, #5
 80012f4:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012f6:	4a3d      	ldr	r2, [pc, #244]	; (80013ec <BMP280_Init+0x168>)
 80012f8:	78bb      	ldrb	r3, [r7, #2]
 80012fa:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012fc:	bf00      	nop
 80012fe:	20d0      	movs	r0, #208	; 0xd0
 8001300:	f7ff fee4 	bl	80010cc <BMP280_Read8>
 8001304:	4603      	mov	r3, r0
 8001306:	2b58      	cmp	r3, #88	; 0x58
 8001308:	d1f9      	bne.n	80012fe <BMP280_Init+0x7a>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800130a:	2088      	movs	r0, #136	; 0x88
 800130c:	f7ff ff3e 	bl	800118c <BMP280_Read16LE>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <BMP280_Init+0x16c>)
 8001316:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001318:	208a      	movs	r0, #138	; 0x8a
 800131a:	f7ff ff37 	bl	800118c <BMP280_Read16LE>
 800131e:	4603      	mov	r3, r0
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <BMP280_Init+0x170>)
 8001324:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001326:	208c      	movs	r0, #140	; 0x8c
 8001328:	f7ff ff30 	bl	800118c <BMP280_Read16LE>
 800132c:	4603      	mov	r3, r0
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <BMP280_Init+0x174>)
 8001332:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001334:	208e      	movs	r0, #142	; 0x8e
 8001336:	f7ff ff29 	bl	800118c <BMP280_Read16LE>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <BMP280_Init+0x178>)
 8001340:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001342:	2090      	movs	r0, #144	; 0x90
 8001344:	f7ff ff22 	bl	800118c <BMP280_Read16LE>
 8001348:	4603      	mov	r3, r0
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <BMP280_Init+0x17c>)
 800134e:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001350:	2092      	movs	r0, #146	; 0x92
 8001352:	f7ff ff1b 	bl	800118c <BMP280_Read16LE>
 8001356:	4603      	mov	r3, r0
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <BMP280_Init+0x180>)
 800135c:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800135e:	2094      	movs	r0, #148	; 0x94
 8001360:	f7ff ff14 	bl	800118c <BMP280_Read16LE>
 8001364:	4603      	mov	r3, r0
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <BMP280_Init+0x184>)
 800136a:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800136c:	2096      	movs	r0, #150	; 0x96
 800136e:	f7ff ff0d 	bl	800118c <BMP280_Read16LE>
 8001372:	4603      	mov	r3, r0
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <BMP280_Init+0x188>)
 8001378:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800137a:	2098      	movs	r0, #152	; 0x98
 800137c:	f7ff ff06 	bl	800118c <BMP280_Read16LE>
 8001380:	4603      	mov	r3, r0
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <BMP280_Init+0x18c>)
 8001386:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001388:	209a      	movs	r0, #154	; 0x9a
 800138a:	f7ff feff 	bl	800118c <BMP280_Read16LE>
 800138e:	4603      	mov	r3, r0
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <BMP280_Init+0x190>)
 8001394:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001396:	209c      	movs	r0, #156	; 0x9c
 8001398:	f7ff fef8 	bl	800118c <BMP280_Read16LE>
 800139c:	4603      	mov	r3, r0
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <BMP280_Init+0x194>)
 80013a2:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80013a4:	209e      	movs	r0, #158	; 0x9e
 80013a6:	f7ff fef1 	bl	800118c <BMP280_Read16LE>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <BMP280_Init+0x198>)
 80013b0:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	015b      	lsls	r3, r3, #5
 80013b6:	b25a      	sxtb	r2, r3
 80013b8:	78bb      	ldrb	r3, [r7, #2]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4619      	mov	r1, r3
 80013ce:	20f4      	movs	r0, #244	; 0xf4
 80013d0:	f7ff fef6 	bl	80011c0 <BMP280_Write8>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000650 	.word	0x20000650
 80013e0:	40020400 	.word	0x40020400
 80013e4:	20000657 	.word	0x20000657
 80013e8:	20000656 	.word	0x20000656
 80013ec:	20000642 	.word	0x20000642
 80013f0:	20000654 	.word	0x20000654
 80013f4:	20000644 	.word	0x20000644
 80013f8:	2000063c 	.word	0x2000063c
 80013fc:	20000648 	.word	0x20000648
 8001400:	2000063e 	.word	0x2000063e
 8001404:	20000658 	.word	0x20000658
 8001408:	2000065c 	.word	0x2000065c
 800140c:	20000646 	.word	0x20000646
 8001410:	2000064c 	.word	0x2000064c
 8001414:	20000640 	.word	0x20000640
 8001418:	2000064a 	.word	0x2000064a
 800141c:	2000065a 	.word	0x2000065a

08001420 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <BMP280_ReadTemperature+0xfc>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d16d      	bne.n	800150a <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800142e:	20f4      	movs	r0, #244	; 0xf4
 8001430:	f7ff fe4c 	bl	80010cc <BMP280_Read8>
 8001434:	4603      	mov	r3, r0
 8001436:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	4619      	mov	r1, r3
 800144c:	20f4      	movs	r0, #244	; 0xf4
 800144e:	f7ff feb7 	bl	80011c0 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001452:	20f4      	movs	r0, #244	; 0xf4
 8001454:	f7ff fe3a 	bl	80010cc <BMP280_Read8>
 8001458:	4603      	mov	r3, r0
 800145a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001464:	7dbb      	ldrb	r3, [r7, #22]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d14f      	bne.n	800150a <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800146a:	20f4      	movs	r0, #244	; 0xf4
 800146c:	f7ff fe2e 	bl	80010cc <BMP280_Read8>
 8001470:	4603      	mov	r3, r0
 8001472:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800147c:	7dbb      	ldrb	r3, [r7, #22]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d000      	beq.n	8001484 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001482:	e7f2      	b.n	800146a <BMP280_ReadTemperature+0x4a>
				  break;
 8001484:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001486:	20fa      	movs	r0, #250	; 0xfa
 8001488:	f7ff feca 	bl	8001220 <BMP280_Read24>
 800148c:	4603      	mov	r3, r0
 800148e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	111b      	asrs	r3, r3, #4
 8001494:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	10da      	asrs	r2, r3, #3
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <BMP280_ReadTemperature+0x100>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80014a2:	4a20      	ldr	r2, [pc, #128]	; (8001524 <BMP280_ReadTemperature+0x104>)
 80014a4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	12db      	asrs	r3, r3, #11
 80014ae:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	111b      	asrs	r3, r3, #4
 80014b4:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <BMP280_ReadTemperature+0x100>)
 80014b6:	8812      	ldrh	r2, [r2, #0]
 80014b8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	1112      	asrs	r2, r2, #4
 80014be:	4918      	ldr	r1, [pc, #96]	; (8001520 <BMP280_ReadTemperature+0x100>)
 80014c0:	8809      	ldrh	r1, [r1, #0]
 80014c2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <BMP280_ReadTemperature+0x108>)
 80014cc:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014d4:	139b      	asrs	r3, r3, #14
 80014d6:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	4413      	add	r3, r2
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <BMP280_ReadTemperature+0x10c>)
 80014e0:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <BMP280_ReadTemperature+0x10c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3380      	adds	r3, #128	; 0x80
 80014ee:	121b      	asrs	r3, r3, #8
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f8:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001530 <BMP280_ReadTemperature+0x110>
 8001504:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001508:	e001      	b.n	800150e <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 800150a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001534 <BMP280_ReadTemperature+0x114>
 800150e:	eef0 7a47 	vmov.f32	s15, s14
}
 8001512:	eeb0 0a67 	vmov.f32	s0, s15
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000657 	.word	0x20000657
 8001520:	20000654 	.word	0x20000654
 8001524:	20000644 	.word	0x20000644
 8001528:	2000063c 	.word	0x2000063c
 800152c:	20000660 	.word	0x20000660
 8001530:	42c80000 	.word	0x42c80000
 8001534:	c2c60000 	.word	0xc2c60000

08001538 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800153c:	b09c      	sub	sp, #112	; 0x70
 800153e:	af00      	add	r7, sp, #0
 8001540:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001542:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001544:	f7ff ff6c 	bl	8001420 <BMP280_ReadTemperature>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
 800154c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154e:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001728 <BMP280_ReadTemperatureAndPressure+0x1f0>
 800155c:	eef4 7a47 	vcmp.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d101      	bne.n	800156a <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001566:	23ff      	movs	r3, #255	; 0xff
 8001568:	e1d8      	b.n	800191c <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800156a:	20f7      	movs	r0, #247	; 0xf7
 800156c:	f7ff fe58 	bl	8001220 <BMP280_Read24>
 8001570:	4603      	mov	r3, r0
 8001572:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001576:	111b      	asrs	r3, r3, #4
 8001578:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 800157a:	4b6c      	ldr	r3, [pc, #432]	; (800172c <BMP280_ReadTemperatureAndPressure+0x1f4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001584:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001588:	f143 35ff 	adc.w	r5, r3, #4294967295
 800158c:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 8001590:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001594:	fb03 f102 	mul.w	r1, r3, r2
 8001598:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800159a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800159c:	fb03 f302 	mul.w	r3, r3, r2
 80015a0:	18ca      	adds	r2, r1, r3
 80015a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015a4:	fba3 4503 	umull	r4, r5, r3, r3
 80015a8:	1953      	adds	r3, r2, r5
 80015aa:	461d      	mov	r5, r3
 80015ac:	4b60      	ldr	r3, [pc, #384]	; (8001730 <BMP280_ReadTemperatureAndPressure+0x1f8>)
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015b8:	fb02 f005 	mul.w	r0, r2, r5
 80015bc:	fb04 f103 	mul.w	r1, r4, r3
 80015c0:	4401      	add	r1, r0
 80015c2:	fba4 2302 	umull	r2, r3, r4, r2
 80015c6:	4419      	add	r1, r3
 80015c8:	460b      	mov	r3, r1
 80015ca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80015ce:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80015d2:	4b58      	ldr	r3, [pc, #352]	; (8001734 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 80015d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d8:	b21a      	sxth	r2, r3
 80015da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015e0:	fb03 f001 	mul.w	r0, r3, r1
 80015e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80015e6:	fb02 f101 	mul.w	r1, r2, r1
 80015ea:	4408      	add	r0, r1
 80015ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015ee:	fba1 2302 	umull	r2, r3, r1, r2
 80015f2:	18c1      	adds	r1, r0, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	0459      	lsls	r1, r3, #17
 8001600:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001604:	0450      	lsls	r0, r2, #17
 8001606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800160a:	eb12 0800 	adds.w	r8, r2, r0
 800160e:	eb43 0901 	adc.w	r9, r3, r1
 8001612:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 8001616:	4b48      	ldr	r3, [pc, #288]	; (8001738 <BMP280_ReadTemperatureAndPressure+0x200>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	b21a      	sxth	r2, r3
 800161e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001622:	f04f 0000 	mov.w	r0, #0
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	00d1      	lsls	r1, r2, #3
 800162c:	2000      	movs	r0, #0
 800162e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001632:	1814      	adds	r4, r2, r0
 8001634:	61bc      	str	r4, [r7, #24]
 8001636:	414b      	adcs	r3, r1
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800163e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001642:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001646:	fb03 f102 	mul.w	r1, r3, r2
 800164a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800164c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800164e:	fb03 f302 	mul.w	r3, r3, r2
 8001652:	18ca      	adds	r2, r1, r3
 8001654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001656:	fba3 4503 	umull	r4, r5, r3, r3
 800165a:	1953      	adds	r3, r2, r5
 800165c:	461d      	mov	r5, r3
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <BMP280_ReadTemperatureAndPressure+0x204>)
 8001660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001664:	b21a      	sxth	r2, r3
 8001666:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800166a:	fb02 f005 	mul.w	r0, r2, r5
 800166e:	fb04 f103 	mul.w	r1, r4, r3
 8001672:	4401      	add	r1, r0
 8001674:	fba4 2302 	umull	r2, r3, r4, r2
 8001678:	4419      	add	r1, r3
 800167a:	460b      	mov	r3, r1
 800167c:	f04f 0800 	mov.w	r8, #0
 8001680:	f04f 0900 	mov.w	r9, #0
 8001684:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001688:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800168c:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <BMP280_ReadTemperatureAndPressure+0x208>)
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	b21a      	sxth	r2, r3
 8001698:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800169c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800169e:	fb03 f001 	mul.w	r0, r3, r1
 80016a2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80016a4:	fb02 f101 	mul.w	r1, r2, r1
 80016a8:	1844      	adds	r4, r0, r1
 80016aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016ac:	fba1 0102 	umull	r0, r1, r1, r2
 80016b0:	1863      	adds	r3, r4, r1
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	030b      	lsls	r3, r1, #12
 80016be:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80016c2:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016c4:	eb18 0102 	adds.w	r1, r8, r2
 80016c8:	6139      	str	r1, [r7, #16]
 80016ca:	eb49 0303 	adc.w	r3, r9, r3
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016d4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80016d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016dc:	1c11      	adds	r1, r2, #0
 80016de:	6439      	str	r1, [r7, #64]	; 0x40
 80016e0:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80016e4:	647b      	str	r3, [r7, #68]	; 0x44
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <BMP280_ReadTemperatureAndPressure+0x20c>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80016f4:	4629      	mov	r1, r5
 80016f6:	fb02 f001 	mul.w	r0, r2, r1
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f103 	mul.w	r1, r1, r3
 8001700:	4401      	add	r1, r0
 8001702:	4620      	mov	r0, r4
 8001704:	fba0 2302 	umull	r2, r3, r0, r2
 8001708:	4419      	add	r1, r3
 800170a:	460b      	mov	r3, r1
 800170c:	f04f 0000 	mov.w	r0, #0
 8001710:	f04f 0100 	mov.w	r1, #0
 8001714:	1058      	asrs	r0, r3, #1
 8001716:	17d9      	asrs	r1, r3, #31
 8001718:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 800171c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001720:	4313      	orrs	r3, r2
 8001722:	d111      	bne.n	8001748 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 8001724:	2300      	movs	r3, #0
 8001726:	e0f9      	b.n	800191c <BMP280_ReadTemperatureAndPressure+0x3e4>
 8001728:	c2c60000 	.word	0xc2c60000
 800172c:	20000660 	.word	0x20000660
 8001730:	2000064c 	.word	0x2000064c
 8001734:	20000646 	.word	0x20000646
 8001738:	2000065c 	.word	0x2000065c
 800173c:	20000658 	.word	0x20000658
 8001740:	2000063e 	.word	0x2000063e
 8001744:	20000648 	.word	0x20000648
	  }
	  p = 1048576 - adc_P;
 8001748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800174a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800174e:	461a      	mov	r2, r3
 8001750:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001754:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8001758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800175e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001760:	07db      	lsls	r3, r3, #31
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
 8001764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001768:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800176c:	4621      	mov	r1, r4
 800176e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001772:	4629      	mov	r1, r5
 8001774:	eb61 0b03 	sbc.w	fp, r1, r3
 8001778:	4652      	mov	r2, sl
 800177a:	465b      	mov	r3, fp
 800177c:	1891      	adds	r1, r2, r2
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	415b      	adcs	r3, r3
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001788:	eb12 020a 	adds.w	r2, r2, sl
 800178c:	eb43 030b 	adc.w	r3, r3, fp
 8001790:	f04f 0000 	mov.w	r0, #0
 8001794:	f04f 0100 	mov.w	r1, #0
 8001798:	0199      	lsls	r1, r3, #6
 800179a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800179e:	0190      	lsls	r0, r2, #6
 80017a0:	1812      	adds	r2, r2, r0
 80017a2:	eb41 0303 	adc.w	r3, r1, r3
 80017a6:	f04f 0000 	mov.w	r0, #0
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017b4:	0090      	lsls	r0, r2, #2
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	eb12 020a 	adds.w	r2, r2, sl
 80017be:	eb43 030b 	adc.w	r3, r3, fp
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	0099      	lsls	r1, r3, #2
 80017cc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017d0:	0090      	lsls	r0, r2, #2
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	eb12 010a 	adds.w	r1, r2, sl
 80017da:	6339      	str	r1, [r7, #48]	; 0x30
 80017dc:	eb43 030b 	adc.w	r3, r3, fp
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
 80017e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017ea:	f7ff fa6d 	bl	8000cc8 <__aeabi_ldivmod>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80017f6:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 80017f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fc:	b218      	sxth	r0, r3
 80017fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001802:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	0b62      	lsrs	r2, r4, #13
 8001810:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001814:	136b      	asrs	r3, r5, #13
 8001816:	fb02 f501 	mul.w	r5, r2, r1
 800181a:	fb00 f403 	mul.w	r4, r0, r3
 800181e:	442c      	add	r4, r5
 8001820:	fba0 0102 	umull	r0, r1, r0, r2
 8001824:	1863      	adds	r3, r4, r1
 8001826:	4619      	mov	r1, r3
 8001828:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	0b62      	lsrs	r2, r4, #13
 8001836:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800183a:	136b      	asrs	r3, r5, #13
 800183c:	fb02 f501 	mul.w	r5, r2, r1
 8001840:	fb00 f403 	mul.w	r4, r0, r3
 8001844:	442c      	add	r4, r5
 8001846:	fba0 0102 	umull	r0, r1, r0, r2
 800184a:	1863      	adds	r3, r4, r1
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	0e42      	lsrs	r2, r0, #25
 8001858:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800185c:	164b      	asrs	r3, r1, #25
 800185e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 8001862:	4b32      	ldr	r3, [pc, #200]	; (800192c <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	b21a      	sxth	r2, r3
 800186a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800186e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001870:	fb03 f001 	mul.w	r0, r3, r1
 8001874:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001876:	fb02 f101 	mul.w	r1, r2, r1
 800187a:	1844      	adds	r4, r0, r1
 800187c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800187e:	fba1 0102 	umull	r0, r1, r1, r2
 8001882:	1863      	adds	r3, r4, r1
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	0cc2      	lsrs	r2, r0, #19
 8001890:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001894:	14cb      	asrs	r3, r1, #19
 8001896:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 800189a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800189e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018a2:	1884      	adds	r4, r0, r2
 80018a4:	62bc      	str	r4, [r7, #40]	; 0x28
 80018a6:	eb41 0303 	adc.w	r3, r1, r3
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018b0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018b4:	4621      	mov	r1, r4
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	6239      	str	r1, [r7, #32]
 80018ba:	4629      	mov	r1, r5
 80018bc:	eb43 0101 	adc.w	r1, r3, r1
 80018c0:	6279      	str	r1, [r7, #36]	; 0x24
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018ce:	4623      	mov	r3, r4
 80018d0:	0a18      	lsrs	r0, r3, #8
 80018d2:	462b      	mov	r3, r5
 80018d4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018d8:	462b      	mov	r3, r5
 80018da:	1219      	asrs	r1, r3, #8
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <BMP280_ReadTemperatureAndPressure+0x3f8>)
 80018de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e2:	b21c      	sxth	r4, r3
 80018e4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	012b      	lsls	r3, r5, #4
 80018f2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018f6:	0122      	lsls	r2, r4, #4
 80018f8:	1884      	adds	r4, r0, r2
 80018fa:	603c      	str	r4, [r7, #0]
 80018fc:	eb41 0303 	adc.w	r3, r1, r3
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001906:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 800190a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800190c:	2b00      	cmp	r3, #0
 800190e:	da00      	bge.n	8001912 <BMP280_ReadTemperatureAndPressure+0x3da>
 8001910:	33ff      	adds	r3, #255	; 0xff
 8001912:	121b      	asrs	r3, r3, #8
 8001914:	461a      	mov	r2, r3
 8001916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001918:	601a      	str	r2, [r3, #0]

	  return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3770      	adds	r7, #112	; 0x70
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001926:	bf00      	nop
 8001928:	2000065a 	.word	0x2000065a
 800192c:	2000064a 	.word	0x2000064a
 8001930:	20000640 	.word	0x20000640

08001934 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	font = font_t;
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <GFX_SetFont+0x1c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000664 	.word	0x20000664

08001954 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <GFX_SetFontSize+0x16>
		size = size_t;
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <GFX_SetFontSize+0x24>)
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	7013      	strb	r3, [r2, #0]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000000 	.word	0x20000000

0800197c <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	460b      	mov	r3, r1
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	4613      	mov	r3, r2
 8001990:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b7e      	cmp	r3, #126	; 0x7e
 8001996:	f200 80a3 	bhi.w	8001ae0 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
 800199e:	e096      	b.n	8001ace <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80019a0:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <GFX_DrawChar+0x16c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	3b20      	subs	r3, #32
 80019a8:	494f      	ldr	r1, [pc, #316]	; (8001ae8 <GFX_DrawChar+0x16c>)
 80019aa:	6809      	ldr	r1, [r1, #0]
 80019ac:	3101      	adds	r1, #1
 80019ae:	7809      	ldrb	r1, [r1, #0]
 80019b0:	fb01 f103 	mul.w	r1, r1, r3
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	440b      	add	r3, r1
 80019b8:	3302      	adds	r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80019c0:	2300      	movs	r3, #0
 80019c2:	757b      	strb	r3, [r7, #21]
 80019c4:	e078      	b.n	8001ab8 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80019c6:	7dbb      	ldrb	r3, [r7, #22]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d032      	beq.n	8001a36 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 80019d0:	4b46      	ldr	r3, [pc, #280]	; (8001aec <GFX_DrawChar+0x170>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d113      	bne.n	8001a00 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b218      	sxth	r0, r3
 80019e6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	79ba      	ldrb	r2, [r7, #6]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f000 fb1d 	bl	8002038 <SSD1306_DrawPixel>
 80019fe:	e052      	b.n	8001aa6 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <GFX_DrawChar+0x170>)
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	fb02 f203 	mul.w	r2, r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	18d0      	adds	r0, r2, r3
 8001a0e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a12:	4a36      	ldr	r2, [pc, #216]	; (8001aec <GFX_DrawChar+0x170>)
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	fb02 f203 	mul.w	r2, r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	18d1      	adds	r1, r2, r3
 8001a1e:	4b33      	ldr	r3, [pc, #204]	; (8001aec <GFX_DrawChar+0x170>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <GFX_DrawChar+0x170>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b29c      	uxth	r4, r3
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4623      	mov	r3, r4
 8001a30:	f000 f9ea 	bl	8001e08 <GFX_DrawFillRectangle>
 8001a34:	e037      	b.n	8001aa6 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001a36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d133      	bne.n	8001aa6 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <GFX_DrawChar+0x170>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d114      	bne.n	8001a70 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b218      	sxth	r0, r3
 8001a54:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f000 fae5 	bl	8002038 <SSD1306_DrawPixel>
 8001a6e:	e01a      	b.n	8001aa6 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <GFX_DrawChar+0x170>)
 8001a74:	7812      	ldrb	r2, [r2, #0]
 8001a76:	fb02 f203 	mul.w	r2, r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	18d0      	adds	r0, r2, r3
 8001a7e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a82:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <GFX_DrawChar+0x170>)
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	fb02 f203 	mul.w	r2, r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	18d1      	adds	r1, r2, r3
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <GFX_DrawChar+0x170>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <GFX_DrawChar+0x170>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b29c      	uxth	r4, r3
 8001a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	f000 f9b1 	bl	8001e08 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001aa6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	757b      	strb	r3, [r7, #21]
 8001ab2:	7dbb      	ldrb	r3, [r7, #22]
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	75bb      	strb	r3, [r7, #22]
 8001ab8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <GFX_DrawChar+0x16c>)
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	f6ff af7f 	blt.w	80019c6 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	3301      	adds	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <GFX_DrawChar+0x16c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	7dfa      	ldrb	r2, [r7, #23]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f4ff af61 	bcc.w	80019a0 <GFX_DrawChar+0x24>
 8001ade:	e000      	b.n	8001ae2 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001ae0:	bf00      	nop
            }
        }
    }
}
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	20000664 	.word	0x20000664
 8001aec:	20000000 	.word	0x20000000

08001af0 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001b08:	e03e      	b.n	8001b88 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001b0a:	78f9      	ldrb	r1, [r7, #3]
 8001b0c:	7cfa      	ldrb	r2, [r7, #19]
 8001b0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	460b      	mov	r3, r1
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f7ff ff2f 	bl	800197c <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <GFX_DrawString+0xb0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <GFX_DrawString+0xb4>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	fb03 f302 	mul.w	r3, r3, r2
 8001b30:	3301      	adds	r3, #1
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4413      	add	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001b38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d120      	bne.n	8001b82 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	74bb      	strb	r3, [r7, #18]
 8001b44:	e012      	b.n	8001b6c <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	b218      	sxth	r0, r3
 8001b50:	7cbb      	ldrb	r3, [r7, #18]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	f000 fa69 	bl	8002038 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001b66:	7cbb      	ldrb	r3, [r7, #18]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	74bb      	strb	r3, [r7, #18]
 8001b6c:	7cba      	ldrb	r2, [r7, #18]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <GFX_DrawString+0xb0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <GFX_DrawString+0xb4>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	fb03 f301 	mul.w	r3, r3, r1
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbe1      	blt.n	8001b46 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ba      	bne.n	8001b0a <GFX_DrawString+0x1a>
	}
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000664 	.word	0x20000664
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bc0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1acb      	subs	r3, r1, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bfb8      	it	lt
 8001bce:	425b      	neglt	r3, r3
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	bfcc      	ite	gt
 8001bd4:	2301      	movgt	r3, #1
 8001bd6:	2300      	movle	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001bdc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00b      	beq.n	8001bfc <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	623b      	str	r3, [r7, #32]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dd0b      	ble.n	8001c1c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bfb8      	it	lt
 8001c34:	425b      	neglt	r3, r3
 8001c36:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001c38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	da00      	bge.n	8001c42 <GFX_WriteLine+0x9a>
 8001c40:	3301      	adds	r3, #1
 8001c42:	105b      	asrs	r3, r3, #1
 8001c44:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da02      	bge.n	8001c54 <GFX_WriteLine+0xac>
	        ystep = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001c52:	e030      	b.n	8001cb6 <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 8001c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c58:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001c5a:	e02c      	b.n	8001cb6 <GFX_WriteLine+0x10e>
	        if (steep) {
 8001c5c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	b211      	sxth	r1, r2
 8001c6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f9e1 	bl	8002038 <SSD1306_DrawPixel>
 8001c76:	e008      	b.n	8001c8a <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	b211      	sxth	r1, r2
 8001c80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f9d7 	bl	8002038 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8001c8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001c8c:	8abb      	ldrh	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001c94:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da09      	bge.n	8001cb0 <GFX_WriteLine+0x108>
	            y_start += ystep;
 8001c9c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001ca6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001ca8:	8afb      	ldrh	r3, [r7, #22]
 8001caa:	4413      	add	r3, r2
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	ddce      	ble.n	8001c5c <GFX_WriteLine+0xb4>
	        }
	    }
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	3730      	adds	r7, #48	; 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff ff5d 	bl	8001ba8 <GFX_WriteLine>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff ff47 	bl	8001ba8 <GFX_WriteLine>
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b088      	sub	sp, #32
 8001d26:	af02      	add	r7, sp, #8
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d114      	bne.n	8001d62 <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dd05      	ble.n	8001d4c <GFX_DrawLine+0x2a>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff ffb4 	bl	8001cc8 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001d60:	e021      	b.n	8001da6 <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d114      	bne.n	8001d94 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	dd05      	ble.n	8001d7e <GFX_DrawLine+0x5c>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff ffb2 	bl	8001cf6 <GFX_DrawFastHLine>
}
 8001d92:	e008      	b.n	8001da6 <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 8001d94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f7ff ff01 	bl	8001ba8 <GFX_WriteLine>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <GFX_DrawRectangle>:
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	4611      	mov	r1, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	80fb      	strh	r3, [r7, #6]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8001dc4:	88fa      	ldrh	r2, [r7, #6]
 8001dc6:	7e3b      	ldrb	r3, [r7, #24]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff ff93 	bl	8001cf6 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8001dd0:	88ba      	ldrh	r2, [r7, #4]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	1e59      	subs	r1, r3, #1
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	7e3b      	ldrb	r3, [r7, #24]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff ff8a 	bl	8001cf6 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8001de2:	88ba      	ldrh	r2, [r7, #4]
 8001de4:	7e3b      	ldrb	r3, [r7, #24]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff ff6d 	bl	8001cc8 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	1e58      	subs	r0, r3, #1
 8001df6:	88ba      	ldrh	r2, [r7, #4]
 8001df8:	7e3b      	ldrb	r3, [r7, #24]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	f7ff ff64 	bl	8001cc8 <GFX_DrawFastVLine>

}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	460b      	mov	r3, r1
 8001e18:	80fb      	strh	r3, [r7, #6]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e009      	b.n	8001e38 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001e24:	88ba      	ldrh	r2, [r7, #4]
 8001e26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6978      	ldr	r0, [r7, #20]
 8001e2e:	f7ff ff4b 	bl	8001cc8 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	88fa      	ldrh	r2, [r7, #6]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dbef      	blt.n	8001e24 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <u_pid_calculate>:
 */

#include "PID_Controller.h"
#include "main.h"

float u_pid_calculate(pid_controller_t* pid, float temp_zadana, float temp_aktualna){
 8001e4e:	b5b0      	push	{r4, r5, r7, lr}
 8001e50:	b08a      	sub	sp, #40	; 0x28
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e5a:	edc7 0a01 	vstr	s1, [r7, #4]
	float u = 0, P, I, D, integral, derivative;
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
	pid->uchyb_aktualny = temp_zadana - temp_aktualna;
 8001e64:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	edc3 7a06 	vstr	s15, [r3, #24]
	//
	//Część proporcjonalna
	//
	P = pid->Kp*pid->uchyb_aktualny;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	ed93 7a00 	vldr	s14, [r3]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	//Część całkująca
	//
	integral = pid->calka_poprzedni + pid->uchyb_aktualny + pid->uchyb_aktualny;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->calka_poprzedni = integral;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	615a      	str	r2, [r3, #20]
	I = pid->Ki*integral*(pid->dt/2.0);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebc:	ee17 0a90 	vmov	r0, s15
 8001ec0:	f7fe fb62 	bl	8000588 <__aeabi_f2d>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	460d      	mov	r5, r1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb5b 	bl	8000588 <__aeabi_f2d>
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eda:	f7fe fcd7 	bl	800088c <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	f7fe fba7 	bl	8000638 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fe99 	bl	8000c28 <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	61bb      	str	r3, [r7, #24]
	//
	//Część różniczkująca
	//
	derivative = (pid->uchyb_aktualny - pid->uchyb_poprzedni)/pid->dt;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f14:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->uchyb_poprzedni = pid->uchyb_aktualny;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	699a      	ldr	r2, [r3, #24]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
	D = pid->Kd*derivative;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f26:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	//Obliczenie sterowania
	//
	u = P + I + D;
 8001f32:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return u;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	ee07 3a90 	vmov	s15, r3
}
 8001f50:	eeb0 0a67 	vmov.f32	s0, s15
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f5c <saturation_pwm>:

uint16_t saturation_pwm(float u){
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	ed87 0a01 	vstr	s0, [r7, #4]
	float counter_period = 999.0; //ZMIENIC!!!!!!
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <saturation_pwm+0x70>)
 8001f68:	613b      	str	r3, [r7, #16]
	float pwm_duty = (counter_period*u);
 8001f6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f76:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t sat_pwm;
	if(pwm_duty < 0){
 8001f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	d502      	bpl.n	8001f8e <saturation_pwm+0x32>
		sat_pwm = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	82fb      	strh	r3, [r7, #22]
 8001f8c:	e017      	b.n	8001fbe <saturation_pwm+0x62>
	}
	else if(pwm_duty > counter_period){
 8001f8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9e:	dd07      	ble.n	8001fb0 <saturation_pwm+0x54>
		sat_pwm = counter_period;
 8001fa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa8:	ee17 3a90 	vmov	r3, s15
 8001fac:	82fb      	strh	r3, [r7, #22]
 8001fae:	e006      	b.n	8001fbe <saturation_pwm+0x62>
	}else{
		sat_pwm = pwm_duty;
 8001fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb8:	ee17 3a90 	vmov	r3, s15
 8001fbc:	82fb      	strh	r3, [r7, #22]
	}
	return sat_pwm;
 8001fbe:	8afb      	ldrh	r3, [r7, #22]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	4479c000 	.word	0x4479c000

08001fd0 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af04      	add	r7, sp, #16
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <SSD1306_Command+0x30>)
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe2:	9302      	str	r3, [sp, #8]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	1dfb      	adds	r3, r7, #7
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2301      	movs	r3, #1
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2178      	movs	r1, #120	; 0x78
 8001ff2:	f001 fe51 	bl	8003c98 <HAL_I2C_Mem_Write>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000668 	.word	0x20000668

08002004 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af04      	add	r7, sp, #16
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <SSD1306_Data+0x30>)
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2301      	movs	r3, #1
 8002024:	2240      	movs	r2, #64	; 0x40
 8002026:	2178      	movs	r1, #120	; 0x78
 8002028:	f001 fe36 	bl	8003c98 <HAL_I2C_Mem_Write>
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000668 	.word	0x20000668

08002038 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
 8002042:	460b      	mov	r3, r1
 8002044:	80bb      	strh	r3, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800204a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db79      	blt.n	8002146 <SSD1306_DrawPixel+0x10e>
 8002052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002056:	2b7f      	cmp	r3, #127	; 0x7f
 8002058:	dc75      	bgt.n	8002146 <SSD1306_DrawPixel+0x10e>
 800205a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db71      	blt.n	8002146 <SSD1306_DrawPixel+0x10e>
 8002062:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002066:	2b3f      	cmp	r3, #63	; 0x3f
 8002068:	dc6d      	bgt.n	8002146 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d049      	beq.n	8002104 <SSD1306_DrawPixel+0xcc>
 8002070:	2b02      	cmp	r3, #2
 8002072:	dc69      	bgt.n	8002148 <SSD1306_DrawPixel+0x110>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d022      	beq.n	80020be <SSD1306_DrawPixel+0x86>
 8002078:	2b01      	cmp	r3, #1
 800207a:	d165      	bne.n	8002148 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800207c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002080:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da00      	bge.n	800208a <SSD1306_DrawPixel+0x52>
 8002088:	3307      	adds	r3, #7
 800208a:	10db      	asrs	r3, r3, #3
 800208c:	b218      	sxth	r0, r3
 800208e:	4603      	mov	r3, r0
 8002090:	01db      	lsls	r3, r3, #7
 8002092:	4413      	add	r3, r2
 8002094:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <SSD1306_DrawPixel+0x11c>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	b25a      	sxtb	r2, r3
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	b25b      	sxtb	r3, r3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b259      	sxtb	r1, r3
 80020ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020b0:	4603      	mov	r3, r0
 80020b2:	01db      	lsls	r3, r3, #7
 80020b4:	4413      	add	r3, r2
 80020b6:	b2c9      	uxtb	r1, r1
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <SSD1306_DrawPixel+0x11c>)
 80020ba:	54d1      	strb	r1, [r2, r3]
      break;
 80020bc:	e044      	b.n	8002148 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 80020be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	da00      	bge.n	80020cc <SSD1306_DrawPixel+0x94>
 80020ca:	3307      	adds	r3, #7
 80020cc:	10db      	asrs	r3, r3, #3
 80020ce:	b218      	sxth	r0, r3
 80020d0:	4603      	mov	r3, r0
 80020d2:	01db      	lsls	r3, r3, #7
 80020d4:	4413      	add	r3, r2
 80020d6:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <SSD1306_DrawPixel+0x11c>)
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	b25a      	sxtb	r2, r3
 80020dc:	88bb      	ldrh	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	4013      	ands	r3, r2
 80020f0:	b259      	sxtb	r1, r3
 80020f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020f6:	4603      	mov	r3, r0
 80020f8:	01db      	lsls	r3, r3, #7
 80020fa:	4413      	add	r3, r2
 80020fc:	b2c9      	uxtb	r1, r1
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <SSD1306_DrawPixel+0x11c>)
 8002100:	54d1      	strb	r1, [r2, r3]
      break;
 8002102:	e021      	b.n	8002148 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8002104:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002108:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	da00      	bge.n	8002112 <SSD1306_DrawPixel+0xda>
 8002110:	3307      	adds	r3, #7
 8002112:	10db      	asrs	r3, r3, #3
 8002114:	b218      	sxth	r0, r3
 8002116:	4603      	mov	r3, r0
 8002118:	01db      	lsls	r3, r3, #7
 800211a:	4413      	add	r3, r2
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <SSD1306_DrawPixel+0x11c>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	b25a      	sxtb	r2, r3
 8002122:	88bb      	ldrh	r3, [r7, #4]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	b25b      	sxtb	r3, r3
 8002130:	4053      	eors	r3, r2
 8002132:	b259      	sxtb	r1, r3
 8002134:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002138:	4603      	mov	r3, r0
 800213a:	01db      	lsls	r3, r3, #7
 800213c:	4413      	add	r3, r2
 800213e:	b2c9      	uxtb	r1, r1
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <SSD1306_DrawPixel+0x11c>)
 8002142:	54d1      	strb	r1, [r2, r3]
      break;
 8002144:	e000      	b.n	8002148 <SSD1306_DrawPixel+0x110>
	  return;
 8002146:	bf00      	nop
    }
}
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000224 	.word	0x20000224

08002158 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <SSD1306_Clear+0x22>
 8002168:	2b01      	cmp	r3, #1
 800216a:	d10d      	bne.n	8002188 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 800216c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002170:	21ff      	movs	r1, #255	; 0xff
 8002172:	4807      	ldr	r0, [pc, #28]	; (8002190 <SSD1306_Clear+0x38>)
 8002174:	f006 ff7a 	bl	800906c <memset>
		break;
 8002178:	e006      	b.n	8002188 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800217a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217e:	2100      	movs	r1, #0
 8002180:	4803      	ldr	r0, [pc, #12]	; (8002190 <SSD1306_Clear+0x38>)
 8002182:	f006 ff73 	bl	800906c <memset>
		break;
 8002186:	bf00      	nop
	}
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000224 	.word	0x20000224

08002194 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8002198:	2022      	movs	r0, #34	; 0x22
 800219a:	f7ff ff19 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 800219e:	2000      	movs	r0, #0
 80021a0:	f7ff ff16 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 80021a4:	20ff      	movs	r0, #255	; 0xff
 80021a6:	f7ff ff13 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 80021aa:	2021      	movs	r0, #33	; 0x21
 80021ac:	f7ff ff10 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7ff ff0d 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 80021b6:	207f      	movs	r0, #127	; 0x7f
 80021b8:	f7ff ff0a 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 80021bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <SSD1306_Display+0x38>)
 80021c2:	f7ff ff1f 	bl	8002004 <SSD1306_Data>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000224 	.word	0x20000224

080021d0 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 80021d8:	4a28      	ldr	r2, [pc, #160]	; (800227c <SSD1306_Init+0xac>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 80021de:	20ae      	movs	r0, #174	; 0xae
 80021e0:	f7ff fef6 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80021e4:	20d5      	movs	r0, #213	; 0xd5
 80021e6:	f7ff fef3 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0x80);
 80021ea:	2080      	movs	r0, #128	; 0x80
 80021ec:	f7ff fef0 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80021f0:	203f      	movs	r0, #63	; 0x3f
 80021f2:	f7ff feed 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80021f6:	20d3      	movs	r0, #211	; 0xd3
 80021f8:	f7ff feea 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0x00);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff fee7 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8002202:	2040      	movs	r0, #64	; 0x40
 8002204:	f7ff fee4 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8002208:	208d      	movs	r0, #141	; 0x8d
 800220a:	f7ff fee1 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0x14);
 800220e:	2014      	movs	r0, #20
 8002210:	f7ff fede 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8002214:	2020      	movs	r0, #32
 8002216:	f7ff fedb 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff fed8 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8002220:	20a1      	movs	r0, #161	; 0xa1
 8002222:	f7ff fed5 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8002226:	20c8      	movs	r0, #200	; 0xc8
 8002228:	f7ff fed2 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 800222c:	20da      	movs	r0, #218	; 0xda
 800222e:	f7ff fecf 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0x12);
 8002232:	2012      	movs	r0, #18
 8002234:	f7ff fecc 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8002238:	2081      	movs	r0, #129	; 0x81
 800223a:	f7ff fec9 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0xFF);
 800223e:	20ff      	movs	r0, #255	; 0xff
 8002240:	f7ff fec6 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8002244:	20d9      	movs	r0, #217	; 0xd9
 8002246:	f7ff fec3 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800224a:	20f1      	movs	r0, #241	; 0xf1
 800224c:	f7ff fec0 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8002250:	20db      	movs	r0, #219	; 0xdb
 8002252:	f7ff febd 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(0x40);
 8002256:	2040      	movs	r0, #64	; 0x40
 8002258:	f7ff feba 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 800225c:	20a4      	movs	r0, #164	; 0xa4
 800225e:	f7ff feb7 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8002262:	20a6      	movs	r0, #166	; 0xa6
 8002264:	f7ff feb4 	bl	8001fd0 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8002268:	202e      	movs	r0, #46	; 0x2e
 800226a:	f7ff feb1 	bl	8001fd0 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 800226e:	20af      	movs	r0, #175	; 0xaf
 8002270:	f7ff feae 	bl	8001fd0 <SSD1306_Command>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000668 	.word	0x20000668

08002280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002296:	4b51      	ldr	r3, [pc, #324]	; (80023dc <MX_GPIO_Init+0x15c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a50      	ldr	r2, [pc, #320]	; (80023dc <MX_GPIO_Init+0x15c>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ae:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a4a      	ldr	r2, [pc, #296]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b48      	ldr	r3, [pc, #288]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	4b45      	ldr	r3, [pc, #276]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a44      	ldr	r2, [pc, #272]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b42      	ldr	r3, [pc, #264]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a3e      	ldr	r2, [pc, #248]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f6:	4b39      	ldr	r3, [pc, #228]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a38      	ldr	r2, [pc, #224]	; (80023dc <MX_GPIO_Init+0x15c>)
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <MX_GPIO_Init+0x15c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800230e:	4b33      	ldr	r3, [pc, #204]	; (80023dc <MX_GPIO_Init+0x15c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a32      	ldr	r2, [pc, #200]	; (80023dc <MX_GPIO_Init+0x15c>)
 8002314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b30      	ldr	r3, [pc, #192]	; (80023dc <MX_GPIO_Init+0x15c>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002326:	2200      	movs	r2, #0
 8002328:	f244 0181 	movw	r1, #16513	; 0x4081
 800232c:	482c      	ldr	r0, [pc, #176]	; (80023e0 <MX_GPIO_Init+0x160>)
 800232e:	f001 fbef 	bl	8003b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2140      	movs	r1, #64	; 0x40
 8002336:	482b      	ldr	r0, [pc, #172]	; (80023e4 <MX_GPIO_Init+0x164>)
 8002338:	f001 fbea 	bl	8003b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800233c:	2201      	movs	r2, #1
 800233e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002342:	4827      	ldr	r0, [pc, #156]	; (80023e0 <MX_GPIO_Init+0x160>)
 8002344:	f001 fbe4 	bl	8003b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800234e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	4619      	mov	r1, r3
 800235e:	4822      	ldr	r0, [pc, #136]	; (80023e8 <MX_GPIO_Init+0x168>)
 8002360:	f001 fa2a 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002364:	f244 0381 	movw	r3, #16513	; 0x4081
 8002368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236a:	2301      	movs	r3, #1
 800236c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4619      	mov	r1, r3
 800237c:	4818      	ldr	r0, [pc, #96]	; (80023e0 <MX_GPIO_Init+0x160>)
 800237e:	f001 fa1b 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	4619      	mov	r1, r3
 8002398:	4812      	ldr	r0, [pc, #72]	; (80023e4 <MX_GPIO_Init+0x164>)
 800239a:	f001 fa0d 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 031c 	add.w	r3, r7, #28
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <MX_GPIO_Init+0x164>)
 80023b2:	f001 fa01 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80023b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023c4:	2301      	movs	r3, #1
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <MX_GPIO_Init+0x160>)
 80023d0:	f001 f9f2 	bl	80037b8 <HAL_GPIO_Init>

}
 80023d4:	bf00      	nop
 80023d6:	3730      	adds	r7, #48	; 0x30
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40021800 	.word	0x40021800
 80023e8:	40020800 	.word	0x40020800

080023ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <MX_I2C1_Init+0x74>)
 80023f2:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <MX_I2C1_Init+0x78>)
 80023f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <MX_I2C1_Init+0x74>)
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <MX_I2C1_Init+0x7c>)
 80023fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <MX_I2C1_Init+0x74>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002402:	4b17      	ldr	r3, [pc, #92]	; (8002460 <MX_I2C1_Init+0x74>)
 8002404:	2201      	movs	r2, #1
 8002406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <MX_I2C1_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <MX_I2C1_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <MX_I2C1_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <MX_I2C1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <MX_I2C1_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002426:	480e      	ldr	r0, [pc, #56]	; (8002460 <MX_I2C1_Init+0x74>)
 8002428:	f001 fba6 	bl	8003b78 <HAL_I2C_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002432:	f000 fb39 	bl	8002aa8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002436:	2100      	movs	r1, #0
 8002438:	4809      	ldr	r0, [pc, #36]	; (8002460 <MX_I2C1_Init+0x74>)
 800243a:	f001 ff93 	bl	8004364 <HAL_I2CEx_ConfigAnalogFilter>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002444:	f000 fb30 	bl	8002aa8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002448:	2100      	movs	r1, #0
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_I2C1_Init+0x74>)
 800244c:	f001 ffd5 	bl	80043fa <HAL_I2CEx_ConfigDigitalFilter>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002456:	f000 fb27 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000066c 	.word	0x2000066c
 8002464:	40005400 	.word	0x40005400
 8002468:	00301739 	.word	0x00301739

0800246c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b0aa      	sub	sp, #168	; 0xa8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	2284      	movs	r2, #132	; 0x84
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f006 fded 	bl	800906c <memset>
  if(i2cHandle->Instance==I2C1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a22      	ldr	r2, [pc, #136]	; (8002520 <HAL_I2C_MspInit+0xb4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d13c      	bne.n	8002516 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800249c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fdf0 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024b6:	f000 faf7 	bl	8002aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_I2C_MspInit+0xb8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a19      	ldr	r2, [pc, #100]	; (8002524 <HAL_I2C_MspInit+0xb8>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_I2C_MspInit+0xb8>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80024d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80024d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024da:	2312      	movs	r3, #18
 80024dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024ec:	2304      	movs	r3, #4
 80024ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024f6:	4619      	mov	r1, r3
 80024f8:	480b      	ldr	r0, [pc, #44]	; (8002528 <HAL_I2C_MspInit+0xbc>)
 80024fa:	f001 f95d 	bl	80037b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_I2C_MspInit+0xb8>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_I2C_MspInit+0xb8>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_I2C_MspInit+0xb8>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002516:	bf00      	nop
 8002518:	37a8      	adds	r7, #168	; 0xa8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40005400 	.word	0x40005400
 8002524:	40023800 	.word	0x40023800
 8002528:	40020400 	.word	0x40020400

0800252c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	b08e      	sub	sp, #56	; 0x38
 8002532:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002534:	f000 ff1b 	bl	800336e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002538:	f000 f98a 	bl	8002850 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800253c:	f7ff fea0 	bl	8002280 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8002540:	f000 fdac 	bl	800309c <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8002544:	f000 fe42 	bl	80031cc <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 8002548:	f7ff ff50 	bl	80023ec <MX_I2C1_Init>
	MX_TIM2_Init();
 800254c:	f000 fc6e 	bl	8002e2c <MX_TIM2_Init>
	MX_TIM3_Init();
 8002550:	f000 fcbc 	bl	8002ecc <MX_TIM3_Init>
	MX_SPI1_Init();
 8002554:	f000 faae 	bl	8002ab4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//
	//Włączenie TIM
	//
	HAL_TIM_Base_Start_IT(&htim2); //Podstawowy do dt = 1s
 8002558:	48a1      	ldr	r0, [pc, #644]	; (80027e0 <main+0x2b4>)
 800255a:	f003 fe27 	bl	80061ac <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //Sterowanie transytorem 1kHz
 800255e:	2108      	movs	r1, #8
 8002560:	48a0      	ldr	r0, [pc, #640]	; (80027e4 <main+0x2b8>)
 8002562:	f003 fefd 	bl	8006360 <HAL_TIM_PWM_Start>

	//
	//Ustawienie czujnika Temperatury
	//
	BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8002566:	2301      	movs	r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	2101      	movs	r1, #1
 800256c:	489e      	ldr	r0, [pc, #632]	; (80027e8 <main+0x2bc>)
 800256e:	f7fe fe89 	bl	8001284 <BMP280_Init>

	//
	// Ustawienie Wyświetlacza OLED
	//
	SSD1306_Init(&hi2c1);
 8002572:	489e      	ldr	r0, [pc, #632]	; (80027ec <main+0x2c0>)
 8002574:	f7ff fe2c 	bl	80021d0 <SSD1306_Init>
	GFX_SetFont(font_8x5);
 8002578:	489d      	ldr	r0, [pc, #628]	; (80027f0 <main+0x2c4>)
 800257a:	f7ff f9db 	bl	8001934 <GFX_SetFont>
	GFX_SetFontSize(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f7ff f9e8 	bl	8001954 <GFX_SetFontSize>
	SSD1306_Clear(BLACK);
 8002584:	2000      	movs	r0, #0
 8002586:	f7ff fde7 	bl	8002158 <SSD1306_Clear>
	SSD1306_Display();
 800258a:	f7ff fe03 	bl	8002194 <SSD1306_Display>
	//
	//Pobranie danych z czujnika - wartości początkowe
	//
	BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 800258e:	4999      	ldr	r1, [pc, #612]	; (80027f4 <main+0x2c8>)
 8002590:	4899      	ldr	r0, [pc, #612]	; (80027f8 <main+0x2cc>)
 8002592:	f7fe ffd1 	bl	8001538 <BMP280_ReadTemperatureAndPressure>
	//
	//Otworzenie portu do nasłuchu na przychodzące komendy
	//
	HAL_UART_Receive_IT(&huart3, Buffor_Rx, 8);
 8002596:	2208      	movs	r2, #8
 8002598:	4998      	ldr	r1, [pc, #608]	; (80027fc <main+0x2d0>)
 800259a:	4899      	ldr	r0, [pc, #612]	; (8002800 <main+0x2d4>)
 800259c:	f005 f84b 	bl	8007636 <HAL_UART_Receive_IT>
	while (1)
	{
		//
		//Wyświetlanie danych na wyświetlaczu OLED
		//
		if((HAL_GetTick() - SoftTimerOled) > 100){
 80025a0:	f000 ff36 	bl	8003410 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b97      	ldr	r3, [pc, #604]	; (8002804 <main+0x2d8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b64      	cmp	r3, #100	; 0x64
 80025ae:	f240 80c5 	bls.w	800273c <main+0x210>
			SoftTimerOled = HAL_GetTick();
 80025b2:	f000 ff2d 	bl	8003410 <HAL_GetTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4a92      	ldr	r2, [pc, #584]	; (8002804 <main+0x2d8>)
 80025ba:	6013      	str	r3, [r2, #0]
			SSD1306_Clear(BLACK);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fdcb 	bl	8002158 <SSD1306_Clear>
			sprintf(Message, "Regulacja Temperatury");
 80025c2:	4991      	ldr	r1, [pc, #580]	; (8002808 <main+0x2dc>)
 80025c4:	4891      	ldr	r0, [pc, #580]	; (800280c <main+0x2e0>)
 80025c6:	f007 f9c3 	bl	8009950 <siprintf>
			GFX_DrawString(0, 0, Message, WHITE, 0);
 80025ca:	2300      	movs	r3, #0
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2301      	movs	r3, #1
 80025d0:	4a8e      	ldr	r2, [pc, #568]	; (800280c <main+0x2e0>)
 80025d2:	2100      	movs	r1, #0
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff fa8b 	bl	8001af0 <GFX_DrawString>
			GFX_DrawLine(0, 9, 128, 9, WHITE);
 80025da:	2301      	movs	r3, #1
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2309      	movs	r3, #9
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	2109      	movs	r1, #9
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7ff fb9c 	bl	8001d22 <GFX_DrawLine>
			sprintf(Message, "Aktualna temp: %.2fC", temperature);
 80025ea:	4b83      	ldr	r3, [pc, #524]	; (80027f8 <main+0x2cc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ffca 	bl	8000588 <__aeabi_f2d>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4985      	ldr	r1, [pc, #532]	; (8002810 <main+0x2e4>)
 80025fa:	4884      	ldr	r0, [pc, #528]	; (800280c <main+0x2e0>)
 80025fc:	f007 f9a8 	bl	8009950 <siprintf>
			GFX_DrawString(0, 12, Message, WHITE, 0);
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2301      	movs	r3, #1
 8002606:	4a81      	ldr	r2, [pc, #516]	; (800280c <main+0x2e0>)
 8002608:	210c      	movs	r1, #12
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fa70 	bl	8001af0 <GFX_DrawString>
			sprintf(Message, "Zadana temp: %.1f C", temperature_set);
 8002610:	4b80      	ldr	r3, [pc, #512]	; (8002814 <main+0x2e8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ffb7 	bl	8000588 <__aeabi_f2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	497e      	ldr	r1, [pc, #504]	; (8002818 <main+0x2ec>)
 8002620:	487a      	ldr	r0, [pc, #488]	; (800280c <main+0x2e0>)
 8002622:	f007 f995 	bl	8009950 <siprintf>
			GFX_DrawString(0, 22, Message, WHITE, 0);
 8002626:	2300      	movs	r3, #0
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2301      	movs	r3, #1
 800262c:	4a77      	ldr	r2, [pc, #476]	; (800280c <main+0x2e0>)
 800262e:	2116      	movs	r1, #22
 8002630:	2000      	movs	r0, #0
 8002632:	f7ff fa5d 	bl	8001af0 <GFX_DrawString>
			sprintf(Message, "Cisnienie: %.1f HPa", ((float)pressure/100.0));
 8002636:	4b6f      	ldr	r3, [pc, #444]	; (80027f4 <main+0x2c8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002642:	ee17 0a90 	vmov	r0, s15
 8002646:	f7fd ff9f 	bl	8000588 <__aeabi_f2d>
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b73      	ldr	r3, [pc, #460]	; (800281c <main+0x2f0>)
 8002650:	f7fe f91c 	bl	800088c <__aeabi_ddiv>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4971      	ldr	r1, [pc, #452]	; (8002820 <main+0x2f4>)
 800265a:	486c      	ldr	r0, [pc, #432]	; (800280c <main+0x2e0>)
 800265c:	f007 f978 	bl	8009950 <siprintf>
			GFX_DrawString(0, 32, Message, WHITE, 0);
 8002660:	2300      	movs	r3, #0
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	4a69      	ldr	r2, [pc, #420]	; (800280c <main+0x2e0>)
 8002668:	2120      	movs	r1, #32
 800266a:	2000      	movs	r0, #0
 800266c:	f7ff fa40 	bl	8001af0 <GFX_DrawString>
			switch (status){
 8002670:	4b6c      	ldr	r3, [pc, #432]	; (8002824 <main+0x2f8>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	3b01      	subs	r3, #1
 8002676:	2b03      	cmp	r3, #3
 8002678:	d83e      	bhi.n	80026f8 <main+0x1cc>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <main+0x154>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	08002691 	.word	0x08002691
 8002684:	080026ab 	.word	0x080026ab
 8002688:	080026c5 	.word	0x080026c5
 800268c:	080026df 	.word	0x080026df
			case 1:
				sprintf(Message, "Status: Grzanie");
 8002690:	4965      	ldr	r1, [pc, #404]	; (8002828 <main+0x2fc>)
 8002692:	485e      	ldr	r0, [pc, #376]	; (800280c <main+0x2e0>)
 8002694:	f007 f95c 	bl	8009950 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 8002698:	2300      	movs	r3, #0
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2301      	movs	r3, #1
 800269e:	4a5b      	ldr	r2, [pc, #364]	; (800280c <main+0x2e0>)
 80026a0:	212a      	movs	r1, #42	; 0x2a
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7ff fa24 	bl	8001af0 <GFX_DrawString>
				break;
 80026a8:	e026      	b.n	80026f8 <main+0x1cc>
			case 2:
				sprintf(Message, "Status: Chlodzenie");
 80026aa:	4960      	ldr	r1, [pc, #384]	; (800282c <main+0x300>)
 80026ac:	4857      	ldr	r0, [pc, #348]	; (800280c <main+0x2e0>)
 80026ae:	f007 f94f 	bl	8009950 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2301      	movs	r3, #1
 80026b8:	4a54      	ldr	r2, [pc, #336]	; (800280c <main+0x2e0>)
 80026ba:	212a      	movs	r1, #42	; 0x2a
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff fa17 	bl	8001af0 <GFX_DrawString>
				break;
 80026c2:	e019      	b.n	80026f8 <main+0x1cc>
			case 3:
				sprintf(Message, "Status: ERROR!!!");
 80026c4:	495a      	ldr	r1, [pc, #360]	; (8002830 <main+0x304>)
 80026c6:	4851      	ldr	r0, [pc, #324]	; (800280c <main+0x2e0>)
 80026c8:	f007 f942 	bl	8009950 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 80026cc:	2300      	movs	r3, #0
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2301      	movs	r3, #1
 80026d2:	4a4e      	ldr	r2, [pc, #312]	; (800280c <main+0x2e0>)
 80026d4:	212a      	movs	r1, #42	; 0x2a
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7ff fa0a 	bl	8001af0 <GFX_DrawString>
				break;
 80026dc:	e00c      	b.n	80026f8 <main+0x1cc>
			case 4:
				sprintf(Message, "Status: STOP");
 80026de:	4955      	ldr	r1, [pc, #340]	; (8002834 <main+0x308>)
 80026e0:	484a      	ldr	r0, [pc, #296]	; (800280c <main+0x2e0>)
 80026e2:	f007 f935 	bl	8009950 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 80026e6:	2300      	movs	r3, #0
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2301      	movs	r3, #1
 80026ec:	4a47      	ldr	r2, [pc, #284]	; (800280c <main+0x2e0>)
 80026ee:	212a      	movs	r1, #42	; 0x2a
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7ff f9fd 	bl	8001af0 <GFX_DrawString>
				break;
 80026f6:	bf00      	nop
			}
			GFX_DrawLine(127, 53, 127, 64, WHITE);
 80026f8:	2301      	movs	r3, #1
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2340      	movs	r3, #64	; 0x40
 80026fe:	227f      	movs	r2, #127	; 0x7f
 8002700:	2135      	movs	r1, #53	; 0x35
 8002702:	207f      	movs	r0, #127	; 0x7f
 8002704:	f7ff fb0d 	bl	8001d22 <GFX_DrawLine>
			GFX_DrawRectangle(0, 53, (uint16_t)(128*temperature/temperature_set), 11, WHITE);
 8002708:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <main+0x2cc>)
 800270a:	edd3 7a00 	vldr	s15, [r3]
 800270e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002838 <main+0x30c>
 8002712:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002716:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <main+0x2e8>)
 8002718:	ed93 7a00 	vldr	s14, [r3]
 800271c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002724:	ee17 3a90 	vmov	r3, s15
 8002728:	b29a      	uxth	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	230b      	movs	r3, #11
 8002730:	2135      	movs	r1, #53	; 0x35
 8002732:	2000      	movs	r0, #0
 8002734:	f7ff fb3b 	bl	8001dae <GFX_DrawRectangle>
			SSD1306_Display();
 8002738:	f7ff fd2c 	bl	8002194 <SSD1306_Display>
		}
		if(zezwolenie){
 800273c:	4b3f      	ldr	r3, [pc, #252]	; (800283c <main+0x310>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f43f af2d 	beq.w	80025a0 <main+0x74>
			length = sprintf((char*)Buffor, "{\"Temp\":%.2f,\"t\":%.1f,\"Temp_set\":%.2f,\"Kp\":%.4f,\"Ki\":%.4f,\"Kd\":%.4f}\r\n",temperature,pid.dt,temperature_set,pid.Kp,pid.Ki,pid.Kd);
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <main+0x2cc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff1c 	bl	8000588 <__aeabi_f2d>
 8002750:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002754:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <main+0x314>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd ff15 	bl	8000588 <__aeabi_f2d>
 800275e:	4604      	mov	r4, r0
 8002760:	460d      	mov	r5, r1
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <main+0x2e8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd ff0e 	bl	8000588 <__aeabi_f2d>
 800276c:	4680      	mov	r8, r0
 800276e:	4689      	mov	r9, r1
 8002770:	4b33      	ldr	r3, [pc, #204]	; (8002840 <main+0x314>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd ff07 	bl	8000588 <__aeabi_f2d>
 800277a:	4682      	mov	sl, r0
 800277c:	468b      	mov	fp, r1
 800277e:	4b30      	ldr	r3, [pc, #192]	; (8002840 <main+0x314>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd ff00 	bl	8000588 <__aeabi_f2d>
 8002788:	e9c7 0100 	strd	r0, r1, [r7]
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <main+0x314>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fef9 	bl	8000588 <__aeabi_f2d>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800279e:	ed97 7b00 	vldr	d7, [r7]
 80027a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80027a6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80027aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80027ae:	e9cd 4500 	strd	r4, r5, [sp]
 80027b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027b6:	4923      	ldr	r1, [pc, #140]	; (8002844 <main+0x318>)
 80027b8:	4823      	ldr	r0, [pc, #140]	; (8002848 <main+0x31c>)
 80027ba:	f007 f8c9 	bl	8009950 <siprintf>
 80027be:	4603      	mov	r3, r0
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <main+0x320>)
 80027c4:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, Buffor, length, 1000);
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <main+0x320>)
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ce:	491e      	ldr	r1, [pc, #120]	; (8002848 <main+0x31c>)
 80027d0:	480b      	ldr	r0, [pc, #44]	; (8002800 <main+0x2d4>)
 80027d2:	f004 fe9d 	bl	8007510 <HAL_UART_Transmit>
			zezwolenie = 0;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <main+0x310>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick() - SoftTimerOled) > 100){
 80027dc:	e6e0      	b.n	80025a0 <main+0x74>
 80027de:	bf00      	nop
 80027e0:	20000818 	.word	0x20000818
 80027e4:	200007cc 	.word	0x200007cc
 80027e8:	20000768 	.word	0x20000768
 80027ec:	2000066c 	.word	0x2000066c
 80027f0:	0800d498 	.word	0x0800d498
 80027f4:	20000624 	.word	0x20000624
 80027f8:	20000628 	.word	0x20000628
 80027fc:	200006bc 	.word	0x200006bc
 8002800:	20000864 	.word	0x20000864
 8002804:	200006e4 	.word	0x200006e4
 8002808:	0800d3b0 	.word	0x0800d3b0
 800280c:	200006c4 	.word	0x200006c4
 8002810:	0800d3c8 	.word	0x0800d3c8
 8002814:	20000004 	.word	0x20000004
 8002818:	0800d3e0 	.word	0x0800d3e0
 800281c:	40590000 	.word	0x40590000
 8002820:	0800d3f4 	.word	0x0800d3f4
 8002824:	20000008 	.word	0x20000008
 8002828:	0800d408 	.word	0x0800d408
 800282c:	0800d418 	.word	0x0800d418
 8002830:	0800d42c 	.word	0x0800d42c
 8002834:	0800d440 	.word	0x0800d440
 8002838:	43000000 	.word	0x43000000
 800283c:	2000062c 	.word	0x2000062c
 8002840:	2000000c 	.word	0x2000000c
 8002844:	0800d450 	.word	0x0800d450
 8002848:	200006e8 	.word	0x200006e8
 800284c:	200006b8 	.word	0x200006b8

08002850 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b094      	sub	sp, #80	; 0x50
 8002854:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002856:	f107 0320 	add.w	r3, r7, #32
 800285a:	2230      	movs	r2, #48	; 0x30
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f006 fc04 	bl	800906c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002874:	f001 ff56 	bl	8004724 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <SystemClock_Config+0xc8>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <SystemClock_Config+0xc8>)
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002882:	6413      	str	r3, [r2, #64]	; 0x40
 8002884:	4b24      	ldr	r3, [pc, #144]	; (8002918 <SystemClock_Config+0xc8>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <SystemClock_Config+0xcc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002898:	4a20      	ldr	r2, [pc, #128]	; (800291c <SystemClock_Config+0xcc>)
 800289a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <SystemClock_Config+0xcc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80028b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028b6:	2302      	movs	r3, #2
 80028b8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80028c0:	2304      	movs	r3, #4
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80028c4:	2348      	movs	r3, #72	; 0x48
 80028c6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028c8:	2302      	movs	r3, #2
 80028ca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80028cc:	2303      	movs	r3, #3
 80028ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d0:	f107 0320 	add.w	r3, r7, #32
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 ff35 	bl	8004744 <HAL_RCC_OscConfig>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80028e0:	f000 f8e2 	bl	8002aa8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e4:	230f      	movs	r3, #15
 80028e6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e8:	2302      	movs	r3, #2
 80028ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f002 f9c3 	bl	8004c8c <HAL_RCC_ClockConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 800290c:	f000 f8cc 	bl	8002aa8 <Error_Handler>
	}
}
 8002910:	bf00      	nop
 8002912:	3750      	adds	r7, #80	; 0x50
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000

08002920 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 && (status == STATUS_GRZANIE || status == STATUS_CHLODZENIE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d139      	bne.n	80029a6 <HAL_TIM_PeriodElapsedCallback+0x86>
 8002932:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d003      	beq.n	8002942 <HAL_TIM_PeriodElapsedCallback+0x22>
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d131      	bne.n	80029a6 <HAL_TIM_PeriodElapsedCallback+0x86>
	{
		//Sygnalizacja rozpoczęcia
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	481b      	ldr	r0, [pc, #108]	; (80029b4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002946:	f001 f8fc 	bl	8003b42 <HAL_GPIO_TogglePin>
		//
		//Pobranie danych z czujnika - aktualna temp i press
		//
		BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 800294a:	491b      	ldr	r1, [pc, #108]	; (80029b8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800294c:	481b      	ldr	r0, [pc, #108]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800294e:	f7fe fdf3 	bl	8001538 <BMP280_ReadTemperatureAndPressure>
		//
		//Regulator
		//
		float u = u_pid_calculate(&pid, temperature_set, temperature);
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	eef0 0a47 	vmov.f32	s1, s14
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	4817      	ldr	r0, [pc, #92]	; (80029c4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002968:	f7ff fa71 	bl	8001e4e <u_pid_calculate>
 800296c:	ed87 0a03 	vstr	s0, [r7, #12]
		uint16_t sterowanie = saturation_pwm(u);
 8002970:	ed97 0a03 	vldr	s0, [r7, #12]
 8002974:	f7ff faf2 	bl	8001f5c <saturation_pwm>
 8002978:	4603      	mov	r3, r0
 800297a:	817b      	strh	r3, [r7, #10]
		if(sterowanie<100)
 800297c:	897b      	ldrh	r3, [r7, #10]
 800297e:	2b63      	cmp	r3, #99	; 0x63
 8002980:	d803      	bhi.n	800298a <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			status = STATUS_CHLODZENIE;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002984:	2202      	movs	r2, #2
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e002      	b.n	8002990 <HAL_TIM_PeriodElapsedCallback+0x70>
		}else{
			status = STATUS_GRZANIE;
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
		}
		//
		//Wytworzenie sygnału
		//
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,sterowanie);
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	897a      	ldrh	r2, [r7, #10]
 8002996:	63da      	str	r2, [r3, #60]	; 0x3c
		//
		//Wysłanie danych
		//
		zezwolenie = 1;
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <HAL_TIM_PeriodElapsedCallback+0xac>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
		//Sygnalizacja zakończenia
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	4804      	ldr	r0, [pc, #16]	; (80029b4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80029a2:	f001 f8ce 	bl	8003b42 <HAL_GPIO_TogglePin>
	}
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000008 	.word	0x20000008
 80029b4:	40020400 	.word	0x40020400
 80029b8:	20000624 	.word	0x20000624
 80029bc:	20000628 	.word	0x20000628
 80029c0:	20000004 	.word	0x20000004
 80029c4:	2000000c 	.word	0x2000000c
 80029c8:	200007cc 	.word	0x200007cc
 80029cc:	2000062c 	.word	0x2000062c

080029d0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <HAL_UART_RxCpltCallback+0xc0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d151      	bne.n	8002a86 <HAL_UART_RxCpltCallback+0xb6>
	{
		//Sygnalizacja odebrania
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80029e2:	2101      	movs	r1, #1
 80029e4:	482b      	ldr	r0, [pc, #172]	; (8002a94 <HAL_UART_RxCpltCallback+0xc4>)
 80029e6:	f001 f8ac 	bl	8003b42 <HAL_GPIO_TogglePin>
		//
		//Możliwe komunikaty:
		//"TMP=27.5" lub dowolna inna temp
		//"STA=0001" lub "STA=0002" lub "STA=0003" lub "STA=0004"
		//
		if(Buffor_Rx[0] == 'S'){
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_UART_RxCpltCallback+0xc8>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b53      	cmp	r3, #83	; 0x53
 80029f0:	d120      	bne.n	8002a34 <HAL_UART_RxCpltCallback+0x64>
			switch(Buffor_Rx[7]){
 80029f2:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_UART_RxCpltCallback+0xc8>)
 80029f4:	79db      	ldrb	r3, [r3, #7]
 80029f6:	3b31      	subs	r3, #49	; 0x31
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d83b      	bhi.n	8002a74 <HAL_UART_RxCpltCallback+0xa4>
 80029fc:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <HAL_UART_RxCpltCallback+0x34>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a1d 	.word	0x08002a1d
 8002a0c:	08002a25 	.word	0x08002a25
 8002a10:	08002a2d 	.word	0x08002a2d
			case '1':
				status = STATUS_GRZANIE;
 8002a14:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <HAL_UART_RxCpltCallback+0xcc>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
				break;
 8002a1a:	e02b      	b.n	8002a74 <HAL_UART_RxCpltCallback+0xa4>
			case '2':
				status = STATUS_CHLODZENIE;
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <HAL_UART_RxCpltCallback+0xcc>)
 8002a1e:	2202      	movs	r2, #2
 8002a20:	701a      	strb	r2, [r3, #0]
				break;
 8002a22:	e027      	b.n	8002a74 <HAL_UART_RxCpltCallback+0xa4>
			case '3':
				status = STATUS_ERROR;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_UART_RxCpltCallback+0xcc>)
 8002a26:	2203      	movs	r2, #3
 8002a28:	701a      	strb	r2, [r3, #0]
				break;
 8002a2a:	e023      	b.n	8002a74 <HAL_UART_RxCpltCallback+0xa4>
			case '4':
				status = STATUS_STOP;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_UART_RxCpltCallback+0xcc>)
 8002a2e:	2204      	movs	r2, #4
 8002a30:	701a      	strb	r2, [r3, #0]
				break;
 8002a32:	e01f      	b.n	8002a74 <HAL_UART_RxCpltCallback+0xa4>
			}
			}else if(Buffor_Rx[0] == 'T'){
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_UART_RxCpltCallback+0xc8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b54      	cmp	r3, #84	; 0x54
 8002a3a:	d11b      	bne.n	8002a74 <HAL_UART_RxCpltCallback+0xa4>
				float temp_change;
				char temp_change_str[4];
				temp_change_str[0] = Buffor_Rx[4];
 8002a3c:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <HAL_UART_RxCpltCallback+0xc8>)
 8002a3e:	791b      	ldrb	r3, [r3, #4]
 8002a40:	723b      	strb	r3, [r7, #8]
				temp_change_str[1] = Buffor_Rx[5];
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_UART_RxCpltCallback+0xc8>)
 8002a44:	795b      	ldrb	r3, [r3, #5]
 8002a46:	727b      	strb	r3, [r7, #9]
				temp_change_str[2] = Buffor_Rx[6];
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_UART_RxCpltCallback+0xc8>)
 8002a4a:	799b      	ldrb	r3, [r3, #6]
 8002a4c:	72bb      	strb	r3, [r7, #10]
				temp_change_str[3] = Buffor_Rx[7];
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_UART_RxCpltCallback+0xc8>)
 8002a50:	79db      	ldrb	r3, [r3, #7]
 8002a52:	72fb      	strb	r3, [r7, #11]
				temp_change = atof(temp_change_str);
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f006 fad9 	bl	8009010 <atof>
 8002a5e:	ec53 2b10 	vmov	r2, r3, d0
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	f7fe f8df 	bl	8000c28 <__aeabi_d2f>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	60fb      	str	r3, [r7, #12]
				temperature_set = temp_change;
 8002a6e:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <HAL_UART_RxCpltCallback+0xd0>)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6013      	str	r3, [r2, #0]
			}

		//Sygnalizacja zakończenia
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002a74:	2101      	movs	r1, #1
 8002a76:	4807      	ldr	r0, [pc, #28]	; (8002a94 <HAL_UART_RxCpltCallback+0xc4>)
 8002a78:	f001 f863 	bl	8003b42 <HAL_GPIO_TogglePin>
		//
		//Ponowne ustawienie nasłuchu
		//
		HAL_UART_Receive_IT(&huart3, Buffor_Rx, 8);
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	4906      	ldr	r1, [pc, #24]	; (8002a98 <HAL_UART_RxCpltCallback+0xc8>)
 8002a80:	4808      	ldr	r0, [pc, #32]	; (8002aa4 <HAL_UART_RxCpltCallback+0xd4>)
 8002a82:	f004 fdd8 	bl	8007636 <HAL_UART_Receive_IT>
	}
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40004800 	.word	0x40004800
 8002a94:	40020400 	.word	0x40020400
 8002a98:	200006bc 	.word	0x200006bc
 8002a9c:	20000008 	.word	0x20000008
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	20000864 	.word	0x20000864

08002aa8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aac:	b672      	cpsid	i
}
 8002aae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <Error_Handler+0x8>
	...

08002ab4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002aba:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <MX_SPI1_Init+0x78>)
 8002abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002ace:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ad2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002aea:	2210      	movs	r2, #16
 8002aec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002b02:	2207      	movs	r2, #7
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002b0e:	2208      	movs	r2, #8
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_SPI1_Init+0x74>)
 8002b14:	f002 feac 	bl	8005870 <HAL_SPI_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b1e:	f7ff ffc3 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000768 	.word	0x20000768
 8002b2c:	40013000 	.word	0x40013000

08002b30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a17      	ldr	r2, [pc, #92]	; (8002bac <HAL_SPI_MspInit+0x7c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d127      	bne.n	8002ba2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <HAL_SPI_MspInit+0x80>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_SPI_MspInit+0x80>)
 8002b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_SPI_MspInit+0x80>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_SPI_MspInit+0x80>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_SPI_MspInit+0x80>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_SPI_MspInit+0x80>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b82:	23e0      	movs	r3, #224	; 0xe0
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b92:	2305      	movs	r3, #5
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <HAL_SPI_MspInit+0x84>)
 8002b9e:	f000 fe0b 	bl	80037b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40013000 	.word	0x40013000
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020000 	.word	0x40020000

08002bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_MspInit+0x44>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_MspInit+0x44>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_MspInit+0x44>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	607b      	str	r3, [r7, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_MspInit+0x44>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_MspInit+0x44>)
 8002bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be0:	6453      	str	r3, [r2, #68]	; 0x44
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_MspInit+0x44>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800

08002c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <NMI_Handler+0x4>

08002c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0a:	e7fe      	b.n	8002c0a <HardFault_Handler+0x4>

08002c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <MemManage_Handler+0x4>

08002c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <BusFault_Handler+0x4>

08002c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <UsageFault_Handler+0x4>

08002c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c4c:	f000 fbcc 	bl	80033e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c58:	4802      	ldr	r0, [pc, #8]	; (8002c64 <TIM2_IRQHandler+0x10>)
 8002c5a:	f003 fc7b 	bl	8006554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000818 	.word	0x20000818

08002c68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c6c:	4802      	ldr	r0, [pc, #8]	; (8002c78 <USART3_IRQHandler+0x10>)
 8002c6e:	f004 fd31 	bl	80076d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000864 	.word	0x20000864

08002c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
	return 1;
 8002c80:	2301      	movs	r3, #1
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <_kill>:

int _kill(int pid, int sig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c96:	f006 f9bf 	bl	8009018 <__errno>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2216      	movs	r2, #22
 8002c9e:	601a      	str	r2, [r3, #0]
	return -1;
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_exit>:

void _exit (int status)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ffe7 	bl	8002c8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cbe:	e7fe      	b.n	8002cbe <_exit+0x12>

08002cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e00a      	b.n	8002ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cd2:	f3af 8000 	nop.w
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	60ba      	str	r2, [r7, #8]
 8002cde:	b2ca      	uxtb	r2, r1
 8002ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	dbf0      	blt.n	8002cd2 <_read+0x12>
	}

return len;
 8002cf0:	687b      	ldr	r3, [r7, #4]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e009      	b.n	8002d20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbf1      	blt.n	8002d0c <_write+0x12>
	}
	return len;
 8002d28:	687b      	ldr	r3, [r7, #4]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_close>:

int _close(int file)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
	return -1;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <_isatty>:

int _isatty(int file)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	return 1;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <_sbrk+0x5c>)
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <_sbrk+0x60>)
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_sbrk+0x64>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <_sbrk+0x68>)
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d207      	bcs.n	8002ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dcc:	f006 f924 	bl	8009018 <__errno>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	220c      	movs	r2, #12
 8002dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dda:	e009      	b.n	8002df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ddc:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <_sbrk+0x64>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <_sbrk+0x64>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <_sbrk+0x64>)
 8002dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20050000 	.word	0x20050000
 8002dfc:	00000400 	.word	0x00000400
 8002e00:	20000630 	.word	0x20000630
 8002e04:	20000d00 	.word	0x20000d00

08002e08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <SystemInit+0x20>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <SystemInit+0x20>)
 8002e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e32:	f107 0310 	add.w	r3, r7, #16
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e54:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e62:	4a19      	ldr	r2, [pc, #100]	; (8002ec8 <MX_TIM2_Init+0x9c>)
 8002e64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e6c:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e72:	4814      	ldr	r0, [pc, #80]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e74:	f003 f942 	bl	80060fc <HAL_TIM_Base_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e7e:	f7ff fe13 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002e90:	f003 fd94 	bl	80069bc <HAL_TIM_ConfigClockSource>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e9a:	f7ff fe05 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4806      	ldr	r0, [pc, #24]	; (8002ec4 <MX_TIM2_Init+0x98>)
 8002eac:	f004 fa36 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002eb6:	f7ff fdf7 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000818 	.word	0x20000818
 8002ec8:	0001869f 	.word	0x0001869f

08002ecc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	; 0x38
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eec:	463b      	mov	r3, r7
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
 8002efa:	615a      	str	r2, [r3, #20]
 8002efc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f00:	4a2d      	ldr	r2, [pc, #180]	; (8002fb8 <MX_TIM3_Init+0xec>)
 8002f02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f06:	2247      	movs	r2, #71	; 0x47
 8002f08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1e:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f24:	4823      	ldr	r0, [pc, #140]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f26:	f003 f8e9 	bl	80060fc <HAL_TIM_Base_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f30:	f7ff fdba 	bl	8002aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f3e:	4619      	mov	r1, r3
 8002f40:	481c      	ldr	r0, [pc, #112]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f42:	f003 fd3b 	bl	80069bc <HAL_TIM_ConfigClockSource>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f4c:	f7ff fdac 	bl	8002aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f50:	4818      	ldr	r0, [pc, #96]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f52:	f003 f9a3 	bl	800629c <HAL_TIM_PWM_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f5c:	f7ff fda4 	bl	8002aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4811      	ldr	r0, [pc, #68]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f70:	f004 f9d4 	bl	800731c <HAL_TIMEx_MasterConfigSynchronization>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f7a:	f7ff fd95 	bl	8002aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f7e:	2360      	movs	r3, #96	; 0x60
 8002f80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f8e:	463b      	mov	r3, r7
 8002f90:	2208      	movs	r2, #8
 8002f92:	4619      	mov	r1, r3
 8002f94:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002f96:	f003 fbfd 	bl	8006794 <HAL_TIM_PWM_ConfigChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002fa0:	f7ff fd82 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fa4:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <MX_TIM3_Init+0xe8>)
 8002fa6:	f000 f841 	bl	800302c <HAL_TIM_MspPostInit>

}
 8002faa:	bf00      	nop
 8002fac:	3738      	adds	r7, #56	; 0x38
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200007cc 	.word	0x200007cc
 8002fb8:	40000400 	.word	0x40000400

08002fbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d114      	bne.n	8002ff8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_TIM_Base_MspInit+0x68>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a14      	ldr	r2, [pc, #80]	; (8003024 <HAL_TIM_Base_MspInit+0x68>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_TIM_Base_MspInit+0x68>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	201c      	movs	r0, #28
 8002fec:	f000 fb1b 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ff0:	201c      	movs	r0, #28
 8002ff2:	f000 fb34 	bl	800365e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ff6:	e010      	b.n	800301a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_TIM_Base_MspInit+0x6c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d10b      	bne.n	800301a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_TIM_Base_MspInit+0x68>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a07      	ldr	r2, [pc, #28]	; (8003024 <HAL_TIM_Base_MspInit+0x68>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_TIM_Base_MspInit+0x68>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	40000400 	.word	0x40000400

0800302c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 030c 	add.w	r3, r7, #12
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a11      	ldr	r2, [pc, #68]	; (8003090 <HAL_TIM_MspPostInit+0x64>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d11c      	bne.n	8003088 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_TIM_MspPostInit+0x68>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	4a10      	ldr	r2, [pc, #64]	; (8003094 <HAL_TIM_MspPostInit+0x68>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_TIM_MspPostInit+0x68>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800306a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306c:	2302      	movs	r3, #2
 800306e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003078:	2302      	movs	r3, #2
 800307a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	4619      	mov	r1, r3
 8003082:	4805      	ldr	r0, [pc, #20]	; (8003098 <HAL_TIM_MspPostInit+0x6c>)
 8003084:	f000 fb98 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003088:	bf00      	nop
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40000400 	.word	0x40000400
 8003094:	40023800 	.word	0x40023800
 8003098:	40020800 	.word	0x40020800

0800309c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <MX_USART3_UART_Init+0x5c>)
 80030a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030ba:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030c2:	220c      	movs	r2, #12
 80030c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030da:	2200      	movs	r2, #0
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030de:	4805      	ldr	r0, [pc, #20]	; (80030f4 <MX_USART3_UART_Init+0x58>)
 80030e0:	f004 f9c8 	bl	8007474 <HAL_UART_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80030ea:	f7ff fcdd 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000864 	.word	0x20000864
 80030f8:	40004800 	.word	0x40004800

080030fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b0aa      	sub	sp, #168	; 0xa8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	2284      	movs	r2, #132	; 0x84
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f005 ffa5 	bl	800906c <memset>
  if(uartHandle->Instance==USART3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <HAL_UART_MspInit+0xc4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d144      	bne.n	80031b6 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800312c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003130:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003132:	2300      	movs	r3, #0
 8003134:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003136:	f107 0310 	add.w	r3, r7, #16
 800313a:	4618      	mov	r0, r3
 800313c:	f001 ffa8 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003146:	f7ff fcaf 	bl	8002aa8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_UART_MspInit+0xc8>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_UART_MspInit+0xc8>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_UART_MspInit+0xc8>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003162:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <HAL_UART_MspInit+0xc8>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	4a17      	ldr	r2, [pc, #92]	; (80031c4 <HAL_UART_MspInit+0xc8>)
 8003168:	f043 0308 	orr.w	r3, r3, #8
 800316c:	6313      	str	r3, [r2, #48]	; 0x30
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_UART_MspInit+0xc8>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800317a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318e:	2303      	movs	r3, #3
 8003190:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003194:	2307      	movs	r3, #7
 8003196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800319a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800319e:	4619      	mov	r1, r3
 80031a0:	4809      	ldr	r0, [pc, #36]	; (80031c8 <HAL_UART_MspInit+0xcc>)
 80031a2:	f000 fb09 	bl	80037b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2100      	movs	r1, #0
 80031aa:	2027      	movs	r0, #39	; 0x27
 80031ac:	f000 fa3b 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031b0:	2027      	movs	r0, #39	; 0x27
 80031b2:	f000 fa54 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031b6:	bf00      	nop
 80031b8:	37a8      	adds	r7, #168	; 0xa8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40004800 	.word	0x40004800
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020c00 	.word	0x40020c00

080031cc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80031d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80031d8:	4b12      	ldr	r3, [pc, #72]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031da:	2206      	movs	r2, #6
 80031dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031e0:	2202      	movs	r2, #2
 80031e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ec:	2202      	movs	r2, #2
 80031ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003204:	2201      	movs	r2, #1
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003210:	f001 f93f 	bl	8004492 <HAL_PCD_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800321a:	f7ff fc45 	bl	8002aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200008e8 	.word	0x200008e8

08003228 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b0ac      	sub	sp, #176	; 0xb0
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003240:	f107 0318 	add.w	r3, r7, #24
 8003244:	2284      	movs	r2, #132	; 0x84
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f005 ff0f 	bl	800906c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003256:	d159      	bne.n	800330c <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003258:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800325c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003264:	f107 0318 	add.w	r3, r7, #24
 8003268:	4618      	mov	r0, r3
 800326a:	f001 ff11 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003274:	f7ff fc18 	bl	8002aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_PCD_MspInit+0xec>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <HAL_PCD_MspInit+0xec>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_PCD_MspInit+0xec>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8003290:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032aa:	230a      	movs	r3, #10
 80032ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032b4:	4619      	mov	r1, r3
 80032b6:	4818      	ldr	r0, [pc, #96]	; (8003318 <HAL_PCD_MspInit+0xf0>)
 80032b8:	f000 fa7e 	bl	80037b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80032bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80032d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032d4:	4619      	mov	r1, r3
 80032d6:	4810      	ldr	r0, [pc, #64]	; (8003318 <HAL_PCD_MspInit+0xf0>)
 80032d8:	f000 fa6e 	bl	80037b8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_PCD_MspInit+0xec>)
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <HAL_PCD_MspInit+0xec>)
 80032e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e6:	6353      	str	r3, [r2, #52]	; 0x34
 80032e8:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_PCD_MspInit+0xec>)
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_PCD_MspInit+0xec>)
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	4a06      	ldr	r2, [pc, #24]	; (8003314 <HAL_PCD_MspInit+0xec>)
 80032fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <HAL_PCD_MspInit+0xec>)
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800330c:	bf00      	nop
 800330e:	37b0      	adds	r7, #176	; 0xb0
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	40020000 	.word	0x40020000

0800331c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800331c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003354 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003320:	480d      	ldr	r0, [pc, #52]	; (8003358 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003322:	490e      	ldr	r1, [pc, #56]	; (800335c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003328:	e002      	b.n	8003330 <LoopCopyDataInit>

0800332a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800332c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800332e:	3304      	adds	r3, #4

08003330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003334:	d3f9      	bcc.n	800332a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003336:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003338:	4c0b      	ldr	r4, [pc, #44]	; (8003368 <LoopFillZerobss+0x26>)
  movs r3, #0
 800333a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800333c:	e001      	b.n	8003342 <LoopFillZerobss>

0800333e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800333e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003340:	3204      	adds	r2, #4

08003342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003344:	d3fb      	bcc.n	800333e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003346:	f7ff fd5f 	bl	8002e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800334a:	f005 fe6b 	bl	8009024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800334e:	f7ff f8ed 	bl	800252c <main>
  bx  lr    
 8003352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003354:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800335c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003360:	0800db4c 	.word	0x0800db4c
  ldr r2, =_sbss
 8003364:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003368:	20000d00 	.word	0x20000d00

0800336c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800336c:	e7fe      	b.n	800336c <ADC_IRQHandler>

0800336e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003372:	2003      	movs	r0, #3
 8003374:	f000 f94c 	bl	8003610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003378:	2000      	movs	r0, #0
 800337a:	f000 f805 	bl	8003388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800337e:	f7ff fc1b 	bl	8002bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003390:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_InitTick+0x54>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_InitTick+0x58>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800339e:	fbb3 f3f1 	udiv	r3, r3, r1
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f967 	bl	800367a <HAL_SYSTICK_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00e      	b.n	80033d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d80a      	bhi.n	80033d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033bc:	2200      	movs	r2, #0
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	f000 f92f 	bl	8003626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033c8:	4a06      	ldr	r2, [pc, #24]	; (80033e4 <HAL_InitTick+0x5c>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000028 	.word	0x20000028
 80033e0:	20000030 	.word	0x20000030
 80033e4:	2000002c 	.word	0x2000002c

080033e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_IncTick+0x20>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x24>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_IncTick+0x24>)
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000030 	.word	0x20000030
 800340c:	20000cec 	.word	0x20000cec

08003410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return uwTick;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <HAL_GetTick+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000cec 	.word	0x20000cec

08003428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7ff ffee 	bl	8003410 <HAL_GetTick>
 8003434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d005      	beq.n	800344e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_Delay+0x44>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800344e:	bf00      	nop
 8003450:	f7ff ffde 	bl	8003410 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	429a      	cmp	r2, r3
 800345e:	d8f7      	bhi.n	8003450 <HAL_Delay+0x28>
  {
  }
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000030 	.word	0x20000030

08003470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 800349a:	4313      	orrs	r3, r2
 800349c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800349e:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <__NVIC_SetPriorityGrouping+0x40>)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	60d3      	str	r3, [r2, #12]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00
 80034b4:	05fa0000 	.word	0x05fa0000

080034b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <__NVIC_GetPriorityGrouping+0x18>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0307 	and.w	r3, r3, #7
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	db0b      	blt.n	80034fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <__NVIC_EnableIRQ+0x38>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2001      	movs	r0, #1
 80034f6:	fa00 f202 	lsl.w	r2, r0, r2
 80034fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000e100 	.word	0xe000e100

08003510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	db0a      	blt.n	800353a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	490c      	ldr	r1, [pc, #48]	; (800355c <__NVIC_SetPriority+0x4c>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	440b      	add	r3, r1
 8003534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003538:	e00a      	b.n	8003550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <__NVIC_SetPriority+0x50>)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3b04      	subs	r3, #4
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	440b      	add	r3, r1
 800354e:	761a      	strb	r2, [r3, #24]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000e100 	.word	0xe000e100
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f1c3 0307 	rsb	r3, r3, #7
 800357e:	2b04      	cmp	r3, #4
 8003580:	bf28      	it	cs
 8003582:	2304      	movcs	r3, #4
 8003584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3304      	adds	r3, #4
 800358a:	2b06      	cmp	r3, #6
 800358c:	d902      	bls.n	8003594 <NVIC_EncodePriority+0x30>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3b03      	subs	r3, #3
 8003592:	e000      	b.n	8003596 <NVIC_EncodePriority+0x32>
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	f04f 32ff 	mov.w	r2, #4294967295
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	401a      	ands	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ac:	f04f 31ff 	mov.w	r1, #4294967295
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43d9      	mvns	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	4313      	orrs	r3, r2
         );
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3724      	adds	r7, #36	; 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035dc:	d301      	bcc.n	80035e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035de:	2301      	movs	r3, #1
 80035e0:	e00f      	b.n	8003602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <SysTick_Config+0x40>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ea:	210f      	movs	r1, #15
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	f7ff ff8e 	bl	8003510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <SysTick_Config+0x40>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fa:	4b04      	ldr	r3, [pc, #16]	; (800360c <SysTick_Config+0x40>)
 80035fc:	2207      	movs	r2, #7
 80035fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	e000e010 	.word	0xe000e010

08003610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ff29 	bl	8003470 <__NVIC_SetPriorityGrouping>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003638:	f7ff ff3e 	bl	80034b8 <__NVIC_GetPriorityGrouping>
 800363c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	6978      	ldr	r0, [r7, #20]
 8003644:	f7ff ff8e 	bl	8003564 <NVIC_EncodePriority>
 8003648:	4602      	mov	r2, r0
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff5d 	bl	8003510 <__NVIC_SetPriority>
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff31 	bl	80034d4 <__NVIC_EnableIRQ>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffa2 	bl	80035cc <SysTick_Config>
 8003688:	4603      	mov	r3, r0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036a0:	f7ff feb6 	bl	8003410 <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d008      	beq.n	80036c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e052      	b.n	800376a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0216 	bic.w	r2, r2, #22
 80036d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <HAL_DMA_Abort+0x62>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0208 	bic.w	r2, r2, #8
 8003702:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003714:	e013      	b.n	800373e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003716:	f7ff fe7b 	bl	8003410 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b05      	cmp	r3, #5
 8003722:	d90c      	bls.n	800373e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2203      	movs	r2, #3
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e015      	b.n	800376a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e4      	bne.n	8003716 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	223f      	movs	r2, #63	; 0x3f
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d004      	beq.n	8003790 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2280      	movs	r2, #128	; 0x80
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e00c      	b.n	80037aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2205      	movs	r2, #5
 8003794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b089      	sub	sp, #36	; 0x24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	e175      	b.n	8003ac4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037d8:	2201      	movs	r2, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	f040 8164 	bne.w	8003abe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d005      	beq.n	800380e <HAL_GPIO_Init+0x56>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d130      	bne.n	8003870 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	2203      	movs	r2, #3
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003844:	2201      	movs	r2, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 0201 	and.w	r2, r3, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b03      	cmp	r3, #3
 800387a:	d017      	beq.n	80038ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d123      	bne.n	8003900 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	08da      	lsrs	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3208      	adds	r2, #8
 80038c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	220f      	movs	r2, #15
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	08da      	lsrs	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3208      	adds	r2, #8
 80038fa:	69b9      	ldr	r1, [r7, #24]
 80038fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0203 	and.w	r2, r3, #3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80be 	beq.w	8003abe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003942:	4b66      	ldr	r3, [pc, #408]	; (8003adc <HAL_GPIO_Init+0x324>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	4a65      	ldr	r2, [pc, #404]	; (8003adc <HAL_GPIO_Init+0x324>)
 8003948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800394c:	6453      	str	r3, [r2, #68]	; 0x44
 800394e:	4b63      	ldr	r3, [pc, #396]	; (8003adc <HAL_GPIO_Init+0x324>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800395a:	4a61      	ldr	r2, [pc, #388]	; (8003ae0 <HAL_GPIO_Init+0x328>)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	3302      	adds	r3, #2
 8003962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	220f      	movs	r2, #15
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a58      	ldr	r2, [pc, #352]	; (8003ae4 <HAL_GPIO_Init+0x32c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d037      	beq.n	80039f6 <HAL_GPIO_Init+0x23e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a57      	ldr	r2, [pc, #348]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d031      	beq.n	80039f2 <HAL_GPIO_Init+0x23a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a56      	ldr	r2, [pc, #344]	; (8003aec <HAL_GPIO_Init+0x334>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d02b      	beq.n	80039ee <HAL_GPIO_Init+0x236>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a55      	ldr	r2, [pc, #340]	; (8003af0 <HAL_GPIO_Init+0x338>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d025      	beq.n	80039ea <HAL_GPIO_Init+0x232>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a54      	ldr	r2, [pc, #336]	; (8003af4 <HAL_GPIO_Init+0x33c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01f      	beq.n	80039e6 <HAL_GPIO_Init+0x22e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a53      	ldr	r2, [pc, #332]	; (8003af8 <HAL_GPIO_Init+0x340>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d019      	beq.n	80039e2 <HAL_GPIO_Init+0x22a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a52      	ldr	r2, [pc, #328]	; (8003afc <HAL_GPIO_Init+0x344>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_GPIO_Init+0x226>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a51      	ldr	r2, [pc, #324]	; (8003b00 <HAL_GPIO_Init+0x348>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00d      	beq.n	80039da <HAL_GPIO_Init+0x222>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a50      	ldr	r2, [pc, #320]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <HAL_GPIO_Init+0x21e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4f      	ldr	r2, [pc, #316]	; (8003b08 <HAL_GPIO_Init+0x350>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <HAL_GPIO_Init+0x21a>
 80039ce:	2309      	movs	r3, #9
 80039d0:	e012      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039d2:	230a      	movs	r3, #10
 80039d4:	e010      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039d6:	2308      	movs	r3, #8
 80039d8:	e00e      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039da:	2307      	movs	r3, #7
 80039dc:	e00c      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039de:	2306      	movs	r3, #6
 80039e0:	e00a      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039e2:	2305      	movs	r3, #5
 80039e4:	e008      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039e6:	2304      	movs	r3, #4
 80039e8:	e006      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039ea:	2303      	movs	r3, #3
 80039ec:	e004      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_GPIO_Init+0x240>
 80039f6:	2300      	movs	r3, #0
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	f002 0203 	and.w	r2, r2, #3
 80039fe:	0092      	lsls	r2, r2, #2
 8003a00:	4093      	lsls	r3, r2
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a08:	4935      	ldr	r1, [pc, #212]	; (8003ae0 <HAL_GPIO_Init+0x328>)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_GPIO_Init+0x354>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a3a:	4a34      	ldr	r2, [pc, #208]	; (8003b0c <HAL_GPIO_Init+0x354>)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a40:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_GPIO_Init+0x354>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a64:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <HAL_GPIO_Init+0x354>)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a6a:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <HAL_GPIO_Init+0x354>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a8e:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <HAL_GPIO_Init+0x354>)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_GPIO_Init+0x354>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <HAL_GPIO_Init+0x354>)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	f67f ae86 	bls.w	80037d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3724      	adds	r7, #36	; 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	40020800 	.word	0x40020800
 8003af0:	40020c00 	.word	0x40020c00
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40021400 	.word	0x40021400
 8003afc:	40021800 	.word	0x40021800
 8003b00:	40021c00 	.word	0x40021c00
 8003b04:	40022000 	.word	0x40022000
 8003b08:	40022400 	.word	0x40022400
 8003b0c:	40013c00 	.word	0x40013c00

08003b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b20:	787b      	ldrb	r3, [r7, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b2c:	e003      	b.n	8003b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b2e:	887b      	ldrh	r3, [r7, #2]
 8003b30:	041a      	lsls	r2, r3, #16
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	619a      	str	r2, [r3, #24]
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b54:	887a      	ldrh	r2, [r7, #2]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	041a      	lsls	r2, r3, #16
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	43d9      	mvns	r1, r3
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	400b      	ands	r3, r1
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	619a      	str	r2, [r3, #24]
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e07f      	b.n	8003c8a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fe fc64 	bl	800246c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	e006      	b.n	8003c00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d104      	bne.n	8003c12 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_I2C_Init+0x11c>)
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69d9      	ldr	r1, [r3, #28]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1a      	ldr	r2, [r3, #32]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	02008000 	.word	0x02008000

08003c98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	460b      	mov	r3, r1
 8003cac:	813b      	strh	r3, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f040 80f9 	bne.w	8003eb2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_I2C_Mem_Write+0x34>
 8003cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0ed      	b.n	8003eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_I2C_Mem_Write+0x4e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0e6      	b.n	8003eb4 <HAL_I2C_Mem_Write+0x21c>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cee:	f7ff fb8f 	bl	8003410 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2319      	movs	r3, #25
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f955 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0d1      	b.n	8003eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2221      	movs	r2, #33	; 0x21
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2240      	movs	r2, #64	; 0x40
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d38:	88f8      	ldrh	r0, [r7, #6]
 8003d3a:	893a      	ldrh	r2, [r7, #8]
 8003d3c:	8979      	ldrh	r1, [r7, #10]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	4603      	mov	r3, r0
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f8b9 	bl	8003ec0 <I2C_RequestMemoryWrite>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0a9      	b.n	8003eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2bff      	cmp	r3, #255	; 0xff
 8003d68:	d90e      	bls.n	8003d88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	22ff      	movs	r2, #255	; 0xff
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fabd 	bl	8004300 <I2C_TransferConfig>
 8003d86:	e00f      	b.n	8003da8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	8979      	ldrh	r1, [r7, #10]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 faac 	bl	8004300 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f93f 	bl	8004030 <I2C_WaitOnTXISFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e07b      	b.n	8003eb4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d034      	beq.n	8003e60 <HAL_I2C_Mem_Write+0x1c8>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d130      	bne.n	8003e60 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	2200      	movs	r2, #0
 8003e06:	2180      	movs	r1, #128	; 0x80
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f8d1 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e04d      	b.n	8003eb4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2bff      	cmp	r3, #255	; 0xff
 8003e20:	d90e      	bls.n	8003e40 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	22ff      	movs	r2, #255	; 0xff
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	8979      	ldrh	r1, [r7, #10]
 8003e30:	2300      	movs	r3, #0
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fa61 	bl	8004300 <I2C_TransferConfig>
 8003e3e:	e00f      	b.n	8003e60 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	8979      	ldrh	r1, [r7, #10]
 8003e52:	2300      	movs	r3, #0
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fa50 	bl	8004300 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d19e      	bne.n	8003da8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f91e 	bl	80040b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e01a      	b.n	8003eb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2220      	movs	r2, #32
 8003e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <HAL_I2C_Mem_Write+0x224>)
 8003e92:	400b      	ands	r3, r1
 8003e94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e000      	b.n	8003eb4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
  }
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	fe00e800 	.word	0xfe00e800

08003ec0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	4608      	mov	r0, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	817b      	strh	r3, [r7, #10]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	813b      	strh	r3, [r7, #8]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	8979      	ldrh	r1, [r7, #10]
 8003ee0:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <I2C_RequestMemoryWrite+0xa4>)
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fa09 	bl	8004300 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	69b9      	ldr	r1, [r7, #24]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f89c 	bl	8004030 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e02c      	b.n	8003f5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28
 8003f12:	e015      	b.n	8003f40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f14:	893b      	ldrh	r3, [r7, #8]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f882 	bl	8004030 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e012      	b.n	8003f5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f36:	893b      	ldrh	r3, [r7, #8]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2200      	movs	r2, #0
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f830 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	80002000 	.word	0x80002000

08003f68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d103      	bne.n	8003f86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2200      	movs	r2, #0
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d007      	beq.n	8003fa4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	619a      	str	r2, [r3, #24]
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc0:	e022      	b.n	8004008 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d01e      	beq.n	8004008 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7ff fa21 	bl	8003410 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d113      	bne.n	8004008 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e00f      	b.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	429a      	cmp	r2, r3
 8004024:	d0cd      	beq.n	8003fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800403c:	e02c      	b.n	8004098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f870 	bl	8004128 <I2C_IsErrorOccurred>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e02a      	b.n	80040a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d01e      	beq.n	8004098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405a:	f7ff f9d9 	bl	8003410 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d113      	bne.n	8004098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	f043 0220 	orr.w	r2, r3, #32
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e007      	b.n	80040a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d1cb      	bne.n	800403e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040bc:	e028      	b.n	8004110 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f830 	bl	8004128 <I2C_IsErrorOccurred>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e026      	b.n	8004120 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d2:	f7ff f99d 	bl	8003410 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d302      	bcc.n	80040e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d113      	bne.n	8004110 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e007      	b.n	8004120 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b20      	cmp	r3, #32
 800411c:	d1cf      	bne.n	80040be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	; 0x28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	d075      	beq.n	8004240 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2210      	movs	r2, #16
 800415a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800415c:	e056      	b.n	800420c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d052      	beq.n	800420c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004166:	f7ff f953 	bl	8003410 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d302      	bcc.n	800417c <I2C_IsErrorOccurred+0x54>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d147      	bne.n	800420c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004186:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800418e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800419a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419e:	d12e      	bne.n	80041fe <I2C_IsErrorOccurred+0xd6>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a6:	d02a      	beq.n	80041fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d027      	beq.n	80041fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041bc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041be:	f7ff f927 	bl	8003410 <HAL_GetTick>
 80041c2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041c4:	e01b      	b.n	80041fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041c6:	f7ff f923 	bl	8003410 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b19      	cmp	r3, #25
 80041d2:	d914      	bls.n	80041fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	f043 0220 	orr.w	r2, r3, #32
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b20      	cmp	r3, #32
 800420a:	d1dc      	bne.n	80041c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b20      	cmp	r3, #32
 8004218:	d003      	beq.n	8004222 <I2C_IsErrorOccurred+0xfa>
 800421a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800421e:	2b00      	cmp	r3, #0
 8004220:	d09d      	beq.n	800415e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2220      	movs	r2, #32
 8004230:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f043 0304 	orr.w	r3, r3, #4
 8004238:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004262:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f043 0308 	orr.w	r3, r3, #8
 800427a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004284:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80042ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01c      	beq.n	80042f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff fe56 	bl	8003f68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <I2C_IsErrorOccurred+0x1d4>)
 80042c8:	400b      	ands	r3, r1
 80042ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80042f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3728      	adds	r7, #40	; 0x28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	fe00e800 	.word	0xfe00e800

08004300 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	817b      	strh	r3, [r7, #10]
 800430e:	4613      	mov	r3, r2
 8004310:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004312:	897b      	ldrh	r3, [r7, #10]
 8004314:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004318:	7a7b      	ldrb	r3, [r7, #9]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004320:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	4313      	orrs	r3, r2
 800432a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800432e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	0d5b      	lsrs	r3, r3, #21
 800433a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800433e:	4b08      	ldr	r3, [pc, #32]	; (8004360 <I2C_TransferConfig+0x60>)
 8004340:	430b      	orrs	r3, r1
 8004342:	43db      	mvns	r3, r3
 8004344:	ea02 0103 	and.w	r1, r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	03ff63ff 	.word	0x03ff63ff

08004364 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b20      	cmp	r3, #32
 8004378:	d138      	bne.n	80043ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004384:	2302      	movs	r3, #2
 8004386:	e032      	b.n	80043ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	; 0x24
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b20      	cmp	r3, #32
 800440e:	d139      	bne.n	8004484 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800441a:	2302      	movs	r3, #2
 800441c:	e033      	b.n	8004486 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2224      	movs	r2, #36	; 0x24
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800444c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004494:	b08f      	sub	sp, #60	; 0x3c
 8004496:	af0a      	add	r7, sp, #40	; 0x28
 8004498:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e116      	b.n	80046d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fe feb2 	bl	8003228 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2203      	movs	r2, #3
 80044c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f004 fafe 	bl	8008ae4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	687e      	ldr	r6, [r7, #4]
 80044f0:	466d      	mov	r5, sp
 80044f2:	f106 0410 	add.w	r4, r6, #16
 80044f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004502:	e885 0003 	stmia.w	r5, {r0, r1}
 8004506:	1d33      	adds	r3, r6, #4
 8004508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800450a:	6838      	ldr	r0, [r7, #0]
 800450c:	f004 fa92 	bl	8008a34 <USB_CoreInit>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0d7      	b.n	80046d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f004 faec 	bl	8008b06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	e04a      	b.n	80045ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004534:	7bfa      	ldrb	r2, [r7, #15]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	333d      	adds	r3, #61	; 0x3d
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	333c      	adds	r3, #60	; 0x3c
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800455c:	7bfa      	ldrb	r2, [r7, #15]
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	b298      	uxth	r0, r3
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	3342      	adds	r3, #66	; 0x42
 8004570:	4602      	mov	r2, r0
 8004572:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004574:	7bfa      	ldrb	r2, [r7, #15]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	333f      	adds	r3, #63	; 0x3f
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004588:	7bfa      	ldrb	r2, [r7, #15]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	3344      	adds	r3, #68	; 0x44
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	3348      	adds	r3, #72	; 0x48
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3350      	adds	r3, #80	; 0x50
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	3301      	adds	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3af      	bcc.n	8004534 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e044      	b.n	8004664 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004606:	7bfa      	ldrb	r2, [r7, #15]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	3301      	adds	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d3b5      	bcc.n	80045da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	687e      	ldr	r6, [r7, #4]
 8004676:	466d      	mov	r5, sp
 8004678:	f106 0410 	add.w	r4, r6, #16
 800467c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800467e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004684:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004688:	e885 0003 	stmia.w	r5, {r0, r1}
 800468c:	1d33      	adds	r3, r6, #4
 800468e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004690:	6838      	ldr	r0, [r7, #0]
 8004692:	f004 fa85 	bl	8008ba0 <USB_DevInit>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e014      	b.n	80046d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f80b 	bl	80046dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 fc3f 	bl	8008f4e <USB_DevDisconnect>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080046dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_PCDEx_ActivateLPM+0x44>)
 800470c:	4313      	orrs	r3, r2
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	10000003 	.word	0x10000003

08004724 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800472e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004732:	6013      	str	r3, [r2, #0]
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40007000 	.word	0x40007000

08004744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800474c:	2300      	movs	r3, #0
 800474e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e291      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8087 	beq.w	8004876 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004768:	4b96      	ldr	r3, [pc, #600]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	2b04      	cmp	r3, #4
 8004772:	d00c      	beq.n	800478e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004774:	4b93      	ldr	r3, [pc, #588]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b08      	cmp	r3, #8
 800477e:	d112      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62>
 8004780:	4b90      	ldr	r3, [pc, #576]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478c:	d10b      	bne.n	80047a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478e:	4b8d      	ldr	r3, [pc, #564]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d06c      	beq.n	8004874 <HAL_RCC_OscConfig+0x130>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d168      	bne.n	8004874 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e26b      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x7a>
 80047b0:	4b84      	ldr	r3, [pc, #528]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a83      	ldr	r2, [pc, #524]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	e02e      	b.n	800481c <HAL_RCC_OscConfig+0xd8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x9c>
 80047c6:	4b7f      	ldr	r3, [pc, #508]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a7e      	ldr	r2, [pc, #504]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b7c      	ldr	r3, [pc, #496]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a7b      	ldr	r2, [pc, #492]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e01d      	b.n	800481c <HAL_RCC_OscConfig+0xd8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047e8:	d10c      	bne.n	8004804 <HAL_RCC_OscConfig+0xc0>
 80047ea:	4b76      	ldr	r3, [pc, #472]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a75      	ldr	r2, [pc, #468]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	4b73      	ldr	r3, [pc, #460]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a72      	ldr	r2, [pc, #456]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e00b      	b.n	800481c <HAL_RCC_OscConfig+0xd8>
 8004804:	4b6f      	ldr	r3, [pc, #444]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a6e      	ldr	r2, [pc, #440]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 800480a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	4b6c      	ldr	r3, [pc, #432]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6b      	ldr	r2, [pc, #428]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d013      	beq.n	800484c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fe fdf4 	bl	8003410 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800482c:	f7fe fdf0 	bl	8003410 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b64      	cmp	r3, #100	; 0x64
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e21f      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	4b61      	ldr	r3, [pc, #388]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0xe8>
 800484a:	e014      	b.n	8004876 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fe fde0 	bl	8003410 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004854:	f7fe fddc 	bl	8003410 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e20b      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	4b57      	ldr	r3, [pc, #348]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x110>
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d069      	beq.n	8004956 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004882:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800488e:	4b4d      	ldr	r3, [pc, #308]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b08      	cmp	r3, #8
 8004898:	d11c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x190>
 800489a:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d116      	bne.n	80048d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a6:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_RCC_OscConfig+0x17a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d001      	beq.n	80048be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e1df      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	493d      	ldr	r1, [pc, #244]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d2:	e040      	b.n	8004956 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d023      	beq.n	8004924 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048dc:	4b39      	ldr	r3, [pc, #228]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a38      	ldr	r2, [pc, #224]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fe fd92 	bl	8003410 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f0:	f7fe fd8e 	bl	8003410 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1bd      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004902:	4b30      	ldr	r3, [pc, #192]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4929      	ldr	r1, [pc, #164]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 800491e:	4313      	orrs	r3, r2
 8004920:	600b      	str	r3, [r1, #0]
 8004922:	e018      	b.n	8004956 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fe fd6e 	bl	8003410 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004938:	f7fe fd6a 	bl	8003410 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e199      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d038      	beq.n	80049d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d019      	beq.n	800499e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496a:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496e:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004976:	f7fe fd4b 	bl	8003410 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497e:	f7fe fd47 	bl	8003410 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e176      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 8004992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x23a>
 800499c:	e01a      	b.n	80049d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	4a08      	ldr	r2, [pc, #32]	; (80049c4 <HAL_RCC_OscConfig+0x280>)
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049aa:	f7fe fd31 	bl	8003410 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b2:	f7fe fd2d 	bl	8003410 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d903      	bls.n	80049c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e15c      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
 80049c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	4b91      	ldr	r3, [pc, #580]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a4 	beq.w	8004b2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e2:	4b8b      	ldr	r3, [pc, #556]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10d      	bne.n	8004a0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	4b88      	ldr	r3, [pc, #544]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	4a87      	ldr	r2, [pc, #540]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6413      	str	r3, [r2, #64]	; 0x40
 80049fa:	4b85      	ldr	r3, [pc, #532]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a06:	2301      	movs	r3, #1
 8004a08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a0a:	4b82      	ldr	r3, [pc, #520]	; (8004c14 <HAL_RCC_OscConfig+0x4d0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d118      	bne.n	8004a48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a16:	4b7f      	ldr	r3, [pc, #508]	; (8004c14 <HAL_RCC_OscConfig+0x4d0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a7e      	ldr	r2, [pc, #504]	; (8004c14 <HAL_RCC_OscConfig+0x4d0>)
 8004a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a22:	f7fe fcf5 	bl	8003410 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2a:	f7fe fcf1 	bl	8003410 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b64      	cmp	r3, #100	; 0x64
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e120      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3c:	4b75      	ldr	r3, [pc, #468]	; (8004c14 <HAL_RCC_OscConfig+0x4d0>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCC_OscConfig+0x31a>
 8004a50:	4b6f      	ldr	r3, [pc, #444]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	4a6e      	ldr	r2, [pc, #440]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5c:	e02d      	b.n	8004aba <HAL_RCC_OscConfig+0x376>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x33c>
 8004a66:	4b6a      	ldr	r3, [pc, #424]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	4a69      	ldr	r2, [pc, #420]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	6713      	str	r3, [r2, #112]	; 0x70
 8004a72:	4b67      	ldr	r3, [pc, #412]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a66      	ldr	r2, [pc, #408]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a78:	f023 0304 	bic.w	r3, r3, #4
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7e:	e01c      	b.n	8004aba <HAL_RCC_OscConfig+0x376>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x35e>
 8004a88:	4b61      	ldr	r3, [pc, #388]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	4a60      	ldr	r2, [pc, #384]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a8e:	f043 0304 	orr.w	r3, r3, #4
 8004a92:	6713      	str	r3, [r2, #112]	; 0x70
 8004a94:	4b5e      	ldr	r3, [pc, #376]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a5d      	ldr	r2, [pc, #372]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa0:	e00b      	b.n	8004aba <HAL_RCC_OscConfig+0x376>
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a5a      	ldr	r2, [pc, #360]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
 8004aae:	4b58      	ldr	r3, [pc, #352]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	4a57      	ldr	r2, [pc, #348]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d015      	beq.n	8004aee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac2:	f7fe fca5 	bl	8003410 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fe fca1 	bl	8003410 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0ce      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	4b4b      	ldr	r3, [pc, #300]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ee      	beq.n	8004aca <HAL_RCC_OscConfig+0x386>
 8004aec:	e014      	b.n	8004b18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aee:	f7fe fc8f 	bl	8003410 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fe fc8b 	bl	8003410 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e0b8      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0c:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ee      	bne.n	8004af6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1e:	4b3c      	ldr	r3, [pc, #240]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	4a3b      	ldr	r2, [pc, #236]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80a4 	beq.w	8004c7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b34:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d06b      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d149      	bne.n	8004bdc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b48:	4b31      	ldr	r3, [pc, #196]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a30      	ldr	r2, [pc, #192]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fe fc5c 	bl	8003410 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fe fc58 	bl	8003410 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e087      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	3b01      	subs	r3, #1
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ba6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fe fc2c 	bl	8003410 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fe fc28 	bl	8003410 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e057      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCC_OscConfig+0x478>
 8004bda:	e04f      	b.n	8004c7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a0b      	ldr	r2, [pc, #44]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fe fc12 	bl	8003410 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fe fc0e 	bl	8003410 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e03d      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c02:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <HAL_RCC_OscConfig+0x4cc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x4ac>
 8004c0e:	e035      	b.n	8004c7c <HAL_RCC_OscConfig+0x538>
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_RCC_OscConfig+0x544>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d028      	beq.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d121      	bne.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d11a      	bne.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d111      	bne.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800

08004c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0d0      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b6a      	ldr	r3, [pc, #424]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d910      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b67      	ldr	r3, [pc, #412]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 020f 	bic.w	r2, r3, #15
 8004cba:	4965      	ldr	r1, [pc, #404]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b63      	ldr	r3, [pc, #396]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0b8      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cec:	4b59      	ldr	r3, [pc, #356]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a58      	ldr	r2, [pc, #352]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d04:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a52      	ldr	r2, [pc, #328]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d10:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	494d      	ldr	r1, [pc, #308]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d040      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b47      	ldr	r3, [pc, #284]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d115      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e07f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4e:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e073      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e06b      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d6e:	4b39      	ldr	r3, [pc, #228]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 0203 	bic.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4936      	ldr	r1, [pc, #216]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d80:	f7fe fb46 	bl	8003410 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7fe fb42 	bl	8003410 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e053      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	4b2d      	ldr	r3, [pc, #180]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 020c 	and.w	r2, r3, #12
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d1eb      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004db0:	4b27      	ldr	r3, [pc, #156]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d210      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 020f 	bic.w	r2, r3, #15
 8004dc6:	4922      	ldr	r1, [pc, #136]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e032      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dec:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4916      	ldr	r1, [pc, #88]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	490e      	ldr	r1, [pc, #56]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e1e:	f000 f821 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8004e22:	4602      	mov	r2, r0
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	490a      	ldr	r1, [pc, #40]	; (8004e58 <HAL_RCC_ClockConfig+0x1cc>)
 8004e30:	5ccb      	ldrb	r3, [r1, r3]
 8004e32:	fa22 f303 	lsr.w	r3, r2, r3
 8004e36:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <HAL_RCC_ClockConfig+0x1d0>)
 8004e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <HAL_RCC_ClockConfig+0x1d4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe faa2 	bl	8003388 <HAL_InitTick>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023c00 	.word	0x40023c00
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0800d678 	.word	0x0800d678
 8004e5c:	20000028 	.word	0x20000028
 8004e60:	2000002c 	.word	0x2000002c

08004e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e7c:	4b67      	ldr	r3, [pc, #412]	; (800501c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d00d      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	f200 80bd 	bhi.w	8005008 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x34>
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e96:	e0b7      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b61      	ldr	r3, [pc, #388]	; (8005020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e9a:	60bb      	str	r3, [r7, #8]
      break;
 8004e9c:	e0b7      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e9e:	4b61      	ldr	r3, [pc, #388]	; (8005024 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ea0:	60bb      	str	r3, [r7, #8]
      break;
 8004ea2:	e0b4      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ea4:	4b5d      	ldr	r3, [pc, #372]	; (800501c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004eae:	4b5b      	ldr	r3, [pc, #364]	; (800501c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d04d      	beq.n	8004f56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eba:	4b58      	ldr	r3, [pc, #352]	; (800501c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004eca:	f04f 0100 	mov.w	r1, #0
 8004ece:	ea02 0800 	and.w	r8, r2, r0
 8004ed2:	ea03 0901 	and.w	r9, r3, r1
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	4649      	mov	r1, r9
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	014b      	lsls	r3, r1, #5
 8004ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ee8:	0142      	lsls	r2, r0, #5
 8004eea:	4610      	mov	r0, r2
 8004eec:	4619      	mov	r1, r3
 8004eee:	ebb0 0008 	subs.w	r0, r0, r8
 8004ef2:	eb61 0109 	sbc.w	r1, r1, r9
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	018b      	lsls	r3, r1, #6
 8004f00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f04:	0182      	lsls	r2, r0, #6
 8004f06:	1a12      	subs	r2, r2, r0
 8004f08:	eb63 0301 	sbc.w	r3, r3, r1
 8004f0c:	f04f 0000 	mov.w	r0, #0
 8004f10:	f04f 0100 	mov.w	r1, #0
 8004f14:	00d9      	lsls	r1, r3, #3
 8004f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f1a:	00d0      	lsls	r0, r2, #3
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	eb12 0208 	adds.w	r2, r2, r8
 8004f24:	eb43 0309 	adc.w	r3, r3, r9
 8004f28:	f04f 0000 	mov.w	r0, #0
 8004f2c:	f04f 0100 	mov.w	r1, #0
 8004f30:	0259      	lsls	r1, r3, #9
 8004f32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f36:	0250      	lsls	r0, r2, #9
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	f7fb ff0e 	bl	8000d68 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4613      	mov	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e04a      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f56:	4b31      	ldr	r3, [pc, #196]	; (800501c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	099b      	lsrs	r3, r3, #6
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	ea02 0400 	and.w	r4, r2, r0
 8004f6e:	ea03 0501 	and.w	r5, r3, r1
 8004f72:	4620      	mov	r0, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	014b      	lsls	r3, r1, #5
 8004f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f84:	0142      	lsls	r2, r0, #5
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	1b00      	subs	r0, r0, r4
 8004f8c:	eb61 0105 	sbc.w	r1, r1, r5
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	018b      	lsls	r3, r1, #6
 8004f9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f9e:	0182      	lsls	r2, r0, #6
 8004fa0:	1a12      	subs	r2, r2, r0
 8004fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fa6:	f04f 0000 	mov.w	r0, #0
 8004faa:	f04f 0100 	mov.w	r1, #0
 8004fae:	00d9      	lsls	r1, r3, #3
 8004fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fb4:	00d0      	lsls	r0, r2, #3
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	1912      	adds	r2, r2, r4
 8004fbc:	eb45 0303 	adc.w	r3, r5, r3
 8004fc0:	f04f 0000 	mov.w	r0, #0
 8004fc4:	f04f 0100 	mov.w	r1, #0
 8004fc8:	0299      	lsls	r1, r3, #10
 8004fca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fce:	0290      	lsls	r0, r2, #10
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f7fb fec2 	bl	8000d68 <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4613      	mov	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	60bb      	str	r3, [r7, #8]
      break;
 8005006:	e002      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800500a:	60bb      	str	r3, [r7, #8]
      break;
 800500c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800500e:	68bb      	ldr	r3, [r7, #8]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
 8005020:	00f42400 	.word	0x00f42400
 8005024:	007a1200 	.word	0x007a1200

08005028 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <HAL_RCC_GetHCLKFreq+0x14>)
 800502e:	681b      	ldr	r3, [r3, #0]
}
 8005030:	4618      	mov	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	20000028 	.word	0x20000028

08005040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005044:	f7ff fff0 	bl	8005028 <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0a9b      	lsrs	r3, r3, #10
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4903      	ldr	r1, [pc, #12]	; (8005064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40023800 	.word	0x40023800
 8005064:	0800d688 	.word	0x0800d688

08005068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800506c:	f7ff ffdc 	bl	8005028 <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	0b5b      	lsrs	r3, r3, #13
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4903      	ldr	r1, [pc, #12]	; (800508c <HAL_RCC_GetPCLK2Freq+0x24>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40023800 	.word	0x40023800
 800508c:	0800d688 	.word	0x0800d688

08005090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d012      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050b8:	4b69      	ldr	r3, [pc, #420]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a68      	ldr	r2, [pc, #416]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050c2:	6093      	str	r3, [r2, #8]
 80050c4:	4b66      	ldr	r3, [pc, #408]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	4964      	ldr	r1, [pc, #400]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80050da:	2301      	movs	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d017      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ea:	4b5d      	ldr	r3, [pc, #372]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f8:	4959      	ldr	r1, [pc, #356]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005108:	d101      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800510a:	2301      	movs	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005116:	2301      	movs	r3, #1
 8005118:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d017      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005126:	4b4e      	ldr	r3, [pc, #312]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	494a      	ldr	r1, [pc, #296]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005144:	d101      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005146:	2301      	movs	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005152:	2301      	movs	r3, #1
 8005154:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005162:	2301      	movs	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 808b 	beq.w	800528a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005174:	4b3a      	ldr	r3, [pc, #232]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	4a39      	ldr	r2, [pc, #228]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517e:	6413      	str	r3, [r2, #64]	; 0x40
 8005180:	4b37      	ldr	r3, [pc, #220]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800518c:	4b35      	ldr	r3, [pc, #212]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a34      	ldr	r2, [pc, #208]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005198:	f7fe f93a 	bl	8003410 <HAL_GetTick>
 800519c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a0:	f7fe f936 	bl	8003410 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	; 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e357      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051b2:	4b2c      	ldr	r3, [pc, #176]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051be:	4b28      	ldr	r3, [pc, #160]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d035      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d02e      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051dc:	4b20      	ldr	r3, [pc, #128]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051e6:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051f2:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80051fe:	4a18      	ldr	r2, [pc, #96]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005204:	4b16      	ldr	r3, [pc, #88]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d114      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fe f8fe 	bl	8003410 <HAL_GetTick>
 8005214:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005216:	e00a      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005218:	f7fe f8fa 	bl	8003410 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e319      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0ee      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005246:	d111      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005256:	400b      	ands	r3, r1
 8005258:	4901      	ldr	r1, [pc, #4]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525a:	4313      	orrs	r3, r2
 800525c:	608b      	str	r3, [r1, #8]
 800525e:	e00b      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005260:	40023800 	.word	0x40023800
 8005264:	40007000 	.word	0x40007000
 8005268:	0ffffcff 	.word	0x0ffffcff
 800526c:	4bb1      	ldr	r3, [pc, #708]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4ab0      	ldr	r2, [pc, #704]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005272:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005276:	6093      	str	r3, [r2, #8]
 8005278:	4bae      	ldr	r3, [pc, #696]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800527a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005284:	49ab      	ldr	r1, [pc, #684]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005286:	4313      	orrs	r3, r2
 8005288:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	d010      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005296:	4ba7      	ldr	r3, [pc, #668]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529c:	4aa5      	ldr	r2, [pc, #660]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800529e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052a6:	4ba3      	ldr	r3, [pc, #652]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	49a0      	ldr	r1, [pc, #640]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052c4:	4b9b      	ldr	r3, [pc, #620]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d2:	4998      	ldr	r1, [pc, #608]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052e6:	4b93      	ldr	r3, [pc, #588]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052f4:	498f      	ldr	r1, [pc, #572]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005308:	4b8a      	ldr	r3, [pc, #552]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005316:	4987      	ldr	r1, [pc, #540]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800532a:	4b82      	ldr	r3, [pc, #520]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	497e      	ldr	r1, [pc, #504]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800534c:	4b79      	ldr	r3, [pc, #484]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f023 0203 	bic.w	r2, r3, #3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	4976      	ldr	r1, [pc, #472]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800536e:	4b71      	ldr	r3, [pc, #452]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f023 020c 	bic.w	r2, r3, #12
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537c:	496d      	ldr	r1, [pc, #436]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005390:	4b68      	ldr	r3, [pc, #416]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539e:	4965      	ldr	r1, [pc, #404]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053b2:	4b60      	ldr	r3, [pc, #384]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	495c      	ldr	r1, [pc, #368]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053d4:	4b57      	ldr	r3, [pc, #348]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	4954      	ldr	r1, [pc, #336]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053f6:	4b4f      	ldr	r3, [pc, #316]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005404:	494b      	ldr	r1, [pc, #300]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005418:	4b46      	ldr	r3, [pc, #280]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005426:	4943      	ldr	r1, [pc, #268]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800543a:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005440:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005448:	493a      	ldr	r1, [pc, #232]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800545c:	4b35      	ldr	r3, [pc, #212]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546a:	4932      	ldr	r1, [pc, #200]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d011      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800547e:	4b2d      	ldr	r3, [pc, #180]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548c:	4929      	ldr	r1, [pc, #164]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800549c:	d101      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800549e:	2301      	movs	r3, #1
 80054a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054be:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054cc:	4919      	ldr	r1, [pc, #100]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00b      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054e0:	4b14      	ldr	r3, [pc, #80]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f0:	4910      	ldr	r1, [pc, #64]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d006      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80d9 	beq.w	80056be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a08      	ldr	r2, [pc, #32]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005512:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005518:	f7fd ff7a 	bl	8003410 <HAL_GetTick>
 800551c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800551e:	e00b      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005520:	f7fd ff76 	bl	8003410 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d904      	bls.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e197      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005538:	4b6c      	ldr	r3, [pc, #432]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1ed      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d021      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11d      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005558:	4b64      	ldr	r3, [pc, #400]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005566:	4b61      	ldr	r3, [pc, #388]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556c:	0e1b      	lsrs	r3, r3, #24
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	019a      	lsls	r2, r3, #6
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	431a      	orrs	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	071b      	lsls	r3, r3, #28
 800558c:	4957      	ldr	r1, [pc, #348]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a8:	d00a      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02e      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055be:	d129      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055c0:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055ce:	4b47      	ldr	r3, [pc, #284]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d4:	0f1b      	lsrs	r3, r3, #28
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	019a      	lsls	r2, r3, #6
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	431a      	orrs	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	071b      	lsls	r3, r3, #28
 80055f4:	493d      	ldr	r1, [pc, #244]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055fc:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005602:	f023 021f 	bic.w	r2, r3, #31
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	3b01      	subs	r3, #1
 800560c:	4937      	ldr	r1, [pc, #220]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01d      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005620:	4b32      	ldr	r3, [pc, #200]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005626:	0e1b      	lsrs	r3, r3, #24
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800562e:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005634:	0f1b      	lsrs	r3, r3, #28
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	019a      	lsls	r2, r3, #6
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	431a      	orrs	r2, r3
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	061b      	lsls	r3, r3, #24
 800564e:	431a      	orrs	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	071b      	lsls	r3, r3, #28
 8005654:	4925      	ldr	r1, [pc, #148]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d011      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	019a      	lsls	r2, r3, #6
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	061b      	lsls	r3, r3, #24
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	071b      	lsls	r3, r3, #28
 8005684:	4919      	ldr	r1, [pc, #100]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800568c:	4b17      	ldr	r3, [pc, #92]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a16      	ldr	r2, [pc, #88]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005692:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005698:	f7fd feba 	bl	8003410 <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056a0:	f7fd feb6 	bl	8003410 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e0d7      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b2:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	f040 80cd 	bne.w	8005860 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a08      	ldr	r2, [pc, #32]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d2:	f7fd fe9d 	bl	8003410 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80056da:	f7fd fe99 	bl	8003410 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b64      	cmp	r3, #100	; 0x64
 80056e6:	d903      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e0ba      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80056ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056f0:	4b5e      	ldr	r3, [pc, #376]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056fc:	d0ed      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800571a:	2b00      	cmp	r3, #0
 800571c:	d02e      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d12a      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005726:	4b51      	ldr	r3, [pc, #324]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	f003 0303 	and.w	r3, r3, #3
 8005732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005734:	4b4d      	ldr	r3, [pc, #308]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	0f1b      	lsrs	r3, r3, #28
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	019a      	lsls	r2, r3, #6
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	041b      	lsls	r3, r3, #16
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	061b      	lsls	r3, r3, #24
 8005754:	431a      	orrs	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	071b      	lsls	r3, r3, #28
 800575a:	4944      	ldr	r1, [pc, #272]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005762:	4b42      	ldr	r3, [pc, #264]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005768:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	3b01      	subs	r3, #1
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	493d      	ldr	r1, [pc, #244]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d022      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800578c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005790:	d11d      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005792:	4b36      	ldr	r3, [pc, #216]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005798:	0e1b      	lsrs	r3, r3, #24
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057a0:	4b32      	ldr	r3, [pc, #200]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	0f1b      	lsrs	r3, r3, #28
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	019a      	lsls	r2, r3, #6
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	041b      	lsls	r3, r3, #16
 80057ba:	431a      	orrs	r2, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	061b      	lsls	r3, r3, #24
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	071b      	lsls	r3, r3, #28
 80057c6:	4929      	ldr	r1, [pc, #164]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d028      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057da:	4b24      	ldr	r3, [pc, #144]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e0:	0e1b      	lsrs	r3, r3, #24
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057e8:	4b20      	ldr	r3, [pc, #128]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ee:	0c1b      	lsrs	r3, r3, #16
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	019a      	lsls	r2, r3, #6
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	431a      	orrs	r2, r3
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	061b      	lsls	r3, r3, #24
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	071b      	lsls	r3, r3, #28
 800580e:	4917      	ldr	r1, [pc, #92]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	4911      	ldr	r1, [pc, #68]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800582c:	4b0f      	ldr	r3, [pc, #60]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a0e      	ldr	r2, [pc, #56]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005838:	f7fd fdea 	bl	8003410 <HAL_GetTick>
 800583c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005840:	f7fd fde6 	bl	8003410 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e007      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800585a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800585e:	d1ef      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800

08005870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e09d      	b.n	80059be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d108      	bne.n	800589c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005892:	d009      	beq.n	80058a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	61da      	str	r2, [r3, #28]
 800589a:	e005      	b.n	80058a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fd f934 	bl	8002b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058e8:	d902      	bls.n	80058f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e002      	b.n	80058f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058fe:	d007      	beq.n	8005910 <HAL_SPI_Init+0xa0>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005908:	d002      	beq.n	8005910 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	ea42 0103 	orr.w	r1, r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	0c1b      	lsrs	r3, r3, #16
 800596c:	f003 0204 	and.w	r2, r3, #4
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800598c:	ea42 0103 	orr.w	r1, r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b08a      	sub	sp, #40	; 0x28
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	607a      	str	r2, [r7, #4]
 80059d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059d4:	2301      	movs	r3, #1
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_SPI_TransmitReceive+0x26>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e1fb      	b.n	8005de4 <HAL_SPI_TransmitReceive+0x41e>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059f4:	f7fd fd0c 	bl	8003410 <HAL_GetTick>
 80059f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a00:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a08:	887b      	ldrh	r3, [r7, #2]
 8005a0a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a0c:	887b      	ldrh	r3, [r7, #2]
 8005a0e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a10:	7efb      	ldrb	r3, [r7, #27]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d00e      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x6e>
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a1c:	d106      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x66>
 8005a26:	7efb      	ldrb	r3, [r7, #27]
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d003      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a32:	e1cd      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_SPI_TransmitReceive+0x80>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_SPI_TransmitReceive+0x80>
 8005a40:	887b      	ldrh	r3, [r7, #2]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a4c:	e1c0      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d003      	beq.n	8005a62 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2205      	movs	r2, #5
 8005a5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	887a      	ldrh	r2, [r7, #2]
 8005a72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	887a      	ldrh	r2, [r7, #2]
 8005a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	887a      	ldrh	r2, [r7, #2]
 8005a8e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aa4:	d802      	bhi.n	8005aac <HAL_SPI_TransmitReceive+0xe6>
 8005aa6:	8a3b      	ldrh	r3, [r7, #16]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d908      	bls.n	8005abe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005aba:	605a      	str	r2, [r3, #4]
 8005abc:	e007      	b.n	8005ace <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005acc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d007      	beq.n	8005aec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005af4:	d97c      	bls.n	8005bf0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x13e>
 8005afe:	8a7b      	ldrh	r3, [r7, #18]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d169      	bne.n	8005bd8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	881a      	ldrh	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b28:	e056      	b.n	8005bd8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d11b      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x1aa>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d016      	beq.n	8005b70 <HAL_SPI_TransmitReceive+0x1aa>
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d113      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	881a      	ldrh	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	1c9a      	adds	r2, r3, #2
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d11c      	bne.n	8005bb8 <HAL_SPI_TransmitReceive+0x1f2>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d016      	beq.n	8005bb8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	b292      	uxth	r2, r2
 8005b96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	1c9a      	adds	r2, r3, #2
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bb8:	f7fd fc2a 	bl	8003410 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d807      	bhi.n	8005bd8 <HAL_SPI_TransmitReceive+0x212>
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bce:	d003      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005bd6:	e0fb      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1a3      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x164>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d19d      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x164>
 8005bee:	e0df      	b.n	8005db0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_SPI_TransmitReceive+0x23a>
 8005bf8:	8a7b      	ldrh	r3, [r7, #18]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	f040 80cb 	bne.w	8005d96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d912      	bls.n	8005c30 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	881a      	ldrh	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b02      	subs	r3, #2
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c2e:	e0b2      	b.n	8005d96 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	7812      	ldrb	r2, [r2, #0]
 8005c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c56:	e09e      	b.n	8005d96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d134      	bne.n	8005cd0 <HAL_SPI_TransmitReceive+0x30a>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d02f      	beq.n	8005cd0 <HAL_SPI_TransmitReceive+0x30a>
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d12c      	bne.n	8005cd0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d912      	bls.n	8005ca6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	881a      	ldrh	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	1c9a      	adds	r2, r3, #2
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b02      	subs	r3, #2
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ca4:	e012      	b.n	8005ccc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d148      	bne.n	8005d70 <HAL_SPI_TransmitReceive+0x3aa>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d042      	beq.n	8005d70 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d923      	bls.n	8005d3e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	b292      	uxth	r2, r2
 8005d02:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b02      	subs	r3, #2
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d81f      	bhi.n	8005d6c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	e016      	b.n	8005d6c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f103 020c 	add.w	r2, r3, #12
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d70:	f7fd fb4e 	bl	8003410 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d803      	bhi.n	8005d88 <HAL_SPI_TransmitReceive+0x3c2>
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d86:	d102      	bne.n	8005d8e <HAL_SPI_TransmitReceive+0x3c8>
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d94:	e01c      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f47f af5b 	bne.w	8005c58 <HAL_SPI_TransmitReceive+0x292>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f47f af54 	bne.w	8005c58 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f937 	bl	8006028 <SPI_EndRxTxTransaction>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d006      	beq.n	8005dce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	661a      	str	r2, [r3, #96]	; 0x60
 8005dcc:	e000      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3728      	adds	r7, #40	; 0x28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dfc:	f7fd fb08 	bl	8003410 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4413      	add	r3, r2
 8005e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e0c:	f7fd fb00 	bl	8003410 <HAL_GetTick>
 8005e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e12:	4b39      	ldr	r3, [pc, #228]	; (8005ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	015b      	lsls	r3, r3, #5
 8005e18:	0d1b      	lsrs	r3, r3, #20
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e22:	e054      	b.n	8005ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d050      	beq.n	8005ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e2c:	f7fd faf0 	bl	8003410 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d902      	bls.n	8005e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d13d      	bne.n	8005ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e5a:	d111      	bne.n	8005e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e64:	d004      	beq.n	8005e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6e:	d107      	bne.n	8005e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e88:	d10f      	bne.n	8005eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e017      	b.n	8005eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	bf0c      	ite	eq
 8005ede:	2301      	moveq	r3, #1
 8005ee0:	2300      	movne	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d19b      	bne.n	8005e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000028 	.word	0x20000028

08005efc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f0e:	f7fd fa7f 	bl	8003410 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f1e:	f7fd fa77 	bl	8003410 <HAL_GetTick>
 8005f22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f2c:	4b3d      	ldr	r3, [pc, #244]	; (8006024 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	00da      	lsls	r2, r3, #3
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	0d1b      	lsrs	r3, r3, #20
 8005f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f44:	e060      	b.n	8006008 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f4c:	d107      	bne.n	8005f5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d104      	bne.n	8005f5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f64:	d050      	beq.n	8006008 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f66:	f7fd fa53 	bl	8003410 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d902      	bls.n	8005f7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d13d      	bne.n	8005ff8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f94:	d111      	bne.n	8005fba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f9e:	d004      	beq.n	8005faa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa8:	d107      	bne.n	8005fba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc2:	d10f      	bne.n	8005fe4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e010      	b.n	800601a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	3b01      	subs	r3, #1
 8006006:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4013      	ands	r3, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	d196      	bne.n	8005f46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3728      	adds	r7, #40	; 0x28
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000028 	.word	0x20000028

08006028 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff ff5b 	bl	8005efc <SPI_WaitFifoStateUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e046      	b.n	80060ea <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800605c:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <SPI_EndRxTxTransaction+0xcc>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <SPI_EndRxTxTransaction+0xd0>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	0d5b      	lsrs	r3, r3, #21
 8006068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800607a:	d112      	bne.n	80060a2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	2180      	movs	r1, #128	; 0x80
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff feb0 	bl	8005dec <SPI_WaitFlagStateUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d016      	beq.n	80060c0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006096:	f043 0220 	orr.w	r2, r3, #32
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e023      	b.n	80060ea <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d0f2      	beq.n	80060a2 <SPI_EndRxTxTransaction+0x7a>
 80060bc:	e000      	b.n	80060c0 <SPI_EndRxTxTransaction+0x98>
        break;
 80060be:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff ff15 	bl	8005efc <SPI_WaitFifoStateUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060dc:	f043 0220 	orr.w	r2, r3, #32
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e000      	b.n	80060ea <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000028 	.word	0x20000028
 80060f8:	165e9f81 	.word	0x165e9f81

080060fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e049      	b.n	80061a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fc ff4a 	bl	8002fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f000 fd30 	bl	8006ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d001      	beq.n	80061c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e054      	b.n	800626e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a26      	ldr	r2, [pc, #152]	; (800627c <HAL_TIM_Base_Start_IT+0xd0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d022      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x80>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ee:	d01d      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x80>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a22      	ldr	r2, [pc, #136]	; (8006280 <HAL_TIM_Base_Start_IT+0xd4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d018      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x80>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a21      	ldr	r2, [pc, #132]	; (8006284 <HAL_TIM_Base_Start_IT+0xd8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d013      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x80>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1f      	ldr	r2, [pc, #124]	; (8006288 <HAL_TIM_Base_Start_IT+0xdc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00e      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x80>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1e      	ldr	r2, [pc, #120]	; (800628c <HAL_TIM_Base_Start_IT+0xe0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d009      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x80>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1c      	ldr	r2, [pc, #112]	; (8006290 <HAL_TIM_Base_Start_IT+0xe4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d004      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x80>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1b      	ldr	r2, [pc, #108]	; (8006294 <HAL_TIM_Base_Start_IT+0xe8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d115      	bne.n	8006258 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	4b19      	ldr	r3, [pc, #100]	; (8006298 <HAL_TIM_Base_Start_IT+0xec>)
 8006234:	4013      	ands	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b06      	cmp	r3, #6
 800623c:	d015      	beq.n	800626a <HAL_TIM_Base_Start_IT+0xbe>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006244:	d011      	beq.n	800626a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0201 	orr.w	r2, r2, #1
 8006254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006256:	e008      	b.n	800626a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e000      	b.n	800626c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40010000 	.word	0x40010000
 8006280:	40000400 	.word	0x40000400
 8006284:	40000800 	.word	0x40000800
 8006288:	40000c00 	.word	0x40000c00
 800628c:	40010400 	.word	0x40010400
 8006290:	40014000 	.word	0x40014000
 8006294:	40001800 	.word	0x40001800
 8006298:	00010007 	.word	0x00010007

0800629c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e049      	b.n	8006342 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f841 	bl	800634a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3304      	adds	r3, #4
 80062d8:	4619      	mov	r1, r3
 80062da:	4610      	mov	r0, r2
 80062dc:	f000 fc60 	bl	8006ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d109      	bne.n	8006384 <HAL_TIM_PWM_Start+0x24>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	bf14      	ite	ne
 800637c:	2301      	movne	r3, #1
 800637e:	2300      	moveq	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e03c      	b.n	80063fe <HAL_TIM_PWM_Start+0x9e>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b04      	cmp	r3, #4
 8006388:	d109      	bne.n	800639e <HAL_TIM_PWM_Start+0x3e>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	bf14      	ite	ne
 8006396:	2301      	movne	r3, #1
 8006398:	2300      	moveq	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	e02f      	b.n	80063fe <HAL_TIM_PWM_Start+0x9e>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d109      	bne.n	80063b8 <HAL_TIM_PWM_Start+0x58>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e022      	b.n	80063fe <HAL_TIM_PWM_Start+0x9e>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b0c      	cmp	r3, #12
 80063bc:	d109      	bne.n	80063d2 <HAL_TIM_PWM_Start+0x72>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	bf14      	ite	ne
 80063ca:	2301      	movne	r3, #1
 80063cc:	2300      	moveq	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	e015      	b.n	80063fe <HAL_TIM_PWM_Start+0x9e>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d109      	bne.n	80063ec <HAL_TIM_PWM_Start+0x8c>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	bf14      	ite	ne
 80063e4:	2301      	movne	r3, #1
 80063e6:	2300      	moveq	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	e008      	b.n	80063fe <HAL_TIM_PWM_Start+0x9e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e092      	b.n	800652c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <HAL_TIM_PWM_Start+0xb6>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006414:	e023      	b.n	800645e <HAL_TIM_PWM_Start+0xfe>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b04      	cmp	r3, #4
 800641a:	d104      	bne.n	8006426 <HAL_TIM_PWM_Start+0xc6>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006424:	e01b      	b.n	800645e <HAL_TIM_PWM_Start+0xfe>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d104      	bne.n	8006436 <HAL_TIM_PWM_Start+0xd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006434:	e013      	b.n	800645e <HAL_TIM_PWM_Start+0xfe>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b0c      	cmp	r3, #12
 800643a:	d104      	bne.n	8006446 <HAL_TIM_PWM_Start+0xe6>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006444:	e00b      	b.n	800645e <HAL_TIM_PWM_Start+0xfe>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b10      	cmp	r3, #16
 800644a:	d104      	bne.n	8006456 <HAL_TIM_PWM_Start+0xf6>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006454:	e003      	b.n	800645e <HAL_TIM_PWM_Start+0xfe>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2201      	movs	r2, #1
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 ff32 	bl	80072d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a30      	ldr	r2, [pc, #192]	; (8006534 <HAL_TIM_PWM_Start+0x1d4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_TIM_PWM_Start+0x120>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2f      	ldr	r2, [pc, #188]	; (8006538 <HAL_TIM_PWM_Start+0x1d8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d101      	bne.n	8006484 <HAL_TIM_PWM_Start+0x124>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <HAL_TIM_PWM_Start+0x126>
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a25      	ldr	r2, [pc, #148]	; (8006534 <HAL_TIM_PWM_Start+0x1d4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d022      	beq.n	80064ea <HAL_TIM_PWM_Start+0x18a>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ac:	d01d      	beq.n	80064ea <HAL_TIM_PWM_Start+0x18a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a22      	ldr	r2, [pc, #136]	; (800653c <HAL_TIM_PWM_Start+0x1dc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d018      	beq.n	80064ea <HAL_TIM_PWM_Start+0x18a>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a20      	ldr	r2, [pc, #128]	; (8006540 <HAL_TIM_PWM_Start+0x1e0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <HAL_TIM_PWM_Start+0x18a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1f      	ldr	r2, [pc, #124]	; (8006544 <HAL_TIM_PWM_Start+0x1e4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00e      	beq.n	80064ea <HAL_TIM_PWM_Start+0x18a>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a19      	ldr	r2, [pc, #100]	; (8006538 <HAL_TIM_PWM_Start+0x1d8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_TIM_PWM_Start+0x18a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <HAL_TIM_PWM_Start+0x1e8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_TIM_PWM_Start+0x18a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a19      	ldr	r2, [pc, #100]	; (800654c <HAL_TIM_PWM_Start+0x1ec>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d115      	bne.n	8006516 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	4b17      	ldr	r3, [pc, #92]	; (8006550 <HAL_TIM_PWM_Start+0x1f0>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b06      	cmp	r3, #6
 80064fa:	d015      	beq.n	8006528 <HAL_TIM_PWM_Start+0x1c8>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006502:	d011      	beq.n	8006528 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006514:	e008      	b.n	8006528 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0201 	orr.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e000      	b.n	800652a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006528:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40010000 	.word	0x40010000
 8006538:	40010400 	.word	0x40010400
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40014000 	.word	0x40014000
 800654c:	40001800 	.word	0x40001800
 8006550:	00010007 	.word	0x00010007

08006554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b02      	cmp	r3, #2
 8006568:	d122      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b02      	cmp	r3, #2
 8006576:	d11b      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0202 	mvn.w	r2, #2
 8006580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fae4 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fad6 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fae7 	bl	8006b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d122      	bne.n	8006604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d11b      	bne.n	8006604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0204 	mvn.w	r2, #4
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 faba 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 faac 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fabd 	bl	8006b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b08      	cmp	r3, #8
 8006610:	d122      	bne.n	8006658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b08      	cmp	r3, #8
 800661e:	d11b      	bne.n	8006658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0208 	mvn.w	r2, #8
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2204      	movs	r2, #4
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa90 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa82 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fa93 	bl	8006b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2b10      	cmp	r3, #16
 8006664:	d122      	bne.n	80066ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b10      	cmp	r3, #16
 8006672:	d11b      	bne.n	80066ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0210 	mvn.w	r2, #16
 800667c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2208      	movs	r2, #8
 8006682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa66 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
 8006698:	e005      	b.n	80066a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa58 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fa69 	bl	8006b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d10e      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d107      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0201 	mvn.w	r2, #1
 80066d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fc f924 	bl	8002920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e2:	2b80      	cmp	r3, #128	; 0x80
 80066e4:	d10e      	bne.n	8006704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f0:	2b80      	cmp	r3, #128	; 0x80
 80066f2:	d107      	bne.n	8006704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fea4 	bl	800744c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006712:	d10e      	bne.n	8006732 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671e:	2b80      	cmp	r3, #128	; 0x80
 8006720:	d107      	bne.n	8006732 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800672a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fe97 	bl	8007460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d10e      	bne.n	800675e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d107      	bne.n	800675e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fa17 	bl	8006b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b20      	cmp	r3, #32
 800676a:	d10e      	bne.n	800678a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b20      	cmp	r3, #32
 8006778:	d107      	bne.n	800678a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f06f 0220 	mvn.w	r2, #32
 8006782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fe57 	bl	8007438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e0ff      	b.n	80069b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b14      	cmp	r3, #20
 80067be:	f200 80f0 	bhi.w	80069a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	0800681d 	.word	0x0800681d
 80067cc:	080069a3 	.word	0x080069a3
 80067d0:	080069a3 	.word	0x080069a3
 80067d4:	080069a3 	.word	0x080069a3
 80067d8:	0800685d 	.word	0x0800685d
 80067dc:	080069a3 	.word	0x080069a3
 80067e0:	080069a3 	.word	0x080069a3
 80067e4:	080069a3 	.word	0x080069a3
 80067e8:	0800689f 	.word	0x0800689f
 80067ec:	080069a3 	.word	0x080069a3
 80067f0:	080069a3 	.word	0x080069a3
 80067f4:	080069a3 	.word	0x080069a3
 80067f8:	080068df 	.word	0x080068df
 80067fc:	080069a3 	.word	0x080069a3
 8006800:	080069a3 	.word	0x080069a3
 8006804:	080069a3 	.word	0x080069a3
 8006808:	08006921 	.word	0x08006921
 800680c:	080069a3 	.word	0x080069a3
 8006810:	080069a3 	.word	0x080069a3
 8006814:	080069a3 	.word	0x080069a3
 8006818:	08006961 	.word	0x08006961
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fa5c 	bl	8006ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0208 	orr.w	r2, r2, #8
 8006836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0204 	bic.w	r2, r2, #4
 8006846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6999      	ldr	r1, [r3, #24]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	619a      	str	r2, [r3, #24]
      break;
 800685a:	e0a5      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68b9      	ldr	r1, [r7, #8]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 faae 	bl	8006dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6999      	ldr	r1, [r3, #24]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	021a      	lsls	r2, r3, #8
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	619a      	str	r2, [r3, #24]
      break;
 800689c:	e084      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fb05 	bl	8006eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69da      	ldr	r2, [r3, #28]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0208 	orr.w	r2, r2, #8
 80068b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69da      	ldr	r2, [r3, #28]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0204 	bic.w	r2, r2, #4
 80068c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69d9      	ldr	r1, [r3, #28]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	61da      	str	r2, [r3, #28]
      break;
 80068dc:	e064      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fb5b 	bl	8006fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69d9      	ldr	r1, [r3, #28]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	021a      	lsls	r2, r3, #8
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	61da      	str	r2, [r3, #28]
      break;
 800691e:	e043      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fb92 	bl	8007050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0208 	orr.w	r2, r2, #8
 800693a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0204 	bic.w	r2, r2, #4
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800695e:	e023      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fbc4 	bl	80070f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800697a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800698a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	021a      	lsls	r2, r3, #8
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069a0:	e002      	b.n	80069a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
      break;
 80069a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop

080069bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIM_ConfigClockSource+0x1c>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e0b4      	b.n	8006b42 <HAL_TIM_ConfigClockSource+0x186>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	4b56      	ldr	r3, [pc, #344]	; (8006b4c <HAL_TIM_ConfigClockSource+0x190>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a10:	d03e      	beq.n	8006a90 <HAL_TIM_ConfigClockSource+0xd4>
 8006a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a16:	f200 8087 	bhi.w	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1e:	f000 8086 	beq.w	8006b2e <HAL_TIM_ConfigClockSource+0x172>
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	d87f      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
 8006a28:	2b70      	cmp	r3, #112	; 0x70
 8006a2a:	d01a      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0xa6>
 8006a2c:	2b70      	cmp	r3, #112	; 0x70
 8006a2e:	d87b      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
 8006a30:	2b60      	cmp	r3, #96	; 0x60
 8006a32:	d050      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x11a>
 8006a34:	2b60      	cmp	r3, #96	; 0x60
 8006a36:	d877      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
 8006a38:	2b50      	cmp	r3, #80	; 0x50
 8006a3a:	d03c      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0xfa>
 8006a3c:	2b50      	cmp	r3, #80	; 0x50
 8006a3e:	d873      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d058      	beq.n	8006af6 <HAL_TIM_ConfigClockSource+0x13a>
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d86f      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
 8006a48:	2b30      	cmp	r3, #48	; 0x30
 8006a4a:	d064      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x15a>
 8006a4c:	2b30      	cmp	r3, #48	; 0x30
 8006a4e:	d86b      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d060      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x15a>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d867      	bhi.n	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d05c      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x15a>
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d05a      	beq.n	8006b16 <HAL_TIM_ConfigClockSource+0x15a>
 8006a60:	e062      	b.n	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	6899      	ldr	r1, [r3, #8]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f000 fc0d 	bl	8007290 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	609a      	str	r2, [r3, #8]
      break;
 8006a8e:	e04f      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	6899      	ldr	r1, [r3, #8]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f000 fbf6 	bl	8007290 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689a      	ldr	r2, [r3, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ab2:	609a      	str	r2, [r3, #8]
      break;
 8006ab4:	e03c      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6859      	ldr	r1, [r3, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f000 fb6a 	bl	800719c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2150      	movs	r1, #80	; 0x50
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fbc3 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006ad4:	e02c      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6859      	ldr	r1, [r3, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f000 fb89 	bl	80071fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2160      	movs	r1, #96	; 0x60
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fbb3 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006af4:	e01c      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	6859      	ldr	r1, [r3, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f000 fb4a 	bl	800719c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2140      	movs	r1, #64	; 0x40
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fba3 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006b14:	e00c      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f000 fb9a 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006b26:	e003      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b2c:	e000      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	fffeff88 	.word	0xfffeff88

08006b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a40      	ldr	r2, [pc, #256]	; (8006cb4 <TIM_Base_SetConfig+0x114>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbe:	d00f      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a3d      	ldr	r2, [pc, #244]	; (8006cb8 <TIM_Base_SetConfig+0x118>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00b      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a3c      	ldr	r2, [pc, #240]	; (8006cbc <TIM_Base_SetConfig+0x11c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d007      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a3b      	ldr	r2, [pc, #236]	; (8006cc0 <TIM_Base_SetConfig+0x120>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d003      	beq.n	8006be0 <TIM_Base_SetConfig+0x40>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a3a      	ldr	r2, [pc, #232]	; (8006cc4 <TIM_Base_SetConfig+0x124>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d108      	bne.n	8006bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2f      	ldr	r2, [pc, #188]	; (8006cb4 <TIM_Base_SetConfig+0x114>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d02b      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c00:	d027      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a2c      	ldr	r2, [pc, #176]	; (8006cb8 <TIM_Base_SetConfig+0x118>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d023      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a2b      	ldr	r2, [pc, #172]	; (8006cbc <TIM_Base_SetConfig+0x11c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01f      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <TIM_Base_SetConfig+0x120>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01b      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a29      	ldr	r2, [pc, #164]	; (8006cc4 <TIM_Base_SetConfig+0x124>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d017      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a28      	ldr	r2, [pc, #160]	; (8006cc8 <TIM_Base_SetConfig+0x128>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d013      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a27      	ldr	r2, [pc, #156]	; (8006ccc <TIM_Base_SetConfig+0x12c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00f      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a26      	ldr	r2, [pc, #152]	; (8006cd0 <TIM_Base_SetConfig+0x130>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00b      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a25      	ldr	r2, [pc, #148]	; (8006cd4 <TIM_Base_SetConfig+0x134>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d007      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a24      	ldr	r2, [pc, #144]	; (8006cd8 <TIM_Base_SetConfig+0x138>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d003      	beq.n	8006c52 <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a23      	ldr	r2, [pc, #140]	; (8006cdc <TIM_Base_SetConfig+0x13c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d108      	bne.n	8006c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <TIM_Base_SetConfig+0x114>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_Base_SetConfig+0xf8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a0c      	ldr	r2, [pc, #48]	; (8006cc4 <TIM_Base_SetConfig+0x124>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d103      	bne.n	8006ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	615a      	str	r2, [r3, #20]
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40000800 	.word	0x40000800
 8006cc0:	40000c00 	.word	0x40000c00
 8006cc4:	40010400 	.word	0x40010400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800
 8006cd4:	40001800 	.word	0x40001800
 8006cd8:	40001c00 	.word	0x40001c00
 8006cdc:	40002000 	.word	0x40002000

08006ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f023 0201 	bic.w	r2, r3, #1
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4b2b      	ldr	r3, [pc, #172]	; (8006db8 <TIM_OC1_SetConfig+0xd8>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f023 0302 	bic.w	r3, r3, #2
 8006d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a21      	ldr	r2, [pc, #132]	; (8006dbc <TIM_OC1_SetConfig+0xdc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC1_SetConfig+0x64>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a20      	ldr	r2, [pc, #128]	; (8006dc0 <TIM_OC1_SetConfig+0xe0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d10c      	bne.n	8006d5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0308 	bic.w	r3, r3, #8
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f023 0304 	bic.w	r3, r3, #4
 8006d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <TIM_OC1_SetConfig+0xdc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_OC1_SetConfig+0x8e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <TIM_OC1_SetConfig+0xe0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d111      	bne.n	8006d92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	621a      	str	r2, [r3, #32]
}
 8006dac:	bf00      	nop
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	fffeff8f 	.word	0xfffeff8f
 8006dbc:	40010000 	.word	0x40010000
 8006dc0:	40010400 	.word	0x40010400

08006dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f023 0210 	bic.w	r2, r3, #16
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4b2e      	ldr	r3, [pc, #184]	; (8006ea8 <TIM_OC2_SetConfig+0xe4>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f023 0320 	bic.w	r3, r3, #32
 8006e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a23      	ldr	r2, [pc, #140]	; (8006eac <TIM_OC2_SetConfig+0xe8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d003      	beq.n	8006e2c <TIM_OC2_SetConfig+0x68>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <TIM_OC2_SetConfig+0xec>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d10d      	bne.n	8006e48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a18      	ldr	r2, [pc, #96]	; (8006eac <TIM_OC2_SetConfig+0xe8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC2_SetConfig+0x94>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <TIM_OC2_SetConfig+0xec>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d113      	bne.n	8006e80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	feff8fff 	.word	0xfeff8fff
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	40010400 	.word	0x40010400

08006eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4b2d      	ldr	r3, [pc, #180]	; (8006f94 <TIM_OC3_SetConfig+0xe0>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0303 	bic.w	r3, r3, #3
 8006eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a22      	ldr	r2, [pc, #136]	; (8006f98 <TIM_OC3_SetConfig+0xe4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC3_SetConfig+0x66>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a21      	ldr	r2, [pc, #132]	; (8006f9c <TIM_OC3_SetConfig+0xe8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d10d      	bne.n	8006f36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <TIM_OC3_SetConfig+0xe4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_OC3_SetConfig+0x92>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a16      	ldr	r2, [pc, #88]	; (8006f9c <TIM_OC3_SetConfig+0xe8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d113      	bne.n	8006f6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	621a      	str	r2, [r3, #32]
}
 8006f88:	bf00      	nop
 8006f8a:	371c      	adds	r7, #28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	fffeff8f 	.word	0xfffeff8f
 8006f98:	40010000 	.word	0x40010000
 8006f9c:	40010400 	.word	0x40010400

08006fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <TIM_OC4_SetConfig+0xa4>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	031b      	lsls	r3, r3, #12
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a13      	ldr	r2, [pc, #76]	; (8007048 <TIM_OC4_SetConfig+0xa8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d003      	beq.n	8007008 <TIM_OC4_SetConfig+0x68>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a12      	ldr	r2, [pc, #72]	; (800704c <TIM_OC4_SetConfig+0xac>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d109      	bne.n	800701c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800700e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	019b      	lsls	r3, r3, #6
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	feff8fff 	.word	0xfeff8fff
 8007048:	40010000 	.word	0x40010000
 800704c:	40010400 	.word	0x40010400

08007050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4b1b      	ldr	r3, [pc, #108]	; (80070e8 <TIM_OC5_SetConfig+0x98>)
 800707c:	4013      	ands	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a12      	ldr	r2, [pc, #72]	; (80070ec <TIM_OC5_SetConfig+0x9c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d003      	beq.n	80070ae <TIM_OC5_SetConfig+0x5e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a11      	ldr	r2, [pc, #68]	; (80070f0 <TIM_OC5_SetConfig+0xa0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d109      	bne.n	80070c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	fffeff8f 	.word	0xfffeff8f
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40010400 	.word	0x40010400

080070f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4b1c      	ldr	r3, [pc, #112]	; (8007190 <TIM_OC6_SetConfig+0x9c>)
 8007120:	4013      	ands	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	051b      	lsls	r3, r3, #20
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a13      	ldr	r2, [pc, #76]	; (8007194 <TIM_OC6_SetConfig+0xa0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC6_SetConfig+0x60>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a12      	ldr	r2, [pc, #72]	; (8007198 <TIM_OC6_SetConfig+0xa4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d109      	bne.n	8007168 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800715a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	029b      	lsls	r3, r3, #10
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	feff8fff 	.word	0xfeff8fff
 8007194:	40010000 	.word	0x40010000
 8007198:	40010400 	.word	0x40010400

0800719c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f023 0201 	bic.w	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 030a 	bic.w	r3, r3, #10
 80071d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b087      	sub	sp, #28
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0210 	bic.w	r2, r3, #16
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	031b      	lsls	r3, r3, #12
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800725a:	b480      	push	{r7}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	f043 0307 	orr.w	r3, r3, #7
 800727c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	021a      	lsls	r2, r3, #8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	609a      	str	r2, [r3, #8]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2201      	movs	r2, #1
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1a      	ldr	r2, [r3, #32]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	43db      	mvns	r3, r3
 80072f2:	401a      	ands	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	fa01 f303 	lsl.w	r3, r1, r3
 8007308:	431a      	orrs	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
	...

0800731c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007330:	2302      	movs	r3, #2
 8007332:	e06d      	b.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a30      	ldr	r2, [pc, #192]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a2f      	ldr	r2, [pc, #188]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d108      	bne.n	800737a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800736e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007380:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4313      	orrs	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a20      	ldr	r2, [pc, #128]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d022      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a6:	d01d      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d018      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1c      	ldr	r2, [pc, #112]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d013      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1a      	ldr	r2, [pc, #104]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00e      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a15      	ldr	r2, [pc, #84]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d009      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a16      	ldr	r2, [pc, #88]	; (8007430 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d004      	beq.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a15      	ldr	r2, [pc, #84]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d10c      	bne.n	80073fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	40010000 	.word	0x40010000
 8007420:	40010400 	.word	0x40010400
 8007424:	40000400 	.word	0x40000400
 8007428:	40000800 	.word	0x40000800
 800742c:	40000c00 	.word	0x40000c00
 8007430:	40014000 	.word	0x40014000
 8007434:	40001800 	.word	0x40001800

08007438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e040      	b.n	8007508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fb fe30 	bl	80030fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2224      	movs	r2, #36	; 0x24
 80074a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0201 	bic.w	r2, r2, #1
 80074b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fbf8 	bl	8007ca8 <UART_SetConfig>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e022      	b.n	8007508 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fe4e 	bl	800816c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fed5 	bl	80082b0 <UART_CheckIdleState>
 8007506:	4603      	mov	r3, r0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	4613      	mov	r3, r2
 800751e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007524:	2b20      	cmp	r3, #32
 8007526:	f040 8081 	bne.w	800762c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_UART_Transmit+0x26>
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e079      	b.n	800762e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_UART_Transmit+0x38>
 8007544:	2302      	movs	r3, #2
 8007546:	e072      	b.n	800762e <HAL_UART_Transmit+0x11e>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2221      	movs	r2, #33	; 0x21
 800755c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800755e:	f7fb ff57 	bl	8003410 <HAL_GetTick>
 8007562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	88fa      	ldrh	r2, [r7, #6]
 8007568:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	88fa      	ldrh	r2, [r7, #6]
 8007570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800757c:	d108      	bne.n	8007590 <HAL_UART_Transmit+0x80>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	e003      	b.n	8007598 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80075a0:	e02c      	b.n	80075fc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2200      	movs	r2, #0
 80075aa:	2180      	movs	r1, #128	; 0x80
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 feb2 	bl	8008316 <UART_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e038      	b.n	800762e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10b      	bne.n	80075da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	3302      	adds	r3, #2
 80075d6:	61bb      	str	r3, [r7, #24]
 80075d8:	e007      	b.n	80075ea <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	3301      	adds	r3, #1
 80075e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1cc      	bne.n	80075a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2200      	movs	r2, #0
 8007610:	2140      	movs	r1, #64	; 0x40
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fe7f 	bl	8008316 <UART_WaitOnFlagUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e005      	b.n	800762e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	e000      	b.n	800762e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b08a      	sub	sp, #40	; 0x28
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	4613      	mov	r3, r2
 8007642:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007648:	2b20      	cmp	r3, #32
 800764a:	d13d      	bne.n	80076c8 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <HAL_UART_Receive_IT+0x22>
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e036      	b.n	80076ca <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_UART_Receive_IT+0x34>
 8007666:	2302      	movs	r3, #2
 8007668:	e02f      	b.n	80076ca <HAL_UART_Receive_IT+0x94>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d018      	beq.n	80076b8 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	613b      	str	r3, [r7, #16]
   return(result);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800769a:	627b      	str	r3, [r7, #36]	; 0x24
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	623b      	str	r3, [r7, #32]
 80076a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	69f9      	ldr	r1, [r7, #28]
 80076aa:	6a3a      	ldr	r2, [r7, #32]
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e6      	bne.n	8007686 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	461a      	mov	r2, r3
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 feee 	bl	80084a0 <UART_Start_Receive_IT>
 80076c4:	4603      	mov	r3, r0
 80076c6:	e000      	b.n	80076ca <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076c8:	2302      	movs	r3, #2
  }
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3728      	adds	r7, #40	; 0x28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b0ba      	sub	sp, #232	; 0xe8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80076fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007702:	4013      	ands	r3, r2
 8007704:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800770c:	2b00      	cmp	r3, #0
 800770e:	d115      	bne.n	800773c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007714:	f003 0320 	and.w	r3, r3, #32
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00f      	beq.n	800773c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800771c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007720:	f003 0320 	and.w	r3, r3, #32
 8007724:	2b00      	cmp	r3, #0
 8007726:	d009      	beq.n	800773c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 828f 	beq.w	8007c50 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
      }
      return;
 800773a:	e289      	b.n	8007c50 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800773c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8117 	beq.w	8007974 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007752:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007756:	4b85      	ldr	r3, [pc, #532]	; (800796c <HAL_UART_IRQHandler+0x298>)
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 810a 	beq.w	8007974 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d011      	beq.n	8007790 <HAL_UART_IRQHandler+0xbc>
 800776c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2201      	movs	r2, #1
 800777e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007786:	f043 0201 	orr.w	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d011      	beq.n	80077c0 <HAL_UART_IRQHandler+0xec>
 800779c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2202      	movs	r2, #2
 80077ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077b6:	f043 0204 	orr.w	r2, r3, #4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d011      	beq.n	80077f0 <HAL_UART_IRQHandler+0x11c>
 80077cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2204      	movs	r2, #4
 80077de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e6:	f043 0202 	orr.w	r2, r3, #2
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f4:	f003 0308 	and.w	r3, r3, #8
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d017      	beq.n	800782c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800780c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2208      	movs	r2, #8
 800781a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007822:	f043 0208 	orr.w	r2, r3, #8
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800782c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007834:	2b00      	cmp	r3, #0
 8007836:	d012      	beq.n	800785e <HAL_UART_IRQHandler+0x18a>
 8007838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800783c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00c      	beq.n	800785e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800784c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007854:	f043 0220 	orr.w	r2, r3, #32
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 81f5 	beq.w	8007c54 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00d      	beq.n	8007892 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d005      	beq.n	80078b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d04f      	beq.n	8007956 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 febc 	bl	8008634 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c6:	2b40      	cmp	r3, #64	; 0x40
 80078c8:	d141      	bne.n	800794e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800790e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1d9      	bne.n	80078ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791a:	2b00      	cmp	r3, #0
 800791c:	d013      	beq.n	8007946 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	4a13      	ldr	r2, [pc, #76]	; (8007970 <HAL_UART_IRQHandler+0x29c>)
 8007924:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792a:	4618      	mov	r0, r3
 800792c:	f7fb ff21 	bl	8003772 <HAL_DMA_Abort_IT>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d017      	beq.n	8007966 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007944:	e00f      	b.n	8007966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f998 	bl	8007c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	e00b      	b.n	8007966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f994 	bl	8007c7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007954:	e007      	b.n	8007966 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f990 	bl	8007c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007964:	e176      	b.n	8007c54 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007966:	bf00      	nop
    return;
 8007968:	e174      	b.n	8007c54 <HAL_UART_IRQHandler+0x580>
 800796a:	bf00      	nop
 800796c:	04000120 	.word	0x04000120
 8007970:	080086fb 	.word	0x080086fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007978:	2b01      	cmp	r3, #1
 800797a:	f040 8144 	bne.w	8007c06 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800797e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 813d 	beq.w	8007c06 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 8136 	beq.w	8007c06 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2210      	movs	r2, #16
 80079a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ac:	2b40      	cmp	r3, #64	; 0x40
 80079ae:	f040 80b2 	bne.w	8007b16 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8148 	beq.w	8007c58 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079d2:	429a      	cmp	r2, r3
 80079d4:	f080 8140 	bcs.w	8007c58 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ec:	f000 8085 	beq.w	8007afa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1da      	bne.n	80079f0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a4c:	f023 0301 	bic.w	r3, r3, #1
 8007a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e1      	bne.n	8007a3a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3308      	adds	r3, #8
 8007a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e3      	bne.n	8007a76 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aca:	f023 0310 	bic.w	r3, r3, #16
 8007ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007adc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ade:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e4      	bne.n	8007aba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fb fdcc 	bl	8003692 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f8be 	bl	8007c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b14:	e0a0      	b.n	8007c58 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8092 	beq.w	8007c5c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8007b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 808d 	beq.w	8007c5c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b64:	647b      	str	r3, [r7, #68]	; 0x44
 8007b66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b6c:	e841 2300 	strex	r3, r2, [r1]
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e4      	bne.n	8007b42 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	623b      	str	r3, [r7, #32]
   return(result);
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	f023 0301 	bic.w	r3, r3, #1
 8007b8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3308      	adds	r3, #8
 8007b98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b9c:	633a      	str	r2, [r7, #48]	; 0x30
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e3      	bne.n	8007b78 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0310 	bic.w	r3, r3, #16
 8007bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	69b9      	ldr	r1, [r7, #24]
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e4      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f846 	bl	8007c90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c04:	e02a      	b.n	8007c5c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00e      	beq.n	8007c30 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d008      	beq.n	8007c30 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d01c      	beq.n	8007c60 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
    }
    return;
 8007c2e:	e017      	b.n	8007c60 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d012      	beq.n	8007c62 <HAL_UART_IRQHandler+0x58e>
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00c      	beq.n	8007c62 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fd6c 	bl	8008726 <UART_EndTransmit_IT>
    return;
 8007c4e:	e008      	b.n	8007c62 <HAL_UART_IRQHandler+0x58e>
      return;
 8007c50:	bf00      	nop
 8007c52:	e006      	b.n	8007c62 <HAL_UART_IRQHandler+0x58e>
    return;
 8007c54:	bf00      	nop
 8007c56:	e004      	b.n	8007c62 <HAL_UART_IRQHandler+0x58e>
      return;
 8007c58:	bf00      	nop
 8007c5a:	e002      	b.n	8007c62 <HAL_UART_IRQHandler+0x58e>
      return;
 8007c5c:	bf00      	nop
 8007c5e:	e000      	b.n	8007c62 <HAL_UART_IRQHandler+0x58e>
    return;
 8007c60:	bf00      	nop
  }

}
 8007c62:	37e8      	adds	r7, #232	; 0xe8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	4ba7      	ldr	r3, [pc, #668]	; (8007f70 <UART_SetConfig+0x2c8>)
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6812      	ldr	r2, [r2, #0]
 8007cda:	6979      	ldr	r1, [r7, #20]
 8007cdc:	430b      	orrs	r3, r1
 8007cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a95      	ldr	r2, [pc, #596]	; (8007f74 <UART_SetConfig+0x2cc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d120      	bne.n	8007d66 <UART_SetConfig+0xbe>
 8007d24:	4b94      	ldr	r3, [pc, #592]	; (8007f78 <UART_SetConfig+0x2d0>)
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d816      	bhi.n	8007d60 <UART_SetConfig+0xb8>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <UART_SetConfig+0x90>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d49 	.word	0x08007d49
 8007d3c:	08007d55 	.word	0x08007d55
 8007d40:	08007d4f 	.word	0x08007d4f
 8007d44:	08007d5b 	.word	0x08007d5b
 8007d48:	2301      	movs	r3, #1
 8007d4a:	77fb      	strb	r3, [r7, #31]
 8007d4c:	e14f      	b.n	8007fee <UART_SetConfig+0x346>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	77fb      	strb	r3, [r7, #31]
 8007d52:	e14c      	b.n	8007fee <UART_SetConfig+0x346>
 8007d54:	2304      	movs	r3, #4
 8007d56:	77fb      	strb	r3, [r7, #31]
 8007d58:	e149      	b.n	8007fee <UART_SetConfig+0x346>
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	77fb      	strb	r3, [r7, #31]
 8007d5e:	e146      	b.n	8007fee <UART_SetConfig+0x346>
 8007d60:	2310      	movs	r3, #16
 8007d62:	77fb      	strb	r3, [r7, #31]
 8007d64:	e143      	b.n	8007fee <UART_SetConfig+0x346>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a84      	ldr	r2, [pc, #528]	; (8007f7c <UART_SetConfig+0x2d4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d132      	bne.n	8007dd6 <UART_SetConfig+0x12e>
 8007d70:	4b81      	ldr	r3, [pc, #516]	; (8007f78 <UART_SetConfig+0x2d0>)
 8007d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d76:	f003 030c 	and.w	r3, r3, #12
 8007d7a:	2b0c      	cmp	r3, #12
 8007d7c:	d828      	bhi.n	8007dd0 <UART_SetConfig+0x128>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <UART_SetConfig+0xdc>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007db9 	.word	0x08007db9
 8007d88:	08007dd1 	.word	0x08007dd1
 8007d8c:	08007dd1 	.word	0x08007dd1
 8007d90:	08007dd1 	.word	0x08007dd1
 8007d94:	08007dc5 	.word	0x08007dc5
 8007d98:	08007dd1 	.word	0x08007dd1
 8007d9c:	08007dd1 	.word	0x08007dd1
 8007da0:	08007dd1 	.word	0x08007dd1
 8007da4:	08007dbf 	.word	0x08007dbf
 8007da8:	08007dd1 	.word	0x08007dd1
 8007dac:	08007dd1 	.word	0x08007dd1
 8007db0:	08007dd1 	.word	0x08007dd1
 8007db4:	08007dcb 	.word	0x08007dcb
 8007db8:	2300      	movs	r3, #0
 8007dba:	77fb      	strb	r3, [r7, #31]
 8007dbc:	e117      	b.n	8007fee <UART_SetConfig+0x346>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	77fb      	strb	r3, [r7, #31]
 8007dc2:	e114      	b.n	8007fee <UART_SetConfig+0x346>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	77fb      	strb	r3, [r7, #31]
 8007dc8:	e111      	b.n	8007fee <UART_SetConfig+0x346>
 8007dca:	2308      	movs	r3, #8
 8007dcc:	77fb      	strb	r3, [r7, #31]
 8007dce:	e10e      	b.n	8007fee <UART_SetConfig+0x346>
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	77fb      	strb	r3, [r7, #31]
 8007dd4:	e10b      	b.n	8007fee <UART_SetConfig+0x346>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a69      	ldr	r2, [pc, #420]	; (8007f80 <UART_SetConfig+0x2d8>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d120      	bne.n	8007e22 <UART_SetConfig+0x17a>
 8007de0:	4b65      	ldr	r3, [pc, #404]	; (8007f78 <UART_SetConfig+0x2d0>)
 8007de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007dea:	2b30      	cmp	r3, #48	; 0x30
 8007dec:	d013      	beq.n	8007e16 <UART_SetConfig+0x16e>
 8007dee:	2b30      	cmp	r3, #48	; 0x30
 8007df0:	d814      	bhi.n	8007e1c <UART_SetConfig+0x174>
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	d009      	beq.n	8007e0a <UART_SetConfig+0x162>
 8007df6:	2b20      	cmp	r3, #32
 8007df8:	d810      	bhi.n	8007e1c <UART_SetConfig+0x174>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <UART_SetConfig+0x15c>
 8007dfe:	2b10      	cmp	r3, #16
 8007e00:	d006      	beq.n	8007e10 <UART_SetConfig+0x168>
 8007e02:	e00b      	b.n	8007e1c <UART_SetConfig+0x174>
 8007e04:	2300      	movs	r3, #0
 8007e06:	77fb      	strb	r3, [r7, #31]
 8007e08:	e0f1      	b.n	8007fee <UART_SetConfig+0x346>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	77fb      	strb	r3, [r7, #31]
 8007e0e:	e0ee      	b.n	8007fee <UART_SetConfig+0x346>
 8007e10:	2304      	movs	r3, #4
 8007e12:	77fb      	strb	r3, [r7, #31]
 8007e14:	e0eb      	b.n	8007fee <UART_SetConfig+0x346>
 8007e16:	2308      	movs	r3, #8
 8007e18:	77fb      	strb	r3, [r7, #31]
 8007e1a:	e0e8      	b.n	8007fee <UART_SetConfig+0x346>
 8007e1c:	2310      	movs	r3, #16
 8007e1e:	77fb      	strb	r3, [r7, #31]
 8007e20:	e0e5      	b.n	8007fee <UART_SetConfig+0x346>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a57      	ldr	r2, [pc, #348]	; (8007f84 <UART_SetConfig+0x2dc>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d120      	bne.n	8007e6e <UART_SetConfig+0x1c6>
 8007e2c:	4b52      	ldr	r3, [pc, #328]	; (8007f78 <UART_SetConfig+0x2d0>)
 8007e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e36:	2bc0      	cmp	r3, #192	; 0xc0
 8007e38:	d013      	beq.n	8007e62 <UART_SetConfig+0x1ba>
 8007e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e3c:	d814      	bhi.n	8007e68 <UART_SetConfig+0x1c0>
 8007e3e:	2b80      	cmp	r3, #128	; 0x80
 8007e40:	d009      	beq.n	8007e56 <UART_SetConfig+0x1ae>
 8007e42:	2b80      	cmp	r3, #128	; 0x80
 8007e44:	d810      	bhi.n	8007e68 <UART_SetConfig+0x1c0>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <UART_SetConfig+0x1a8>
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d006      	beq.n	8007e5c <UART_SetConfig+0x1b4>
 8007e4e:	e00b      	b.n	8007e68 <UART_SetConfig+0x1c0>
 8007e50:	2300      	movs	r3, #0
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e0cb      	b.n	8007fee <UART_SetConfig+0x346>
 8007e56:	2302      	movs	r3, #2
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e0c8      	b.n	8007fee <UART_SetConfig+0x346>
 8007e5c:	2304      	movs	r3, #4
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e0c5      	b.n	8007fee <UART_SetConfig+0x346>
 8007e62:	2308      	movs	r3, #8
 8007e64:	77fb      	strb	r3, [r7, #31]
 8007e66:	e0c2      	b.n	8007fee <UART_SetConfig+0x346>
 8007e68:	2310      	movs	r3, #16
 8007e6a:	77fb      	strb	r3, [r7, #31]
 8007e6c:	e0bf      	b.n	8007fee <UART_SetConfig+0x346>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a45      	ldr	r2, [pc, #276]	; (8007f88 <UART_SetConfig+0x2e0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d125      	bne.n	8007ec4 <UART_SetConfig+0x21c>
 8007e78:	4b3f      	ldr	r3, [pc, #252]	; (8007f78 <UART_SetConfig+0x2d0>)
 8007e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e86:	d017      	beq.n	8007eb8 <UART_SetConfig+0x210>
 8007e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e8c:	d817      	bhi.n	8007ebe <UART_SetConfig+0x216>
 8007e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e92:	d00b      	beq.n	8007eac <UART_SetConfig+0x204>
 8007e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e98:	d811      	bhi.n	8007ebe <UART_SetConfig+0x216>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <UART_SetConfig+0x1fe>
 8007e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ea2:	d006      	beq.n	8007eb2 <UART_SetConfig+0x20a>
 8007ea4:	e00b      	b.n	8007ebe <UART_SetConfig+0x216>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	77fb      	strb	r3, [r7, #31]
 8007eaa:	e0a0      	b.n	8007fee <UART_SetConfig+0x346>
 8007eac:	2302      	movs	r3, #2
 8007eae:	77fb      	strb	r3, [r7, #31]
 8007eb0:	e09d      	b.n	8007fee <UART_SetConfig+0x346>
 8007eb2:	2304      	movs	r3, #4
 8007eb4:	77fb      	strb	r3, [r7, #31]
 8007eb6:	e09a      	b.n	8007fee <UART_SetConfig+0x346>
 8007eb8:	2308      	movs	r3, #8
 8007eba:	77fb      	strb	r3, [r7, #31]
 8007ebc:	e097      	b.n	8007fee <UART_SetConfig+0x346>
 8007ebe:	2310      	movs	r3, #16
 8007ec0:	77fb      	strb	r3, [r7, #31]
 8007ec2:	e094      	b.n	8007fee <UART_SetConfig+0x346>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a30      	ldr	r2, [pc, #192]	; (8007f8c <UART_SetConfig+0x2e4>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d125      	bne.n	8007f1a <UART_SetConfig+0x272>
 8007ece:	4b2a      	ldr	r3, [pc, #168]	; (8007f78 <UART_SetConfig+0x2d0>)
 8007ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007edc:	d017      	beq.n	8007f0e <UART_SetConfig+0x266>
 8007ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ee2:	d817      	bhi.n	8007f14 <UART_SetConfig+0x26c>
 8007ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ee8:	d00b      	beq.n	8007f02 <UART_SetConfig+0x25a>
 8007eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eee:	d811      	bhi.n	8007f14 <UART_SetConfig+0x26c>
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <UART_SetConfig+0x254>
 8007ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef8:	d006      	beq.n	8007f08 <UART_SetConfig+0x260>
 8007efa:	e00b      	b.n	8007f14 <UART_SetConfig+0x26c>
 8007efc:	2301      	movs	r3, #1
 8007efe:	77fb      	strb	r3, [r7, #31]
 8007f00:	e075      	b.n	8007fee <UART_SetConfig+0x346>
 8007f02:	2302      	movs	r3, #2
 8007f04:	77fb      	strb	r3, [r7, #31]
 8007f06:	e072      	b.n	8007fee <UART_SetConfig+0x346>
 8007f08:	2304      	movs	r3, #4
 8007f0a:	77fb      	strb	r3, [r7, #31]
 8007f0c:	e06f      	b.n	8007fee <UART_SetConfig+0x346>
 8007f0e:	2308      	movs	r3, #8
 8007f10:	77fb      	strb	r3, [r7, #31]
 8007f12:	e06c      	b.n	8007fee <UART_SetConfig+0x346>
 8007f14:	2310      	movs	r3, #16
 8007f16:	77fb      	strb	r3, [r7, #31]
 8007f18:	e069      	b.n	8007fee <UART_SetConfig+0x346>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a1c      	ldr	r2, [pc, #112]	; (8007f90 <UART_SetConfig+0x2e8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d137      	bne.n	8007f94 <UART_SetConfig+0x2ec>
 8007f24:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <UART_SetConfig+0x2d0>)
 8007f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f32:	d017      	beq.n	8007f64 <UART_SetConfig+0x2bc>
 8007f34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f38:	d817      	bhi.n	8007f6a <UART_SetConfig+0x2c2>
 8007f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f3e:	d00b      	beq.n	8007f58 <UART_SetConfig+0x2b0>
 8007f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f44:	d811      	bhi.n	8007f6a <UART_SetConfig+0x2c2>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <UART_SetConfig+0x2aa>
 8007f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4e:	d006      	beq.n	8007f5e <UART_SetConfig+0x2b6>
 8007f50:	e00b      	b.n	8007f6a <UART_SetConfig+0x2c2>
 8007f52:	2300      	movs	r3, #0
 8007f54:	77fb      	strb	r3, [r7, #31]
 8007f56:	e04a      	b.n	8007fee <UART_SetConfig+0x346>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	77fb      	strb	r3, [r7, #31]
 8007f5c:	e047      	b.n	8007fee <UART_SetConfig+0x346>
 8007f5e:	2304      	movs	r3, #4
 8007f60:	77fb      	strb	r3, [r7, #31]
 8007f62:	e044      	b.n	8007fee <UART_SetConfig+0x346>
 8007f64:	2308      	movs	r3, #8
 8007f66:	77fb      	strb	r3, [r7, #31]
 8007f68:	e041      	b.n	8007fee <UART_SetConfig+0x346>
 8007f6a:	2310      	movs	r3, #16
 8007f6c:	77fb      	strb	r3, [r7, #31]
 8007f6e:	e03e      	b.n	8007fee <UART_SetConfig+0x346>
 8007f70:	efff69f3 	.word	0xefff69f3
 8007f74:	40011000 	.word	0x40011000
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	40004400 	.word	0x40004400
 8007f80:	40004800 	.word	0x40004800
 8007f84:	40004c00 	.word	0x40004c00
 8007f88:	40005000 	.word	0x40005000
 8007f8c:	40011400 	.word	0x40011400
 8007f90:	40007800 	.word	0x40007800
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a71      	ldr	r2, [pc, #452]	; (8008160 <UART_SetConfig+0x4b8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d125      	bne.n	8007fea <UART_SetConfig+0x342>
 8007f9e:	4b71      	ldr	r3, [pc, #452]	; (8008164 <UART_SetConfig+0x4bc>)
 8007fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fa8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fac:	d017      	beq.n	8007fde <UART_SetConfig+0x336>
 8007fae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fb2:	d817      	bhi.n	8007fe4 <UART_SetConfig+0x33c>
 8007fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb8:	d00b      	beq.n	8007fd2 <UART_SetConfig+0x32a>
 8007fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fbe:	d811      	bhi.n	8007fe4 <UART_SetConfig+0x33c>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <UART_SetConfig+0x324>
 8007fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc8:	d006      	beq.n	8007fd8 <UART_SetConfig+0x330>
 8007fca:	e00b      	b.n	8007fe4 <UART_SetConfig+0x33c>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	77fb      	strb	r3, [r7, #31]
 8007fd0:	e00d      	b.n	8007fee <UART_SetConfig+0x346>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	77fb      	strb	r3, [r7, #31]
 8007fd6:	e00a      	b.n	8007fee <UART_SetConfig+0x346>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	77fb      	strb	r3, [r7, #31]
 8007fdc:	e007      	b.n	8007fee <UART_SetConfig+0x346>
 8007fde:	2308      	movs	r3, #8
 8007fe0:	77fb      	strb	r3, [r7, #31]
 8007fe2:	e004      	b.n	8007fee <UART_SetConfig+0x346>
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	77fb      	strb	r3, [r7, #31]
 8007fe8:	e001      	b.n	8007fee <UART_SetConfig+0x346>
 8007fea:	2310      	movs	r3, #16
 8007fec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff6:	d15a      	bne.n	80080ae <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007ff8:	7ffb      	ldrb	r3, [r7, #31]
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d827      	bhi.n	800804e <UART_SetConfig+0x3a6>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0x35c>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008029 	.word	0x08008029
 8008008:	08008031 	.word	0x08008031
 800800c:	08008039 	.word	0x08008039
 8008010:	0800804f 	.word	0x0800804f
 8008014:	0800803f 	.word	0x0800803f
 8008018:	0800804f 	.word	0x0800804f
 800801c:	0800804f 	.word	0x0800804f
 8008020:	0800804f 	.word	0x0800804f
 8008024:	08008047 	.word	0x08008047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008028:	f7fd f80a 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 800802c:	61b8      	str	r0, [r7, #24]
        break;
 800802e:	e013      	b.n	8008058 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008030:	f7fd f81a 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 8008034:	61b8      	str	r0, [r7, #24]
        break;
 8008036:	e00f      	b.n	8008058 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008038:	4b4b      	ldr	r3, [pc, #300]	; (8008168 <UART_SetConfig+0x4c0>)
 800803a:	61bb      	str	r3, [r7, #24]
        break;
 800803c:	e00c      	b.n	8008058 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800803e:	f7fc ff11 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8008042:	61b8      	str	r0, [r7, #24]
        break;
 8008044:	e008      	b.n	8008058 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804a:	61bb      	str	r3, [r7, #24]
        break;
 800804c:	e004      	b.n	8008058 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	77bb      	strb	r3, [r7, #30]
        break;
 8008056:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d074      	beq.n	8008148 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	005a      	lsls	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	441a      	add	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008072:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d916      	bls.n	80080a8 <UART_SetConfig+0x400>
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008080:	d212      	bcs.n	80080a8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f023 030f 	bic.w	r3, r3, #15
 800808a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	b29b      	uxth	r3, r3
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	b29a      	uxth	r2, r3
 8008098:	89fb      	ldrh	r3, [r7, #14]
 800809a:	4313      	orrs	r3, r2
 800809c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	89fa      	ldrh	r2, [r7, #14]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	e04f      	b.n	8008148 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	77bb      	strb	r3, [r7, #30]
 80080ac:	e04c      	b.n	8008148 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080ae:	7ffb      	ldrb	r3, [r7, #31]
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d828      	bhi.n	8008106 <UART_SetConfig+0x45e>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <UART_SetConfig+0x414>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080e1 	.word	0x080080e1
 80080c0:	080080e9 	.word	0x080080e9
 80080c4:	080080f1 	.word	0x080080f1
 80080c8:	08008107 	.word	0x08008107
 80080cc:	080080f7 	.word	0x080080f7
 80080d0:	08008107 	.word	0x08008107
 80080d4:	08008107 	.word	0x08008107
 80080d8:	08008107 	.word	0x08008107
 80080dc:	080080ff 	.word	0x080080ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080e0:	f7fc ffae 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 80080e4:	61b8      	str	r0, [r7, #24]
        break;
 80080e6:	e013      	b.n	8008110 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080e8:	f7fc ffbe 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 80080ec:	61b8      	str	r0, [r7, #24]
        break;
 80080ee:	e00f      	b.n	8008110 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080f0:	4b1d      	ldr	r3, [pc, #116]	; (8008168 <UART_SetConfig+0x4c0>)
 80080f2:	61bb      	str	r3, [r7, #24]
        break;
 80080f4:	e00c      	b.n	8008110 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080f6:	f7fc feb5 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 80080fa:	61b8      	str	r0, [r7, #24]
        break;
 80080fc:	e008      	b.n	8008110 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008102:	61bb      	str	r3, [r7, #24]
        break;
 8008104:	e004      	b.n	8008110 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	77bb      	strb	r3, [r7, #30]
        break;
 800810e:	bf00      	nop
    }

    if (pclk != 0U)
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d018      	beq.n	8008148 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	085a      	lsrs	r2, r3, #1
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	441a      	add	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	fbb2 f3f3 	udiv	r3, r2, r3
 8008128:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b0f      	cmp	r3, #15
 800812e:	d909      	bls.n	8008144 <UART_SetConfig+0x49c>
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008136:	d205      	bcs.n	8008144 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	b29a      	uxth	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60da      	str	r2, [r3, #12]
 8008142:	e001      	b.n	8008148 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008154:	7fbb      	ldrb	r3, [r7, #30]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	40007c00 	.word	0x40007c00
 8008164:	40023800 	.word	0x40023800
 8008168:	00f42400 	.word	0x00f42400

0800816c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	f003 0308 	and.w	r3, r3, #8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00a      	beq.n	800821e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00a      	beq.n	8008240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01a      	beq.n	8008282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800826a:	d10a      	bne.n	8008282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	605a      	str	r2, [r3, #4]
  }
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082c0:	f7fb f8a6 	bl	8003410 <HAL_GetTick>
 80082c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0308 	and.w	r3, r3, #8
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d10e      	bne.n	80082f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f817 	bl	8008316 <UART_WaitOnFlagUntilTimeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e00d      	b.n	800830e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b09c      	sub	sp, #112	; 0x70
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	603b      	str	r3, [r7, #0]
 8008322:	4613      	mov	r3, r2
 8008324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008326:	e0a5      	b.n	8008474 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	f000 80a1 	beq.w	8008474 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008332:	f7fb f86d 	bl	8003410 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800833e:	429a      	cmp	r2, r3
 8008340:	d302      	bcc.n	8008348 <UART_WaitOnFlagUntilTimeout+0x32>
 8008342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008344:	2b00      	cmp	r3, #0
 8008346:	d13e      	bne.n	80083c6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800835c:	667b      	str	r3, [r7, #100]	; 0x64
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008368:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800836c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800836e:	e841 2300 	strex	r3, r2, [r1]
 8008372:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1e6      	bne.n	8008348 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	f023 0301 	bic.w	r3, r3, #1
 8008390:	663b      	str	r3, [r7, #96]	; 0x60
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3308      	adds	r3, #8
 8008398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800839a:	64ba      	str	r2, [r7, #72]	; 0x48
 800839c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e5      	bne.n	800837a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2220      	movs	r2, #32
 80083b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e067      	b.n	8008496 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0304 	and.w	r3, r3, #4
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d04f      	beq.n	8008474 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e2:	d147      	bne.n	8008474 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008402:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800840c:	637b      	str	r3, [r7, #52]	; 0x34
 800840e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e6      	bne.n	80083ee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3308      	adds	r3, #8
 8008426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	613b      	str	r3, [r7, #16]
   return(result);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f023 0301 	bic.w	r3, r3, #1
 8008436:	66bb      	str	r3, [r7, #104]	; 0x68
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3308      	adds	r3, #8
 800843e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008440:	623a      	str	r2, [r7, #32]
 8008442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	69f9      	ldr	r1, [r7, #28]
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	61bb      	str	r3, [r7, #24]
   return(result);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e5      	bne.n	8008420 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2220      	movs	r2, #32
 8008458:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2220      	movs	r2, #32
 800845e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2220      	movs	r2, #32
 8008464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e010      	b.n	8008496 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	69da      	ldr	r2, [r3, #28]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4013      	ands	r3, r2
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	429a      	cmp	r2, r3
 8008482:	bf0c      	ite	eq
 8008484:	2301      	moveq	r3, #1
 8008486:	2300      	movne	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	461a      	mov	r2, r3
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	429a      	cmp	r2, r3
 8008490:	f43f af4a 	beq.w	8008328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3770      	adds	r7, #112	; 0x70
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b097      	sub	sp, #92	; 0x5c
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	88fa      	ldrh	r2, [r7, #6]
 80084b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	88fa      	ldrh	r2, [r7, #6]
 80084c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d2:	d10e      	bne.n	80084f2 <UART_Start_Receive_IT+0x52>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d105      	bne.n	80084e8 <UART_Start_Receive_IT+0x48>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80084e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084e6:	e02d      	b.n	8008544 <UART_Start_Receive_IT+0xa4>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	22ff      	movs	r2, #255	; 0xff
 80084ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80084f0:	e028      	b.n	8008544 <UART_Start_Receive_IT+0xa4>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10d      	bne.n	8008516 <UART_Start_Receive_IT+0x76>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <UART_Start_Receive_IT+0x6c>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	22ff      	movs	r2, #255	; 0xff
 8008506:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800850a:	e01b      	b.n	8008544 <UART_Start_Receive_IT+0xa4>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	227f      	movs	r2, #127	; 0x7f
 8008510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008514:	e016      	b.n	8008544 <UART_Start_Receive_IT+0xa4>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800851e:	d10d      	bne.n	800853c <UART_Start_Receive_IT+0x9c>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d104      	bne.n	8008532 <UART_Start_Receive_IT+0x92>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	227f      	movs	r2, #127	; 0x7f
 800852c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008530:	e008      	b.n	8008544 <UART_Start_Receive_IT+0xa4>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	223f      	movs	r2, #63	; 0x3f
 8008536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800853a:	e003      	b.n	8008544 <UART_Start_Receive_IT+0xa4>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2222      	movs	r2, #34	; 0x22
 8008550:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3308      	adds	r3, #8
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	f043 0301 	orr.w	r3, r3, #1
 8008568:	657b      	str	r3, [r7, #84]	; 0x54
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008572:	64ba      	str	r2, [r7, #72]	; 0x48
 8008574:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e5      	bne.n	8008552 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800858e:	d107      	bne.n	80085a0 <UART_Start_Receive_IT+0x100>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d103      	bne.n	80085a0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	4a24      	ldr	r2, [pc, #144]	; (800862c <UART_Start_Receive_IT+0x18c>)
 800859c:	665a      	str	r2, [r3, #100]	; 0x64
 800859e:	e002      	b.n	80085a6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4a23      	ldr	r2, [pc, #140]	; (8008630 <UART_Start_Receive_IT+0x190>)
 80085a4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d019      	beq.n	80085ea <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80085ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
 80085d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e6      	bne.n	80085b6 <UART_Start_Receive_IT+0x116>
 80085e8:	e018      	b.n	800861c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	613b      	str	r3, [r7, #16]
   return(result);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f043 0320 	orr.w	r3, r3, #32
 80085fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008608:	623b      	str	r3, [r7, #32]
 800860a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	69f9      	ldr	r1, [r7, #28]
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	61bb      	str	r3, [r7, #24]
   return(result);
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	375c      	adds	r7, #92	; 0x5c
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	080088d7 	.word	0x080088d7
 8008630:	0800877b 	.word	0x0800877b

08008634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008634:	b480      	push	{r7}
 8008636:	b095      	sub	sp, #84	; 0x54
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008650:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865a:	643b      	str	r3, [r7, #64]	; 0x40
 800865c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e6      	bne.n	800863c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	e853 3f00 	ldrex	r3, [r3]
 800867c:	61fb      	str	r3, [r7, #28]
   return(result);
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	f023 0301 	bic.w	r3, r3, #1
 8008684:	64bb      	str	r3, [r7, #72]	; 0x48
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3308      	adds	r3, #8
 800868c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800868e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e5      	bne.n	800866e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d118      	bne.n	80086dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	e853 3f00 	ldrex	r3, [r3]
 80086b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f023 0310 	bic.w	r3, r3, #16
 80086be:	647b      	str	r3, [r7, #68]	; 0x44
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	461a      	mov	r2, r3
 80086c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	6979      	ldr	r1, [r7, #20]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	613b      	str	r3, [r7, #16]
   return(result);
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e6      	bne.n	80086aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2220      	movs	r2, #32
 80086e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80086ee:	bf00      	nop
 80086f0:	3754      	adds	r7, #84	; 0x54
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7ff faaf 	bl	8007c7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b088      	sub	sp, #32
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	60bb      	str	r3, [r7, #8]
   return(result);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008742:	61fb      	str	r3, [r7, #28]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	61bb      	str	r3, [r7, #24]
 800874e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6979      	ldr	r1, [r7, #20]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	613b      	str	r3, [r7, #16]
   return(result);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e6      	bne.n	800872e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2220      	movs	r2, #32
 8008764:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff fa7b 	bl	8007c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008772:	bf00      	nop
 8008774:	3720      	adds	r7, #32
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b096      	sub	sp, #88	; 0x58
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008788:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008790:	2b22      	cmp	r3, #34	; 0x22
 8008792:	f040 8094 	bne.w	80088be <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80087a4:	b2d9      	uxtb	r1, r3
 80087a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b0:	400a      	ands	r2, r1
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	3b01      	subs	r3, #1
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d177      	bne.n	80088ce <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f2:	653b      	str	r3, [r7, #80]	; 0x50
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087fc:	647b      	str	r3, [r7, #68]	; 0x44
 80087fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800880a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e6      	bne.n	80087de <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3308      	adds	r3, #8
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	e853 3f00 	ldrex	r3, [r3]
 800881e:	623b      	str	r3, [r7, #32]
   return(result);
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	f023 0301 	bic.w	r3, r3, #1
 8008826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3308      	adds	r3, #8
 800882e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008830:	633a      	str	r2, [r7, #48]	; 0x30
 8008832:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008838:	e841 2300 	strex	r3, r2, [r1]
 800883c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e5      	bne.n	8008810 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2220      	movs	r2, #32
 8008848:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008854:	2b01      	cmp	r3, #1
 8008856:	d12e      	bne.n	80088b6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	60fb      	str	r3, [r7, #12]
   return(result);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 0310 	bic.w	r3, r3, #16
 8008872:	64bb      	str	r3, [r7, #72]	; 0x48
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	69b9      	ldr	r1, [r7, #24]
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	617b      	str	r3, [r7, #20]
   return(result);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e6      	bne.n	800885e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f003 0310 	and.w	r3, r3, #16
 800889a:	2b10      	cmp	r3, #16
 800889c:	d103      	bne.n	80088a6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2210      	movs	r2, #16
 80088a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff f9ee 	bl	8007c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088b4:	e00b      	b.n	80088ce <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7fa f88a 	bl	80029d0 <HAL_UART_RxCpltCallback>
}
 80088bc:	e007      	b.n	80088ce <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	699a      	ldr	r2, [r3, #24]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f042 0208 	orr.w	r2, r2, #8
 80088cc:	619a      	str	r2, [r3, #24]
}
 80088ce:	bf00      	nop
 80088d0:	3758      	adds	r7, #88	; 0x58
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b096      	sub	sp, #88	; 0x58
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ec:	2b22      	cmp	r3, #34	; 0x22
 80088ee:	f040 8094 	bne.w	8008a1a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008900:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008902:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008906:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800890a:	4013      	ands	r3, r2
 800890c:	b29a      	uxth	r2, r3
 800890e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008910:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008916:	1c9a      	adds	r2, r3, #2
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d177      	bne.n	8008a2a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800894e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008958:	643b      	str	r3, [r7, #64]	; 0x40
 800895a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800895e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e6      	bne.n	800893a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3308      	adds	r3, #8
 8008972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	e853 3f00 	ldrex	r3, [r3]
 800897a:	61fb      	str	r3, [r7, #28]
   return(result);
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f023 0301 	bic.w	r3, r3, #1
 8008982:	64bb      	str	r3, [r7, #72]	; 0x48
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800898c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800898e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e5      	bne.n	800896c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2220      	movs	r2, #32
 80089a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d12e      	bne.n	8008a12 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f023 0310 	bic.w	r3, r3, #16
 80089ce:	647b      	str	r3, [r7, #68]	; 0x44
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6979      	ldr	r1, [r7, #20]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	613b      	str	r3, [r7, #16]
   return(result);
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e6      	bne.n	80089ba <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	f003 0310 	and.w	r3, r3, #16
 80089f6:	2b10      	cmp	r3, #16
 80089f8:	d103      	bne.n	8008a02 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2210      	movs	r2, #16
 8008a00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff f940 	bl	8007c90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a10:	e00b      	b.n	8008a2a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7f9 ffdc 	bl	80029d0 <HAL_UART_RxCpltCallback>
}
 8008a18:	e007      	b.n	8008a2a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	699a      	ldr	r2, [r3, #24]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f042 0208 	orr.w	r2, r2, #8
 8008a28:	619a      	str	r2, [r3, #24]
}
 8008a2a:	bf00      	nop
 8008a2c:	3758      	adds	r7, #88	; 0x58
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a34:	b084      	sub	sp, #16
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	f107 001c 	add.w	r0, r7, #28
 8008a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d120      	bne.n	8008a8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	4b20      	ldr	r3, [pc, #128]	; (8008ae0 <USB_CoreInit+0xac>)
 8008a5e:	4013      	ands	r3, r2
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d105      	bne.n	8008a82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa92 	bl	8008fac <USB_CoreReset>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
 8008a8c:	e010      	b.n	8008ab0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa86 	bl	8008fac <USB_CoreReset>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d10b      	bne.n	8008ace <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f043 0206 	orr.w	r2, r3, #6
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f043 0220 	orr.w	r2, r3, #32
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ada:	b004      	add	sp, #16
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	ffbdffbf 	.word	0xffbdffbf

08008ae4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f023 0201 	bic.w	r2, r3, #1
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	460b      	mov	r3, r1
 8008b10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b22:	78fb      	ldrb	r3, [r7, #3]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d115      	bne.n	8008b54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b34:	2001      	movs	r0, #1
 8008b36:	f7fa fc77 	bl	8003428 <HAL_Delay>
      ms++;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fa25 	bl	8008f90 <USB_GetMode>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d01e      	beq.n	8008b8a <USB_SetCurrentMode+0x84>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b31      	cmp	r3, #49	; 0x31
 8008b50:	d9f0      	bls.n	8008b34 <USB_SetCurrentMode+0x2e>
 8008b52:	e01a      	b.n	8008b8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d115      	bne.n	8008b86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b66:	2001      	movs	r0, #1
 8008b68:	f7fa fc5e 	bl	8003428 <HAL_Delay>
      ms++;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa0c 	bl	8008f90 <USB_GetMode>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d005      	beq.n	8008b8a <USB_SetCurrentMode+0x84>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2b31      	cmp	r3, #49	; 0x31
 8008b82:	d9f0      	bls.n	8008b66 <USB_SetCurrentMode+0x60>
 8008b84:	e001      	b.n	8008b8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e005      	b.n	8008b96 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b32      	cmp	r3, #50	; 0x32
 8008b8e:	d101      	bne.n	8008b94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e000      	b.n	8008b96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bba:	2300      	movs	r3, #0
 8008bbc:	613b      	str	r3, [r7, #16]
 8008bbe:	e009      	b.n	8008bd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	3340      	adds	r3, #64	; 0x40
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	2200      	movs	r2, #0
 8008bcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b0e      	cmp	r3, #14
 8008bd8:	d9f2      	bls.n	8008bc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d11c      	bne.n	8008c1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bee:	f043 0302 	orr.w	r3, r3, #2
 8008bf2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	e005      	b.n	8008c26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c38:	4619      	mov	r1, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c40:	461a      	mov	r2, r3
 8008c42:	680b      	ldr	r3, [r1, #0]
 8008c44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d10c      	bne.n	8008c66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c52:	2100      	movs	r1, #0
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f961 	bl	8008f1c <USB_SetDevSpeed>
 8008c5a:	e008      	b.n	8008c6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f95c 	bl	8008f1c <USB_SetDevSpeed>
 8008c64:	e003      	b.n	8008c6e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c66:	2103      	movs	r1, #3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f957 	bl	8008f1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c6e:	2110      	movs	r1, #16
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f8f3 	bl	8008e5c <USB_FlushTxFifo>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f91d 	bl	8008ec0 <USB_FlushRxFifo>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c96:	461a      	mov	r2, r3
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	461a      	mov	r2, r3
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	613b      	str	r3, [r7, #16]
 8008cb8:	e043      	b.n	8008d42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd0:	d118      	bne.n	8008d04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10a      	bne.n	8008cee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	e013      	b.n	8008d16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	e008      	b.n	8008d16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d10:	461a      	mov	r2, r3
 8008d12:	2300      	movs	r3, #0
 8008d14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d22:	461a      	mov	r2, r3
 8008d24:	2300      	movs	r3, #0
 8008d26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d34:	461a      	mov	r2, r3
 8008d36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	613b      	str	r3, [r7, #16]
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d3b7      	bcc.n	8008cba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	e043      	b.n	8008dd8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d66:	d118      	bne.n	8008d9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10a      	bne.n	8008d84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	e013      	b.n	8008dac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d90:	461a      	mov	r2, r3
 8008d92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	e008      	b.n	8008dac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da6:	461a      	mov	r2, r3
 8008da8:	2300      	movs	r3, #0
 8008daa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db8:	461a      	mov	r2, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008dd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	613b      	str	r3, [r7, #16]
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d3b7      	bcc.n	8008d50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008df2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d105      	bne.n	8008e14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f043 0210 	orr.w	r2, r3, #16
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	699a      	ldr	r2, [r3, #24]
 8008e18:	4b0e      	ldr	r3, [pc, #56]	; (8008e54 <USB_DevInit+0x2b4>)
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	f043 0208 	orr.w	r2, r3, #8
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d105      	bne.n	8008e44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699a      	ldr	r2, [r3, #24]
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <USB_DevInit+0x2b8>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e50:	b004      	add	sp, #16
 8008e52:	4770      	bx	lr
 8008e54:	803c3800 	.word	0x803c3800
 8008e58:	40000004 	.word	0x40000004

08008e5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	4a12      	ldr	r2, [pc, #72]	; (8008ebc <USB_FlushTxFifo+0x60>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d901      	bls.n	8008e7a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e01a      	b.n	8008eb0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	daf3      	bge.n	8008e6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	019b      	lsls	r3, r3, #6
 8008e8a:	f043 0220 	orr.w	r2, r3, #32
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	4a08      	ldr	r2, [pc, #32]	; (8008ebc <USB_FlushTxFifo+0x60>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d901      	bls.n	8008ea2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e006      	b.n	8008eb0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f003 0320 	and.w	r3, r3, #32
 8008eaa:	2b20      	cmp	r3, #32
 8008eac:	d0f1      	beq.n	8008e92 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	00030d40 	.word	0x00030d40

08008ec0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	4a11      	ldr	r2, [pc, #68]	; (8008f18 <USB_FlushRxFifo+0x58>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d901      	bls.n	8008edc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e017      	b.n	8008f0c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	daf3      	bge.n	8008ecc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2210      	movs	r2, #16
 8008eec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	4a08      	ldr	r2, [pc, #32]	; (8008f18 <USB_FlushRxFifo+0x58>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d901      	bls.n	8008efe <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e006      	b.n	8008f0c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	f003 0310 	and.w	r3, r3, #16
 8008f06:	2b10      	cmp	r3, #16
 8008f08:	d0f1      	beq.n	8008eee <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	00030d40 	.word	0x00030d40

08008f1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	68f9      	ldr	r1, [r7, #12]
 8008f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b085      	sub	sp, #20
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f68:	f023 0303 	bic.w	r3, r3, #3
 8008f6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f7c:	f043 0302 	orr.w	r3, r3, #2
 8008f80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	f003 0301 	and.w	r3, r3, #1
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]
 8008fbe:	4a13      	ldr	r2, [pc, #76]	; (800900c <USB_CoreReset+0x60>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d901      	bls.n	8008fc8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e01a      	b.n	8008ffe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	daf3      	bge.n	8008fb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	f043 0201 	orr.w	r2, r3, #1
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	4a09      	ldr	r2, [pc, #36]	; (800900c <USB_CoreReset+0x60>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d901      	bls.n	8008ff0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e006      	b.n	8008ffe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d0f1      	beq.n	8008fe0 <USB_CoreReset+0x34>

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	00030d40 	.word	0x00030d40

08009010 <atof>:
 8009010:	2100      	movs	r1, #0
 8009012:	f001 bae3 	b.w	800a5dc <strtod>
	...

08009018 <__errno>:
 8009018:	4b01      	ldr	r3, [pc, #4]	; (8009020 <__errno+0x8>)
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	20000034 	.word	0x20000034

08009024 <__libc_init_array>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	4d0d      	ldr	r5, [pc, #52]	; (800905c <__libc_init_array+0x38>)
 8009028:	4c0d      	ldr	r4, [pc, #52]	; (8009060 <__libc_init_array+0x3c>)
 800902a:	1b64      	subs	r4, r4, r5
 800902c:	10a4      	asrs	r4, r4, #2
 800902e:	2600      	movs	r6, #0
 8009030:	42a6      	cmp	r6, r4
 8009032:	d109      	bne.n	8009048 <__libc_init_array+0x24>
 8009034:	4d0b      	ldr	r5, [pc, #44]	; (8009064 <__libc_init_array+0x40>)
 8009036:	4c0c      	ldr	r4, [pc, #48]	; (8009068 <__libc_init_array+0x44>)
 8009038:	f004 f9ae 	bl	800d398 <_init>
 800903c:	1b64      	subs	r4, r4, r5
 800903e:	10a4      	asrs	r4, r4, #2
 8009040:	2600      	movs	r6, #0
 8009042:	42a6      	cmp	r6, r4
 8009044:	d105      	bne.n	8009052 <__libc_init_array+0x2e>
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	f855 3b04 	ldr.w	r3, [r5], #4
 800904c:	4798      	blx	r3
 800904e:	3601      	adds	r6, #1
 8009050:	e7ee      	b.n	8009030 <__libc_init_array+0xc>
 8009052:	f855 3b04 	ldr.w	r3, [r5], #4
 8009056:	4798      	blx	r3
 8009058:	3601      	adds	r6, #1
 800905a:	e7f2      	b.n	8009042 <__libc_init_array+0x1e>
 800905c:	0800db44 	.word	0x0800db44
 8009060:	0800db44 	.word	0x0800db44
 8009064:	0800db44 	.word	0x0800db44
 8009068:	0800db48 	.word	0x0800db48

0800906c <memset>:
 800906c:	4402      	add	r2, r0
 800906e:	4603      	mov	r3, r0
 8009070:	4293      	cmp	r3, r2
 8009072:	d100      	bne.n	8009076 <memset+0xa>
 8009074:	4770      	bx	lr
 8009076:	f803 1b01 	strb.w	r1, [r3], #1
 800907a:	e7f9      	b.n	8009070 <memset+0x4>

0800907c <__cvt>:
 800907c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	ec55 4b10 	vmov	r4, r5, d0
 8009084:	2d00      	cmp	r5, #0
 8009086:	460e      	mov	r6, r1
 8009088:	4619      	mov	r1, r3
 800908a:	462b      	mov	r3, r5
 800908c:	bfbb      	ittet	lt
 800908e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009092:	461d      	movlt	r5, r3
 8009094:	2300      	movge	r3, #0
 8009096:	232d      	movlt	r3, #45	; 0x2d
 8009098:	700b      	strb	r3, [r1, #0]
 800909a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800909c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090a0:	4691      	mov	r9, r2
 80090a2:	f023 0820 	bic.w	r8, r3, #32
 80090a6:	bfbc      	itt	lt
 80090a8:	4622      	movlt	r2, r4
 80090aa:	4614      	movlt	r4, r2
 80090ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090b0:	d005      	beq.n	80090be <__cvt+0x42>
 80090b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090b6:	d100      	bne.n	80090ba <__cvt+0x3e>
 80090b8:	3601      	adds	r6, #1
 80090ba:	2102      	movs	r1, #2
 80090bc:	e000      	b.n	80090c0 <__cvt+0x44>
 80090be:	2103      	movs	r1, #3
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	ab02      	add	r3, sp, #8
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	ec45 4b10 	vmov	d0, r4, r5
 80090cc:	4653      	mov	r3, sl
 80090ce:	4632      	mov	r2, r6
 80090d0:	f001 fb1e 	bl	800a710 <_dtoa_r>
 80090d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80090d8:	4607      	mov	r7, r0
 80090da:	d102      	bne.n	80090e2 <__cvt+0x66>
 80090dc:	f019 0f01 	tst.w	r9, #1
 80090e0:	d022      	beq.n	8009128 <__cvt+0xac>
 80090e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090e6:	eb07 0906 	add.w	r9, r7, r6
 80090ea:	d110      	bne.n	800910e <__cvt+0x92>
 80090ec:	783b      	ldrb	r3, [r7, #0]
 80090ee:	2b30      	cmp	r3, #48	; 0x30
 80090f0:	d10a      	bne.n	8009108 <__cvt+0x8c>
 80090f2:	2200      	movs	r2, #0
 80090f4:	2300      	movs	r3, #0
 80090f6:	4620      	mov	r0, r4
 80090f8:	4629      	mov	r1, r5
 80090fa:	f7f7 fd05 	bl	8000b08 <__aeabi_dcmpeq>
 80090fe:	b918      	cbnz	r0, 8009108 <__cvt+0x8c>
 8009100:	f1c6 0601 	rsb	r6, r6, #1
 8009104:	f8ca 6000 	str.w	r6, [sl]
 8009108:	f8da 3000 	ldr.w	r3, [sl]
 800910c:	4499      	add	r9, r3
 800910e:	2200      	movs	r2, #0
 8009110:	2300      	movs	r3, #0
 8009112:	4620      	mov	r0, r4
 8009114:	4629      	mov	r1, r5
 8009116:	f7f7 fcf7 	bl	8000b08 <__aeabi_dcmpeq>
 800911a:	b108      	cbz	r0, 8009120 <__cvt+0xa4>
 800911c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009120:	2230      	movs	r2, #48	; 0x30
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	454b      	cmp	r3, r9
 8009126:	d307      	bcc.n	8009138 <__cvt+0xbc>
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800912c:	1bdb      	subs	r3, r3, r7
 800912e:	4638      	mov	r0, r7
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	b004      	add	sp, #16
 8009134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009138:	1c59      	adds	r1, r3, #1
 800913a:	9103      	str	r1, [sp, #12]
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	e7f0      	b.n	8009122 <__cvt+0xa6>

08009140 <__exponent>:
 8009140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009142:	4603      	mov	r3, r0
 8009144:	2900      	cmp	r1, #0
 8009146:	bfb8      	it	lt
 8009148:	4249      	neglt	r1, r1
 800914a:	f803 2b02 	strb.w	r2, [r3], #2
 800914e:	bfb4      	ite	lt
 8009150:	222d      	movlt	r2, #45	; 0x2d
 8009152:	222b      	movge	r2, #43	; 0x2b
 8009154:	2909      	cmp	r1, #9
 8009156:	7042      	strb	r2, [r0, #1]
 8009158:	dd2a      	ble.n	80091b0 <__exponent+0x70>
 800915a:	f10d 0407 	add.w	r4, sp, #7
 800915e:	46a4      	mov	ip, r4
 8009160:	270a      	movs	r7, #10
 8009162:	46a6      	mov	lr, r4
 8009164:	460a      	mov	r2, r1
 8009166:	fb91 f6f7 	sdiv	r6, r1, r7
 800916a:	fb07 1516 	mls	r5, r7, r6, r1
 800916e:	3530      	adds	r5, #48	; 0x30
 8009170:	2a63      	cmp	r2, #99	; 0x63
 8009172:	f104 34ff 	add.w	r4, r4, #4294967295
 8009176:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800917a:	4631      	mov	r1, r6
 800917c:	dcf1      	bgt.n	8009162 <__exponent+0x22>
 800917e:	3130      	adds	r1, #48	; 0x30
 8009180:	f1ae 0502 	sub.w	r5, lr, #2
 8009184:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009188:	1c44      	adds	r4, r0, #1
 800918a:	4629      	mov	r1, r5
 800918c:	4561      	cmp	r1, ip
 800918e:	d30a      	bcc.n	80091a6 <__exponent+0x66>
 8009190:	f10d 0209 	add.w	r2, sp, #9
 8009194:	eba2 020e 	sub.w	r2, r2, lr
 8009198:	4565      	cmp	r5, ip
 800919a:	bf88      	it	hi
 800919c:	2200      	movhi	r2, #0
 800919e:	4413      	add	r3, r2
 80091a0:	1a18      	subs	r0, r3, r0
 80091a2:	b003      	add	sp, #12
 80091a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80091ae:	e7ed      	b.n	800918c <__exponent+0x4c>
 80091b0:	2330      	movs	r3, #48	; 0x30
 80091b2:	3130      	adds	r1, #48	; 0x30
 80091b4:	7083      	strb	r3, [r0, #2]
 80091b6:	70c1      	strb	r1, [r0, #3]
 80091b8:	1d03      	adds	r3, r0, #4
 80091ba:	e7f1      	b.n	80091a0 <__exponent+0x60>

080091bc <_printf_float>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	ed2d 8b02 	vpush	{d8}
 80091c4:	b08d      	sub	sp, #52	; 0x34
 80091c6:	460c      	mov	r4, r1
 80091c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80091cc:	4616      	mov	r6, r2
 80091ce:	461f      	mov	r7, r3
 80091d0:	4605      	mov	r5, r0
 80091d2:	f002 fbf9 	bl	800b9c8 <_localeconv_r>
 80091d6:	f8d0 a000 	ldr.w	sl, [r0]
 80091da:	4650      	mov	r0, sl
 80091dc:	f7f7 f818 	bl	8000210 <strlen>
 80091e0:	2300      	movs	r3, #0
 80091e2:	930a      	str	r3, [sp, #40]	; 0x28
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	9305      	str	r3, [sp, #20]
 80091e8:	f8d8 3000 	ldr.w	r3, [r8]
 80091ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80091f0:	3307      	adds	r3, #7
 80091f2:	f023 0307 	bic.w	r3, r3, #7
 80091f6:	f103 0208 	add.w	r2, r3, #8
 80091fa:	f8c8 2000 	str.w	r2, [r8]
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009206:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800920a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800920e:	9307      	str	r3, [sp, #28]
 8009210:	f8cd 8018 	str.w	r8, [sp, #24]
 8009214:	ee08 0a10 	vmov	s16, r0
 8009218:	4b9f      	ldr	r3, [pc, #636]	; (8009498 <_printf_float+0x2dc>)
 800921a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800921e:	f04f 32ff 	mov.w	r2, #4294967295
 8009222:	f7f7 fca3 	bl	8000b6c <__aeabi_dcmpun>
 8009226:	bb88      	cbnz	r0, 800928c <_printf_float+0xd0>
 8009228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800922c:	4b9a      	ldr	r3, [pc, #616]	; (8009498 <_printf_float+0x2dc>)
 800922e:	f04f 32ff 	mov.w	r2, #4294967295
 8009232:	f7f7 fc7d 	bl	8000b30 <__aeabi_dcmple>
 8009236:	bb48      	cbnz	r0, 800928c <_printf_float+0xd0>
 8009238:	2200      	movs	r2, #0
 800923a:	2300      	movs	r3, #0
 800923c:	4640      	mov	r0, r8
 800923e:	4649      	mov	r1, r9
 8009240:	f7f7 fc6c 	bl	8000b1c <__aeabi_dcmplt>
 8009244:	b110      	cbz	r0, 800924c <_printf_float+0x90>
 8009246:	232d      	movs	r3, #45	; 0x2d
 8009248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800924c:	4b93      	ldr	r3, [pc, #588]	; (800949c <_printf_float+0x2e0>)
 800924e:	4894      	ldr	r0, [pc, #592]	; (80094a0 <_printf_float+0x2e4>)
 8009250:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009254:	bf94      	ite	ls
 8009256:	4698      	movls	r8, r3
 8009258:	4680      	movhi	r8, r0
 800925a:	2303      	movs	r3, #3
 800925c:	6123      	str	r3, [r4, #16]
 800925e:	9b05      	ldr	r3, [sp, #20]
 8009260:	f023 0204 	bic.w	r2, r3, #4
 8009264:	6022      	str	r2, [r4, #0]
 8009266:	f04f 0900 	mov.w	r9, #0
 800926a:	9700      	str	r7, [sp, #0]
 800926c:	4633      	mov	r3, r6
 800926e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009270:	4621      	mov	r1, r4
 8009272:	4628      	mov	r0, r5
 8009274:	f000 f9d8 	bl	8009628 <_printf_common>
 8009278:	3001      	adds	r0, #1
 800927a:	f040 8090 	bne.w	800939e <_printf_float+0x1e2>
 800927e:	f04f 30ff 	mov.w	r0, #4294967295
 8009282:	b00d      	add	sp, #52	; 0x34
 8009284:	ecbd 8b02 	vpop	{d8}
 8009288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928c:	4642      	mov	r2, r8
 800928e:	464b      	mov	r3, r9
 8009290:	4640      	mov	r0, r8
 8009292:	4649      	mov	r1, r9
 8009294:	f7f7 fc6a 	bl	8000b6c <__aeabi_dcmpun>
 8009298:	b140      	cbz	r0, 80092ac <_printf_float+0xf0>
 800929a:	464b      	mov	r3, r9
 800929c:	2b00      	cmp	r3, #0
 800929e:	bfbc      	itt	lt
 80092a0:	232d      	movlt	r3, #45	; 0x2d
 80092a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092a6:	487f      	ldr	r0, [pc, #508]	; (80094a4 <_printf_float+0x2e8>)
 80092a8:	4b7f      	ldr	r3, [pc, #508]	; (80094a8 <_printf_float+0x2ec>)
 80092aa:	e7d1      	b.n	8009250 <_printf_float+0x94>
 80092ac:	6863      	ldr	r3, [r4, #4]
 80092ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80092b2:	9206      	str	r2, [sp, #24]
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	d13f      	bne.n	8009338 <_printf_float+0x17c>
 80092b8:	2306      	movs	r3, #6
 80092ba:	6063      	str	r3, [r4, #4]
 80092bc:	9b05      	ldr	r3, [sp, #20]
 80092be:	6861      	ldr	r1, [r4, #4]
 80092c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80092c4:	2300      	movs	r3, #0
 80092c6:	9303      	str	r3, [sp, #12]
 80092c8:	ab0a      	add	r3, sp, #40	; 0x28
 80092ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80092ce:	ab09      	add	r3, sp, #36	; 0x24
 80092d0:	ec49 8b10 	vmov	d0, r8, r9
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	6022      	str	r2, [r4, #0]
 80092d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092dc:	4628      	mov	r0, r5
 80092de:	f7ff fecd 	bl	800907c <__cvt>
 80092e2:	9b06      	ldr	r3, [sp, #24]
 80092e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092e6:	2b47      	cmp	r3, #71	; 0x47
 80092e8:	4680      	mov	r8, r0
 80092ea:	d108      	bne.n	80092fe <_printf_float+0x142>
 80092ec:	1cc8      	adds	r0, r1, #3
 80092ee:	db02      	blt.n	80092f6 <_printf_float+0x13a>
 80092f0:	6863      	ldr	r3, [r4, #4]
 80092f2:	4299      	cmp	r1, r3
 80092f4:	dd41      	ble.n	800937a <_printf_float+0x1be>
 80092f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80092fa:	fa5f fb8b 	uxtb.w	fp, fp
 80092fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009302:	d820      	bhi.n	8009346 <_printf_float+0x18a>
 8009304:	3901      	subs	r1, #1
 8009306:	465a      	mov	r2, fp
 8009308:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800930c:	9109      	str	r1, [sp, #36]	; 0x24
 800930e:	f7ff ff17 	bl	8009140 <__exponent>
 8009312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009314:	1813      	adds	r3, r2, r0
 8009316:	2a01      	cmp	r2, #1
 8009318:	4681      	mov	r9, r0
 800931a:	6123      	str	r3, [r4, #16]
 800931c:	dc02      	bgt.n	8009324 <_printf_float+0x168>
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	07d2      	lsls	r2, r2, #31
 8009322:	d501      	bpl.n	8009328 <_printf_float+0x16c>
 8009324:	3301      	adds	r3, #1
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800932c:	2b00      	cmp	r3, #0
 800932e:	d09c      	beq.n	800926a <_printf_float+0xae>
 8009330:	232d      	movs	r3, #45	; 0x2d
 8009332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009336:	e798      	b.n	800926a <_printf_float+0xae>
 8009338:	9a06      	ldr	r2, [sp, #24]
 800933a:	2a47      	cmp	r2, #71	; 0x47
 800933c:	d1be      	bne.n	80092bc <_printf_float+0x100>
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1bc      	bne.n	80092bc <_printf_float+0x100>
 8009342:	2301      	movs	r3, #1
 8009344:	e7b9      	b.n	80092ba <_printf_float+0xfe>
 8009346:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800934a:	d118      	bne.n	800937e <_printf_float+0x1c2>
 800934c:	2900      	cmp	r1, #0
 800934e:	6863      	ldr	r3, [r4, #4]
 8009350:	dd0b      	ble.n	800936a <_printf_float+0x1ae>
 8009352:	6121      	str	r1, [r4, #16]
 8009354:	b913      	cbnz	r3, 800935c <_printf_float+0x1a0>
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	07d0      	lsls	r0, r2, #31
 800935a:	d502      	bpl.n	8009362 <_printf_float+0x1a6>
 800935c:	3301      	adds	r3, #1
 800935e:	440b      	add	r3, r1
 8009360:	6123      	str	r3, [r4, #16]
 8009362:	65a1      	str	r1, [r4, #88]	; 0x58
 8009364:	f04f 0900 	mov.w	r9, #0
 8009368:	e7de      	b.n	8009328 <_printf_float+0x16c>
 800936a:	b913      	cbnz	r3, 8009372 <_printf_float+0x1b6>
 800936c:	6822      	ldr	r2, [r4, #0]
 800936e:	07d2      	lsls	r2, r2, #31
 8009370:	d501      	bpl.n	8009376 <_printf_float+0x1ba>
 8009372:	3302      	adds	r3, #2
 8009374:	e7f4      	b.n	8009360 <_printf_float+0x1a4>
 8009376:	2301      	movs	r3, #1
 8009378:	e7f2      	b.n	8009360 <_printf_float+0x1a4>
 800937a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800937e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009380:	4299      	cmp	r1, r3
 8009382:	db05      	blt.n	8009390 <_printf_float+0x1d4>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	6121      	str	r1, [r4, #16]
 8009388:	07d8      	lsls	r0, r3, #31
 800938a:	d5ea      	bpl.n	8009362 <_printf_float+0x1a6>
 800938c:	1c4b      	adds	r3, r1, #1
 800938e:	e7e7      	b.n	8009360 <_printf_float+0x1a4>
 8009390:	2900      	cmp	r1, #0
 8009392:	bfd4      	ite	le
 8009394:	f1c1 0202 	rsble	r2, r1, #2
 8009398:	2201      	movgt	r2, #1
 800939a:	4413      	add	r3, r2
 800939c:	e7e0      	b.n	8009360 <_printf_float+0x1a4>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	055a      	lsls	r2, r3, #21
 80093a2:	d407      	bmi.n	80093b4 <_printf_float+0x1f8>
 80093a4:	6923      	ldr	r3, [r4, #16]
 80093a6:	4642      	mov	r2, r8
 80093a8:	4631      	mov	r1, r6
 80093aa:	4628      	mov	r0, r5
 80093ac:	47b8      	blx	r7
 80093ae:	3001      	adds	r0, #1
 80093b0:	d12c      	bne.n	800940c <_printf_float+0x250>
 80093b2:	e764      	b.n	800927e <_printf_float+0xc2>
 80093b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093b8:	f240 80e0 	bls.w	800957c <_printf_float+0x3c0>
 80093bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093c0:	2200      	movs	r2, #0
 80093c2:	2300      	movs	r3, #0
 80093c4:	f7f7 fba0 	bl	8000b08 <__aeabi_dcmpeq>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d034      	beq.n	8009436 <_printf_float+0x27a>
 80093cc:	4a37      	ldr	r2, [pc, #220]	; (80094ac <_printf_float+0x2f0>)
 80093ce:	2301      	movs	r3, #1
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	f43f af51 	beq.w	800927e <_printf_float+0xc2>
 80093dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093e0:	429a      	cmp	r2, r3
 80093e2:	db02      	blt.n	80093ea <_printf_float+0x22e>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	07d8      	lsls	r0, r3, #31
 80093e8:	d510      	bpl.n	800940c <_printf_float+0x250>
 80093ea:	ee18 3a10 	vmov	r3, s16
 80093ee:	4652      	mov	r2, sl
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f af41 	beq.w	800927e <_printf_float+0xc2>
 80093fc:	f04f 0800 	mov.w	r8, #0
 8009400:	f104 091a 	add.w	r9, r4, #26
 8009404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009406:	3b01      	subs	r3, #1
 8009408:	4543      	cmp	r3, r8
 800940a:	dc09      	bgt.n	8009420 <_printf_float+0x264>
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	079b      	lsls	r3, r3, #30
 8009410:	f100 8105 	bmi.w	800961e <_printf_float+0x462>
 8009414:	68e0      	ldr	r0, [r4, #12]
 8009416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009418:	4298      	cmp	r0, r3
 800941a:	bfb8      	it	lt
 800941c:	4618      	movlt	r0, r3
 800941e:	e730      	b.n	8009282 <_printf_float+0xc6>
 8009420:	2301      	movs	r3, #1
 8009422:	464a      	mov	r2, r9
 8009424:	4631      	mov	r1, r6
 8009426:	4628      	mov	r0, r5
 8009428:	47b8      	blx	r7
 800942a:	3001      	adds	r0, #1
 800942c:	f43f af27 	beq.w	800927e <_printf_float+0xc2>
 8009430:	f108 0801 	add.w	r8, r8, #1
 8009434:	e7e6      	b.n	8009404 <_printf_float+0x248>
 8009436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009438:	2b00      	cmp	r3, #0
 800943a:	dc39      	bgt.n	80094b0 <_printf_float+0x2f4>
 800943c:	4a1b      	ldr	r2, [pc, #108]	; (80094ac <_printf_float+0x2f0>)
 800943e:	2301      	movs	r3, #1
 8009440:	4631      	mov	r1, r6
 8009442:	4628      	mov	r0, r5
 8009444:	47b8      	blx	r7
 8009446:	3001      	adds	r0, #1
 8009448:	f43f af19 	beq.w	800927e <_printf_float+0xc2>
 800944c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009450:	4313      	orrs	r3, r2
 8009452:	d102      	bne.n	800945a <_printf_float+0x29e>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	07d9      	lsls	r1, r3, #31
 8009458:	d5d8      	bpl.n	800940c <_printf_float+0x250>
 800945a:	ee18 3a10 	vmov	r3, s16
 800945e:	4652      	mov	r2, sl
 8009460:	4631      	mov	r1, r6
 8009462:	4628      	mov	r0, r5
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f af09 	beq.w	800927e <_printf_float+0xc2>
 800946c:	f04f 0900 	mov.w	r9, #0
 8009470:	f104 0a1a 	add.w	sl, r4, #26
 8009474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009476:	425b      	negs	r3, r3
 8009478:	454b      	cmp	r3, r9
 800947a:	dc01      	bgt.n	8009480 <_printf_float+0x2c4>
 800947c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800947e:	e792      	b.n	80093a6 <_printf_float+0x1ea>
 8009480:	2301      	movs	r3, #1
 8009482:	4652      	mov	r2, sl
 8009484:	4631      	mov	r1, r6
 8009486:	4628      	mov	r0, r5
 8009488:	47b8      	blx	r7
 800948a:	3001      	adds	r0, #1
 800948c:	f43f aef7 	beq.w	800927e <_printf_float+0xc2>
 8009490:	f109 0901 	add.w	r9, r9, #1
 8009494:	e7ee      	b.n	8009474 <_printf_float+0x2b8>
 8009496:	bf00      	nop
 8009498:	7fefffff 	.word	0x7fefffff
 800949c:	0800d694 	.word	0x0800d694
 80094a0:	0800d698 	.word	0x0800d698
 80094a4:	0800d6a0 	.word	0x0800d6a0
 80094a8:	0800d69c 	.word	0x0800d69c
 80094ac:	0800d6a4 	.word	0x0800d6a4
 80094b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094b4:	429a      	cmp	r2, r3
 80094b6:	bfa8      	it	ge
 80094b8:	461a      	movge	r2, r3
 80094ba:	2a00      	cmp	r2, #0
 80094bc:	4691      	mov	r9, r2
 80094be:	dc37      	bgt.n	8009530 <_printf_float+0x374>
 80094c0:	f04f 0b00 	mov.w	fp, #0
 80094c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094c8:	f104 021a 	add.w	r2, r4, #26
 80094cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094ce:	9305      	str	r3, [sp, #20]
 80094d0:	eba3 0309 	sub.w	r3, r3, r9
 80094d4:	455b      	cmp	r3, fp
 80094d6:	dc33      	bgt.n	8009540 <_printf_float+0x384>
 80094d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094dc:	429a      	cmp	r2, r3
 80094de:	db3b      	blt.n	8009558 <_printf_float+0x39c>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	07da      	lsls	r2, r3, #31
 80094e4:	d438      	bmi.n	8009558 <_printf_float+0x39c>
 80094e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094e8:	9b05      	ldr	r3, [sp, #20]
 80094ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	eba2 0901 	sub.w	r9, r2, r1
 80094f2:	4599      	cmp	r9, r3
 80094f4:	bfa8      	it	ge
 80094f6:	4699      	movge	r9, r3
 80094f8:	f1b9 0f00 	cmp.w	r9, #0
 80094fc:	dc35      	bgt.n	800956a <_printf_float+0x3ae>
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009506:	f104 0a1a 	add.w	sl, r4, #26
 800950a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800950e:	1a9b      	subs	r3, r3, r2
 8009510:	eba3 0309 	sub.w	r3, r3, r9
 8009514:	4543      	cmp	r3, r8
 8009516:	f77f af79 	ble.w	800940c <_printf_float+0x250>
 800951a:	2301      	movs	r3, #1
 800951c:	4652      	mov	r2, sl
 800951e:	4631      	mov	r1, r6
 8009520:	4628      	mov	r0, r5
 8009522:	47b8      	blx	r7
 8009524:	3001      	adds	r0, #1
 8009526:	f43f aeaa 	beq.w	800927e <_printf_float+0xc2>
 800952a:	f108 0801 	add.w	r8, r8, #1
 800952e:	e7ec      	b.n	800950a <_printf_float+0x34e>
 8009530:	4613      	mov	r3, r2
 8009532:	4631      	mov	r1, r6
 8009534:	4642      	mov	r2, r8
 8009536:	4628      	mov	r0, r5
 8009538:	47b8      	blx	r7
 800953a:	3001      	adds	r0, #1
 800953c:	d1c0      	bne.n	80094c0 <_printf_float+0x304>
 800953e:	e69e      	b.n	800927e <_printf_float+0xc2>
 8009540:	2301      	movs	r3, #1
 8009542:	4631      	mov	r1, r6
 8009544:	4628      	mov	r0, r5
 8009546:	9205      	str	r2, [sp, #20]
 8009548:	47b8      	blx	r7
 800954a:	3001      	adds	r0, #1
 800954c:	f43f ae97 	beq.w	800927e <_printf_float+0xc2>
 8009550:	9a05      	ldr	r2, [sp, #20]
 8009552:	f10b 0b01 	add.w	fp, fp, #1
 8009556:	e7b9      	b.n	80094cc <_printf_float+0x310>
 8009558:	ee18 3a10 	vmov	r3, s16
 800955c:	4652      	mov	r2, sl
 800955e:	4631      	mov	r1, r6
 8009560:	4628      	mov	r0, r5
 8009562:	47b8      	blx	r7
 8009564:	3001      	adds	r0, #1
 8009566:	d1be      	bne.n	80094e6 <_printf_float+0x32a>
 8009568:	e689      	b.n	800927e <_printf_float+0xc2>
 800956a:	9a05      	ldr	r2, [sp, #20]
 800956c:	464b      	mov	r3, r9
 800956e:	4442      	add	r2, r8
 8009570:	4631      	mov	r1, r6
 8009572:	4628      	mov	r0, r5
 8009574:	47b8      	blx	r7
 8009576:	3001      	adds	r0, #1
 8009578:	d1c1      	bne.n	80094fe <_printf_float+0x342>
 800957a:	e680      	b.n	800927e <_printf_float+0xc2>
 800957c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800957e:	2a01      	cmp	r2, #1
 8009580:	dc01      	bgt.n	8009586 <_printf_float+0x3ca>
 8009582:	07db      	lsls	r3, r3, #31
 8009584:	d538      	bpl.n	80095f8 <_printf_float+0x43c>
 8009586:	2301      	movs	r3, #1
 8009588:	4642      	mov	r2, r8
 800958a:	4631      	mov	r1, r6
 800958c:	4628      	mov	r0, r5
 800958e:	47b8      	blx	r7
 8009590:	3001      	adds	r0, #1
 8009592:	f43f ae74 	beq.w	800927e <_printf_float+0xc2>
 8009596:	ee18 3a10 	vmov	r3, s16
 800959a:	4652      	mov	r2, sl
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	f43f ae6b 	beq.w	800927e <_printf_float+0xc2>
 80095a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095ac:	2200      	movs	r2, #0
 80095ae:	2300      	movs	r3, #0
 80095b0:	f7f7 faaa 	bl	8000b08 <__aeabi_dcmpeq>
 80095b4:	b9d8      	cbnz	r0, 80095ee <_printf_float+0x432>
 80095b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b8:	f108 0201 	add.w	r2, r8, #1
 80095bc:	3b01      	subs	r3, #1
 80095be:	4631      	mov	r1, r6
 80095c0:	4628      	mov	r0, r5
 80095c2:	47b8      	blx	r7
 80095c4:	3001      	adds	r0, #1
 80095c6:	d10e      	bne.n	80095e6 <_printf_float+0x42a>
 80095c8:	e659      	b.n	800927e <_printf_float+0xc2>
 80095ca:	2301      	movs	r3, #1
 80095cc:	4652      	mov	r2, sl
 80095ce:	4631      	mov	r1, r6
 80095d0:	4628      	mov	r0, r5
 80095d2:	47b8      	blx	r7
 80095d4:	3001      	adds	r0, #1
 80095d6:	f43f ae52 	beq.w	800927e <_printf_float+0xc2>
 80095da:	f108 0801 	add.w	r8, r8, #1
 80095de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e0:	3b01      	subs	r3, #1
 80095e2:	4543      	cmp	r3, r8
 80095e4:	dcf1      	bgt.n	80095ca <_printf_float+0x40e>
 80095e6:	464b      	mov	r3, r9
 80095e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095ec:	e6dc      	b.n	80093a8 <_printf_float+0x1ec>
 80095ee:	f04f 0800 	mov.w	r8, #0
 80095f2:	f104 0a1a 	add.w	sl, r4, #26
 80095f6:	e7f2      	b.n	80095de <_printf_float+0x422>
 80095f8:	2301      	movs	r3, #1
 80095fa:	4642      	mov	r2, r8
 80095fc:	e7df      	b.n	80095be <_printf_float+0x402>
 80095fe:	2301      	movs	r3, #1
 8009600:	464a      	mov	r2, r9
 8009602:	4631      	mov	r1, r6
 8009604:	4628      	mov	r0, r5
 8009606:	47b8      	blx	r7
 8009608:	3001      	adds	r0, #1
 800960a:	f43f ae38 	beq.w	800927e <_printf_float+0xc2>
 800960e:	f108 0801 	add.w	r8, r8, #1
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009616:	1a5b      	subs	r3, r3, r1
 8009618:	4543      	cmp	r3, r8
 800961a:	dcf0      	bgt.n	80095fe <_printf_float+0x442>
 800961c:	e6fa      	b.n	8009414 <_printf_float+0x258>
 800961e:	f04f 0800 	mov.w	r8, #0
 8009622:	f104 0919 	add.w	r9, r4, #25
 8009626:	e7f4      	b.n	8009612 <_printf_float+0x456>

08009628 <_printf_common>:
 8009628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962c:	4616      	mov	r6, r2
 800962e:	4699      	mov	r9, r3
 8009630:	688a      	ldr	r2, [r1, #8]
 8009632:	690b      	ldr	r3, [r1, #16]
 8009634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009638:	4293      	cmp	r3, r2
 800963a:	bfb8      	it	lt
 800963c:	4613      	movlt	r3, r2
 800963e:	6033      	str	r3, [r6, #0]
 8009640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009644:	4607      	mov	r7, r0
 8009646:	460c      	mov	r4, r1
 8009648:	b10a      	cbz	r2, 800964e <_printf_common+0x26>
 800964a:	3301      	adds	r3, #1
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	0699      	lsls	r1, r3, #26
 8009652:	bf42      	ittt	mi
 8009654:	6833      	ldrmi	r3, [r6, #0]
 8009656:	3302      	addmi	r3, #2
 8009658:	6033      	strmi	r3, [r6, #0]
 800965a:	6825      	ldr	r5, [r4, #0]
 800965c:	f015 0506 	ands.w	r5, r5, #6
 8009660:	d106      	bne.n	8009670 <_printf_common+0x48>
 8009662:	f104 0a19 	add.w	sl, r4, #25
 8009666:	68e3      	ldr	r3, [r4, #12]
 8009668:	6832      	ldr	r2, [r6, #0]
 800966a:	1a9b      	subs	r3, r3, r2
 800966c:	42ab      	cmp	r3, r5
 800966e:	dc26      	bgt.n	80096be <_printf_common+0x96>
 8009670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009674:	1e13      	subs	r3, r2, #0
 8009676:	6822      	ldr	r2, [r4, #0]
 8009678:	bf18      	it	ne
 800967a:	2301      	movne	r3, #1
 800967c:	0692      	lsls	r2, r2, #26
 800967e:	d42b      	bmi.n	80096d8 <_printf_common+0xb0>
 8009680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009684:	4649      	mov	r1, r9
 8009686:	4638      	mov	r0, r7
 8009688:	47c0      	blx	r8
 800968a:	3001      	adds	r0, #1
 800968c:	d01e      	beq.n	80096cc <_printf_common+0xa4>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	68e5      	ldr	r5, [r4, #12]
 8009692:	6832      	ldr	r2, [r6, #0]
 8009694:	f003 0306 	and.w	r3, r3, #6
 8009698:	2b04      	cmp	r3, #4
 800969a:	bf08      	it	eq
 800969c:	1aad      	subeq	r5, r5, r2
 800969e:	68a3      	ldr	r3, [r4, #8]
 80096a0:	6922      	ldr	r2, [r4, #16]
 80096a2:	bf0c      	ite	eq
 80096a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096a8:	2500      	movne	r5, #0
 80096aa:	4293      	cmp	r3, r2
 80096ac:	bfc4      	itt	gt
 80096ae:	1a9b      	subgt	r3, r3, r2
 80096b0:	18ed      	addgt	r5, r5, r3
 80096b2:	2600      	movs	r6, #0
 80096b4:	341a      	adds	r4, #26
 80096b6:	42b5      	cmp	r5, r6
 80096b8:	d11a      	bne.n	80096f0 <_printf_common+0xc8>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e008      	b.n	80096d0 <_printf_common+0xa8>
 80096be:	2301      	movs	r3, #1
 80096c0:	4652      	mov	r2, sl
 80096c2:	4649      	mov	r1, r9
 80096c4:	4638      	mov	r0, r7
 80096c6:	47c0      	blx	r8
 80096c8:	3001      	adds	r0, #1
 80096ca:	d103      	bne.n	80096d4 <_printf_common+0xac>
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d4:	3501      	adds	r5, #1
 80096d6:	e7c6      	b.n	8009666 <_printf_common+0x3e>
 80096d8:	18e1      	adds	r1, r4, r3
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	2030      	movs	r0, #48	; 0x30
 80096de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096e2:	4422      	add	r2, r4
 80096e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096ec:	3302      	adds	r3, #2
 80096ee:	e7c7      	b.n	8009680 <_printf_common+0x58>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4622      	mov	r2, r4
 80096f4:	4649      	mov	r1, r9
 80096f6:	4638      	mov	r0, r7
 80096f8:	47c0      	blx	r8
 80096fa:	3001      	adds	r0, #1
 80096fc:	d0e6      	beq.n	80096cc <_printf_common+0xa4>
 80096fe:	3601      	adds	r6, #1
 8009700:	e7d9      	b.n	80096b6 <_printf_common+0x8e>
	...

08009704 <_printf_i>:
 8009704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	460c      	mov	r4, r1
 800970a:	4691      	mov	r9, r2
 800970c:	7e27      	ldrb	r7, [r4, #24]
 800970e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009710:	2f78      	cmp	r7, #120	; 0x78
 8009712:	4680      	mov	r8, r0
 8009714:	469a      	mov	sl, r3
 8009716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800971a:	d807      	bhi.n	800972c <_printf_i+0x28>
 800971c:	2f62      	cmp	r7, #98	; 0x62
 800971e:	d80a      	bhi.n	8009736 <_printf_i+0x32>
 8009720:	2f00      	cmp	r7, #0
 8009722:	f000 80d8 	beq.w	80098d6 <_printf_i+0x1d2>
 8009726:	2f58      	cmp	r7, #88	; 0x58
 8009728:	f000 80a3 	beq.w	8009872 <_printf_i+0x16e>
 800972c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009734:	e03a      	b.n	80097ac <_printf_i+0xa8>
 8009736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800973a:	2b15      	cmp	r3, #21
 800973c:	d8f6      	bhi.n	800972c <_printf_i+0x28>
 800973e:	a001      	add	r0, pc, #4	; (adr r0, 8009744 <_printf_i+0x40>)
 8009740:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009744:	0800979d 	.word	0x0800979d
 8009748:	080097b1 	.word	0x080097b1
 800974c:	0800972d 	.word	0x0800972d
 8009750:	0800972d 	.word	0x0800972d
 8009754:	0800972d 	.word	0x0800972d
 8009758:	0800972d 	.word	0x0800972d
 800975c:	080097b1 	.word	0x080097b1
 8009760:	0800972d 	.word	0x0800972d
 8009764:	0800972d 	.word	0x0800972d
 8009768:	0800972d 	.word	0x0800972d
 800976c:	0800972d 	.word	0x0800972d
 8009770:	080098bd 	.word	0x080098bd
 8009774:	080097e1 	.word	0x080097e1
 8009778:	0800989f 	.word	0x0800989f
 800977c:	0800972d 	.word	0x0800972d
 8009780:	0800972d 	.word	0x0800972d
 8009784:	080098df 	.word	0x080098df
 8009788:	0800972d 	.word	0x0800972d
 800978c:	080097e1 	.word	0x080097e1
 8009790:	0800972d 	.word	0x0800972d
 8009794:	0800972d 	.word	0x0800972d
 8009798:	080098a7 	.word	0x080098a7
 800979c:	680b      	ldr	r3, [r1, #0]
 800979e:	1d1a      	adds	r2, r3, #4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	600a      	str	r2, [r1, #0]
 80097a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80097a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097ac:	2301      	movs	r3, #1
 80097ae:	e0a3      	b.n	80098f8 <_printf_i+0x1f4>
 80097b0:	6825      	ldr	r5, [r4, #0]
 80097b2:	6808      	ldr	r0, [r1, #0]
 80097b4:	062e      	lsls	r6, r5, #24
 80097b6:	f100 0304 	add.w	r3, r0, #4
 80097ba:	d50a      	bpl.n	80097d2 <_printf_i+0xce>
 80097bc:	6805      	ldr	r5, [r0, #0]
 80097be:	600b      	str	r3, [r1, #0]
 80097c0:	2d00      	cmp	r5, #0
 80097c2:	da03      	bge.n	80097cc <_printf_i+0xc8>
 80097c4:	232d      	movs	r3, #45	; 0x2d
 80097c6:	426d      	negs	r5, r5
 80097c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097cc:	485e      	ldr	r0, [pc, #376]	; (8009948 <_printf_i+0x244>)
 80097ce:	230a      	movs	r3, #10
 80097d0:	e019      	b.n	8009806 <_printf_i+0x102>
 80097d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80097d6:	6805      	ldr	r5, [r0, #0]
 80097d8:	600b      	str	r3, [r1, #0]
 80097da:	bf18      	it	ne
 80097dc:	b22d      	sxthne	r5, r5
 80097de:	e7ef      	b.n	80097c0 <_printf_i+0xbc>
 80097e0:	680b      	ldr	r3, [r1, #0]
 80097e2:	6825      	ldr	r5, [r4, #0]
 80097e4:	1d18      	adds	r0, r3, #4
 80097e6:	6008      	str	r0, [r1, #0]
 80097e8:	0628      	lsls	r0, r5, #24
 80097ea:	d501      	bpl.n	80097f0 <_printf_i+0xec>
 80097ec:	681d      	ldr	r5, [r3, #0]
 80097ee:	e002      	b.n	80097f6 <_printf_i+0xf2>
 80097f0:	0669      	lsls	r1, r5, #25
 80097f2:	d5fb      	bpl.n	80097ec <_printf_i+0xe8>
 80097f4:	881d      	ldrh	r5, [r3, #0]
 80097f6:	4854      	ldr	r0, [pc, #336]	; (8009948 <_printf_i+0x244>)
 80097f8:	2f6f      	cmp	r7, #111	; 0x6f
 80097fa:	bf0c      	ite	eq
 80097fc:	2308      	moveq	r3, #8
 80097fe:	230a      	movne	r3, #10
 8009800:	2100      	movs	r1, #0
 8009802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009806:	6866      	ldr	r6, [r4, #4]
 8009808:	60a6      	str	r6, [r4, #8]
 800980a:	2e00      	cmp	r6, #0
 800980c:	bfa2      	ittt	ge
 800980e:	6821      	ldrge	r1, [r4, #0]
 8009810:	f021 0104 	bicge.w	r1, r1, #4
 8009814:	6021      	strge	r1, [r4, #0]
 8009816:	b90d      	cbnz	r5, 800981c <_printf_i+0x118>
 8009818:	2e00      	cmp	r6, #0
 800981a:	d04d      	beq.n	80098b8 <_printf_i+0x1b4>
 800981c:	4616      	mov	r6, r2
 800981e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009822:	fb03 5711 	mls	r7, r3, r1, r5
 8009826:	5dc7      	ldrb	r7, [r0, r7]
 8009828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800982c:	462f      	mov	r7, r5
 800982e:	42bb      	cmp	r3, r7
 8009830:	460d      	mov	r5, r1
 8009832:	d9f4      	bls.n	800981e <_printf_i+0x11a>
 8009834:	2b08      	cmp	r3, #8
 8009836:	d10b      	bne.n	8009850 <_printf_i+0x14c>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	07df      	lsls	r7, r3, #31
 800983c:	d508      	bpl.n	8009850 <_printf_i+0x14c>
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	6861      	ldr	r1, [r4, #4]
 8009842:	4299      	cmp	r1, r3
 8009844:	bfde      	ittt	le
 8009846:	2330      	movle	r3, #48	; 0x30
 8009848:	f806 3c01 	strble.w	r3, [r6, #-1]
 800984c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009850:	1b92      	subs	r2, r2, r6
 8009852:	6122      	str	r2, [r4, #16]
 8009854:	f8cd a000 	str.w	sl, [sp]
 8009858:	464b      	mov	r3, r9
 800985a:	aa03      	add	r2, sp, #12
 800985c:	4621      	mov	r1, r4
 800985e:	4640      	mov	r0, r8
 8009860:	f7ff fee2 	bl	8009628 <_printf_common>
 8009864:	3001      	adds	r0, #1
 8009866:	d14c      	bne.n	8009902 <_printf_i+0x1fe>
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	b004      	add	sp, #16
 800986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009872:	4835      	ldr	r0, [pc, #212]	; (8009948 <_printf_i+0x244>)
 8009874:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	680e      	ldr	r6, [r1, #0]
 800987c:	061f      	lsls	r7, r3, #24
 800987e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009882:	600e      	str	r6, [r1, #0]
 8009884:	d514      	bpl.n	80098b0 <_printf_i+0x1ac>
 8009886:	07d9      	lsls	r1, r3, #31
 8009888:	bf44      	itt	mi
 800988a:	f043 0320 	orrmi.w	r3, r3, #32
 800988e:	6023      	strmi	r3, [r4, #0]
 8009890:	b91d      	cbnz	r5, 800989a <_printf_i+0x196>
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	f023 0320 	bic.w	r3, r3, #32
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	2310      	movs	r3, #16
 800989c:	e7b0      	b.n	8009800 <_printf_i+0xfc>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	f043 0320 	orr.w	r3, r3, #32
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	2378      	movs	r3, #120	; 0x78
 80098a8:	4828      	ldr	r0, [pc, #160]	; (800994c <_printf_i+0x248>)
 80098aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098ae:	e7e3      	b.n	8009878 <_printf_i+0x174>
 80098b0:	065e      	lsls	r6, r3, #25
 80098b2:	bf48      	it	mi
 80098b4:	b2ad      	uxthmi	r5, r5
 80098b6:	e7e6      	b.n	8009886 <_printf_i+0x182>
 80098b8:	4616      	mov	r6, r2
 80098ba:	e7bb      	b.n	8009834 <_printf_i+0x130>
 80098bc:	680b      	ldr	r3, [r1, #0]
 80098be:	6826      	ldr	r6, [r4, #0]
 80098c0:	6960      	ldr	r0, [r4, #20]
 80098c2:	1d1d      	adds	r5, r3, #4
 80098c4:	600d      	str	r5, [r1, #0]
 80098c6:	0635      	lsls	r5, r6, #24
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	d501      	bpl.n	80098d0 <_printf_i+0x1cc>
 80098cc:	6018      	str	r0, [r3, #0]
 80098ce:	e002      	b.n	80098d6 <_printf_i+0x1d2>
 80098d0:	0671      	lsls	r1, r6, #25
 80098d2:	d5fb      	bpl.n	80098cc <_printf_i+0x1c8>
 80098d4:	8018      	strh	r0, [r3, #0]
 80098d6:	2300      	movs	r3, #0
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	4616      	mov	r6, r2
 80098dc:	e7ba      	b.n	8009854 <_printf_i+0x150>
 80098de:	680b      	ldr	r3, [r1, #0]
 80098e0:	1d1a      	adds	r2, r3, #4
 80098e2:	600a      	str	r2, [r1, #0]
 80098e4:	681e      	ldr	r6, [r3, #0]
 80098e6:	6862      	ldr	r2, [r4, #4]
 80098e8:	2100      	movs	r1, #0
 80098ea:	4630      	mov	r0, r6
 80098ec:	f7f6 fc98 	bl	8000220 <memchr>
 80098f0:	b108      	cbz	r0, 80098f6 <_printf_i+0x1f2>
 80098f2:	1b80      	subs	r0, r0, r6
 80098f4:	6060      	str	r0, [r4, #4]
 80098f6:	6863      	ldr	r3, [r4, #4]
 80098f8:	6123      	str	r3, [r4, #16]
 80098fa:	2300      	movs	r3, #0
 80098fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009900:	e7a8      	b.n	8009854 <_printf_i+0x150>
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	4632      	mov	r2, r6
 8009906:	4649      	mov	r1, r9
 8009908:	4640      	mov	r0, r8
 800990a:	47d0      	blx	sl
 800990c:	3001      	adds	r0, #1
 800990e:	d0ab      	beq.n	8009868 <_printf_i+0x164>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	079b      	lsls	r3, r3, #30
 8009914:	d413      	bmi.n	800993e <_printf_i+0x23a>
 8009916:	68e0      	ldr	r0, [r4, #12]
 8009918:	9b03      	ldr	r3, [sp, #12]
 800991a:	4298      	cmp	r0, r3
 800991c:	bfb8      	it	lt
 800991e:	4618      	movlt	r0, r3
 8009920:	e7a4      	b.n	800986c <_printf_i+0x168>
 8009922:	2301      	movs	r3, #1
 8009924:	4632      	mov	r2, r6
 8009926:	4649      	mov	r1, r9
 8009928:	4640      	mov	r0, r8
 800992a:	47d0      	blx	sl
 800992c:	3001      	adds	r0, #1
 800992e:	d09b      	beq.n	8009868 <_printf_i+0x164>
 8009930:	3501      	adds	r5, #1
 8009932:	68e3      	ldr	r3, [r4, #12]
 8009934:	9903      	ldr	r1, [sp, #12]
 8009936:	1a5b      	subs	r3, r3, r1
 8009938:	42ab      	cmp	r3, r5
 800993a:	dcf2      	bgt.n	8009922 <_printf_i+0x21e>
 800993c:	e7eb      	b.n	8009916 <_printf_i+0x212>
 800993e:	2500      	movs	r5, #0
 8009940:	f104 0619 	add.w	r6, r4, #25
 8009944:	e7f5      	b.n	8009932 <_printf_i+0x22e>
 8009946:	bf00      	nop
 8009948:	0800d6a6 	.word	0x0800d6a6
 800994c:	0800d6b7 	.word	0x0800d6b7

08009950 <siprintf>:
 8009950:	b40e      	push	{r1, r2, r3}
 8009952:	b500      	push	{lr}
 8009954:	b09c      	sub	sp, #112	; 0x70
 8009956:	ab1d      	add	r3, sp, #116	; 0x74
 8009958:	9002      	str	r0, [sp, #8]
 800995a:	9006      	str	r0, [sp, #24]
 800995c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009960:	4809      	ldr	r0, [pc, #36]	; (8009988 <siprintf+0x38>)
 8009962:	9107      	str	r1, [sp, #28]
 8009964:	9104      	str	r1, [sp, #16]
 8009966:	4909      	ldr	r1, [pc, #36]	; (800998c <siprintf+0x3c>)
 8009968:	f853 2b04 	ldr.w	r2, [r3], #4
 800996c:	9105      	str	r1, [sp, #20]
 800996e:	6800      	ldr	r0, [r0, #0]
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	a902      	add	r1, sp, #8
 8009974:	f002 fe24 	bl	800c5c0 <_svfiprintf_r>
 8009978:	9b02      	ldr	r3, [sp, #8]
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	b01c      	add	sp, #112	; 0x70
 8009980:	f85d eb04 	ldr.w	lr, [sp], #4
 8009984:	b003      	add	sp, #12
 8009986:	4770      	bx	lr
 8009988:	20000034 	.word	0x20000034
 800998c:	ffff0208 	.word	0xffff0208

08009990 <sulp>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	4604      	mov	r4, r0
 8009994:	460d      	mov	r5, r1
 8009996:	ec45 4b10 	vmov	d0, r4, r5
 800999a:	4616      	mov	r6, r2
 800999c:	f002 fbac 	bl	800c0f8 <__ulp>
 80099a0:	ec51 0b10 	vmov	r0, r1, d0
 80099a4:	b17e      	cbz	r6, 80099c6 <sulp+0x36>
 80099a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80099aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	dd09      	ble.n	80099c6 <sulp+0x36>
 80099b2:	051b      	lsls	r3, r3, #20
 80099b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80099b8:	2400      	movs	r4, #0
 80099ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80099be:	4622      	mov	r2, r4
 80099c0:	462b      	mov	r3, r5
 80099c2:	f7f6 fe39 	bl	8000638 <__aeabi_dmul>
 80099c6:	bd70      	pop	{r4, r5, r6, pc}

080099c8 <_strtod_l>:
 80099c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	b0a3      	sub	sp, #140	; 0x8c
 80099ce:	461f      	mov	r7, r3
 80099d0:	2300      	movs	r3, #0
 80099d2:	931e      	str	r3, [sp, #120]	; 0x78
 80099d4:	4ba4      	ldr	r3, [pc, #656]	; (8009c68 <_strtod_l+0x2a0>)
 80099d6:	9219      	str	r2, [sp, #100]	; 0x64
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	9307      	str	r3, [sp, #28]
 80099dc:	4604      	mov	r4, r0
 80099de:	4618      	mov	r0, r3
 80099e0:	4688      	mov	r8, r1
 80099e2:	f7f6 fc15 	bl	8000210 <strlen>
 80099e6:	f04f 0a00 	mov.w	sl, #0
 80099ea:	4605      	mov	r5, r0
 80099ec:	f04f 0b00 	mov.w	fp, #0
 80099f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80099f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099f6:	781a      	ldrb	r2, [r3, #0]
 80099f8:	2a2b      	cmp	r2, #43	; 0x2b
 80099fa:	d04c      	beq.n	8009a96 <_strtod_l+0xce>
 80099fc:	d839      	bhi.n	8009a72 <_strtod_l+0xaa>
 80099fe:	2a0d      	cmp	r2, #13
 8009a00:	d832      	bhi.n	8009a68 <_strtod_l+0xa0>
 8009a02:	2a08      	cmp	r2, #8
 8009a04:	d832      	bhi.n	8009a6c <_strtod_l+0xa4>
 8009a06:	2a00      	cmp	r2, #0
 8009a08:	d03c      	beq.n	8009a84 <_strtod_l+0xbc>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a0e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009a10:	7833      	ldrb	r3, [r6, #0]
 8009a12:	2b30      	cmp	r3, #48	; 0x30
 8009a14:	f040 80b4 	bne.w	8009b80 <_strtod_l+0x1b8>
 8009a18:	7873      	ldrb	r3, [r6, #1]
 8009a1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a1e:	2b58      	cmp	r3, #88	; 0x58
 8009a20:	d16c      	bne.n	8009afc <_strtod_l+0x134>
 8009a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	ab1e      	add	r3, sp, #120	; 0x78
 8009a28:	9702      	str	r7, [sp, #8]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	4a8f      	ldr	r2, [pc, #572]	; (8009c6c <_strtod_l+0x2a4>)
 8009a2e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009a30:	a91d      	add	r1, sp, #116	; 0x74
 8009a32:	4620      	mov	r0, r4
 8009a34:	f001 fcc0 	bl	800b3b8 <__gethex>
 8009a38:	f010 0707 	ands.w	r7, r0, #7
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	d005      	beq.n	8009a4c <_strtod_l+0x84>
 8009a40:	2f06      	cmp	r7, #6
 8009a42:	d12a      	bne.n	8009a9a <_strtod_l+0xd2>
 8009a44:	3601      	adds	r6, #1
 8009a46:	2300      	movs	r3, #0
 8009a48:	961d      	str	r6, [sp, #116]	; 0x74
 8009a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8009a4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f040 8596 	bne.w	800a580 <_strtod_l+0xbb8>
 8009a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a56:	b1db      	cbz	r3, 8009a90 <_strtod_l+0xc8>
 8009a58:	4652      	mov	r2, sl
 8009a5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a5e:	ec43 2b10 	vmov	d0, r2, r3
 8009a62:	b023      	add	sp, #140	; 0x8c
 8009a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a68:	2a20      	cmp	r2, #32
 8009a6a:	d1ce      	bne.n	8009a0a <_strtod_l+0x42>
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	931d      	str	r3, [sp, #116]	; 0x74
 8009a70:	e7c0      	b.n	80099f4 <_strtod_l+0x2c>
 8009a72:	2a2d      	cmp	r2, #45	; 0x2d
 8009a74:	d1c9      	bne.n	8009a0a <_strtod_l+0x42>
 8009a76:	2201      	movs	r2, #1
 8009a78:	920e      	str	r2, [sp, #56]	; 0x38
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	921d      	str	r2, [sp, #116]	; 0x74
 8009a7e:	785b      	ldrb	r3, [r3, #1]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1c4      	bne.n	8009a0e <_strtod_l+0x46>
 8009a84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a86:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f040 8576 	bne.w	800a57c <_strtod_l+0xbb4>
 8009a90:	4652      	mov	r2, sl
 8009a92:	465b      	mov	r3, fp
 8009a94:	e7e3      	b.n	8009a5e <_strtod_l+0x96>
 8009a96:	2200      	movs	r2, #0
 8009a98:	e7ee      	b.n	8009a78 <_strtod_l+0xb0>
 8009a9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a9c:	b13a      	cbz	r2, 8009aae <_strtod_l+0xe6>
 8009a9e:	2135      	movs	r1, #53	; 0x35
 8009aa0:	a820      	add	r0, sp, #128	; 0x80
 8009aa2:	f002 fc34 	bl	800c30e <__copybits>
 8009aa6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f001 fff9 	bl	800baa0 <_Bfree>
 8009aae:	3f01      	subs	r7, #1
 8009ab0:	2f05      	cmp	r7, #5
 8009ab2:	d807      	bhi.n	8009ac4 <_strtod_l+0xfc>
 8009ab4:	e8df f007 	tbb	[pc, r7]
 8009ab8:	1d180b0e 	.word	0x1d180b0e
 8009abc:	030e      	.short	0x030e
 8009abe:	f04f 0b00 	mov.w	fp, #0
 8009ac2:	46da      	mov	sl, fp
 8009ac4:	0728      	lsls	r0, r5, #28
 8009ac6:	d5c1      	bpl.n	8009a4c <_strtod_l+0x84>
 8009ac8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009acc:	e7be      	b.n	8009a4c <_strtod_l+0x84>
 8009ace:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009ad2:	e7f7      	b.n	8009ac4 <_strtod_l+0xfc>
 8009ad4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009ad8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009ade:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009ae2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ae6:	e7ed      	b.n	8009ac4 <_strtod_l+0xfc>
 8009ae8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009c70 <_strtod_l+0x2a8>
 8009aec:	f04f 0a00 	mov.w	sl, #0
 8009af0:	e7e8      	b.n	8009ac4 <_strtod_l+0xfc>
 8009af2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009af6:	f04f 3aff 	mov.w	sl, #4294967295
 8009afa:	e7e3      	b.n	8009ac4 <_strtod_l+0xfc>
 8009afc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	921d      	str	r2, [sp, #116]	; 0x74
 8009b02:	785b      	ldrb	r3, [r3, #1]
 8009b04:	2b30      	cmp	r3, #48	; 0x30
 8009b06:	d0f9      	beq.n	8009afc <_strtod_l+0x134>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d09f      	beq.n	8009a4c <_strtod_l+0x84>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f04f 0900 	mov.w	r9, #0
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b16:	930a      	str	r3, [sp, #40]	; 0x28
 8009b18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b1c:	464f      	mov	r7, r9
 8009b1e:	220a      	movs	r2, #10
 8009b20:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009b22:	7806      	ldrb	r6, [r0, #0]
 8009b24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009b28:	b2d9      	uxtb	r1, r3
 8009b2a:	2909      	cmp	r1, #9
 8009b2c:	d92a      	bls.n	8009b84 <_strtod_l+0x1bc>
 8009b2e:	9907      	ldr	r1, [sp, #28]
 8009b30:	462a      	mov	r2, r5
 8009b32:	f002 fe5d 	bl	800c7f0 <strncmp>
 8009b36:	b398      	cbz	r0, 8009ba0 <_strtod_l+0x1d8>
 8009b38:	2000      	movs	r0, #0
 8009b3a:	4633      	mov	r3, r6
 8009b3c:	463d      	mov	r5, r7
 8009b3e:	9007      	str	r0, [sp, #28]
 8009b40:	4602      	mov	r2, r0
 8009b42:	2b65      	cmp	r3, #101	; 0x65
 8009b44:	d001      	beq.n	8009b4a <_strtod_l+0x182>
 8009b46:	2b45      	cmp	r3, #69	; 0x45
 8009b48:	d118      	bne.n	8009b7c <_strtod_l+0x1b4>
 8009b4a:	b91d      	cbnz	r5, 8009b54 <_strtod_l+0x18c>
 8009b4c:	9b04      	ldr	r3, [sp, #16]
 8009b4e:	4303      	orrs	r3, r0
 8009b50:	d098      	beq.n	8009a84 <_strtod_l+0xbc>
 8009b52:	2500      	movs	r5, #0
 8009b54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009b58:	f108 0301 	add.w	r3, r8, #1
 8009b5c:	931d      	str	r3, [sp, #116]	; 0x74
 8009b5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009b62:	2b2b      	cmp	r3, #43	; 0x2b
 8009b64:	d075      	beq.n	8009c52 <_strtod_l+0x28a>
 8009b66:	2b2d      	cmp	r3, #45	; 0x2d
 8009b68:	d07b      	beq.n	8009c62 <_strtod_l+0x29a>
 8009b6a:	f04f 0c00 	mov.w	ip, #0
 8009b6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009b72:	2909      	cmp	r1, #9
 8009b74:	f240 8082 	bls.w	8009c7c <_strtod_l+0x2b4>
 8009b78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009b7c:	2600      	movs	r6, #0
 8009b7e:	e09d      	b.n	8009cbc <_strtod_l+0x2f4>
 8009b80:	2300      	movs	r3, #0
 8009b82:	e7c4      	b.n	8009b0e <_strtod_l+0x146>
 8009b84:	2f08      	cmp	r7, #8
 8009b86:	bfd8      	it	le
 8009b88:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009b8a:	f100 0001 	add.w	r0, r0, #1
 8009b8e:	bfda      	itte	le
 8009b90:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b94:	9309      	strle	r3, [sp, #36]	; 0x24
 8009b96:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009b9a:	3701      	adds	r7, #1
 8009b9c:	901d      	str	r0, [sp, #116]	; 0x74
 8009b9e:	e7bf      	b.n	8009b20 <_strtod_l+0x158>
 8009ba0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ba2:	195a      	adds	r2, r3, r5
 8009ba4:	921d      	str	r2, [sp, #116]	; 0x74
 8009ba6:	5d5b      	ldrb	r3, [r3, r5]
 8009ba8:	2f00      	cmp	r7, #0
 8009baa:	d037      	beq.n	8009c1c <_strtod_l+0x254>
 8009bac:	9007      	str	r0, [sp, #28]
 8009bae:	463d      	mov	r5, r7
 8009bb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009bb4:	2a09      	cmp	r2, #9
 8009bb6:	d912      	bls.n	8009bde <_strtod_l+0x216>
 8009bb8:	2201      	movs	r2, #1
 8009bba:	e7c2      	b.n	8009b42 <_strtod_l+0x17a>
 8009bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bbe:	1c5a      	adds	r2, r3, #1
 8009bc0:	921d      	str	r2, [sp, #116]	; 0x74
 8009bc2:	785b      	ldrb	r3, [r3, #1]
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	2b30      	cmp	r3, #48	; 0x30
 8009bc8:	d0f8      	beq.n	8009bbc <_strtod_l+0x1f4>
 8009bca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009bce:	2a08      	cmp	r2, #8
 8009bd0:	f200 84db 	bhi.w	800a58a <_strtod_l+0xbc2>
 8009bd4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009bd6:	9007      	str	r0, [sp, #28]
 8009bd8:	2000      	movs	r0, #0
 8009bda:	920a      	str	r2, [sp, #40]	; 0x28
 8009bdc:	4605      	mov	r5, r0
 8009bde:	3b30      	subs	r3, #48	; 0x30
 8009be0:	f100 0201 	add.w	r2, r0, #1
 8009be4:	d014      	beq.n	8009c10 <_strtod_l+0x248>
 8009be6:	9907      	ldr	r1, [sp, #28]
 8009be8:	4411      	add	r1, r2
 8009bea:	9107      	str	r1, [sp, #28]
 8009bec:	462a      	mov	r2, r5
 8009bee:	eb00 0e05 	add.w	lr, r0, r5
 8009bf2:	210a      	movs	r1, #10
 8009bf4:	4572      	cmp	r2, lr
 8009bf6:	d113      	bne.n	8009c20 <_strtod_l+0x258>
 8009bf8:	182a      	adds	r2, r5, r0
 8009bfa:	2a08      	cmp	r2, #8
 8009bfc:	f105 0501 	add.w	r5, r5, #1
 8009c00:	4405      	add	r5, r0
 8009c02:	dc1c      	bgt.n	8009c3e <_strtod_l+0x276>
 8009c04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c06:	220a      	movs	r2, #10
 8009c08:	fb02 3301 	mla	r3, r2, r1, r3
 8009c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c0e:	2200      	movs	r2, #0
 8009c10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c12:	1c59      	adds	r1, r3, #1
 8009c14:	911d      	str	r1, [sp, #116]	; 0x74
 8009c16:	785b      	ldrb	r3, [r3, #1]
 8009c18:	4610      	mov	r0, r2
 8009c1a:	e7c9      	b.n	8009bb0 <_strtod_l+0x1e8>
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	e7d2      	b.n	8009bc6 <_strtod_l+0x1fe>
 8009c20:	2a08      	cmp	r2, #8
 8009c22:	dc04      	bgt.n	8009c2e <_strtod_l+0x266>
 8009c24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009c26:	434e      	muls	r6, r1
 8009c28:	9609      	str	r6, [sp, #36]	; 0x24
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	e7e2      	b.n	8009bf4 <_strtod_l+0x22c>
 8009c2e:	f102 0c01 	add.w	ip, r2, #1
 8009c32:	f1bc 0f10 	cmp.w	ip, #16
 8009c36:	bfd8      	it	le
 8009c38:	fb01 f909 	mulle.w	r9, r1, r9
 8009c3c:	e7f5      	b.n	8009c2a <_strtod_l+0x262>
 8009c3e:	2d10      	cmp	r5, #16
 8009c40:	bfdc      	itt	le
 8009c42:	220a      	movle	r2, #10
 8009c44:	fb02 3909 	mlale	r9, r2, r9, r3
 8009c48:	e7e1      	b.n	8009c0e <_strtod_l+0x246>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9307      	str	r3, [sp, #28]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	e77c      	b.n	8009b4c <_strtod_l+0x184>
 8009c52:	f04f 0c00 	mov.w	ip, #0
 8009c56:	f108 0302 	add.w	r3, r8, #2
 8009c5a:	931d      	str	r3, [sp, #116]	; 0x74
 8009c5c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009c60:	e785      	b.n	8009b6e <_strtod_l+0x1a6>
 8009c62:	f04f 0c01 	mov.w	ip, #1
 8009c66:	e7f6      	b.n	8009c56 <_strtod_l+0x28e>
 8009c68:	0800d818 	.word	0x0800d818
 8009c6c:	0800d6c8 	.word	0x0800d6c8
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c76:	1c59      	adds	r1, r3, #1
 8009c78:	911d      	str	r1, [sp, #116]	; 0x74
 8009c7a:	785b      	ldrb	r3, [r3, #1]
 8009c7c:	2b30      	cmp	r3, #48	; 0x30
 8009c7e:	d0f9      	beq.n	8009c74 <_strtod_l+0x2ac>
 8009c80:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009c84:	2908      	cmp	r1, #8
 8009c86:	f63f af79 	bhi.w	8009b7c <_strtod_l+0x1b4>
 8009c8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009c8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c90:	9308      	str	r3, [sp, #32]
 8009c92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c94:	1c59      	adds	r1, r3, #1
 8009c96:	911d      	str	r1, [sp, #116]	; 0x74
 8009c98:	785b      	ldrb	r3, [r3, #1]
 8009c9a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009c9e:	2e09      	cmp	r6, #9
 8009ca0:	d937      	bls.n	8009d12 <_strtod_l+0x34a>
 8009ca2:	9e08      	ldr	r6, [sp, #32]
 8009ca4:	1b89      	subs	r1, r1, r6
 8009ca6:	2908      	cmp	r1, #8
 8009ca8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009cac:	dc02      	bgt.n	8009cb4 <_strtod_l+0x2ec>
 8009cae:	4576      	cmp	r6, lr
 8009cb0:	bfa8      	it	ge
 8009cb2:	4676      	movge	r6, lr
 8009cb4:	f1bc 0f00 	cmp.w	ip, #0
 8009cb8:	d000      	beq.n	8009cbc <_strtod_l+0x2f4>
 8009cba:	4276      	negs	r6, r6
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	d14f      	bne.n	8009d60 <_strtod_l+0x398>
 8009cc0:	9904      	ldr	r1, [sp, #16]
 8009cc2:	4301      	orrs	r1, r0
 8009cc4:	f47f aec2 	bne.w	8009a4c <_strtod_l+0x84>
 8009cc8:	2a00      	cmp	r2, #0
 8009cca:	f47f aedb 	bne.w	8009a84 <_strtod_l+0xbc>
 8009cce:	2b69      	cmp	r3, #105	; 0x69
 8009cd0:	d027      	beq.n	8009d22 <_strtod_l+0x35a>
 8009cd2:	dc24      	bgt.n	8009d1e <_strtod_l+0x356>
 8009cd4:	2b49      	cmp	r3, #73	; 0x49
 8009cd6:	d024      	beq.n	8009d22 <_strtod_l+0x35a>
 8009cd8:	2b4e      	cmp	r3, #78	; 0x4e
 8009cda:	f47f aed3 	bne.w	8009a84 <_strtod_l+0xbc>
 8009cde:	499e      	ldr	r1, [pc, #632]	; (8009f58 <_strtod_l+0x590>)
 8009ce0:	a81d      	add	r0, sp, #116	; 0x74
 8009ce2:	f001 fdc1 	bl	800b868 <__match>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f43f aecc 	beq.w	8009a84 <_strtod_l+0xbc>
 8009cec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	2b28      	cmp	r3, #40	; 0x28
 8009cf2:	d12d      	bne.n	8009d50 <_strtod_l+0x388>
 8009cf4:	4999      	ldr	r1, [pc, #612]	; (8009f5c <_strtod_l+0x594>)
 8009cf6:	aa20      	add	r2, sp, #128	; 0x80
 8009cf8:	a81d      	add	r0, sp, #116	; 0x74
 8009cfa:	f001 fdc9 	bl	800b890 <__hexnan>
 8009cfe:	2805      	cmp	r0, #5
 8009d00:	d126      	bne.n	8009d50 <_strtod_l+0x388>
 8009d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009d08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009d0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009d10:	e69c      	b.n	8009a4c <_strtod_l+0x84>
 8009d12:	210a      	movs	r1, #10
 8009d14:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009d18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009d1c:	e7b9      	b.n	8009c92 <_strtod_l+0x2ca>
 8009d1e:	2b6e      	cmp	r3, #110	; 0x6e
 8009d20:	e7db      	b.n	8009cda <_strtod_l+0x312>
 8009d22:	498f      	ldr	r1, [pc, #572]	; (8009f60 <_strtod_l+0x598>)
 8009d24:	a81d      	add	r0, sp, #116	; 0x74
 8009d26:	f001 fd9f 	bl	800b868 <__match>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f43f aeaa 	beq.w	8009a84 <_strtod_l+0xbc>
 8009d30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d32:	498c      	ldr	r1, [pc, #560]	; (8009f64 <_strtod_l+0x59c>)
 8009d34:	3b01      	subs	r3, #1
 8009d36:	a81d      	add	r0, sp, #116	; 0x74
 8009d38:	931d      	str	r3, [sp, #116]	; 0x74
 8009d3a:	f001 fd95 	bl	800b868 <__match>
 8009d3e:	b910      	cbnz	r0, 8009d46 <_strtod_l+0x37e>
 8009d40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d42:	3301      	adds	r3, #1
 8009d44:	931d      	str	r3, [sp, #116]	; 0x74
 8009d46:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009f74 <_strtod_l+0x5ac>
 8009d4a:	f04f 0a00 	mov.w	sl, #0
 8009d4e:	e67d      	b.n	8009a4c <_strtod_l+0x84>
 8009d50:	4885      	ldr	r0, [pc, #532]	; (8009f68 <_strtod_l+0x5a0>)
 8009d52:	f002 fd35 	bl	800c7c0 <nan>
 8009d56:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009d5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009d5e:	e675      	b.n	8009a4c <_strtod_l+0x84>
 8009d60:	9b07      	ldr	r3, [sp, #28]
 8009d62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d64:	1af3      	subs	r3, r6, r3
 8009d66:	2f00      	cmp	r7, #0
 8009d68:	bf08      	it	eq
 8009d6a:	462f      	moveq	r7, r5
 8009d6c:	2d10      	cmp	r5, #16
 8009d6e:	9308      	str	r3, [sp, #32]
 8009d70:	46a8      	mov	r8, r5
 8009d72:	bfa8      	it	ge
 8009d74:	f04f 0810 	movge.w	r8, #16
 8009d78:	f7f6 fbe4 	bl	8000544 <__aeabi_ui2d>
 8009d7c:	2d09      	cmp	r5, #9
 8009d7e:	4682      	mov	sl, r0
 8009d80:	468b      	mov	fp, r1
 8009d82:	dd13      	ble.n	8009dac <_strtod_l+0x3e4>
 8009d84:	4b79      	ldr	r3, [pc, #484]	; (8009f6c <_strtod_l+0x5a4>)
 8009d86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009d8e:	f7f6 fc53 	bl	8000638 <__aeabi_dmul>
 8009d92:	4682      	mov	sl, r0
 8009d94:	4648      	mov	r0, r9
 8009d96:	468b      	mov	fp, r1
 8009d98:	f7f6 fbd4 	bl	8000544 <__aeabi_ui2d>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4650      	mov	r0, sl
 8009da2:	4659      	mov	r1, fp
 8009da4:	f7f6 fa92 	bl	80002cc <__adddf3>
 8009da8:	4682      	mov	sl, r0
 8009daa:	468b      	mov	fp, r1
 8009dac:	2d0f      	cmp	r5, #15
 8009dae:	dc38      	bgt.n	8009e22 <_strtod_l+0x45a>
 8009db0:	9b08      	ldr	r3, [sp, #32]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f43f ae4a 	beq.w	8009a4c <_strtod_l+0x84>
 8009db8:	dd24      	ble.n	8009e04 <_strtod_l+0x43c>
 8009dba:	2b16      	cmp	r3, #22
 8009dbc:	dc0b      	bgt.n	8009dd6 <_strtod_l+0x40e>
 8009dbe:	4d6b      	ldr	r5, [pc, #428]	; (8009f6c <_strtod_l+0x5a4>)
 8009dc0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009dc4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009dc8:	4652      	mov	r2, sl
 8009dca:	465b      	mov	r3, fp
 8009dcc:	f7f6 fc34 	bl	8000638 <__aeabi_dmul>
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	468b      	mov	fp, r1
 8009dd4:	e63a      	b.n	8009a4c <_strtod_l+0x84>
 8009dd6:	9a08      	ldr	r2, [sp, #32]
 8009dd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	db20      	blt.n	8009e22 <_strtod_l+0x45a>
 8009de0:	4c62      	ldr	r4, [pc, #392]	; (8009f6c <_strtod_l+0x5a4>)
 8009de2:	f1c5 050f 	rsb	r5, r5, #15
 8009de6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009dea:	4652      	mov	r2, sl
 8009dec:	465b      	mov	r3, fp
 8009dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df2:	f7f6 fc21 	bl	8000638 <__aeabi_dmul>
 8009df6:	9b08      	ldr	r3, [sp, #32]
 8009df8:	1b5d      	subs	r5, r3, r5
 8009dfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009dfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e02:	e7e3      	b.n	8009dcc <_strtod_l+0x404>
 8009e04:	9b08      	ldr	r3, [sp, #32]
 8009e06:	3316      	adds	r3, #22
 8009e08:	db0b      	blt.n	8009e22 <_strtod_l+0x45a>
 8009e0a:	9b07      	ldr	r3, [sp, #28]
 8009e0c:	4a57      	ldr	r2, [pc, #348]	; (8009f6c <_strtod_l+0x5a4>)
 8009e0e:	1b9e      	subs	r6, r3, r6
 8009e10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009e14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e18:	4650      	mov	r0, sl
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	f7f6 fd36 	bl	800088c <__aeabi_ddiv>
 8009e20:	e7d6      	b.n	8009dd0 <_strtod_l+0x408>
 8009e22:	9b08      	ldr	r3, [sp, #32]
 8009e24:	eba5 0808 	sub.w	r8, r5, r8
 8009e28:	4498      	add	r8, r3
 8009e2a:	f1b8 0f00 	cmp.w	r8, #0
 8009e2e:	dd71      	ble.n	8009f14 <_strtod_l+0x54c>
 8009e30:	f018 030f 	ands.w	r3, r8, #15
 8009e34:	d00a      	beq.n	8009e4c <_strtod_l+0x484>
 8009e36:	494d      	ldr	r1, [pc, #308]	; (8009f6c <_strtod_l+0x5a4>)
 8009e38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e3c:	4652      	mov	r2, sl
 8009e3e:	465b      	mov	r3, fp
 8009e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e44:	f7f6 fbf8 	bl	8000638 <__aeabi_dmul>
 8009e48:	4682      	mov	sl, r0
 8009e4a:	468b      	mov	fp, r1
 8009e4c:	f038 080f 	bics.w	r8, r8, #15
 8009e50:	d04d      	beq.n	8009eee <_strtod_l+0x526>
 8009e52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009e56:	dd22      	ble.n	8009e9e <_strtod_l+0x4d6>
 8009e58:	2500      	movs	r5, #0
 8009e5a:	462e      	mov	r6, r5
 8009e5c:	9509      	str	r5, [sp, #36]	; 0x24
 8009e5e:	9507      	str	r5, [sp, #28]
 8009e60:	2322      	movs	r3, #34	; 0x22
 8009e62:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009f74 <_strtod_l+0x5ac>
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	f04f 0a00 	mov.w	sl, #0
 8009e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f43f adec 	beq.w	8009a4c <_strtod_l+0x84>
 8009e74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009e76:	4620      	mov	r0, r4
 8009e78:	f001 fe12 	bl	800baa0 <_Bfree>
 8009e7c:	9907      	ldr	r1, [sp, #28]
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f001 fe0e 	bl	800baa0 <_Bfree>
 8009e84:	4631      	mov	r1, r6
 8009e86:	4620      	mov	r0, r4
 8009e88:	f001 fe0a 	bl	800baa0 <_Bfree>
 8009e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f001 fe06 	bl	800baa0 <_Bfree>
 8009e94:	4629      	mov	r1, r5
 8009e96:	4620      	mov	r0, r4
 8009e98:	f001 fe02 	bl	800baa0 <_Bfree>
 8009e9c:	e5d6      	b.n	8009a4c <_strtod_l+0x84>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009ea4:	4650      	mov	r0, sl
 8009ea6:	4659      	mov	r1, fp
 8009ea8:	4699      	mov	r9, r3
 8009eaa:	f1b8 0f01 	cmp.w	r8, #1
 8009eae:	dc21      	bgt.n	8009ef4 <_strtod_l+0x52c>
 8009eb0:	b10b      	cbz	r3, 8009eb6 <_strtod_l+0x4ee>
 8009eb2:	4682      	mov	sl, r0
 8009eb4:	468b      	mov	fp, r1
 8009eb6:	4b2e      	ldr	r3, [pc, #184]	; (8009f70 <_strtod_l+0x5a8>)
 8009eb8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009ebc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009ec0:	4652      	mov	r2, sl
 8009ec2:	465b      	mov	r3, fp
 8009ec4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009ec8:	f7f6 fbb6 	bl	8000638 <__aeabi_dmul>
 8009ecc:	4b29      	ldr	r3, [pc, #164]	; (8009f74 <_strtod_l+0x5ac>)
 8009ece:	460a      	mov	r2, r1
 8009ed0:	400b      	ands	r3, r1
 8009ed2:	4929      	ldr	r1, [pc, #164]	; (8009f78 <_strtod_l+0x5b0>)
 8009ed4:	428b      	cmp	r3, r1
 8009ed6:	4682      	mov	sl, r0
 8009ed8:	d8be      	bhi.n	8009e58 <_strtod_l+0x490>
 8009eda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ede:	428b      	cmp	r3, r1
 8009ee0:	bf86      	itte	hi
 8009ee2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009f7c <_strtod_l+0x5b4>
 8009ee6:	f04f 3aff 	movhi.w	sl, #4294967295
 8009eea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9304      	str	r3, [sp, #16]
 8009ef2:	e081      	b.n	8009ff8 <_strtod_l+0x630>
 8009ef4:	f018 0f01 	tst.w	r8, #1
 8009ef8:	d007      	beq.n	8009f0a <_strtod_l+0x542>
 8009efa:	4b1d      	ldr	r3, [pc, #116]	; (8009f70 <_strtod_l+0x5a8>)
 8009efc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f7f6 fb98 	bl	8000638 <__aeabi_dmul>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f109 0901 	add.w	r9, r9, #1
 8009f0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f12:	e7ca      	b.n	8009eaa <_strtod_l+0x4e2>
 8009f14:	d0eb      	beq.n	8009eee <_strtod_l+0x526>
 8009f16:	f1c8 0800 	rsb	r8, r8, #0
 8009f1a:	f018 020f 	ands.w	r2, r8, #15
 8009f1e:	d00a      	beq.n	8009f36 <_strtod_l+0x56e>
 8009f20:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <_strtod_l+0x5a4>)
 8009f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f26:	4650      	mov	r0, sl
 8009f28:	4659      	mov	r1, fp
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	f7f6 fcad 	bl	800088c <__aeabi_ddiv>
 8009f32:	4682      	mov	sl, r0
 8009f34:	468b      	mov	fp, r1
 8009f36:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009f3a:	d0d8      	beq.n	8009eee <_strtod_l+0x526>
 8009f3c:	f1b8 0f1f 	cmp.w	r8, #31
 8009f40:	dd1e      	ble.n	8009f80 <_strtod_l+0x5b8>
 8009f42:	2500      	movs	r5, #0
 8009f44:	462e      	mov	r6, r5
 8009f46:	9509      	str	r5, [sp, #36]	; 0x24
 8009f48:	9507      	str	r5, [sp, #28]
 8009f4a:	2322      	movs	r3, #34	; 0x22
 8009f4c:	f04f 0a00 	mov.w	sl, #0
 8009f50:	f04f 0b00 	mov.w	fp, #0
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	e789      	b.n	8009e6c <_strtod_l+0x4a4>
 8009f58:	0800d6a1 	.word	0x0800d6a1
 8009f5c:	0800d6dc 	.word	0x0800d6dc
 8009f60:	0800d699 	.word	0x0800d699
 8009f64:	0800d71b 	.word	0x0800d71b
 8009f68:	0800d9d8 	.word	0x0800d9d8
 8009f6c:	0800d8b8 	.word	0x0800d8b8
 8009f70:	0800d890 	.word	0x0800d890
 8009f74:	7ff00000 	.word	0x7ff00000
 8009f78:	7ca00000 	.word	0x7ca00000
 8009f7c:	7fefffff 	.word	0x7fefffff
 8009f80:	f018 0310 	ands.w	r3, r8, #16
 8009f84:	bf18      	it	ne
 8009f86:	236a      	movne	r3, #106	; 0x6a
 8009f88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a340 <_strtod_l+0x978>
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	4650      	mov	r0, sl
 8009f90:	4659      	mov	r1, fp
 8009f92:	2300      	movs	r3, #0
 8009f94:	f018 0f01 	tst.w	r8, #1
 8009f98:	d004      	beq.n	8009fa4 <_strtod_l+0x5dc>
 8009f9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f9e:	f7f6 fb4b 	bl	8000638 <__aeabi_dmul>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009fa8:	f109 0908 	add.w	r9, r9, #8
 8009fac:	d1f2      	bne.n	8009f94 <_strtod_l+0x5cc>
 8009fae:	b10b      	cbz	r3, 8009fb4 <_strtod_l+0x5ec>
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	468b      	mov	fp, r1
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	b1bb      	cbz	r3, 8009fe8 <_strtod_l+0x620>
 8009fb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009fbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	4659      	mov	r1, fp
 8009fc4:	dd10      	ble.n	8009fe8 <_strtod_l+0x620>
 8009fc6:	2b1f      	cmp	r3, #31
 8009fc8:	f340 8128 	ble.w	800a21c <_strtod_l+0x854>
 8009fcc:	2b34      	cmp	r3, #52	; 0x34
 8009fce:	bfde      	ittt	le
 8009fd0:	3b20      	suble	r3, #32
 8009fd2:	f04f 32ff 	movle.w	r2, #4294967295
 8009fd6:	fa02 f303 	lslle.w	r3, r2, r3
 8009fda:	f04f 0a00 	mov.w	sl, #0
 8009fde:	bfcc      	ite	gt
 8009fe0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009fe4:	ea03 0b01 	andle.w	fp, r3, r1
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2300      	movs	r3, #0
 8009fec:	4650      	mov	r0, sl
 8009fee:	4659      	mov	r1, fp
 8009ff0:	f7f6 fd8a 	bl	8000b08 <__aeabi_dcmpeq>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d1a4      	bne.n	8009f42 <_strtod_l+0x57a>
 8009ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ffe:	462b      	mov	r3, r5
 800a000:	463a      	mov	r2, r7
 800a002:	4620      	mov	r0, r4
 800a004:	f001 fdb8 	bl	800bb78 <__s2b>
 800a008:	9009      	str	r0, [sp, #36]	; 0x24
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f43f af24 	beq.w	8009e58 <_strtod_l+0x490>
 800a010:	9b07      	ldr	r3, [sp, #28]
 800a012:	1b9e      	subs	r6, r3, r6
 800a014:	9b08      	ldr	r3, [sp, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	bfb4      	ite	lt
 800a01a:	4633      	movlt	r3, r6
 800a01c:	2300      	movge	r3, #0
 800a01e:	9310      	str	r3, [sp, #64]	; 0x40
 800a020:	9b08      	ldr	r3, [sp, #32]
 800a022:	2500      	movs	r5, #0
 800a024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a028:	9318      	str	r3, [sp, #96]	; 0x60
 800a02a:	462e      	mov	r6, r5
 800a02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02e:	4620      	mov	r0, r4
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	f001 fcf5 	bl	800ba20 <_Balloc>
 800a036:	9007      	str	r0, [sp, #28]
 800a038:	2800      	cmp	r0, #0
 800a03a:	f43f af11 	beq.w	8009e60 <_strtod_l+0x498>
 800a03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a040:	691a      	ldr	r2, [r3, #16]
 800a042:	3202      	adds	r2, #2
 800a044:	f103 010c 	add.w	r1, r3, #12
 800a048:	0092      	lsls	r2, r2, #2
 800a04a:	300c      	adds	r0, #12
 800a04c:	f001 fcda 	bl	800ba04 <memcpy>
 800a050:	ec4b ab10 	vmov	d0, sl, fp
 800a054:	aa20      	add	r2, sp, #128	; 0x80
 800a056:	a91f      	add	r1, sp, #124	; 0x7c
 800a058:	4620      	mov	r0, r4
 800a05a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a05e:	f002 f8c7 	bl	800c1f0 <__d2b>
 800a062:	901e      	str	r0, [sp, #120]	; 0x78
 800a064:	2800      	cmp	r0, #0
 800a066:	f43f aefb 	beq.w	8009e60 <_strtod_l+0x498>
 800a06a:	2101      	movs	r1, #1
 800a06c:	4620      	mov	r0, r4
 800a06e:	f001 fe1d 	bl	800bcac <__i2b>
 800a072:	4606      	mov	r6, r0
 800a074:	2800      	cmp	r0, #0
 800a076:	f43f aef3 	beq.w	8009e60 <_strtod_l+0x498>
 800a07a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a07c:	9904      	ldr	r1, [sp, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	bfab      	itete	ge
 800a082:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a084:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a086:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a088:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a08c:	bfac      	ite	ge
 800a08e:	eb03 0902 	addge.w	r9, r3, r2
 800a092:	1ad7      	sublt	r7, r2, r3
 800a094:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a096:	eba3 0801 	sub.w	r8, r3, r1
 800a09a:	4490      	add	r8, r2
 800a09c:	4ba3      	ldr	r3, [pc, #652]	; (800a32c <_strtod_l+0x964>)
 800a09e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0a2:	4598      	cmp	r8, r3
 800a0a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a0a8:	f280 80cc 	bge.w	800a244 <_strtod_l+0x87c>
 800a0ac:	eba3 0308 	sub.w	r3, r3, r8
 800a0b0:	2b1f      	cmp	r3, #31
 800a0b2:	eba2 0203 	sub.w	r2, r2, r3
 800a0b6:	f04f 0101 	mov.w	r1, #1
 800a0ba:	f300 80b6 	bgt.w	800a22a <_strtod_l+0x862>
 800a0be:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c2:	9311      	str	r3, [sp, #68]	; 0x44
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	930c      	str	r3, [sp, #48]	; 0x30
 800a0c8:	eb09 0802 	add.w	r8, r9, r2
 800a0cc:	9b04      	ldr	r3, [sp, #16]
 800a0ce:	45c1      	cmp	r9, r8
 800a0d0:	4417      	add	r7, r2
 800a0d2:	441f      	add	r7, r3
 800a0d4:	464b      	mov	r3, r9
 800a0d6:	bfa8      	it	ge
 800a0d8:	4643      	movge	r3, r8
 800a0da:	42bb      	cmp	r3, r7
 800a0dc:	bfa8      	it	ge
 800a0de:	463b      	movge	r3, r7
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfc2      	ittt	gt
 800a0e4:	eba8 0803 	subgt.w	r8, r8, r3
 800a0e8:	1aff      	subgt	r7, r7, r3
 800a0ea:	eba9 0903 	subgt.w	r9, r9, r3
 800a0ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dd17      	ble.n	800a124 <_strtod_l+0x75c>
 800a0f4:	4631      	mov	r1, r6
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f001 fe93 	bl	800be24 <__pow5mult>
 800a0fe:	4606      	mov	r6, r0
 800a100:	2800      	cmp	r0, #0
 800a102:	f43f aead 	beq.w	8009e60 <_strtod_l+0x498>
 800a106:	4601      	mov	r1, r0
 800a108:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a10a:	4620      	mov	r0, r4
 800a10c:	f001 fde4 	bl	800bcd8 <__multiply>
 800a110:	900f      	str	r0, [sp, #60]	; 0x3c
 800a112:	2800      	cmp	r0, #0
 800a114:	f43f aea4 	beq.w	8009e60 <_strtod_l+0x498>
 800a118:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a11a:	4620      	mov	r0, r4
 800a11c:	f001 fcc0 	bl	800baa0 <_Bfree>
 800a120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a122:	931e      	str	r3, [sp, #120]	; 0x78
 800a124:	f1b8 0f00 	cmp.w	r8, #0
 800a128:	f300 8091 	bgt.w	800a24e <_strtod_l+0x886>
 800a12c:	9b08      	ldr	r3, [sp, #32]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	dd08      	ble.n	800a144 <_strtod_l+0x77c>
 800a132:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a134:	9907      	ldr	r1, [sp, #28]
 800a136:	4620      	mov	r0, r4
 800a138:	f001 fe74 	bl	800be24 <__pow5mult>
 800a13c:	9007      	str	r0, [sp, #28]
 800a13e:	2800      	cmp	r0, #0
 800a140:	f43f ae8e 	beq.w	8009e60 <_strtod_l+0x498>
 800a144:	2f00      	cmp	r7, #0
 800a146:	dd08      	ble.n	800a15a <_strtod_l+0x792>
 800a148:	9907      	ldr	r1, [sp, #28]
 800a14a:	463a      	mov	r2, r7
 800a14c:	4620      	mov	r0, r4
 800a14e:	f001 fec3 	bl	800bed8 <__lshift>
 800a152:	9007      	str	r0, [sp, #28]
 800a154:	2800      	cmp	r0, #0
 800a156:	f43f ae83 	beq.w	8009e60 <_strtod_l+0x498>
 800a15a:	f1b9 0f00 	cmp.w	r9, #0
 800a15e:	dd08      	ble.n	800a172 <_strtod_l+0x7aa>
 800a160:	4631      	mov	r1, r6
 800a162:	464a      	mov	r2, r9
 800a164:	4620      	mov	r0, r4
 800a166:	f001 feb7 	bl	800bed8 <__lshift>
 800a16a:	4606      	mov	r6, r0
 800a16c:	2800      	cmp	r0, #0
 800a16e:	f43f ae77 	beq.w	8009e60 <_strtod_l+0x498>
 800a172:	9a07      	ldr	r2, [sp, #28]
 800a174:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a176:	4620      	mov	r0, r4
 800a178:	f001 ff36 	bl	800bfe8 <__mdiff>
 800a17c:	4605      	mov	r5, r0
 800a17e:	2800      	cmp	r0, #0
 800a180:	f43f ae6e 	beq.w	8009e60 <_strtod_l+0x498>
 800a184:	68c3      	ldr	r3, [r0, #12]
 800a186:	930f      	str	r3, [sp, #60]	; 0x3c
 800a188:	2300      	movs	r3, #0
 800a18a:	60c3      	str	r3, [r0, #12]
 800a18c:	4631      	mov	r1, r6
 800a18e:	f001 ff0f 	bl	800bfb0 <__mcmp>
 800a192:	2800      	cmp	r0, #0
 800a194:	da65      	bge.n	800a262 <_strtod_l+0x89a>
 800a196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a198:	ea53 030a 	orrs.w	r3, r3, sl
 800a19c:	f040 8087 	bne.w	800a2ae <_strtod_l+0x8e6>
 800a1a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f040 8082 	bne.w	800a2ae <_strtod_l+0x8e6>
 800a1aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1ae:	0d1b      	lsrs	r3, r3, #20
 800a1b0:	051b      	lsls	r3, r3, #20
 800a1b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a1b6:	d97a      	bls.n	800a2ae <_strtod_l+0x8e6>
 800a1b8:	696b      	ldr	r3, [r5, #20]
 800a1ba:	b913      	cbnz	r3, 800a1c2 <_strtod_l+0x7fa>
 800a1bc:	692b      	ldr	r3, [r5, #16]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	dd75      	ble.n	800a2ae <_strtod_l+0x8e6>
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f001 fe86 	bl	800bed8 <__lshift>
 800a1cc:	4631      	mov	r1, r6
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	f001 feee 	bl	800bfb0 <__mcmp>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	dd6a      	ble.n	800a2ae <_strtod_l+0x8e6>
 800a1d8:	9904      	ldr	r1, [sp, #16]
 800a1da:	4a55      	ldr	r2, [pc, #340]	; (800a330 <_strtod_l+0x968>)
 800a1dc:	465b      	mov	r3, fp
 800a1de:	2900      	cmp	r1, #0
 800a1e0:	f000 8085 	beq.w	800a2ee <_strtod_l+0x926>
 800a1e4:	ea02 010b 	and.w	r1, r2, fp
 800a1e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a1ec:	dc7f      	bgt.n	800a2ee <_strtod_l+0x926>
 800a1ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a1f2:	f77f aeaa 	ble.w	8009f4a <_strtod_l+0x582>
 800a1f6:	4a4f      	ldr	r2, [pc, #316]	; (800a334 <_strtod_l+0x96c>)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a1fe:	4650      	mov	r0, sl
 800a200:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a204:	4659      	mov	r1, fp
 800a206:	f7f6 fa17 	bl	8000638 <__aeabi_dmul>
 800a20a:	460b      	mov	r3, r1
 800a20c:	4303      	orrs	r3, r0
 800a20e:	bf08      	it	eq
 800a210:	2322      	moveq	r3, #34	; 0x22
 800a212:	4682      	mov	sl, r0
 800a214:	468b      	mov	fp, r1
 800a216:	bf08      	it	eq
 800a218:	6023      	streq	r3, [r4, #0]
 800a21a:	e62b      	b.n	8009e74 <_strtod_l+0x4ac>
 800a21c:	f04f 32ff 	mov.w	r2, #4294967295
 800a220:	fa02 f303 	lsl.w	r3, r2, r3
 800a224:	ea03 0a0a 	and.w	sl, r3, sl
 800a228:	e6de      	b.n	8009fe8 <_strtod_l+0x620>
 800a22a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a22e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a232:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a236:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a23a:	fa01 f308 	lsl.w	r3, r1, r8
 800a23e:	930c      	str	r3, [sp, #48]	; 0x30
 800a240:	9111      	str	r1, [sp, #68]	; 0x44
 800a242:	e741      	b.n	800a0c8 <_strtod_l+0x700>
 800a244:	2300      	movs	r3, #0
 800a246:	930c      	str	r3, [sp, #48]	; 0x30
 800a248:	2301      	movs	r3, #1
 800a24a:	9311      	str	r3, [sp, #68]	; 0x44
 800a24c:	e73c      	b.n	800a0c8 <_strtod_l+0x700>
 800a24e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a250:	4642      	mov	r2, r8
 800a252:	4620      	mov	r0, r4
 800a254:	f001 fe40 	bl	800bed8 <__lshift>
 800a258:	901e      	str	r0, [sp, #120]	; 0x78
 800a25a:	2800      	cmp	r0, #0
 800a25c:	f47f af66 	bne.w	800a12c <_strtod_l+0x764>
 800a260:	e5fe      	b.n	8009e60 <_strtod_l+0x498>
 800a262:	465f      	mov	r7, fp
 800a264:	d16e      	bne.n	800a344 <_strtod_l+0x97c>
 800a266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a268:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a26c:	b342      	cbz	r2, 800a2c0 <_strtod_l+0x8f8>
 800a26e:	4a32      	ldr	r2, [pc, #200]	; (800a338 <_strtod_l+0x970>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d128      	bne.n	800a2c6 <_strtod_l+0x8fe>
 800a274:	9b04      	ldr	r3, [sp, #16]
 800a276:	4650      	mov	r0, sl
 800a278:	b1eb      	cbz	r3, 800a2b6 <_strtod_l+0x8ee>
 800a27a:	4a2d      	ldr	r2, [pc, #180]	; (800a330 <_strtod_l+0x968>)
 800a27c:	403a      	ands	r2, r7
 800a27e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a282:	f04f 31ff 	mov.w	r1, #4294967295
 800a286:	d819      	bhi.n	800a2bc <_strtod_l+0x8f4>
 800a288:	0d12      	lsrs	r2, r2, #20
 800a28a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a28e:	fa01 f303 	lsl.w	r3, r1, r3
 800a292:	4298      	cmp	r0, r3
 800a294:	d117      	bne.n	800a2c6 <_strtod_l+0x8fe>
 800a296:	4b29      	ldr	r3, [pc, #164]	; (800a33c <_strtod_l+0x974>)
 800a298:	429f      	cmp	r7, r3
 800a29a:	d102      	bne.n	800a2a2 <_strtod_l+0x8da>
 800a29c:	3001      	adds	r0, #1
 800a29e:	f43f addf 	beq.w	8009e60 <_strtod_l+0x498>
 800a2a2:	4b23      	ldr	r3, [pc, #140]	; (800a330 <_strtod_l+0x968>)
 800a2a4:	403b      	ands	r3, r7
 800a2a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a2aa:	f04f 0a00 	mov.w	sl, #0
 800a2ae:	9b04      	ldr	r3, [sp, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1a0      	bne.n	800a1f6 <_strtod_l+0x82e>
 800a2b4:	e5de      	b.n	8009e74 <_strtod_l+0x4ac>
 800a2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ba:	e7ea      	b.n	800a292 <_strtod_l+0x8ca>
 800a2bc:	460b      	mov	r3, r1
 800a2be:	e7e8      	b.n	800a292 <_strtod_l+0x8ca>
 800a2c0:	ea53 030a 	orrs.w	r3, r3, sl
 800a2c4:	d088      	beq.n	800a1d8 <_strtod_l+0x810>
 800a2c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2c8:	b1db      	cbz	r3, 800a302 <_strtod_l+0x93a>
 800a2ca:	423b      	tst	r3, r7
 800a2cc:	d0ef      	beq.n	800a2ae <_strtod_l+0x8e6>
 800a2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2d0:	9a04      	ldr	r2, [sp, #16]
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	4659      	mov	r1, fp
 800a2d6:	b1c3      	cbz	r3, 800a30a <_strtod_l+0x942>
 800a2d8:	f7ff fb5a 	bl	8009990 <sulp>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2e4:	f7f5 fff2 	bl	80002cc <__adddf3>
 800a2e8:	4682      	mov	sl, r0
 800a2ea:	468b      	mov	fp, r1
 800a2ec:	e7df      	b.n	800a2ae <_strtod_l+0x8e6>
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a2f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a2f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a2fc:	f04f 3aff 	mov.w	sl, #4294967295
 800a300:	e7d5      	b.n	800a2ae <_strtod_l+0x8e6>
 800a302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a304:	ea13 0f0a 	tst.w	r3, sl
 800a308:	e7e0      	b.n	800a2cc <_strtod_l+0x904>
 800a30a:	f7ff fb41 	bl	8009990 <sulp>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a316:	f7f5 ffd7 	bl	80002c8 <__aeabi_dsub>
 800a31a:	2200      	movs	r2, #0
 800a31c:	2300      	movs	r3, #0
 800a31e:	4682      	mov	sl, r0
 800a320:	468b      	mov	fp, r1
 800a322:	f7f6 fbf1 	bl	8000b08 <__aeabi_dcmpeq>
 800a326:	2800      	cmp	r0, #0
 800a328:	d0c1      	beq.n	800a2ae <_strtod_l+0x8e6>
 800a32a:	e60e      	b.n	8009f4a <_strtod_l+0x582>
 800a32c:	fffffc02 	.word	0xfffffc02
 800a330:	7ff00000 	.word	0x7ff00000
 800a334:	39500000 	.word	0x39500000
 800a338:	000fffff 	.word	0x000fffff
 800a33c:	7fefffff 	.word	0x7fefffff
 800a340:	0800d6f0 	.word	0x0800d6f0
 800a344:	4631      	mov	r1, r6
 800a346:	4628      	mov	r0, r5
 800a348:	f001 ffae 	bl	800c2a8 <__ratio>
 800a34c:	ec59 8b10 	vmov	r8, r9, d0
 800a350:	ee10 0a10 	vmov	r0, s0
 800a354:	2200      	movs	r2, #0
 800a356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a35a:	4649      	mov	r1, r9
 800a35c:	f7f6 fbe8 	bl	8000b30 <__aeabi_dcmple>
 800a360:	2800      	cmp	r0, #0
 800a362:	d07c      	beq.n	800a45e <_strtod_l+0xa96>
 800a364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d04c      	beq.n	800a404 <_strtod_l+0xa3c>
 800a36a:	4b95      	ldr	r3, [pc, #596]	; (800a5c0 <_strtod_l+0xbf8>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a372:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a5c0 <_strtod_l+0xbf8>
 800a376:	f04f 0800 	mov.w	r8, #0
 800a37a:	4b92      	ldr	r3, [pc, #584]	; (800a5c4 <_strtod_l+0xbfc>)
 800a37c:	403b      	ands	r3, r7
 800a37e:	9311      	str	r3, [sp, #68]	; 0x44
 800a380:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a382:	4b91      	ldr	r3, [pc, #580]	; (800a5c8 <_strtod_l+0xc00>)
 800a384:	429a      	cmp	r2, r3
 800a386:	f040 80b2 	bne.w	800a4ee <_strtod_l+0xb26>
 800a38a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a38e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a392:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a396:	ec4b ab10 	vmov	d0, sl, fp
 800a39a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a39e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a3a2:	f001 fea9 	bl	800c0f8 <__ulp>
 800a3a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3aa:	ec53 2b10 	vmov	r2, r3, d0
 800a3ae:	f7f6 f943 	bl	8000638 <__aeabi_dmul>
 800a3b2:	4652      	mov	r2, sl
 800a3b4:	465b      	mov	r3, fp
 800a3b6:	f7f5 ff89 	bl	80002cc <__adddf3>
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4981      	ldr	r1, [pc, #516]	; (800a5c4 <_strtod_l+0xbfc>)
 800a3be:	4a83      	ldr	r2, [pc, #524]	; (800a5cc <_strtod_l+0xc04>)
 800a3c0:	4019      	ands	r1, r3
 800a3c2:	4291      	cmp	r1, r2
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	d95e      	bls.n	800a486 <_strtod_l+0xabe>
 800a3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d103      	bne.n	800a3da <_strtod_l+0xa12>
 800a3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	f43f ad43 	beq.w	8009e60 <_strtod_l+0x498>
 800a3da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a5d8 <_strtod_l+0xc10>
 800a3de:	f04f 3aff 	mov.w	sl, #4294967295
 800a3e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f001 fb5b 	bl	800baa0 <_Bfree>
 800a3ea:	9907      	ldr	r1, [sp, #28]
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f001 fb57 	bl	800baa0 <_Bfree>
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f001 fb53 	bl	800baa0 <_Bfree>
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f001 fb4f 	bl	800baa0 <_Bfree>
 800a402:	e613      	b.n	800a02c <_strtod_l+0x664>
 800a404:	f1ba 0f00 	cmp.w	sl, #0
 800a408:	d11b      	bne.n	800a442 <_strtod_l+0xa7a>
 800a40a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a40e:	b9f3      	cbnz	r3, 800a44e <_strtod_l+0xa86>
 800a410:	4b6b      	ldr	r3, [pc, #428]	; (800a5c0 <_strtod_l+0xbf8>)
 800a412:	2200      	movs	r2, #0
 800a414:	4640      	mov	r0, r8
 800a416:	4649      	mov	r1, r9
 800a418:	f7f6 fb80 	bl	8000b1c <__aeabi_dcmplt>
 800a41c:	b9d0      	cbnz	r0, 800a454 <_strtod_l+0xa8c>
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	4b6b      	ldr	r3, [pc, #428]	; (800a5d0 <_strtod_l+0xc08>)
 800a424:	2200      	movs	r2, #0
 800a426:	f7f6 f907 	bl	8000638 <__aeabi_dmul>
 800a42a:	4680      	mov	r8, r0
 800a42c:	4689      	mov	r9, r1
 800a42e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a432:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a436:	931b      	str	r3, [sp, #108]	; 0x6c
 800a438:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a43c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a440:	e79b      	b.n	800a37a <_strtod_l+0x9b2>
 800a442:	f1ba 0f01 	cmp.w	sl, #1
 800a446:	d102      	bne.n	800a44e <_strtod_l+0xa86>
 800a448:	2f00      	cmp	r7, #0
 800a44a:	f43f ad7e 	beq.w	8009f4a <_strtod_l+0x582>
 800a44e:	4b61      	ldr	r3, [pc, #388]	; (800a5d4 <_strtod_l+0xc0c>)
 800a450:	2200      	movs	r2, #0
 800a452:	e78c      	b.n	800a36e <_strtod_l+0x9a6>
 800a454:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a5d0 <_strtod_l+0xc08>
 800a458:	f04f 0800 	mov.w	r8, #0
 800a45c:	e7e7      	b.n	800a42e <_strtod_l+0xa66>
 800a45e:	4b5c      	ldr	r3, [pc, #368]	; (800a5d0 <_strtod_l+0xc08>)
 800a460:	4640      	mov	r0, r8
 800a462:	4649      	mov	r1, r9
 800a464:	2200      	movs	r2, #0
 800a466:	f7f6 f8e7 	bl	8000638 <__aeabi_dmul>
 800a46a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a46c:	4680      	mov	r8, r0
 800a46e:	4689      	mov	r9, r1
 800a470:	b933      	cbnz	r3, 800a480 <_strtod_l+0xab8>
 800a472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a476:	9012      	str	r0, [sp, #72]	; 0x48
 800a478:	9313      	str	r3, [sp, #76]	; 0x4c
 800a47a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a47e:	e7dd      	b.n	800a43c <_strtod_l+0xa74>
 800a480:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a484:	e7f9      	b.n	800a47a <_strtod_l+0xab2>
 800a486:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a48a:	9b04      	ldr	r3, [sp, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1a8      	bne.n	800a3e2 <_strtod_l+0xa1a>
 800a490:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a494:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a496:	0d1b      	lsrs	r3, r3, #20
 800a498:	051b      	lsls	r3, r3, #20
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d1a1      	bne.n	800a3e2 <_strtod_l+0xa1a>
 800a49e:	4640      	mov	r0, r8
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	f7f6 fc79 	bl	8000d98 <__aeabi_d2lz>
 800a4a6:	f7f6 f899 	bl	80005dc <__aeabi_l2d>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	4649      	mov	r1, r9
 800a4b2:	f7f5 ff09 	bl	80002c8 <__aeabi_dsub>
 800a4b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4bc:	ea43 030a 	orr.w	r3, r3, sl
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	4689      	mov	r9, r1
 800a4c6:	d053      	beq.n	800a570 <_strtod_l+0xba8>
 800a4c8:	a335      	add	r3, pc, #212	; (adr r3, 800a5a0 <_strtod_l+0xbd8>)
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	f7f6 fb25 	bl	8000b1c <__aeabi_dcmplt>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	f47f acce 	bne.w	8009e74 <_strtod_l+0x4ac>
 800a4d8:	a333      	add	r3, pc, #204	; (adr r3, 800a5a8 <_strtod_l+0xbe0>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	4640      	mov	r0, r8
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	f7f6 fb39 	bl	8000b58 <__aeabi_dcmpgt>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f43f af7b 	beq.w	800a3e2 <_strtod_l+0xa1a>
 800a4ec:	e4c2      	b.n	8009e74 <_strtod_l+0x4ac>
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	b333      	cbz	r3, 800a540 <_strtod_l+0xb78>
 800a4f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a4f8:	d822      	bhi.n	800a540 <_strtod_l+0xb78>
 800a4fa:	a32d      	add	r3, pc, #180	; (adr r3, 800a5b0 <_strtod_l+0xbe8>)
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	4640      	mov	r0, r8
 800a502:	4649      	mov	r1, r9
 800a504:	f7f6 fb14 	bl	8000b30 <__aeabi_dcmple>
 800a508:	b1a0      	cbz	r0, 800a534 <_strtod_l+0xb6c>
 800a50a:	4649      	mov	r1, r9
 800a50c:	4640      	mov	r0, r8
 800a50e:	f7f6 fb6b 	bl	8000be8 <__aeabi_d2uiz>
 800a512:	2801      	cmp	r0, #1
 800a514:	bf38      	it	cc
 800a516:	2001      	movcc	r0, #1
 800a518:	f7f6 f814 	bl	8000544 <__aeabi_ui2d>
 800a51c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a51e:	4680      	mov	r8, r0
 800a520:	4689      	mov	r9, r1
 800a522:	bb13      	cbnz	r3, 800a56a <_strtod_l+0xba2>
 800a524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a528:	9014      	str	r0, [sp, #80]	; 0x50
 800a52a:	9315      	str	r3, [sp, #84]	; 0x54
 800a52c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a530:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a536:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a538:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a53c:	1a9b      	subs	r3, r3, r2
 800a53e:	930d      	str	r3, [sp, #52]	; 0x34
 800a540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a544:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a548:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a54c:	f001 fdd4 	bl	800c0f8 <__ulp>
 800a550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a554:	ec53 2b10 	vmov	r2, r3, d0
 800a558:	f7f6 f86e 	bl	8000638 <__aeabi_dmul>
 800a55c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a560:	f7f5 feb4 	bl	80002cc <__adddf3>
 800a564:	4682      	mov	sl, r0
 800a566:	468b      	mov	fp, r1
 800a568:	e78f      	b.n	800a48a <_strtod_l+0xac2>
 800a56a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a56e:	e7dd      	b.n	800a52c <_strtod_l+0xb64>
 800a570:	a311      	add	r3, pc, #68	; (adr r3, 800a5b8 <_strtod_l+0xbf0>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f7f6 fad1 	bl	8000b1c <__aeabi_dcmplt>
 800a57a:	e7b4      	b.n	800a4e6 <_strtod_l+0xb1e>
 800a57c:	2300      	movs	r3, #0
 800a57e:	930e      	str	r3, [sp, #56]	; 0x38
 800a580:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a582:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a584:	6013      	str	r3, [r2, #0]
 800a586:	f7ff ba65 	b.w	8009a54 <_strtod_l+0x8c>
 800a58a:	2b65      	cmp	r3, #101	; 0x65
 800a58c:	f43f ab5d 	beq.w	8009c4a <_strtod_l+0x282>
 800a590:	2b45      	cmp	r3, #69	; 0x45
 800a592:	f43f ab5a 	beq.w	8009c4a <_strtod_l+0x282>
 800a596:	2201      	movs	r2, #1
 800a598:	f7ff bb92 	b.w	8009cc0 <_strtod_l+0x2f8>
 800a59c:	f3af 8000 	nop.w
 800a5a0:	94a03595 	.word	0x94a03595
 800a5a4:	3fdfffff 	.word	0x3fdfffff
 800a5a8:	35afe535 	.word	0x35afe535
 800a5ac:	3fe00000 	.word	0x3fe00000
 800a5b0:	ffc00000 	.word	0xffc00000
 800a5b4:	41dfffff 	.word	0x41dfffff
 800a5b8:	94a03595 	.word	0x94a03595
 800a5bc:	3fcfffff 	.word	0x3fcfffff
 800a5c0:	3ff00000 	.word	0x3ff00000
 800a5c4:	7ff00000 	.word	0x7ff00000
 800a5c8:	7fe00000 	.word	0x7fe00000
 800a5cc:	7c9fffff 	.word	0x7c9fffff
 800a5d0:	3fe00000 	.word	0x3fe00000
 800a5d4:	bff00000 	.word	0xbff00000
 800a5d8:	7fefffff 	.word	0x7fefffff

0800a5dc <strtod>:
 800a5dc:	460a      	mov	r2, r1
 800a5de:	4601      	mov	r1, r0
 800a5e0:	4802      	ldr	r0, [pc, #8]	; (800a5ec <strtod+0x10>)
 800a5e2:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <strtod+0x14>)
 800a5e4:	6800      	ldr	r0, [r0, #0]
 800a5e6:	f7ff b9ef 	b.w	80099c8 <_strtod_l>
 800a5ea:	bf00      	nop
 800a5ec:	20000034 	.word	0x20000034
 800a5f0:	2000009c 	.word	0x2000009c

0800a5f4 <quorem>:
 800a5f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	6903      	ldr	r3, [r0, #16]
 800a5fa:	690c      	ldr	r4, [r1, #16]
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	4607      	mov	r7, r0
 800a600:	f2c0 8081 	blt.w	800a706 <quorem+0x112>
 800a604:	3c01      	subs	r4, #1
 800a606:	f101 0814 	add.w	r8, r1, #20
 800a60a:	f100 0514 	add.w	r5, r0, #20
 800a60e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a612:	9301      	str	r3, [sp, #4]
 800a614:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a61c:	3301      	adds	r3, #1
 800a61e:	429a      	cmp	r2, r3
 800a620:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a624:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a628:	fbb2 f6f3 	udiv	r6, r2, r3
 800a62c:	d331      	bcc.n	800a692 <quorem+0x9e>
 800a62e:	f04f 0e00 	mov.w	lr, #0
 800a632:	4640      	mov	r0, r8
 800a634:	46ac      	mov	ip, r5
 800a636:	46f2      	mov	sl, lr
 800a638:	f850 2b04 	ldr.w	r2, [r0], #4
 800a63c:	b293      	uxth	r3, r2
 800a63e:	fb06 e303 	mla	r3, r6, r3, lr
 800a642:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a646:	b29b      	uxth	r3, r3
 800a648:	ebaa 0303 	sub.w	r3, sl, r3
 800a64c:	0c12      	lsrs	r2, r2, #16
 800a64e:	f8dc a000 	ldr.w	sl, [ip]
 800a652:	fb06 e202 	mla	r2, r6, r2, lr
 800a656:	fa13 f38a 	uxtah	r3, r3, sl
 800a65a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a65e:	fa1f fa82 	uxth.w	sl, r2
 800a662:	f8dc 2000 	ldr.w	r2, [ip]
 800a666:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a66a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a66e:	b29b      	uxth	r3, r3
 800a670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a674:	4581      	cmp	r9, r0
 800a676:	f84c 3b04 	str.w	r3, [ip], #4
 800a67a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a67e:	d2db      	bcs.n	800a638 <quorem+0x44>
 800a680:	f855 300b 	ldr.w	r3, [r5, fp]
 800a684:	b92b      	cbnz	r3, 800a692 <quorem+0x9e>
 800a686:	9b01      	ldr	r3, [sp, #4]
 800a688:	3b04      	subs	r3, #4
 800a68a:	429d      	cmp	r5, r3
 800a68c:	461a      	mov	r2, r3
 800a68e:	d32e      	bcc.n	800a6ee <quorem+0xfa>
 800a690:	613c      	str	r4, [r7, #16]
 800a692:	4638      	mov	r0, r7
 800a694:	f001 fc8c 	bl	800bfb0 <__mcmp>
 800a698:	2800      	cmp	r0, #0
 800a69a:	db24      	blt.n	800a6e6 <quorem+0xf2>
 800a69c:	3601      	adds	r6, #1
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f04f 0c00 	mov.w	ip, #0
 800a6a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6a8:	f8d0 e000 	ldr.w	lr, [r0]
 800a6ac:	b293      	uxth	r3, r2
 800a6ae:	ebac 0303 	sub.w	r3, ip, r3
 800a6b2:	0c12      	lsrs	r2, r2, #16
 800a6b4:	fa13 f38e 	uxtah	r3, r3, lr
 800a6b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6c6:	45c1      	cmp	r9, r8
 800a6c8:	f840 3b04 	str.w	r3, [r0], #4
 800a6cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6d0:	d2e8      	bcs.n	800a6a4 <quorem+0xb0>
 800a6d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6da:	b922      	cbnz	r2, 800a6e6 <quorem+0xf2>
 800a6dc:	3b04      	subs	r3, #4
 800a6de:	429d      	cmp	r5, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	d30a      	bcc.n	800a6fa <quorem+0x106>
 800a6e4:	613c      	str	r4, [r7, #16]
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	b003      	add	sp, #12
 800a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ee:	6812      	ldr	r2, [r2, #0]
 800a6f0:	3b04      	subs	r3, #4
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	d1cc      	bne.n	800a690 <quorem+0x9c>
 800a6f6:	3c01      	subs	r4, #1
 800a6f8:	e7c7      	b.n	800a68a <quorem+0x96>
 800a6fa:	6812      	ldr	r2, [r2, #0]
 800a6fc:	3b04      	subs	r3, #4
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	d1f0      	bne.n	800a6e4 <quorem+0xf0>
 800a702:	3c01      	subs	r4, #1
 800a704:	e7eb      	b.n	800a6de <quorem+0xea>
 800a706:	2000      	movs	r0, #0
 800a708:	e7ee      	b.n	800a6e8 <quorem+0xf4>
 800a70a:	0000      	movs	r0, r0
 800a70c:	0000      	movs	r0, r0
	...

0800a710 <_dtoa_r>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	ed2d 8b02 	vpush	{d8}
 800a718:	ec57 6b10 	vmov	r6, r7, d0
 800a71c:	b095      	sub	sp, #84	; 0x54
 800a71e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a720:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a724:	9105      	str	r1, [sp, #20]
 800a726:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a72a:	4604      	mov	r4, r0
 800a72c:	9209      	str	r2, [sp, #36]	; 0x24
 800a72e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a730:	b975      	cbnz	r5, 800a750 <_dtoa_r+0x40>
 800a732:	2010      	movs	r0, #16
 800a734:	f001 f94c 	bl	800b9d0 <malloc>
 800a738:	4602      	mov	r2, r0
 800a73a:	6260      	str	r0, [r4, #36]	; 0x24
 800a73c:	b920      	cbnz	r0, 800a748 <_dtoa_r+0x38>
 800a73e:	4bb2      	ldr	r3, [pc, #712]	; (800aa08 <_dtoa_r+0x2f8>)
 800a740:	21ea      	movs	r1, #234	; 0xea
 800a742:	48b2      	ldr	r0, [pc, #712]	; (800aa0c <_dtoa_r+0x2fc>)
 800a744:	f002 f874 	bl	800c830 <__assert_func>
 800a748:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a74c:	6005      	str	r5, [r0, #0]
 800a74e:	60c5      	str	r5, [r0, #12]
 800a750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a752:	6819      	ldr	r1, [r3, #0]
 800a754:	b151      	cbz	r1, 800a76c <_dtoa_r+0x5c>
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	604a      	str	r2, [r1, #4]
 800a75a:	2301      	movs	r3, #1
 800a75c:	4093      	lsls	r3, r2
 800a75e:	608b      	str	r3, [r1, #8]
 800a760:	4620      	mov	r0, r4
 800a762:	f001 f99d 	bl	800baa0 <_Bfree>
 800a766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	1e3b      	subs	r3, r7, #0
 800a76e:	bfb9      	ittee	lt
 800a770:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a774:	9303      	strlt	r3, [sp, #12]
 800a776:	2300      	movge	r3, #0
 800a778:	f8c8 3000 	strge.w	r3, [r8]
 800a77c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a780:	4ba3      	ldr	r3, [pc, #652]	; (800aa10 <_dtoa_r+0x300>)
 800a782:	bfbc      	itt	lt
 800a784:	2201      	movlt	r2, #1
 800a786:	f8c8 2000 	strlt.w	r2, [r8]
 800a78a:	ea33 0309 	bics.w	r3, r3, r9
 800a78e:	d11b      	bne.n	800a7c8 <_dtoa_r+0xb8>
 800a790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a792:	f242 730f 	movw	r3, #9999	; 0x270f
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a79c:	4333      	orrs	r3, r6
 800a79e:	f000 857a 	beq.w	800b296 <_dtoa_r+0xb86>
 800a7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a4:	b963      	cbnz	r3, 800a7c0 <_dtoa_r+0xb0>
 800a7a6:	4b9b      	ldr	r3, [pc, #620]	; (800aa14 <_dtoa_r+0x304>)
 800a7a8:	e024      	b.n	800a7f4 <_dtoa_r+0xe4>
 800a7aa:	4b9b      	ldr	r3, [pc, #620]	; (800aa18 <_dtoa_r+0x308>)
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	9800      	ldr	r0, [sp, #0]
 800a7b6:	b015      	add	sp, #84	; 0x54
 800a7b8:	ecbd 8b02 	vpop	{d8}
 800a7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c0:	4b94      	ldr	r3, [pc, #592]	; (800aa14 <_dtoa_r+0x304>)
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	3303      	adds	r3, #3
 800a7c6:	e7f3      	b.n	800a7b0 <_dtoa_r+0xa0>
 800a7c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	ec51 0b17 	vmov	r0, r1, d7
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a7d8:	f7f6 f996 	bl	8000b08 <__aeabi_dcmpeq>
 800a7dc:	4680      	mov	r8, r0
 800a7de:	b158      	cbz	r0, 800a7f8 <_dtoa_r+0xe8>
 800a7e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 8551 	beq.w	800b290 <_dtoa_r+0xb80>
 800a7ee:	488b      	ldr	r0, [pc, #556]	; (800aa1c <_dtoa_r+0x30c>)
 800a7f0:	6018      	str	r0, [r3, #0]
 800a7f2:	1e43      	subs	r3, r0, #1
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	e7dd      	b.n	800a7b4 <_dtoa_r+0xa4>
 800a7f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a7fc:	aa12      	add	r2, sp, #72	; 0x48
 800a7fe:	a913      	add	r1, sp, #76	; 0x4c
 800a800:	4620      	mov	r0, r4
 800a802:	f001 fcf5 	bl	800c1f0 <__d2b>
 800a806:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a80a:	4683      	mov	fp, r0
 800a80c:	2d00      	cmp	r5, #0
 800a80e:	d07c      	beq.n	800a90a <_dtoa_r+0x1fa>
 800a810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a812:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a81a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a81e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a822:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a82a:	4b7d      	ldr	r3, [pc, #500]	; (800aa20 <_dtoa_r+0x310>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f5 fd49 	bl	80002c8 <__aeabi_dsub>
 800a836:	a36e      	add	r3, pc, #440	; (adr r3, 800a9f0 <_dtoa_r+0x2e0>)
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	f7f5 fefc 	bl	8000638 <__aeabi_dmul>
 800a840:	a36d      	add	r3, pc, #436	; (adr r3, 800a9f8 <_dtoa_r+0x2e8>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f5 fd41 	bl	80002cc <__adddf3>
 800a84a:	4606      	mov	r6, r0
 800a84c:	4628      	mov	r0, r5
 800a84e:	460f      	mov	r7, r1
 800a850:	f7f5 fe88 	bl	8000564 <__aeabi_i2d>
 800a854:	a36a      	add	r3, pc, #424	; (adr r3, 800aa00 <_dtoa_r+0x2f0>)
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f7f5 feed 	bl	8000638 <__aeabi_dmul>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f7f5 fd31 	bl	80002cc <__adddf3>
 800a86a:	4606      	mov	r6, r0
 800a86c:	460f      	mov	r7, r1
 800a86e:	f7f6 f993 	bl	8000b98 <__aeabi_d2iz>
 800a872:	2200      	movs	r2, #0
 800a874:	4682      	mov	sl, r0
 800a876:	2300      	movs	r3, #0
 800a878:	4630      	mov	r0, r6
 800a87a:	4639      	mov	r1, r7
 800a87c:	f7f6 f94e 	bl	8000b1c <__aeabi_dcmplt>
 800a880:	b148      	cbz	r0, 800a896 <_dtoa_r+0x186>
 800a882:	4650      	mov	r0, sl
 800a884:	f7f5 fe6e 	bl	8000564 <__aeabi_i2d>
 800a888:	4632      	mov	r2, r6
 800a88a:	463b      	mov	r3, r7
 800a88c:	f7f6 f93c 	bl	8000b08 <__aeabi_dcmpeq>
 800a890:	b908      	cbnz	r0, 800a896 <_dtoa_r+0x186>
 800a892:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a896:	f1ba 0f16 	cmp.w	sl, #22
 800a89a:	d854      	bhi.n	800a946 <_dtoa_r+0x236>
 800a89c:	4b61      	ldr	r3, [pc, #388]	; (800aa24 <_dtoa_r+0x314>)
 800a89e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8aa:	f7f6 f937 	bl	8000b1c <__aeabi_dcmplt>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d04b      	beq.n	800a94a <_dtoa_r+0x23a>
 800a8b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8bc:	1b5d      	subs	r5, r3, r5
 800a8be:	1e6b      	subs	r3, r5, #1
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	bf43      	ittte	mi
 800a8c4:	2300      	movmi	r3, #0
 800a8c6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a8ca:	9304      	strmi	r3, [sp, #16]
 800a8cc:	f04f 0800 	movpl.w	r8, #0
 800a8d0:	f1ba 0f00 	cmp.w	sl, #0
 800a8d4:	db3b      	blt.n	800a94e <_dtoa_r+0x23e>
 800a8d6:	9b04      	ldr	r3, [sp, #16]
 800a8d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a8dc:	4453      	add	r3, sl
 800a8de:	9304      	str	r3, [sp, #16]
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9306      	str	r3, [sp, #24]
 800a8e4:	9b05      	ldr	r3, [sp, #20]
 800a8e6:	2b09      	cmp	r3, #9
 800a8e8:	d869      	bhi.n	800a9be <_dtoa_r+0x2ae>
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	bfc4      	itt	gt
 800a8ee:	3b04      	subgt	r3, #4
 800a8f0:	9305      	strgt	r3, [sp, #20]
 800a8f2:	9b05      	ldr	r3, [sp, #20]
 800a8f4:	f1a3 0302 	sub.w	r3, r3, #2
 800a8f8:	bfcc      	ite	gt
 800a8fa:	2500      	movgt	r5, #0
 800a8fc:	2501      	movle	r5, #1
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d869      	bhi.n	800a9d6 <_dtoa_r+0x2c6>
 800a902:	e8df f003 	tbb	[pc, r3]
 800a906:	4e2c      	.short	0x4e2c
 800a908:	5a4c      	.short	0x5a4c
 800a90a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a90e:	441d      	add	r5, r3
 800a910:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a914:	2b20      	cmp	r3, #32
 800a916:	bfc1      	itttt	gt
 800a918:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a91c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a920:	fa09 f303 	lslgt.w	r3, r9, r3
 800a924:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a928:	bfda      	itte	le
 800a92a:	f1c3 0320 	rsble	r3, r3, #32
 800a92e:	fa06 f003 	lslle.w	r0, r6, r3
 800a932:	4318      	orrgt	r0, r3
 800a934:	f7f5 fe06 	bl	8000544 <__aeabi_ui2d>
 800a938:	2301      	movs	r3, #1
 800a93a:	4606      	mov	r6, r0
 800a93c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a940:	3d01      	subs	r5, #1
 800a942:	9310      	str	r3, [sp, #64]	; 0x40
 800a944:	e771      	b.n	800a82a <_dtoa_r+0x11a>
 800a946:	2301      	movs	r3, #1
 800a948:	e7b6      	b.n	800a8b8 <_dtoa_r+0x1a8>
 800a94a:	900e      	str	r0, [sp, #56]	; 0x38
 800a94c:	e7b5      	b.n	800a8ba <_dtoa_r+0x1aa>
 800a94e:	f1ca 0300 	rsb	r3, sl, #0
 800a952:	9306      	str	r3, [sp, #24]
 800a954:	2300      	movs	r3, #0
 800a956:	eba8 080a 	sub.w	r8, r8, sl
 800a95a:	930d      	str	r3, [sp, #52]	; 0x34
 800a95c:	e7c2      	b.n	800a8e4 <_dtoa_r+0x1d4>
 800a95e:	2300      	movs	r3, #0
 800a960:	9308      	str	r3, [sp, #32]
 800a962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	dc39      	bgt.n	800a9dc <_dtoa_r+0x2cc>
 800a968:	f04f 0901 	mov.w	r9, #1
 800a96c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a970:	464b      	mov	r3, r9
 800a972:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a976:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a978:	2200      	movs	r2, #0
 800a97a:	6042      	str	r2, [r0, #4]
 800a97c:	2204      	movs	r2, #4
 800a97e:	f102 0614 	add.w	r6, r2, #20
 800a982:	429e      	cmp	r6, r3
 800a984:	6841      	ldr	r1, [r0, #4]
 800a986:	d92f      	bls.n	800a9e8 <_dtoa_r+0x2d8>
 800a988:	4620      	mov	r0, r4
 800a98a:	f001 f849 	bl	800ba20 <_Balloc>
 800a98e:	9000      	str	r0, [sp, #0]
 800a990:	2800      	cmp	r0, #0
 800a992:	d14b      	bne.n	800aa2c <_dtoa_r+0x31c>
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <_dtoa_r+0x318>)
 800a996:	4602      	mov	r2, r0
 800a998:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a99c:	e6d1      	b.n	800a742 <_dtoa_r+0x32>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e7de      	b.n	800a960 <_dtoa_r+0x250>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9308      	str	r3, [sp, #32]
 800a9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a8:	eb0a 0903 	add.w	r9, sl, r3
 800a9ac:	f109 0301 	add.w	r3, r9, #1
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	9301      	str	r3, [sp, #4]
 800a9b4:	bfb8      	it	lt
 800a9b6:	2301      	movlt	r3, #1
 800a9b8:	e7dd      	b.n	800a976 <_dtoa_r+0x266>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e7f2      	b.n	800a9a4 <_dtoa_r+0x294>
 800a9be:	2501      	movs	r5, #1
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	9305      	str	r3, [sp, #20]
 800a9c4:	9508      	str	r5, [sp, #32]
 800a9c6:	f04f 39ff 	mov.w	r9, #4294967295
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9d0:	2312      	movs	r3, #18
 800a9d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9d4:	e7cf      	b.n	800a976 <_dtoa_r+0x266>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	9308      	str	r3, [sp, #32]
 800a9da:	e7f4      	b.n	800a9c6 <_dtoa_r+0x2b6>
 800a9dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a9e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9e4:	464b      	mov	r3, r9
 800a9e6:	e7c6      	b.n	800a976 <_dtoa_r+0x266>
 800a9e8:	3101      	adds	r1, #1
 800a9ea:	6041      	str	r1, [r0, #4]
 800a9ec:	0052      	lsls	r2, r2, #1
 800a9ee:	e7c6      	b.n	800a97e <_dtoa_r+0x26e>
 800a9f0:	636f4361 	.word	0x636f4361
 800a9f4:	3fd287a7 	.word	0x3fd287a7
 800a9f8:	8b60c8b3 	.word	0x8b60c8b3
 800a9fc:	3fc68a28 	.word	0x3fc68a28
 800aa00:	509f79fb 	.word	0x509f79fb
 800aa04:	3fd34413 	.word	0x3fd34413
 800aa08:	0800d725 	.word	0x0800d725
 800aa0c:	0800d73c 	.word	0x0800d73c
 800aa10:	7ff00000 	.word	0x7ff00000
 800aa14:	0800d721 	.word	0x0800d721
 800aa18:	0800d718 	.word	0x0800d718
 800aa1c:	0800d6a5 	.word	0x0800d6a5
 800aa20:	3ff80000 	.word	0x3ff80000
 800aa24:	0800d8b8 	.word	0x0800d8b8
 800aa28:	0800d79b 	.word	0x0800d79b
 800aa2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa2e:	9a00      	ldr	r2, [sp, #0]
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	9b01      	ldr	r3, [sp, #4]
 800aa34:	2b0e      	cmp	r3, #14
 800aa36:	f200 80ad 	bhi.w	800ab94 <_dtoa_r+0x484>
 800aa3a:	2d00      	cmp	r5, #0
 800aa3c:	f000 80aa 	beq.w	800ab94 <_dtoa_r+0x484>
 800aa40:	f1ba 0f00 	cmp.w	sl, #0
 800aa44:	dd36      	ble.n	800aab4 <_dtoa_r+0x3a4>
 800aa46:	4ac3      	ldr	r2, [pc, #780]	; (800ad54 <_dtoa_r+0x644>)
 800aa48:	f00a 030f 	and.w	r3, sl, #15
 800aa4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa50:	ed93 7b00 	vldr	d7, [r3]
 800aa54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa58:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aa5c:	eeb0 8a47 	vmov.f32	s16, s14
 800aa60:	eef0 8a67 	vmov.f32	s17, s15
 800aa64:	d016      	beq.n	800aa94 <_dtoa_r+0x384>
 800aa66:	4bbc      	ldr	r3, [pc, #752]	; (800ad58 <_dtoa_r+0x648>)
 800aa68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa70:	f7f5 ff0c 	bl	800088c <__aeabi_ddiv>
 800aa74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa78:	f007 070f 	and.w	r7, r7, #15
 800aa7c:	2503      	movs	r5, #3
 800aa7e:	4eb6      	ldr	r6, [pc, #728]	; (800ad58 <_dtoa_r+0x648>)
 800aa80:	b957      	cbnz	r7, 800aa98 <_dtoa_r+0x388>
 800aa82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa86:	ec53 2b18 	vmov	r2, r3, d8
 800aa8a:	f7f5 feff 	bl	800088c <__aeabi_ddiv>
 800aa8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa92:	e029      	b.n	800aae8 <_dtoa_r+0x3d8>
 800aa94:	2502      	movs	r5, #2
 800aa96:	e7f2      	b.n	800aa7e <_dtoa_r+0x36e>
 800aa98:	07f9      	lsls	r1, r7, #31
 800aa9a:	d508      	bpl.n	800aaae <_dtoa_r+0x39e>
 800aa9c:	ec51 0b18 	vmov	r0, r1, d8
 800aaa0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aaa4:	f7f5 fdc8 	bl	8000638 <__aeabi_dmul>
 800aaa8:	ec41 0b18 	vmov	d8, r0, r1
 800aaac:	3501      	adds	r5, #1
 800aaae:	107f      	asrs	r7, r7, #1
 800aab0:	3608      	adds	r6, #8
 800aab2:	e7e5      	b.n	800aa80 <_dtoa_r+0x370>
 800aab4:	f000 80a6 	beq.w	800ac04 <_dtoa_r+0x4f4>
 800aab8:	f1ca 0600 	rsb	r6, sl, #0
 800aabc:	4ba5      	ldr	r3, [pc, #660]	; (800ad54 <_dtoa_r+0x644>)
 800aabe:	4fa6      	ldr	r7, [pc, #664]	; (800ad58 <_dtoa_r+0x648>)
 800aac0:	f006 020f 	and.w	r2, r6, #15
 800aac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aad0:	f7f5 fdb2 	bl	8000638 <__aeabi_dmul>
 800aad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aad8:	1136      	asrs	r6, r6, #4
 800aada:	2300      	movs	r3, #0
 800aadc:	2502      	movs	r5, #2
 800aade:	2e00      	cmp	r6, #0
 800aae0:	f040 8085 	bne.w	800abee <_dtoa_r+0x4de>
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1d2      	bne.n	800aa8e <_dtoa_r+0x37e>
 800aae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 808c 	beq.w	800ac08 <_dtoa_r+0x4f8>
 800aaf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aaf4:	4b99      	ldr	r3, [pc, #612]	; (800ad5c <_dtoa_r+0x64c>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	4630      	mov	r0, r6
 800aafa:	4639      	mov	r1, r7
 800aafc:	f7f6 f80e 	bl	8000b1c <__aeabi_dcmplt>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	f000 8081 	beq.w	800ac08 <_dtoa_r+0x4f8>
 800ab06:	9b01      	ldr	r3, [sp, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d07d      	beq.n	800ac08 <_dtoa_r+0x4f8>
 800ab0c:	f1b9 0f00 	cmp.w	r9, #0
 800ab10:	dd3c      	ble.n	800ab8c <_dtoa_r+0x47c>
 800ab12:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab16:	9307      	str	r3, [sp, #28]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4b91      	ldr	r3, [pc, #580]	; (800ad60 <_dtoa_r+0x650>)
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	4639      	mov	r1, r7
 800ab20:	f7f5 fd8a 	bl	8000638 <__aeabi_dmul>
 800ab24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab28:	3501      	adds	r5, #1
 800ab2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ab2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab32:	4628      	mov	r0, r5
 800ab34:	f7f5 fd16 	bl	8000564 <__aeabi_i2d>
 800ab38:	4632      	mov	r2, r6
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	f7f5 fd7c 	bl	8000638 <__aeabi_dmul>
 800ab40:	4b88      	ldr	r3, [pc, #544]	; (800ad64 <_dtoa_r+0x654>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	f7f5 fbc2 	bl	80002cc <__adddf3>
 800ab48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d15c      	bne.n	800ac12 <_dtoa_r+0x502>
 800ab58:	4b83      	ldr	r3, [pc, #524]	; (800ad68 <_dtoa_r+0x658>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	4639      	mov	r1, r7
 800ab60:	f7f5 fbb2 	bl	80002c8 <__aeabi_dsub>
 800ab64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab68:	4606      	mov	r6, r0
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	f7f5 fff4 	bl	8000b58 <__aeabi_dcmpgt>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	f040 8296 	bne.w	800b0a2 <_dtoa_r+0x992>
 800ab76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab80:	4639      	mov	r1, r7
 800ab82:	f7f5 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f040 8288 	bne.w	800b09c <_dtoa_r+0x98c>
 800ab8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ab90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f2c0 8158 	blt.w	800ae4c <_dtoa_r+0x73c>
 800ab9c:	f1ba 0f0e 	cmp.w	sl, #14
 800aba0:	f300 8154 	bgt.w	800ae4c <_dtoa_r+0x73c>
 800aba4:	4b6b      	ldr	r3, [pc, #428]	; (800ad54 <_dtoa_r+0x644>)
 800aba6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f280 80e3 	bge.w	800ad7c <_dtoa_r+0x66c>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f300 80df 	bgt.w	800ad7c <_dtoa_r+0x66c>
 800abbe:	f040 826d 	bne.w	800b09c <_dtoa_r+0x98c>
 800abc2:	4b69      	ldr	r3, [pc, #420]	; (800ad68 <_dtoa_r+0x658>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	4640      	mov	r0, r8
 800abc8:	4649      	mov	r1, r9
 800abca:	f7f5 fd35 	bl	8000638 <__aeabi_dmul>
 800abce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abd2:	f7f5 ffb7 	bl	8000b44 <__aeabi_dcmpge>
 800abd6:	9e01      	ldr	r6, [sp, #4]
 800abd8:	4637      	mov	r7, r6
 800abda:	2800      	cmp	r0, #0
 800abdc:	f040 8243 	bne.w	800b066 <_dtoa_r+0x956>
 800abe0:	9d00      	ldr	r5, [sp, #0]
 800abe2:	2331      	movs	r3, #49	; 0x31
 800abe4:	f805 3b01 	strb.w	r3, [r5], #1
 800abe8:	f10a 0a01 	add.w	sl, sl, #1
 800abec:	e23f      	b.n	800b06e <_dtoa_r+0x95e>
 800abee:	07f2      	lsls	r2, r6, #31
 800abf0:	d505      	bpl.n	800abfe <_dtoa_r+0x4ee>
 800abf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abf6:	f7f5 fd1f 	bl	8000638 <__aeabi_dmul>
 800abfa:	3501      	adds	r5, #1
 800abfc:	2301      	movs	r3, #1
 800abfe:	1076      	asrs	r6, r6, #1
 800ac00:	3708      	adds	r7, #8
 800ac02:	e76c      	b.n	800aade <_dtoa_r+0x3ce>
 800ac04:	2502      	movs	r5, #2
 800ac06:	e76f      	b.n	800aae8 <_dtoa_r+0x3d8>
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac10:	e78d      	b.n	800ab2e <_dtoa_r+0x41e>
 800ac12:	9900      	ldr	r1, [sp, #0]
 800ac14:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac18:	4b4e      	ldr	r3, [pc, #312]	; (800ad54 <_dtoa_r+0x644>)
 800ac1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac1e:	4401      	add	r1, r0
 800ac20:	9102      	str	r1, [sp, #8]
 800ac22:	9908      	ldr	r1, [sp, #32]
 800ac24:	eeb0 8a47 	vmov.f32	s16, s14
 800ac28:	eef0 8a67 	vmov.f32	s17, s15
 800ac2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d045      	beq.n	800acc4 <_dtoa_r+0x5b4>
 800ac38:	494c      	ldr	r1, [pc, #304]	; (800ad6c <_dtoa_r+0x65c>)
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	f7f5 fe26 	bl	800088c <__aeabi_ddiv>
 800ac40:	ec53 2b18 	vmov	r2, r3, d8
 800ac44:	f7f5 fb40 	bl	80002c8 <__aeabi_dsub>
 800ac48:	9d00      	ldr	r5, [sp, #0]
 800ac4a:	ec41 0b18 	vmov	d8, r0, r1
 800ac4e:	4639      	mov	r1, r7
 800ac50:	4630      	mov	r0, r6
 800ac52:	f7f5 ffa1 	bl	8000b98 <__aeabi_d2iz>
 800ac56:	900c      	str	r0, [sp, #48]	; 0x30
 800ac58:	f7f5 fc84 	bl	8000564 <__aeabi_i2d>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4630      	mov	r0, r6
 800ac62:	4639      	mov	r1, r7
 800ac64:	f7f5 fb30 	bl	80002c8 <__aeabi_dsub>
 800ac68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac6a:	3330      	adds	r3, #48	; 0x30
 800ac6c:	f805 3b01 	strb.w	r3, [r5], #1
 800ac70:	ec53 2b18 	vmov	r2, r3, d8
 800ac74:	4606      	mov	r6, r0
 800ac76:	460f      	mov	r7, r1
 800ac78:	f7f5 ff50 	bl	8000b1c <__aeabi_dcmplt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d165      	bne.n	800ad4c <_dtoa_r+0x63c>
 800ac80:	4632      	mov	r2, r6
 800ac82:	463b      	mov	r3, r7
 800ac84:	4935      	ldr	r1, [pc, #212]	; (800ad5c <_dtoa_r+0x64c>)
 800ac86:	2000      	movs	r0, #0
 800ac88:	f7f5 fb1e 	bl	80002c8 <__aeabi_dsub>
 800ac8c:	ec53 2b18 	vmov	r2, r3, d8
 800ac90:	f7f5 ff44 	bl	8000b1c <__aeabi_dcmplt>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f040 80b9 	bne.w	800ae0c <_dtoa_r+0x6fc>
 800ac9a:	9b02      	ldr	r3, [sp, #8]
 800ac9c:	429d      	cmp	r5, r3
 800ac9e:	f43f af75 	beq.w	800ab8c <_dtoa_r+0x47c>
 800aca2:	4b2f      	ldr	r3, [pc, #188]	; (800ad60 <_dtoa_r+0x650>)
 800aca4:	ec51 0b18 	vmov	r0, r1, d8
 800aca8:	2200      	movs	r2, #0
 800acaa:	f7f5 fcc5 	bl	8000638 <__aeabi_dmul>
 800acae:	4b2c      	ldr	r3, [pc, #176]	; (800ad60 <_dtoa_r+0x650>)
 800acb0:	ec41 0b18 	vmov	d8, r0, r1
 800acb4:	2200      	movs	r2, #0
 800acb6:	4630      	mov	r0, r6
 800acb8:	4639      	mov	r1, r7
 800acba:	f7f5 fcbd 	bl	8000638 <__aeabi_dmul>
 800acbe:	4606      	mov	r6, r0
 800acc0:	460f      	mov	r7, r1
 800acc2:	e7c4      	b.n	800ac4e <_dtoa_r+0x53e>
 800acc4:	ec51 0b17 	vmov	r0, r1, d7
 800acc8:	f7f5 fcb6 	bl	8000638 <__aeabi_dmul>
 800accc:	9b02      	ldr	r3, [sp, #8]
 800acce:	9d00      	ldr	r5, [sp, #0]
 800acd0:	930c      	str	r3, [sp, #48]	; 0x30
 800acd2:	ec41 0b18 	vmov	d8, r0, r1
 800acd6:	4639      	mov	r1, r7
 800acd8:	4630      	mov	r0, r6
 800acda:	f7f5 ff5d 	bl	8000b98 <__aeabi_d2iz>
 800acde:	9011      	str	r0, [sp, #68]	; 0x44
 800ace0:	f7f5 fc40 	bl	8000564 <__aeabi_i2d>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4630      	mov	r0, r6
 800acea:	4639      	mov	r1, r7
 800acec:	f7f5 faec 	bl	80002c8 <__aeabi_dsub>
 800acf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acf2:	3330      	adds	r3, #48	; 0x30
 800acf4:	f805 3b01 	strb.w	r3, [r5], #1
 800acf8:	9b02      	ldr	r3, [sp, #8]
 800acfa:	429d      	cmp	r5, r3
 800acfc:	4606      	mov	r6, r0
 800acfe:	460f      	mov	r7, r1
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	d134      	bne.n	800ad70 <_dtoa_r+0x660>
 800ad06:	4b19      	ldr	r3, [pc, #100]	; (800ad6c <_dtoa_r+0x65c>)
 800ad08:	ec51 0b18 	vmov	r0, r1, d8
 800ad0c:	f7f5 fade 	bl	80002cc <__adddf3>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4630      	mov	r0, r6
 800ad16:	4639      	mov	r1, r7
 800ad18:	f7f5 ff1e 	bl	8000b58 <__aeabi_dcmpgt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d175      	bne.n	800ae0c <_dtoa_r+0x6fc>
 800ad20:	ec53 2b18 	vmov	r2, r3, d8
 800ad24:	4911      	ldr	r1, [pc, #68]	; (800ad6c <_dtoa_r+0x65c>)
 800ad26:	2000      	movs	r0, #0
 800ad28:	f7f5 face 	bl	80002c8 <__aeabi_dsub>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4630      	mov	r0, r6
 800ad32:	4639      	mov	r1, r7
 800ad34:	f7f5 fef2 	bl	8000b1c <__aeabi_dcmplt>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	f43f af27 	beq.w	800ab8c <_dtoa_r+0x47c>
 800ad3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad40:	1e6b      	subs	r3, r5, #1
 800ad42:	930c      	str	r3, [sp, #48]	; 0x30
 800ad44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad48:	2b30      	cmp	r3, #48	; 0x30
 800ad4a:	d0f8      	beq.n	800ad3e <_dtoa_r+0x62e>
 800ad4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad50:	e04a      	b.n	800ade8 <_dtoa_r+0x6d8>
 800ad52:	bf00      	nop
 800ad54:	0800d8b8 	.word	0x0800d8b8
 800ad58:	0800d890 	.word	0x0800d890
 800ad5c:	3ff00000 	.word	0x3ff00000
 800ad60:	40240000 	.word	0x40240000
 800ad64:	401c0000 	.word	0x401c0000
 800ad68:	40140000 	.word	0x40140000
 800ad6c:	3fe00000 	.word	0x3fe00000
 800ad70:	4baf      	ldr	r3, [pc, #700]	; (800b030 <_dtoa_r+0x920>)
 800ad72:	f7f5 fc61 	bl	8000638 <__aeabi_dmul>
 800ad76:	4606      	mov	r6, r0
 800ad78:	460f      	mov	r7, r1
 800ad7a:	e7ac      	b.n	800acd6 <_dtoa_r+0x5c6>
 800ad7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad80:	9d00      	ldr	r5, [sp, #0]
 800ad82:	4642      	mov	r2, r8
 800ad84:	464b      	mov	r3, r9
 800ad86:	4630      	mov	r0, r6
 800ad88:	4639      	mov	r1, r7
 800ad8a:	f7f5 fd7f 	bl	800088c <__aeabi_ddiv>
 800ad8e:	f7f5 ff03 	bl	8000b98 <__aeabi_d2iz>
 800ad92:	9002      	str	r0, [sp, #8]
 800ad94:	f7f5 fbe6 	bl	8000564 <__aeabi_i2d>
 800ad98:	4642      	mov	r2, r8
 800ad9a:	464b      	mov	r3, r9
 800ad9c:	f7f5 fc4c 	bl	8000638 <__aeabi_dmul>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4630      	mov	r0, r6
 800ada6:	4639      	mov	r1, r7
 800ada8:	f7f5 fa8e 	bl	80002c8 <__aeabi_dsub>
 800adac:	9e02      	ldr	r6, [sp, #8]
 800adae:	9f01      	ldr	r7, [sp, #4]
 800adb0:	3630      	adds	r6, #48	; 0x30
 800adb2:	f805 6b01 	strb.w	r6, [r5], #1
 800adb6:	9e00      	ldr	r6, [sp, #0]
 800adb8:	1bae      	subs	r6, r5, r6
 800adba:	42b7      	cmp	r7, r6
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	d137      	bne.n	800ae32 <_dtoa_r+0x722>
 800adc2:	f7f5 fa83 	bl	80002cc <__adddf3>
 800adc6:	4642      	mov	r2, r8
 800adc8:	464b      	mov	r3, r9
 800adca:	4606      	mov	r6, r0
 800adcc:	460f      	mov	r7, r1
 800adce:	f7f5 fec3 	bl	8000b58 <__aeabi_dcmpgt>
 800add2:	b9c8      	cbnz	r0, 800ae08 <_dtoa_r+0x6f8>
 800add4:	4642      	mov	r2, r8
 800add6:	464b      	mov	r3, r9
 800add8:	4630      	mov	r0, r6
 800adda:	4639      	mov	r1, r7
 800addc:	f7f5 fe94 	bl	8000b08 <__aeabi_dcmpeq>
 800ade0:	b110      	cbz	r0, 800ade8 <_dtoa_r+0x6d8>
 800ade2:	9b02      	ldr	r3, [sp, #8]
 800ade4:	07d9      	lsls	r1, r3, #31
 800ade6:	d40f      	bmi.n	800ae08 <_dtoa_r+0x6f8>
 800ade8:	4620      	mov	r0, r4
 800adea:	4659      	mov	r1, fp
 800adec:	f000 fe58 	bl	800baa0 <_Bfree>
 800adf0:	2300      	movs	r3, #0
 800adf2:	702b      	strb	r3, [r5, #0]
 800adf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adf6:	f10a 0001 	add.w	r0, sl, #1
 800adfa:	6018      	str	r0, [r3, #0]
 800adfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f43f acd8 	beq.w	800a7b4 <_dtoa_r+0xa4>
 800ae04:	601d      	str	r5, [r3, #0]
 800ae06:	e4d5      	b.n	800a7b4 <_dtoa_r+0xa4>
 800ae08:	f8cd a01c 	str.w	sl, [sp, #28]
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	461d      	mov	r5, r3
 800ae10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae14:	2a39      	cmp	r2, #57	; 0x39
 800ae16:	d108      	bne.n	800ae2a <_dtoa_r+0x71a>
 800ae18:	9a00      	ldr	r2, [sp, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d1f7      	bne.n	800ae0e <_dtoa_r+0x6fe>
 800ae1e:	9a07      	ldr	r2, [sp, #28]
 800ae20:	9900      	ldr	r1, [sp, #0]
 800ae22:	3201      	adds	r2, #1
 800ae24:	9207      	str	r2, [sp, #28]
 800ae26:	2230      	movs	r2, #48	; 0x30
 800ae28:	700a      	strb	r2, [r1, #0]
 800ae2a:	781a      	ldrb	r2, [r3, #0]
 800ae2c:	3201      	adds	r2, #1
 800ae2e:	701a      	strb	r2, [r3, #0]
 800ae30:	e78c      	b.n	800ad4c <_dtoa_r+0x63c>
 800ae32:	4b7f      	ldr	r3, [pc, #508]	; (800b030 <_dtoa_r+0x920>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	f7f5 fbff 	bl	8000638 <__aeabi_dmul>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460f      	mov	r7, r1
 800ae42:	f7f5 fe61 	bl	8000b08 <__aeabi_dcmpeq>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d09b      	beq.n	800ad82 <_dtoa_r+0x672>
 800ae4a:	e7cd      	b.n	800ade8 <_dtoa_r+0x6d8>
 800ae4c:	9a08      	ldr	r2, [sp, #32]
 800ae4e:	2a00      	cmp	r2, #0
 800ae50:	f000 80c4 	beq.w	800afdc <_dtoa_r+0x8cc>
 800ae54:	9a05      	ldr	r2, [sp, #20]
 800ae56:	2a01      	cmp	r2, #1
 800ae58:	f300 80a8 	bgt.w	800afac <_dtoa_r+0x89c>
 800ae5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	f000 80a0 	beq.w	800afa4 <_dtoa_r+0x894>
 800ae64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae68:	9e06      	ldr	r6, [sp, #24]
 800ae6a:	4645      	mov	r5, r8
 800ae6c:	9a04      	ldr	r2, [sp, #16]
 800ae6e:	2101      	movs	r1, #1
 800ae70:	441a      	add	r2, r3
 800ae72:	4620      	mov	r0, r4
 800ae74:	4498      	add	r8, r3
 800ae76:	9204      	str	r2, [sp, #16]
 800ae78:	f000 ff18 	bl	800bcac <__i2b>
 800ae7c:	4607      	mov	r7, r0
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	dd0b      	ble.n	800ae9a <_dtoa_r+0x78a>
 800ae82:	9b04      	ldr	r3, [sp, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	dd08      	ble.n	800ae9a <_dtoa_r+0x78a>
 800ae88:	42ab      	cmp	r3, r5
 800ae8a:	9a04      	ldr	r2, [sp, #16]
 800ae8c:	bfa8      	it	ge
 800ae8e:	462b      	movge	r3, r5
 800ae90:	eba8 0803 	sub.w	r8, r8, r3
 800ae94:	1aed      	subs	r5, r5, r3
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	9304      	str	r3, [sp, #16]
 800ae9a:	9b06      	ldr	r3, [sp, #24]
 800ae9c:	b1fb      	cbz	r3, 800aede <_dtoa_r+0x7ce>
 800ae9e:	9b08      	ldr	r3, [sp, #32]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 809f 	beq.w	800afe4 <_dtoa_r+0x8d4>
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	dd11      	ble.n	800aece <_dtoa_r+0x7be>
 800aeaa:	4639      	mov	r1, r7
 800aeac:	4632      	mov	r2, r6
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 ffb8 	bl	800be24 <__pow5mult>
 800aeb4:	465a      	mov	r2, fp
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	4607      	mov	r7, r0
 800aeba:	4620      	mov	r0, r4
 800aebc:	f000 ff0c 	bl	800bcd8 <__multiply>
 800aec0:	4659      	mov	r1, fp
 800aec2:	9007      	str	r0, [sp, #28]
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fdeb 	bl	800baa0 <_Bfree>
 800aeca:	9b07      	ldr	r3, [sp, #28]
 800aecc:	469b      	mov	fp, r3
 800aece:	9b06      	ldr	r3, [sp, #24]
 800aed0:	1b9a      	subs	r2, r3, r6
 800aed2:	d004      	beq.n	800aede <_dtoa_r+0x7ce>
 800aed4:	4659      	mov	r1, fp
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 ffa4 	bl	800be24 <__pow5mult>
 800aedc:	4683      	mov	fp, r0
 800aede:	2101      	movs	r1, #1
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 fee3 	bl	800bcac <__i2b>
 800aee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	4606      	mov	r6, r0
 800aeec:	dd7c      	ble.n	800afe8 <_dtoa_r+0x8d8>
 800aeee:	461a      	mov	r2, r3
 800aef0:	4601      	mov	r1, r0
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 ff96 	bl	800be24 <__pow5mult>
 800aef8:	9b05      	ldr	r3, [sp, #20]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	4606      	mov	r6, r0
 800aefe:	dd76      	ble.n	800afee <_dtoa_r+0x8de>
 800af00:	2300      	movs	r3, #0
 800af02:	9306      	str	r3, [sp, #24]
 800af04:	6933      	ldr	r3, [r6, #16]
 800af06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af0a:	6918      	ldr	r0, [r3, #16]
 800af0c:	f000 fe7e 	bl	800bc0c <__hi0bits>
 800af10:	f1c0 0020 	rsb	r0, r0, #32
 800af14:	9b04      	ldr	r3, [sp, #16]
 800af16:	4418      	add	r0, r3
 800af18:	f010 001f 	ands.w	r0, r0, #31
 800af1c:	f000 8086 	beq.w	800b02c <_dtoa_r+0x91c>
 800af20:	f1c0 0320 	rsb	r3, r0, #32
 800af24:	2b04      	cmp	r3, #4
 800af26:	dd7f      	ble.n	800b028 <_dtoa_r+0x918>
 800af28:	f1c0 001c 	rsb	r0, r0, #28
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	4403      	add	r3, r0
 800af30:	4480      	add	r8, r0
 800af32:	4405      	add	r5, r0
 800af34:	9304      	str	r3, [sp, #16]
 800af36:	f1b8 0f00 	cmp.w	r8, #0
 800af3a:	dd05      	ble.n	800af48 <_dtoa_r+0x838>
 800af3c:	4659      	mov	r1, fp
 800af3e:	4642      	mov	r2, r8
 800af40:	4620      	mov	r0, r4
 800af42:	f000 ffc9 	bl	800bed8 <__lshift>
 800af46:	4683      	mov	fp, r0
 800af48:	9b04      	ldr	r3, [sp, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd05      	ble.n	800af5a <_dtoa_r+0x84a>
 800af4e:	4631      	mov	r1, r6
 800af50:	461a      	mov	r2, r3
 800af52:	4620      	mov	r0, r4
 800af54:	f000 ffc0 	bl	800bed8 <__lshift>
 800af58:	4606      	mov	r6, r0
 800af5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d069      	beq.n	800b034 <_dtoa_r+0x924>
 800af60:	4631      	mov	r1, r6
 800af62:	4658      	mov	r0, fp
 800af64:	f001 f824 	bl	800bfb0 <__mcmp>
 800af68:	2800      	cmp	r0, #0
 800af6a:	da63      	bge.n	800b034 <_dtoa_r+0x924>
 800af6c:	2300      	movs	r3, #0
 800af6e:	4659      	mov	r1, fp
 800af70:	220a      	movs	r2, #10
 800af72:	4620      	mov	r0, r4
 800af74:	f000 fdb6 	bl	800bae4 <__multadd>
 800af78:	9b08      	ldr	r3, [sp, #32]
 800af7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af7e:	4683      	mov	fp, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 818f 	beq.w	800b2a4 <_dtoa_r+0xb94>
 800af86:	4639      	mov	r1, r7
 800af88:	2300      	movs	r3, #0
 800af8a:	220a      	movs	r2, #10
 800af8c:	4620      	mov	r0, r4
 800af8e:	f000 fda9 	bl	800bae4 <__multadd>
 800af92:	f1b9 0f00 	cmp.w	r9, #0
 800af96:	4607      	mov	r7, r0
 800af98:	f300 808e 	bgt.w	800b0b8 <_dtoa_r+0x9a8>
 800af9c:	9b05      	ldr	r3, [sp, #20]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	dc50      	bgt.n	800b044 <_dtoa_r+0x934>
 800afa2:	e089      	b.n	800b0b8 <_dtoa_r+0x9a8>
 800afa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afaa:	e75d      	b.n	800ae68 <_dtoa_r+0x758>
 800afac:	9b01      	ldr	r3, [sp, #4]
 800afae:	1e5e      	subs	r6, r3, #1
 800afb0:	9b06      	ldr	r3, [sp, #24]
 800afb2:	42b3      	cmp	r3, r6
 800afb4:	bfbf      	itttt	lt
 800afb6:	9b06      	ldrlt	r3, [sp, #24]
 800afb8:	9606      	strlt	r6, [sp, #24]
 800afba:	1af2      	sublt	r2, r6, r3
 800afbc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800afbe:	bfb6      	itet	lt
 800afc0:	189b      	addlt	r3, r3, r2
 800afc2:	1b9e      	subge	r6, r3, r6
 800afc4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800afc6:	9b01      	ldr	r3, [sp, #4]
 800afc8:	bfb8      	it	lt
 800afca:	2600      	movlt	r6, #0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	bfb5      	itete	lt
 800afd0:	eba8 0503 	sublt.w	r5, r8, r3
 800afd4:	9b01      	ldrge	r3, [sp, #4]
 800afd6:	2300      	movlt	r3, #0
 800afd8:	4645      	movge	r5, r8
 800afda:	e747      	b.n	800ae6c <_dtoa_r+0x75c>
 800afdc:	9e06      	ldr	r6, [sp, #24]
 800afde:	9f08      	ldr	r7, [sp, #32]
 800afe0:	4645      	mov	r5, r8
 800afe2:	e74c      	b.n	800ae7e <_dtoa_r+0x76e>
 800afe4:	9a06      	ldr	r2, [sp, #24]
 800afe6:	e775      	b.n	800aed4 <_dtoa_r+0x7c4>
 800afe8:	9b05      	ldr	r3, [sp, #20]
 800afea:	2b01      	cmp	r3, #1
 800afec:	dc18      	bgt.n	800b020 <_dtoa_r+0x910>
 800afee:	9b02      	ldr	r3, [sp, #8]
 800aff0:	b9b3      	cbnz	r3, 800b020 <_dtoa_r+0x910>
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aff8:	b9a3      	cbnz	r3, 800b024 <_dtoa_r+0x914>
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b000:	0d1b      	lsrs	r3, r3, #20
 800b002:	051b      	lsls	r3, r3, #20
 800b004:	b12b      	cbz	r3, 800b012 <_dtoa_r+0x902>
 800b006:	9b04      	ldr	r3, [sp, #16]
 800b008:	3301      	adds	r3, #1
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	f108 0801 	add.w	r8, r8, #1
 800b010:	2301      	movs	r3, #1
 800b012:	9306      	str	r3, [sp, #24]
 800b014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b016:	2b00      	cmp	r3, #0
 800b018:	f47f af74 	bne.w	800af04 <_dtoa_r+0x7f4>
 800b01c:	2001      	movs	r0, #1
 800b01e:	e779      	b.n	800af14 <_dtoa_r+0x804>
 800b020:	2300      	movs	r3, #0
 800b022:	e7f6      	b.n	800b012 <_dtoa_r+0x902>
 800b024:	9b02      	ldr	r3, [sp, #8]
 800b026:	e7f4      	b.n	800b012 <_dtoa_r+0x902>
 800b028:	d085      	beq.n	800af36 <_dtoa_r+0x826>
 800b02a:	4618      	mov	r0, r3
 800b02c:	301c      	adds	r0, #28
 800b02e:	e77d      	b.n	800af2c <_dtoa_r+0x81c>
 800b030:	40240000 	.word	0x40240000
 800b034:	9b01      	ldr	r3, [sp, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	dc38      	bgt.n	800b0ac <_dtoa_r+0x99c>
 800b03a:	9b05      	ldr	r3, [sp, #20]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	dd35      	ble.n	800b0ac <_dtoa_r+0x99c>
 800b040:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b044:	f1b9 0f00 	cmp.w	r9, #0
 800b048:	d10d      	bne.n	800b066 <_dtoa_r+0x956>
 800b04a:	4631      	mov	r1, r6
 800b04c:	464b      	mov	r3, r9
 800b04e:	2205      	movs	r2, #5
 800b050:	4620      	mov	r0, r4
 800b052:	f000 fd47 	bl	800bae4 <__multadd>
 800b056:	4601      	mov	r1, r0
 800b058:	4606      	mov	r6, r0
 800b05a:	4658      	mov	r0, fp
 800b05c:	f000 ffa8 	bl	800bfb0 <__mcmp>
 800b060:	2800      	cmp	r0, #0
 800b062:	f73f adbd 	bgt.w	800abe0 <_dtoa_r+0x4d0>
 800b066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b068:	9d00      	ldr	r5, [sp, #0]
 800b06a:	ea6f 0a03 	mvn.w	sl, r3
 800b06e:	f04f 0800 	mov.w	r8, #0
 800b072:	4631      	mov	r1, r6
 800b074:	4620      	mov	r0, r4
 800b076:	f000 fd13 	bl	800baa0 <_Bfree>
 800b07a:	2f00      	cmp	r7, #0
 800b07c:	f43f aeb4 	beq.w	800ade8 <_dtoa_r+0x6d8>
 800b080:	f1b8 0f00 	cmp.w	r8, #0
 800b084:	d005      	beq.n	800b092 <_dtoa_r+0x982>
 800b086:	45b8      	cmp	r8, r7
 800b088:	d003      	beq.n	800b092 <_dtoa_r+0x982>
 800b08a:	4641      	mov	r1, r8
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fd07 	bl	800baa0 <_Bfree>
 800b092:	4639      	mov	r1, r7
 800b094:	4620      	mov	r0, r4
 800b096:	f000 fd03 	bl	800baa0 <_Bfree>
 800b09a:	e6a5      	b.n	800ade8 <_dtoa_r+0x6d8>
 800b09c:	2600      	movs	r6, #0
 800b09e:	4637      	mov	r7, r6
 800b0a0:	e7e1      	b.n	800b066 <_dtoa_r+0x956>
 800b0a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b0a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b0a8:	4637      	mov	r7, r6
 800b0aa:	e599      	b.n	800abe0 <_dtoa_r+0x4d0>
 800b0ac:	9b08      	ldr	r3, [sp, #32]
 800b0ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 80fd 	beq.w	800b2b2 <_dtoa_r+0xba2>
 800b0b8:	2d00      	cmp	r5, #0
 800b0ba:	dd05      	ble.n	800b0c8 <_dtoa_r+0x9b8>
 800b0bc:	4639      	mov	r1, r7
 800b0be:	462a      	mov	r2, r5
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 ff09 	bl	800bed8 <__lshift>
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	9b06      	ldr	r3, [sp, #24]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d05c      	beq.n	800b188 <_dtoa_r+0xa78>
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 fca5 	bl	800ba20 <_Balloc>
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	b928      	cbnz	r0, 800b0e6 <_dtoa_r+0x9d6>
 800b0da:	4b80      	ldr	r3, [pc, #512]	; (800b2dc <_dtoa_r+0xbcc>)
 800b0dc:	4602      	mov	r2, r0
 800b0de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0e2:	f7ff bb2e 	b.w	800a742 <_dtoa_r+0x32>
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	3202      	adds	r2, #2
 800b0ea:	0092      	lsls	r2, r2, #2
 800b0ec:	f107 010c 	add.w	r1, r7, #12
 800b0f0:	300c      	adds	r0, #12
 800b0f2:	f000 fc87 	bl	800ba04 <memcpy>
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 feec 	bl	800bed8 <__lshift>
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	9b00      	ldr	r3, [sp, #0]
 800b108:	444b      	add	r3, r9
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	9b02      	ldr	r3, [sp, #8]
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	46b8      	mov	r8, r7
 800b114:	9306      	str	r3, [sp, #24]
 800b116:	4607      	mov	r7, r0
 800b118:	9b01      	ldr	r3, [sp, #4]
 800b11a:	4631      	mov	r1, r6
 800b11c:	3b01      	subs	r3, #1
 800b11e:	4658      	mov	r0, fp
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	f7ff fa67 	bl	800a5f4 <quorem>
 800b126:	4603      	mov	r3, r0
 800b128:	3330      	adds	r3, #48	; 0x30
 800b12a:	9004      	str	r0, [sp, #16]
 800b12c:	4641      	mov	r1, r8
 800b12e:	4658      	mov	r0, fp
 800b130:	9308      	str	r3, [sp, #32]
 800b132:	f000 ff3d 	bl	800bfb0 <__mcmp>
 800b136:	463a      	mov	r2, r7
 800b138:	4681      	mov	r9, r0
 800b13a:	4631      	mov	r1, r6
 800b13c:	4620      	mov	r0, r4
 800b13e:	f000 ff53 	bl	800bfe8 <__mdiff>
 800b142:	68c2      	ldr	r2, [r0, #12]
 800b144:	9b08      	ldr	r3, [sp, #32]
 800b146:	4605      	mov	r5, r0
 800b148:	bb02      	cbnz	r2, 800b18c <_dtoa_r+0xa7c>
 800b14a:	4601      	mov	r1, r0
 800b14c:	4658      	mov	r0, fp
 800b14e:	f000 ff2f 	bl	800bfb0 <__mcmp>
 800b152:	9b08      	ldr	r3, [sp, #32]
 800b154:	4602      	mov	r2, r0
 800b156:	4629      	mov	r1, r5
 800b158:	4620      	mov	r0, r4
 800b15a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b15e:	f000 fc9f 	bl	800baa0 <_Bfree>
 800b162:	9b05      	ldr	r3, [sp, #20]
 800b164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b166:	9d01      	ldr	r5, [sp, #4]
 800b168:	ea43 0102 	orr.w	r1, r3, r2
 800b16c:	9b06      	ldr	r3, [sp, #24]
 800b16e:	430b      	orrs	r3, r1
 800b170:	9b08      	ldr	r3, [sp, #32]
 800b172:	d10d      	bne.n	800b190 <_dtoa_r+0xa80>
 800b174:	2b39      	cmp	r3, #57	; 0x39
 800b176:	d029      	beq.n	800b1cc <_dtoa_r+0xabc>
 800b178:	f1b9 0f00 	cmp.w	r9, #0
 800b17c:	dd01      	ble.n	800b182 <_dtoa_r+0xa72>
 800b17e:	9b04      	ldr	r3, [sp, #16]
 800b180:	3331      	adds	r3, #49	; 0x31
 800b182:	9a02      	ldr	r2, [sp, #8]
 800b184:	7013      	strb	r3, [r2, #0]
 800b186:	e774      	b.n	800b072 <_dtoa_r+0x962>
 800b188:	4638      	mov	r0, r7
 800b18a:	e7b9      	b.n	800b100 <_dtoa_r+0x9f0>
 800b18c:	2201      	movs	r2, #1
 800b18e:	e7e2      	b.n	800b156 <_dtoa_r+0xa46>
 800b190:	f1b9 0f00 	cmp.w	r9, #0
 800b194:	db06      	blt.n	800b1a4 <_dtoa_r+0xa94>
 800b196:	9905      	ldr	r1, [sp, #20]
 800b198:	ea41 0909 	orr.w	r9, r1, r9
 800b19c:	9906      	ldr	r1, [sp, #24]
 800b19e:	ea59 0101 	orrs.w	r1, r9, r1
 800b1a2:	d120      	bne.n	800b1e6 <_dtoa_r+0xad6>
 800b1a4:	2a00      	cmp	r2, #0
 800b1a6:	ddec      	ble.n	800b182 <_dtoa_r+0xa72>
 800b1a8:	4659      	mov	r1, fp
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	9301      	str	r3, [sp, #4]
 800b1b0:	f000 fe92 	bl	800bed8 <__lshift>
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4683      	mov	fp, r0
 800b1b8:	f000 fefa 	bl	800bfb0 <__mcmp>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	9b01      	ldr	r3, [sp, #4]
 800b1c0:	dc02      	bgt.n	800b1c8 <_dtoa_r+0xab8>
 800b1c2:	d1de      	bne.n	800b182 <_dtoa_r+0xa72>
 800b1c4:	07da      	lsls	r2, r3, #31
 800b1c6:	d5dc      	bpl.n	800b182 <_dtoa_r+0xa72>
 800b1c8:	2b39      	cmp	r3, #57	; 0x39
 800b1ca:	d1d8      	bne.n	800b17e <_dtoa_r+0xa6e>
 800b1cc:	9a02      	ldr	r2, [sp, #8]
 800b1ce:	2339      	movs	r3, #57	; 0x39
 800b1d0:	7013      	strb	r3, [r2, #0]
 800b1d2:	462b      	mov	r3, r5
 800b1d4:	461d      	mov	r5, r3
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1dc:	2a39      	cmp	r2, #57	; 0x39
 800b1de:	d050      	beq.n	800b282 <_dtoa_r+0xb72>
 800b1e0:	3201      	adds	r2, #1
 800b1e2:	701a      	strb	r2, [r3, #0]
 800b1e4:	e745      	b.n	800b072 <_dtoa_r+0x962>
 800b1e6:	2a00      	cmp	r2, #0
 800b1e8:	dd03      	ble.n	800b1f2 <_dtoa_r+0xae2>
 800b1ea:	2b39      	cmp	r3, #57	; 0x39
 800b1ec:	d0ee      	beq.n	800b1cc <_dtoa_r+0xabc>
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	e7c7      	b.n	800b182 <_dtoa_r+0xa72>
 800b1f2:	9a01      	ldr	r2, [sp, #4]
 800b1f4:	9907      	ldr	r1, [sp, #28]
 800b1f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1fa:	428a      	cmp	r2, r1
 800b1fc:	d02a      	beq.n	800b254 <_dtoa_r+0xb44>
 800b1fe:	4659      	mov	r1, fp
 800b200:	2300      	movs	r3, #0
 800b202:	220a      	movs	r2, #10
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fc6d 	bl	800bae4 <__multadd>
 800b20a:	45b8      	cmp	r8, r7
 800b20c:	4683      	mov	fp, r0
 800b20e:	f04f 0300 	mov.w	r3, #0
 800b212:	f04f 020a 	mov.w	r2, #10
 800b216:	4641      	mov	r1, r8
 800b218:	4620      	mov	r0, r4
 800b21a:	d107      	bne.n	800b22c <_dtoa_r+0xb1c>
 800b21c:	f000 fc62 	bl	800bae4 <__multadd>
 800b220:	4680      	mov	r8, r0
 800b222:	4607      	mov	r7, r0
 800b224:	9b01      	ldr	r3, [sp, #4]
 800b226:	3301      	adds	r3, #1
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	e775      	b.n	800b118 <_dtoa_r+0xa08>
 800b22c:	f000 fc5a 	bl	800bae4 <__multadd>
 800b230:	4639      	mov	r1, r7
 800b232:	4680      	mov	r8, r0
 800b234:	2300      	movs	r3, #0
 800b236:	220a      	movs	r2, #10
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 fc53 	bl	800bae4 <__multadd>
 800b23e:	4607      	mov	r7, r0
 800b240:	e7f0      	b.n	800b224 <_dtoa_r+0xb14>
 800b242:	f1b9 0f00 	cmp.w	r9, #0
 800b246:	9a00      	ldr	r2, [sp, #0]
 800b248:	bfcc      	ite	gt
 800b24a:	464d      	movgt	r5, r9
 800b24c:	2501      	movle	r5, #1
 800b24e:	4415      	add	r5, r2
 800b250:	f04f 0800 	mov.w	r8, #0
 800b254:	4659      	mov	r1, fp
 800b256:	2201      	movs	r2, #1
 800b258:	4620      	mov	r0, r4
 800b25a:	9301      	str	r3, [sp, #4]
 800b25c:	f000 fe3c 	bl	800bed8 <__lshift>
 800b260:	4631      	mov	r1, r6
 800b262:	4683      	mov	fp, r0
 800b264:	f000 fea4 	bl	800bfb0 <__mcmp>
 800b268:	2800      	cmp	r0, #0
 800b26a:	dcb2      	bgt.n	800b1d2 <_dtoa_r+0xac2>
 800b26c:	d102      	bne.n	800b274 <_dtoa_r+0xb64>
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	07db      	lsls	r3, r3, #31
 800b272:	d4ae      	bmi.n	800b1d2 <_dtoa_r+0xac2>
 800b274:	462b      	mov	r3, r5
 800b276:	461d      	mov	r5, r3
 800b278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b27c:	2a30      	cmp	r2, #48	; 0x30
 800b27e:	d0fa      	beq.n	800b276 <_dtoa_r+0xb66>
 800b280:	e6f7      	b.n	800b072 <_dtoa_r+0x962>
 800b282:	9a00      	ldr	r2, [sp, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d1a5      	bne.n	800b1d4 <_dtoa_r+0xac4>
 800b288:	f10a 0a01 	add.w	sl, sl, #1
 800b28c:	2331      	movs	r3, #49	; 0x31
 800b28e:	e779      	b.n	800b184 <_dtoa_r+0xa74>
 800b290:	4b13      	ldr	r3, [pc, #76]	; (800b2e0 <_dtoa_r+0xbd0>)
 800b292:	f7ff baaf 	b.w	800a7f4 <_dtoa_r+0xe4>
 800b296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f47f aa86 	bne.w	800a7aa <_dtoa_r+0x9a>
 800b29e:	4b11      	ldr	r3, [pc, #68]	; (800b2e4 <_dtoa_r+0xbd4>)
 800b2a0:	f7ff baa8 	b.w	800a7f4 <_dtoa_r+0xe4>
 800b2a4:	f1b9 0f00 	cmp.w	r9, #0
 800b2a8:	dc03      	bgt.n	800b2b2 <_dtoa_r+0xba2>
 800b2aa:	9b05      	ldr	r3, [sp, #20]
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	f73f aec9 	bgt.w	800b044 <_dtoa_r+0x934>
 800b2b2:	9d00      	ldr	r5, [sp, #0]
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4658      	mov	r0, fp
 800b2b8:	f7ff f99c 	bl	800a5f4 <quorem>
 800b2bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b2c0:	f805 3b01 	strb.w	r3, [r5], #1
 800b2c4:	9a00      	ldr	r2, [sp, #0]
 800b2c6:	1aaa      	subs	r2, r5, r2
 800b2c8:	4591      	cmp	r9, r2
 800b2ca:	ddba      	ble.n	800b242 <_dtoa_r+0xb32>
 800b2cc:	4659      	mov	r1, fp
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	220a      	movs	r2, #10
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 fc06 	bl	800bae4 <__multadd>
 800b2d8:	4683      	mov	fp, r0
 800b2da:	e7eb      	b.n	800b2b4 <_dtoa_r+0xba4>
 800b2dc:	0800d79b 	.word	0x0800d79b
 800b2e0:	0800d6a4 	.word	0x0800d6a4
 800b2e4:	0800d718 	.word	0x0800d718

0800b2e8 <rshift>:
 800b2e8:	6903      	ldr	r3, [r0, #16]
 800b2ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2f6:	f100 0414 	add.w	r4, r0, #20
 800b2fa:	dd45      	ble.n	800b388 <rshift+0xa0>
 800b2fc:	f011 011f 	ands.w	r1, r1, #31
 800b300:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b304:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b308:	d10c      	bne.n	800b324 <rshift+0x3c>
 800b30a:	f100 0710 	add.w	r7, r0, #16
 800b30e:	4629      	mov	r1, r5
 800b310:	42b1      	cmp	r1, r6
 800b312:	d334      	bcc.n	800b37e <rshift+0x96>
 800b314:	1a9b      	subs	r3, r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	1eea      	subs	r2, r5, #3
 800b31a:	4296      	cmp	r6, r2
 800b31c:	bf38      	it	cc
 800b31e:	2300      	movcc	r3, #0
 800b320:	4423      	add	r3, r4
 800b322:	e015      	b.n	800b350 <rshift+0x68>
 800b324:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b328:	f1c1 0820 	rsb	r8, r1, #32
 800b32c:	40cf      	lsrs	r7, r1
 800b32e:	f105 0e04 	add.w	lr, r5, #4
 800b332:	46a1      	mov	r9, r4
 800b334:	4576      	cmp	r6, lr
 800b336:	46f4      	mov	ip, lr
 800b338:	d815      	bhi.n	800b366 <rshift+0x7e>
 800b33a:	1a9b      	subs	r3, r3, r2
 800b33c:	009a      	lsls	r2, r3, #2
 800b33e:	3a04      	subs	r2, #4
 800b340:	3501      	adds	r5, #1
 800b342:	42ae      	cmp	r6, r5
 800b344:	bf38      	it	cc
 800b346:	2200      	movcc	r2, #0
 800b348:	18a3      	adds	r3, r4, r2
 800b34a:	50a7      	str	r7, [r4, r2]
 800b34c:	b107      	cbz	r7, 800b350 <rshift+0x68>
 800b34e:	3304      	adds	r3, #4
 800b350:	1b1a      	subs	r2, r3, r4
 800b352:	42a3      	cmp	r3, r4
 800b354:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b358:	bf08      	it	eq
 800b35a:	2300      	moveq	r3, #0
 800b35c:	6102      	str	r2, [r0, #16]
 800b35e:	bf08      	it	eq
 800b360:	6143      	streq	r3, [r0, #20]
 800b362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b366:	f8dc c000 	ldr.w	ip, [ip]
 800b36a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b36e:	ea4c 0707 	orr.w	r7, ip, r7
 800b372:	f849 7b04 	str.w	r7, [r9], #4
 800b376:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b37a:	40cf      	lsrs	r7, r1
 800b37c:	e7da      	b.n	800b334 <rshift+0x4c>
 800b37e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b382:	f847 cf04 	str.w	ip, [r7, #4]!
 800b386:	e7c3      	b.n	800b310 <rshift+0x28>
 800b388:	4623      	mov	r3, r4
 800b38a:	e7e1      	b.n	800b350 <rshift+0x68>

0800b38c <__hexdig_fun>:
 800b38c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b390:	2b09      	cmp	r3, #9
 800b392:	d802      	bhi.n	800b39a <__hexdig_fun+0xe>
 800b394:	3820      	subs	r0, #32
 800b396:	b2c0      	uxtb	r0, r0
 800b398:	4770      	bx	lr
 800b39a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b39e:	2b05      	cmp	r3, #5
 800b3a0:	d801      	bhi.n	800b3a6 <__hexdig_fun+0x1a>
 800b3a2:	3847      	subs	r0, #71	; 0x47
 800b3a4:	e7f7      	b.n	800b396 <__hexdig_fun+0xa>
 800b3a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b3aa:	2b05      	cmp	r3, #5
 800b3ac:	d801      	bhi.n	800b3b2 <__hexdig_fun+0x26>
 800b3ae:	3827      	subs	r0, #39	; 0x27
 800b3b0:	e7f1      	b.n	800b396 <__hexdig_fun+0xa>
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <__gethex>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	ed2d 8b02 	vpush	{d8}
 800b3c0:	b089      	sub	sp, #36	; 0x24
 800b3c2:	ee08 0a10 	vmov	s16, r0
 800b3c6:	9304      	str	r3, [sp, #16]
 800b3c8:	4bbc      	ldr	r3, [pc, #752]	; (800b6bc <__gethex+0x304>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	468b      	mov	fp, r1
 800b3d2:	4690      	mov	r8, r2
 800b3d4:	f7f4 ff1c 	bl	8000210 <strlen>
 800b3d8:	9b01      	ldr	r3, [sp, #4]
 800b3da:	f8db 2000 	ldr.w	r2, [fp]
 800b3de:	4403      	add	r3, r0
 800b3e0:	4682      	mov	sl, r0
 800b3e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b3e6:	9305      	str	r3, [sp, #20]
 800b3e8:	1c93      	adds	r3, r2, #2
 800b3ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3f2:	32fe      	adds	r2, #254	; 0xfe
 800b3f4:	18d1      	adds	r1, r2, r3
 800b3f6:	461f      	mov	r7, r3
 800b3f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b3fc:	9100      	str	r1, [sp, #0]
 800b3fe:	2830      	cmp	r0, #48	; 0x30
 800b400:	d0f8      	beq.n	800b3f4 <__gethex+0x3c>
 800b402:	f7ff ffc3 	bl	800b38c <__hexdig_fun>
 800b406:	4604      	mov	r4, r0
 800b408:	2800      	cmp	r0, #0
 800b40a:	d13a      	bne.n	800b482 <__gethex+0xca>
 800b40c:	9901      	ldr	r1, [sp, #4]
 800b40e:	4652      	mov	r2, sl
 800b410:	4638      	mov	r0, r7
 800b412:	f001 f9ed 	bl	800c7f0 <strncmp>
 800b416:	4605      	mov	r5, r0
 800b418:	2800      	cmp	r0, #0
 800b41a:	d168      	bne.n	800b4ee <__gethex+0x136>
 800b41c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b420:	eb07 060a 	add.w	r6, r7, sl
 800b424:	f7ff ffb2 	bl	800b38c <__hexdig_fun>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d062      	beq.n	800b4f2 <__gethex+0x13a>
 800b42c:	4633      	mov	r3, r6
 800b42e:	7818      	ldrb	r0, [r3, #0]
 800b430:	2830      	cmp	r0, #48	; 0x30
 800b432:	461f      	mov	r7, r3
 800b434:	f103 0301 	add.w	r3, r3, #1
 800b438:	d0f9      	beq.n	800b42e <__gethex+0x76>
 800b43a:	f7ff ffa7 	bl	800b38c <__hexdig_fun>
 800b43e:	2301      	movs	r3, #1
 800b440:	fab0 f480 	clz	r4, r0
 800b444:	0964      	lsrs	r4, r4, #5
 800b446:	4635      	mov	r5, r6
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	463a      	mov	r2, r7
 800b44c:	4616      	mov	r6, r2
 800b44e:	3201      	adds	r2, #1
 800b450:	7830      	ldrb	r0, [r6, #0]
 800b452:	f7ff ff9b 	bl	800b38c <__hexdig_fun>
 800b456:	2800      	cmp	r0, #0
 800b458:	d1f8      	bne.n	800b44c <__gethex+0x94>
 800b45a:	9901      	ldr	r1, [sp, #4]
 800b45c:	4652      	mov	r2, sl
 800b45e:	4630      	mov	r0, r6
 800b460:	f001 f9c6 	bl	800c7f0 <strncmp>
 800b464:	b980      	cbnz	r0, 800b488 <__gethex+0xd0>
 800b466:	b94d      	cbnz	r5, 800b47c <__gethex+0xc4>
 800b468:	eb06 050a 	add.w	r5, r6, sl
 800b46c:	462a      	mov	r2, r5
 800b46e:	4616      	mov	r6, r2
 800b470:	3201      	adds	r2, #1
 800b472:	7830      	ldrb	r0, [r6, #0]
 800b474:	f7ff ff8a 	bl	800b38c <__hexdig_fun>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d1f8      	bne.n	800b46e <__gethex+0xb6>
 800b47c:	1bad      	subs	r5, r5, r6
 800b47e:	00ad      	lsls	r5, r5, #2
 800b480:	e004      	b.n	800b48c <__gethex+0xd4>
 800b482:	2400      	movs	r4, #0
 800b484:	4625      	mov	r5, r4
 800b486:	e7e0      	b.n	800b44a <__gethex+0x92>
 800b488:	2d00      	cmp	r5, #0
 800b48a:	d1f7      	bne.n	800b47c <__gethex+0xc4>
 800b48c:	7833      	ldrb	r3, [r6, #0]
 800b48e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b492:	2b50      	cmp	r3, #80	; 0x50
 800b494:	d13b      	bne.n	800b50e <__gethex+0x156>
 800b496:	7873      	ldrb	r3, [r6, #1]
 800b498:	2b2b      	cmp	r3, #43	; 0x2b
 800b49a:	d02c      	beq.n	800b4f6 <__gethex+0x13e>
 800b49c:	2b2d      	cmp	r3, #45	; 0x2d
 800b49e:	d02e      	beq.n	800b4fe <__gethex+0x146>
 800b4a0:	1c71      	adds	r1, r6, #1
 800b4a2:	f04f 0900 	mov.w	r9, #0
 800b4a6:	7808      	ldrb	r0, [r1, #0]
 800b4a8:	f7ff ff70 	bl	800b38c <__hexdig_fun>
 800b4ac:	1e43      	subs	r3, r0, #1
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b18      	cmp	r3, #24
 800b4b2:	d82c      	bhi.n	800b50e <__gethex+0x156>
 800b4b4:	f1a0 0210 	sub.w	r2, r0, #16
 800b4b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4bc:	f7ff ff66 	bl	800b38c <__hexdig_fun>
 800b4c0:	1e43      	subs	r3, r0, #1
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b18      	cmp	r3, #24
 800b4c6:	d91d      	bls.n	800b504 <__gethex+0x14c>
 800b4c8:	f1b9 0f00 	cmp.w	r9, #0
 800b4cc:	d000      	beq.n	800b4d0 <__gethex+0x118>
 800b4ce:	4252      	negs	r2, r2
 800b4d0:	4415      	add	r5, r2
 800b4d2:	f8cb 1000 	str.w	r1, [fp]
 800b4d6:	b1e4      	cbz	r4, 800b512 <__gethex+0x15a>
 800b4d8:	9b00      	ldr	r3, [sp, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bf14      	ite	ne
 800b4de:	2700      	movne	r7, #0
 800b4e0:	2706      	moveq	r7, #6
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	b009      	add	sp, #36	; 0x24
 800b4e6:	ecbd 8b02 	vpop	{d8}
 800b4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ee:	463e      	mov	r6, r7
 800b4f0:	4625      	mov	r5, r4
 800b4f2:	2401      	movs	r4, #1
 800b4f4:	e7ca      	b.n	800b48c <__gethex+0xd4>
 800b4f6:	f04f 0900 	mov.w	r9, #0
 800b4fa:	1cb1      	adds	r1, r6, #2
 800b4fc:	e7d3      	b.n	800b4a6 <__gethex+0xee>
 800b4fe:	f04f 0901 	mov.w	r9, #1
 800b502:	e7fa      	b.n	800b4fa <__gethex+0x142>
 800b504:	230a      	movs	r3, #10
 800b506:	fb03 0202 	mla	r2, r3, r2, r0
 800b50a:	3a10      	subs	r2, #16
 800b50c:	e7d4      	b.n	800b4b8 <__gethex+0x100>
 800b50e:	4631      	mov	r1, r6
 800b510:	e7df      	b.n	800b4d2 <__gethex+0x11a>
 800b512:	1bf3      	subs	r3, r6, r7
 800b514:	3b01      	subs	r3, #1
 800b516:	4621      	mov	r1, r4
 800b518:	2b07      	cmp	r3, #7
 800b51a:	dc0b      	bgt.n	800b534 <__gethex+0x17c>
 800b51c:	ee18 0a10 	vmov	r0, s16
 800b520:	f000 fa7e 	bl	800ba20 <_Balloc>
 800b524:	4604      	mov	r4, r0
 800b526:	b940      	cbnz	r0, 800b53a <__gethex+0x182>
 800b528:	4b65      	ldr	r3, [pc, #404]	; (800b6c0 <__gethex+0x308>)
 800b52a:	4602      	mov	r2, r0
 800b52c:	21de      	movs	r1, #222	; 0xde
 800b52e:	4865      	ldr	r0, [pc, #404]	; (800b6c4 <__gethex+0x30c>)
 800b530:	f001 f97e 	bl	800c830 <__assert_func>
 800b534:	3101      	adds	r1, #1
 800b536:	105b      	asrs	r3, r3, #1
 800b538:	e7ee      	b.n	800b518 <__gethex+0x160>
 800b53a:	f100 0914 	add.w	r9, r0, #20
 800b53e:	f04f 0b00 	mov.w	fp, #0
 800b542:	f1ca 0301 	rsb	r3, sl, #1
 800b546:	f8cd 9008 	str.w	r9, [sp, #8]
 800b54a:	f8cd b000 	str.w	fp, [sp]
 800b54e:	9306      	str	r3, [sp, #24]
 800b550:	42b7      	cmp	r7, r6
 800b552:	d340      	bcc.n	800b5d6 <__gethex+0x21e>
 800b554:	9802      	ldr	r0, [sp, #8]
 800b556:	9b00      	ldr	r3, [sp, #0]
 800b558:	f840 3b04 	str.w	r3, [r0], #4
 800b55c:	eba0 0009 	sub.w	r0, r0, r9
 800b560:	1080      	asrs	r0, r0, #2
 800b562:	0146      	lsls	r6, r0, #5
 800b564:	6120      	str	r0, [r4, #16]
 800b566:	4618      	mov	r0, r3
 800b568:	f000 fb50 	bl	800bc0c <__hi0bits>
 800b56c:	1a30      	subs	r0, r6, r0
 800b56e:	f8d8 6000 	ldr.w	r6, [r8]
 800b572:	42b0      	cmp	r0, r6
 800b574:	dd63      	ble.n	800b63e <__gethex+0x286>
 800b576:	1b87      	subs	r7, r0, r6
 800b578:	4639      	mov	r1, r7
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 feea 	bl	800c354 <__any_on>
 800b580:	4682      	mov	sl, r0
 800b582:	b1a8      	cbz	r0, 800b5b0 <__gethex+0x1f8>
 800b584:	1e7b      	subs	r3, r7, #1
 800b586:	1159      	asrs	r1, r3, #5
 800b588:	f003 021f 	and.w	r2, r3, #31
 800b58c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b590:	f04f 0a01 	mov.w	sl, #1
 800b594:	fa0a f202 	lsl.w	r2, sl, r2
 800b598:	420a      	tst	r2, r1
 800b59a:	d009      	beq.n	800b5b0 <__gethex+0x1f8>
 800b59c:	4553      	cmp	r3, sl
 800b59e:	dd05      	ble.n	800b5ac <__gethex+0x1f4>
 800b5a0:	1eb9      	subs	r1, r7, #2
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 fed6 	bl	800c354 <__any_on>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d145      	bne.n	800b638 <__gethex+0x280>
 800b5ac:	f04f 0a02 	mov.w	sl, #2
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f7ff fe98 	bl	800b2e8 <rshift>
 800b5b8:	443d      	add	r5, r7
 800b5ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5be:	42ab      	cmp	r3, r5
 800b5c0:	da4c      	bge.n	800b65c <__gethex+0x2a4>
 800b5c2:	ee18 0a10 	vmov	r0, s16
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	f000 fa6a 	bl	800baa0 <_Bfree>
 800b5cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	27a3      	movs	r7, #163	; 0xa3
 800b5d4:	e785      	b.n	800b4e2 <__gethex+0x12a>
 800b5d6:	1e73      	subs	r3, r6, #1
 800b5d8:	9a05      	ldr	r2, [sp, #20]
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d019      	beq.n	800b618 <__gethex+0x260>
 800b5e4:	f1bb 0f20 	cmp.w	fp, #32
 800b5e8:	d107      	bne.n	800b5fa <__gethex+0x242>
 800b5ea:	9b02      	ldr	r3, [sp, #8]
 800b5ec:	9a00      	ldr	r2, [sp, #0]
 800b5ee:	f843 2b04 	str.w	r2, [r3], #4
 800b5f2:	9302      	str	r3, [sp, #8]
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	469b      	mov	fp, r3
 800b5fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b5fe:	f7ff fec5 	bl	800b38c <__hexdig_fun>
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	f000 000f 	and.w	r0, r0, #15
 800b608:	fa00 f00b 	lsl.w	r0, r0, fp
 800b60c:	4303      	orrs	r3, r0
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	f10b 0b04 	add.w	fp, fp, #4
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	e00d      	b.n	800b634 <__gethex+0x27c>
 800b618:	9b03      	ldr	r3, [sp, #12]
 800b61a:	9a06      	ldr	r2, [sp, #24]
 800b61c:	4413      	add	r3, r2
 800b61e:	42bb      	cmp	r3, r7
 800b620:	d3e0      	bcc.n	800b5e4 <__gethex+0x22c>
 800b622:	4618      	mov	r0, r3
 800b624:	9901      	ldr	r1, [sp, #4]
 800b626:	9307      	str	r3, [sp, #28]
 800b628:	4652      	mov	r2, sl
 800b62a:	f001 f8e1 	bl	800c7f0 <strncmp>
 800b62e:	9b07      	ldr	r3, [sp, #28]
 800b630:	2800      	cmp	r0, #0
 800b632:	d1d7      	bne.n	800b5e4 <__gethex+0x22c>
 800b634:	461e      	mov	r6, r3
 800b636:	e78b      	b.n	800b550 <__gethex+0x198>
 800b638:	f04f 0a03 	mov.w	sl, #3
 800b63c:	e7b8      	b.n	800b5b0 <__gethex+0x1f8>
 800b63e:	da0a      	bge.n	800b656 <__gethex+0x29e>
 800b640:	1a37      	subs	r7, r6, r0
 800b642:	4621      	mov	r1, r4
 800b644:	ee18 0a10 	vmov	r0, s16
 800b648:	463a      	mov	r2, r7
 800b64a:	f000 fc45 	bl	800bed8 <__lshift>
 800b64e:	1bed      	subs	r5, r5, r7
 800b650:	4604      	mov	r4, r0
 800b652:	f100 0914 	add.w	r9, r0, #20
 800b656:	f04f 0a00 	mov.w	sl, #0
 800b65a:	e7ae      	b.n	800b5ba <__gethex+0x202>
 800b65c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b660:	42a8      	cmp	r0, r5
 800b662:	dd72      	ble.n	800b74a <__gethex+0x392>
 800b664:	1b45      	subs	r5, r0, r5
 800b666:	42ae      	cmp	r6, r5
 800b668:	dc36      	bgt.n	800b6d8 <__gethex+0x320>
 800b66a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d02a      	beq.n	800b6c8 <__gethex+0x310>
 800b672:	2b03      	cmp	r3, #3
 800b674:	d02c      	beq.n	800b6d0 <__gethex+0x318>
 800b676:	2b01      	cmp	r3, #1
 800b678:	d115      	bne.n	800b6a6 <__gethex+0x2ee>
 800b67a:	42ae      	cmp	r6, r5
 800b67c:	d113      	bne.n	800b6a6 <__gethex+0x2ee>
 800b67e:	2e01      	cmp	r6, #1
 800b680:	d10b      	bne.n	800b69a <__gethex+0x2e2>
 800b682:	9a04      	ldr	r2, [sp, #16]
 800b684:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	2301      	movs	r3, #1
 800b68c:	6123      	str	r3, [r4, #16]
 800b68e:	f8c9 3000 	str.w	r3, [r9]
 800b692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b694:	2762      	movs	r7, #98	; 0x62
 800b696:	601c      	str	r4, [r3, #0]
 800b698:	e723      	b.n	800b4e2 <__gethex+0x12a>
 800b69a:	1e71      	subs	r1, r6, #1
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 fe59 	bl	800c354 <__any_on>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d1ed      	bne.n	800b682 <__gethex+0x2ca>
 800b6a6:	ee18 0a10 	vmov	r0, s16
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	f000 f9f8 	bl	800baa0 <_Bfree>
 800b6b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	6013      	str	r3, [r2, #0]
 800b6b6:	2750      	movs	r7, #80	; 0x50
 800b6b8:	e713      	b.n	800b4e2 <__gethex+0x12a>
 800b6ba:	bf00      	nop
 800b6bc:	0800d818 	.word	0x0800d818
 800b6c0:	0800d79b 	.word	0x0800d79b
 800b6c4:	0800d7ac 	.word	0x0800d7ac
 800b6c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1eb      	bne.n	800b6a6 <__gethex+0x2ee>
 800b6ce:	e7d8      	b.n	800b682 <__gethex+0x2ca>
 800b6d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1d5      	bne.n	800b682 <__gethex+0x2ca>
 800b6d6:	e7e6      	b.n	800b6a6 <__gethex+0x2ee>
 800b6d8:	1e6f      	subs	r7, r5, #1
 800b6da:	f1ba 0f00 	cmp.w	sl, #0
 800b6de:	d131      	bne.n	800b744 <__gethex+0x38c>
 800b6e0:	b127      	cbz	r7, 800b6ec <__gethex+0x334>
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f000 fe35 	bl	800c354 <__any_on>
 800b6ea:	4682      	mov	sl, r0
 800b6ec:	117b      	asrs	r3, r7, #5
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b6f4:	f007 071f 	and.w	r7, r7, #31
 800b6f8:	fa01 f707 	lsl.w	r7, r1, r7
 800b6fc:	421f      	tst	r7, r3
 800b6fe:	4629      	mov	r1, r5
 800b700:	4620      	mov	r0, r4
 800b702:	bf18      	it	ne
 800b704:	f04a 0a02 	orrne.w	sl, sl, #2
 800b708:	1b76      	subs	r6, r6, r5
 800b70a:	f7ff fded 	bl	800b2e8 <rshift>
 800b70e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b712:	2702      	movs	r7, #2
 800b714:	f1ba 0f00 	cmp.w	sl, #0
 800b718:	d048      	beq.n	800b7ac <__gethex+0x3f4>
 800b71a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d015      	beq.n	800b74e <__gethex+0x396>
 800b722:	2b03      	cmp	r3, #3
 800b724:	d017      	beq.n	800b756 <__gethex+0x39e>
 800b726:	2b01      	cmp	r3, #1
 800b728:	d109      	bne.n	800b73e <__gethex+0x386>
 800b72a:	f01a 0f02 	tst.w	sl, #2
 800b72e:	d006      	beq.n	800b73e <__gethex+0x386>
 800b730:	f8d9 0000 	ldr.w	r0, [r9]
 800b734:	ea4a 0a00 	orr.w	sl, sl, r0
 800b738:	f01a 0f01 	tst.w	sl, #1
 800b73c:	d10e      	bne.n	800b75c <__gethex+0x3a4>
 800b73e:	f047 0710 	orr.w	r7, r7, #16
 800b742:	e033      	b.n	800b7ac <__gethex+0x3f4>
 800b744:	f04f 0a01 	mov.w	sl, #1
 800b748:	e7d0      	b.n	800b6ec <__gethex+0x334>
 800b74a:	2701      	movs	r7, #1
 800b74c:	e7e2      	b.n	800b714 <__gethex+0x35c>
 800b74e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b750:	f1c3 0301 	rsb	r3, r3, #1
 800b754:	9315      	str	r3, [sp, #84]	; 0x54
 800b756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d0f0      	beq.n	800b73e <__gethex+0x386>
 800b75c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b760:	f104 0314 	add.w	r3, r4, #20
 800b764:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b768:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b76c:	f04f 0c00 	mov.w	ip, #0
 800b770:	4618      	mov	r0, r3
 800b772:	f853 2b04 	ldr.w	r2, [r3], #4
 800b776:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b77a:	d01c      	beq.n	800b7b6 <__gethex+0x3fe>
 800b77c:	3201      	adds	r2, #1
 800b77e:	6002      	str	r2, [r0, #0]
 800b780:	2f02      	cmp	r7, #2
 800b782:	f104 0314 	add.w	r3, r4, #20
 800b786:	d13f      	bne.n	800b808 <__gethex+0x450>
 800b788:	f8d8 2000 	ldr.w	r2, [r8]
 800b78c:	3a01      	subs	r2, #1
 800b78e:	42b2      	cmp	r2, r6
 800b790:	d10a      	bne.n	800b7a8 <__gethex+0x3f0>
 800b792:	1171      	asrs	r1, r6, #5
 800b794:	2201      	movs	r2, #1
 800b796:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b79a:	f006 061f 	and.w	r6, r6, #31
 800b79e:	fa02 f606 	lsl.w	r6, r2, r6
 800b7a2:	421e      	tst	r6, r3
 800b7a4:	bf18      	it	ne
 800b7a6:	4617      	movne	r7, r2
 800b7a8:	f047 0720 	orr.w	r7, r7, #32
 800b7ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7ae:	601c      	str	r4, [r3, #0]
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	601d      	str	r5, [r3, #0]
 800b7b4:	e695      	b.n	800b4e2 <__gethex+0x12a>
 800b7b6:	4299      	cmp	r1, r3
 800b7b8:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7bc:	d8d8      	bhi.n	800b770 <__gethex+0x3b8>
 800b7be:	68a3      	ldr	r3, [r4, #8]
 800b7c0:	459b      	cmp	fp, r3
 800b7c2:	db19      	blt.n	800b7f8 <__gethex+0x440>
 800b7c4:	6861      	ldr	r1, [r4, #4]
 800b7c6:	ee18 0a10 	vmov	r0, s16
 800b7ca:	3101      	adds	r1, #1
 800b7cc:	f000 f928 	bl	800ba20 <_Balloc>
 800b7d0:	4681      	mov	r9, r0
 800b7d2:	b918      	cbnz	r0, 800b7dc <__gethex+0x424>
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <__gethex+0x488>)
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	2184      	movs	r1, #132	; 0x84
 800b7da:	e6a8      	b.n	800b52e <__gethex+0x176>
 800b7dc:	6922      	ldr	r2, [r4, #16]
 800b7de:	3202      	adds	r2, #2
 800b7e0:	f104 010c 	add.w	r1, r4, #12
 800b7e4:	0092      	lsls	r2, r2, #2
 800b7e6:	300c      	adds	r0, #12
 800b7e8:	f000 f90c 	bl	800ba04 <memcpy>
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	ee18 0a10 	vmov	r0, s16
 800b7f2:	f000 f955 	bl	800baa0 <_Bfree>
 800b7f6:	464c      	mov	r4, r9
 800b7f8:	6923      	ldr	r3, [r4, #16]
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b800:	6122      	str	r2, [r4, #16]
 800b802:	2201      	movs	r2, #1
 800b804:	615a      	str	r2, [r3, #20]
 800b806:	e7bb      	b.n	800b780 <__gethex+0x3c8>
 800b808:	6922      	ldr	r2, [r4, #16]
 800b80a:	455a      	cmp	r2, fp
 800b80c:	dd0b      	ble.n	800b826 <__gethex+0x46e>
 800b80e:	2101      	movs	r1, #1
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff fd69 	bl	800b2e8 <rshift>
 800b816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b81a:	3501      	adds	r5, #1
 800b81c:	42ab      	cmp	r3, r5
 800b81e:	f6ff aed0 	blt.w	800b5c2 <__gethex+0x20a>
 800b822:	2701      	movs	r7, #1
 800b824:	e7c0      	b.n	800b7a8 <__gethex+0x3f0>
 800b826:	f016 061f 	ands.w	r6, r6, #31
 800b82a:	d0fa      	beq.n	800b822 <__gethex+0x46a>
 800b82c:	449a      	add	sl, r3
 800b82e:	f1c6 0620 	rsb	r6, r6, #32
 800b832:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b836:	f000 f9e9 	bl	800bc0c <__hi0bits>
 800b83a:	42b0      	cmp	r0, r6
 800b83c:	dbe7      	blt.n	800b80e <__gethex+0x456>
 800b83e:	e7f0      	b.n	800b822 <__gethex+0x46a>
 800b840:	0800d79b 	.word	0x0800d79b

0800b844 <L_shift>:
 800b844:	f1c2 0208 	rsb	r2, r2, #8
 800b848:	0092      	lsls	r2, r2, #2
 800b84a:	b570      	push	{r4, r5, r6, lr}
 800b84c:	f1c2 0620 	rsb	r6, r2, #32
 800b850:	6843      	ldr	r3, [r0, #4]
 800b852:	6804      	ldr	r4, [r0, #0]
 800b854:	fa03 f506 	lsl.w	r5, r3, r6
 800b858:	432c      	orrs	r4, r5
 800b85a:	40d3      	lsrs	r3, r2
 800b85c:	6004      	str	r4, [r0, #0]
 800b85e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b862:	4288      	cmp	r0, r1
 800b864:	d3f4      	bcc.n	800b850 <L_shift+0xc>
 800b866:	bd70      	pop	{r4, r5, r6, pc}

0800b868 <__match>:
 800b868:	b530      	push	{r4, r5, lr}
 800b86a:	6803      	ldr	r3, [r0, #0]
 800b86c:	3301      	adds	r3, #1
 800b86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b872:	b914      	cbnz	r4, 800b87a <__match+0x12>
 800b874:	6003      	str	r3, [r0, #0]
 800b876:	2001      	movs	r0, #1
 800b878:	bd30      	pop	{r4, r5, pc}
 800b87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b87e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b882:	2d19      	cmp	r5, #25
 800b884:	bf98      	it	ls
 800b886:	3220      	addls	r2, #32
 800b888:	42a2      	cmp	r2, r4
 800b88a:	d0f0      	beq.n	800b86e <__match+0x6>
 800b88c:	2000      	movs	r0, #0
 800b88e:	e7f3      	b.n	800b878 <__match+0x10>

0800b890 <__hexnan>:
 800b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	680b      	ldr	r3, [r1, #0]
 800b896:	6801      	ldr	r1, [r0, #0]
 800b898:	115e      	asrs	r6, r3, #5
 800b89a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b89e:	f013 031f 	ands.w	r3, r3, #31
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	bf18      	it	ne
 800b8a6:	3604      	addne	r6, #4
 800b8a8:	2500      	movs	r5, #0
 800b8aa:	1f37      	subs	r7, r6, #4
 800b8ac:	4682      	mov	sl, r0
 800b8ae:	4690      	mov	r8, r2
 800b8b0:	9301      	str	r3, [sp, #4]
 800b8b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8b6:	46b9      	mov	r9, r7
 800b8b8:	463c      	mov	r4, r7
 800b8ba:	9502      	str	r5, [sp, #8]
 800b8bc:	46ab      	mov	fp, r5
 800b8be:	784a      	ldrb	r2, [r1, #1]
 800b8c0:	1c4b      	adds	r3, r1, #1
 800b8c2:	9303      	str	r3, [sp, #12]
 800b8c4:	b342      	cbz	r2, 800b918 <__hexnan+0x88>
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	9105      	str	r1, [sp, #20]
 800b8ca:	9204      	str	r2, [sp, #16]
 800b8cc:	f7ff fd5e 	bl	800b38c <__hexdig_fun>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d14f      	bne.n	800b974 <__hexnan+0xe4>
 800b8d4:	9a04      	ldr	r2, [sp, #16]
 800b8d6:	9905      	ldr	r1, [sp, #20]
 800b8d8:	2a20      	cmp	r2, #32
 800b8da:	d818      	bhi.n	800b90e <__hexnan+0x7e>
 800b8dc:	9b02      	ldr	r3, [sp, #8]
 800b8de:	459b      	cmp	fp, r3
 800b8e0:	dd13      	ble.n	800b90a <__hexnan+0x7a>
 800b8e2:	454c      	cmp	r4, r9
 800b8e4:	d206      	bcs.n	800b8f4 <__hexnan+0x64>
 800b8e6:	2d07      	cmp	r5, #7
 800b8e8:	dc04      	bgt.n	800b8f4 <__hexnan+0x64>
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	4649      	mov	r1, r9
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f7ff ffa8 	bl	800b844 <L_shift>
 800b8f4:	4544      	cmp	r4, r8
 800b8f6:	d950      	bls.n	800b99a <__hexnan+0x10a>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f1a4 0904 	sub.w	r9, r4, #4
 800b8fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b902:	f8cd b008 	str.w	fp, [sp, #8]
 800b906:	464c      	mov	r4, r9
 800b908:	461d      	mov	r5, r3
 800b90a:	9903      	ldr	r1, [sp, #12]
 800b90c:	e7d7      	b.n	800b8be <__hexnan+0x2e>
 800b90e:	2a29      	cmp	r2, #41	; 0x29
 800b910:	d156      	bne.n	800b9c0 <__hexnan+0x130>
 800b912:	3102      	adds	r1, #2
 800b914:	f8ca 1000 	str.w	r1, [sl]
 800b918:	f1bb 0f00 	cmp.w	fp, #0
 800b91c:	d050      	beq.n	800b9c0 <__hexnan+0x130>
 800b91e:	454c      	cmp	r4, r9
 800b920:	d206      	bcs.n	800b930 <__hexnan+0xa0>
 800b922:	2d07      	cmp	r5, #7
 800b924:	dc04      	bgt.n	800b930 <__hexnan+0xa0>
 800b926:	462a      	mov	r2, r5
 800b928:	4649      	mov	r1, r9
 800b92a:	4620      	mov	r0, r4
 800b92c:	f7ff ff8a 	bl	800b844 <L_shift>
 800b930:	4544      	cmp	r4, r8
 800b932:	d934      	bls.n	800b99e <__hexnan+0x10e>
 800b934:	f1a8 0204 	sub.w	r2, r8, #4
 800b938:	4623      	mov	r3, r4
 800b93a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b93e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b942:	429f      	cmp	r7, r3
 800b944:	d2f9      	bcs.n	800b93a <__hexnan+0xaa>
 800b946:	1b3b      	subs	r3, r7, r4
 800b948:	f023 0303 	bic.w	r3, r3, #3
 800b94c:	3304      	adds	r3, #4
 800b94e:	3401      	adds	r4, #1
 800b950:	3e03      	subs	r6, #3
 800b952:	42b4      	cmp	r4, r6
 800b954:	bf88      	it	hi
 800b956:	2304      	movhi	r3, #4
 800b958:	4443      	add	r3, r8
 800b95a:	2200      	movs	r2, #0
 800b95c:	f843 2b04 	str.w	r2, [r3], #4
 800b960:	429f      	cmp	r7, r3
 800b962:	d2fb      	bcs.n	800b95c <__hexnan+0xcc>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	b91b      	cbnz	r3, 800b970 <__hexnan+0xe0>
 800b968:	4547      	cmp	r7, r8
 800b96a:	d127      	bne.n	800b9bc <__hexnan+0x12c>
 800b96c:	2301      	movs	r3, #1
 800b96e:	603b      	str	r3, [r7, #0]
 800b970:	2005      	movs	r0, #5
 800b972:	e026      	b.n	800b9c2 <__hexnan+0x132>
 800b974:	3501      	adds	r5, #1
 800b976:	2d08      	cmp	r5, #8
 800b978:	f10b 0b01 	add.w	fp, fp, #1
 800b97c:	dd06      	ble.n	800b98c <__hexnan+0xfc>
 800b97e:	4544      	cmp	r4, r8
 800b980:	d9c3      	bls.n	800b90a <__hexnan+0x7a>
 800b982:	2300      	movs	r3, #0
 800b984:	f844 3c04 	str.w	r3, [r4, #-4]
 800b988:	2501      	movs	r5, #1
 800b98a:	3c04      	subs	r4, #4
 800b98c:	6822      	ldr	r2, [r4, #0]
 800b98e:	f000 000f 	and.w	r0, r0, #15
 800b992:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b996:	6022      	str	r2, [r4, #0]
 800b998:	e7b7      	b.n	800b90a <__hexnan+0x7a>
 800b99a:	2508      	movs	r5, #8
 800b99c:	e7b5      	b.n	800b90a <__hexnan+0x7a>
 800b99e:	9b01      	ldr	r3, [sp, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d0df      	beq.n	800b964 <__hexnan+0xd4>
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a8:	f1c3 0320 	rsb	r3, r3, #32
 800b9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9b4:	401a      	ands	r2, r3
 800b9b6:	f846 2c04 	str.w	r2, [r6, #-4]
 800b9ba:	e7d3      	b.n	800b964 <__hexnan+0xd4>
 800b9bc:	3f04      	subs	r7, #4
 800b9be:	e7d1      	b.n	800b964 <__hexnan+0xd4>
 800b9c0:	2004      	movs	r0, #4
 800b9c2:	b007      	add	sp, #28
 800b9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9c8 <_localeconv_r>:
 800b9c8:	4800      	ldr	r0, [pc, #0]	; (800b9cc <_localeconv_r+0x4>)
 800b9ca:	4770      	bx	lr
 800b9cc:	2000018c 	.word	0x2000018c

0800b9d0 <malloc>:
 800b9d0:	4b02      	ldr	r3, [pc, #8]	; (800b9dc <malloc+0xc>)
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	6818      	ldr	r0, [r3, #0]
 800b9d6:	f000 bd3d 	b.w	800c454 <_malloc_r>
 800b9da:	bf00      	nop
 800b9dc:	20000034 	.word	0x20000034

0800b9e0 <__ascii_mbtowc>:
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	b901      	cbnz	r1, 800b9e6 <__ascii_mbtowc+0x6>
 800b9e4:	a901      	add	r1, sp, #4
 800b9e6:	b142      	cbz	r2, 800b9fa <__ascii_mbtowc+0x1a>
 800b9e8:	b14b      	cbz	r3, 800b9fe <__ascii_mbtowc+0x1e>
 800b9ea:	7813      	ldrb	r3, [r2, #0]
 800b9ec:	600b      	str	r3, [r1, #0]
 800b9ee:	7812      	ldrb	r2, [r2, #0]
 800b9f0:	1e10      	subs	r0, r2, #0
 800b9f2:	bf18      	it	ne
 800b9f4:	2001      	movne	r0, #1
 800b9f6:	b002      	add	sp, #8
 800b9f8:	4770      	bx	lr
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	e7fb      	b.n	800b9f6 <__ascii_mbtowc+0x16>
 800b9fe:	f06f 0001 	mvn.w	r0, #1
 800ba02:	e7f8      	b.n	800b9f6 <__ascii_mbtowc+0x16>

0800ba04 <memcpy>:
 800ba04:	440a      	add	r2, r1
 800ba06:	4291      	cmp	r1, r2
 800ba08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba0c:	d100      	bne.n	800ba10 <memcpy+0xc>
 800ba0e:	4770      	bx	lr
 800ba10:	b510      	push	{r4, lr}
 800ba12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba1a:	4291      	cmp	r1, r2
 800ba1c:	d1f9      	bne.n	800ba12 <memcpy+0xe>
 800ba1e:	bd10      	pop	{r4, pc}

0800ba20 <_Balloc>:
 800ba20:	b570      	push	{r4, r5, r6, lr}
 800ba22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba24:	4604      	mov	r4, r0
 800ba26:	460d      	mov	r5, r1
 800ba28:	b976      	cbnz	r6, 800ba48 <_Balloc+0x28>
 800ba2a:	2010      	movs	r0, #16
 800ba2c:	f7ff ffd0 	bl	800b9d0 <malloc>
 800ba30:	4602      	mov	r2, r0
 800ba32:	6260      	str	r0, [r4, #36]	; 0x24
 800ba34:	b920      	cbnz	r0, 800ba40 <_Balloc+0x20>
 800ba36:	4b18      	ldr	r3, [pc, #96]	; (800ba98 <_Balloc+0x78>)
 800ba38:	4818      	ldr	r0, [pc, #96]	; (800ba9c <_Balloc+0x7c>)
 800ba3a:	2166      	movs	r1, #102	; 0x66
 800ba3c:	f000 fef8 	bl	800c830 <__assert_func>
 800ba40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba44:	6006      	str	r6, [r0, #0]
 800ba46:	60c6      	str	r6, [r0, #12]
 800ba48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba4a:	68f3      	ldr	r3, [r6, #12]
 800ba4c:	b183      	cbz	r3, 800ba70 <_Balloc+0x50>
 800ba4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba56:	b9b8      	cbnz	r0, 800ba88 <_Balloc+0x68>
 800ba58:	2101      	movs	r1, #1
 800ba5a:	fa01 f605 	lsl.w	r6, r1, r5
 800ba5e:	1d72      	adds	r2, r6, #5
 800ba60:	0092      	lsls	r2, r2, #2
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 fc97 	bl	800c396 <_calloc_r>
 800ba68:	b160      	cbz	r0, 800ba84 <_Balloc+0x64>
 800ba6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba6e:	e00e      	b.n	800ba8e <_Balloc+0x6e>
 800ba70:	2221      	movs	r2, #33	; 0x21
 800ba72:	2104      	movs	r1, #4
 800ba74:	4620      	mov	r0, r4
 800ba76:	f000 fc8e 	bl	800c396 <_calloc_r>
 800ba7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba7c:	60f0      	str	r0, [r6, #12]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1e4      	bne.n	800ba4e <_Balloc+0x2e>
 800ba84:	2000      	movs	r0, #0
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
 800ba88:	6802      	ldr	r2, [r0, #0]
 800ba8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba94:	e7f7      	b.n	800ba86 <_Balloc+0x66>
 800ba96:	bf00      	nop
 800ba98:	0800d725 	.word	0x0800d725
 800ba9c:	0800d82c 	.word	0x0800d82c

0800baa0 <_Bfree>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800baa4:	4605      	mov	r5, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	b976      	cbnz	r6, 800bac8 <_Bfree+0x28>
 800baaa:	2010      	movs	r0, #16
 800baac:	f7ff ff90 	bl	800b9d0 <malloc>
 800bab0:	4602      	mov	r2, r0
 800bab2:	6268      	str	r0, [r5, #36]	; 0x24
 800bab4:	b920      	cbnz	r0, 800bac0 <_Bfree+0x20>
 800bab6:	4b09      	ldr	r3, [pc, #36]	; (800badc <_Bfree+0x3c>)
 800bab8:	4809      	ldr	r0, [pc, #36]	; (800bae0 <_Bfree+0x40>)
 800baba:	218a      	movs	r1, #138	; 0x8a
 800babc:	f000 feb8 	bl	800c830 <__assert_func>
 800bac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bac4:	6006      	str	r6, [r0, #0]
 800bac6:	60c6      	str	r6, [r0, #12]
 800bac8:	b13c      	cbz	r4, 800bada <_Bfree+0x3a>
 800baca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bacc:	6862      	ldr	r2, [r4, #4]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bad4:	6021      	str	r1, [r4, #0]
 800bad6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	0800d725 	.word	0x0800d725
 800bae0:	0800d82c 	.word	0x0800d82c

0800bae4 <__multadd>:
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	690e      	ldr	r6, [r1, #16]
 800baea:	4607      	mov	r7, r0
 800baec:	4698      	mov	r8, r3
 800baee:	460c      	mov	r4, r1
 800baf0:	f101 0014 	add.w	r0, r1, #20
 800baf4:	2300      	movs	r3, #0
 800baf6:	6805      	ldr	r5, [r0, #0]
 800baf8:	b2a9      	uxth	r1, r5
 800bafa:	fb02 8101 	mla	r1, r2, r1, r8
 800bafe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bb02:	0c2d      	lsrs	r5, r5, #16
 800bb04:	fb02 c505 	mla	r5, r2, r5, ip
 800bb08:	b289      	uxth	r1, r1
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bb10:	429e      	cmp	r6, r3
 800bb12:	f840 1b04 	str.w	r1, [r0], #4
 800bb16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bb1a:	dcec      	bgt.n	800baf6 <__multadd+0x12>
 800bb1c:	f1b8 0f00 	cmp.w	r8, #0
 800bb20:	d022      	beq.n	800bb68 <__multadd+0x84>
 800bb22:	68a3      	ldr	r3, [r4, #8]
 800bb24:	42b3      	cmp	r3, r6
 800bb26:	dc19      	bgt.n	800bb5c <__multadd+0x78>
 800bb28:	6861      	ldr	r1, [r4, #4]
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	3101      	adds	r1, #1
 800bb2e:	f7ff ff77 	bl	800ba20 <_Balloc>
 800bb32:	4605      	mov	r5, r0
 800bb34:	b928      	cbnz	r0, 800bb42 <__multadd+0x5e>
 800bb36:	4602      	mov	r2, r0
 800bb38:	4b0d      	ldr	r3, [pc, #52]	; (800bb70 <__multadd+0x8c>)
 800bb3a:	480e      	ldr	r0, [pc, #56]	; (800bb74 <__multadd+0x90>)
 800bb3c:	21b5      	movs	r1, #181	; 0xb5
 800bb3e:	f000 fe77 	bl	800c830 <__assert_func>
 800bb42:	6922      	ldr	r2, [r4, #16]
 800bb44:	3202      	adds	r2, #2
 800bb46:	f104 010c 	add.w	r1, r4, #12
 800bb4a:	0092      	lsls	r2, r2, #2
 800bb4c:	300c      	adds	r0, #12
 800bb4e:	f7ff ff59 	bl	800ba04 <memcpy>
 800bb52:	4621      	mov	r1, r4
 800bb54:	4638      	mov	r0, r7
 800bb56:	f7ff ffa3 	bl	800baa0 <_Bfree>
 800bb5a:	462c      	mov	r4, r5
 800bb5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bb60:	3601      	adds	r6, #1
 800bb62:	f8c3 8014 	str.w	r8, [r3, #20]
 800bb66:	6126      	str	r6, [r4, #16]
 800bb68:	4620      	mov	r0, r4
 800bb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb6e:	bf00      	nop
 800bb70:	0800d79b 	.word	0x0800d79b
 800bb74:	0800d82c 	.word	0x0800d82c

0800bb78 <__s2b>:
 800bb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	4615      	mov	r5, r2
 800bb80:	461f      	mov	r7, r3
 800bb82:	2209      	movs	r2, #9
 800bb84:	3308      	adds	r3, #8
 800bb86:	4606      	mov	r6, r0
 800bb88:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	2201      	movs	r2, #1
 800bb90:	429a      	cmp	r2, r3
 800bb92:	db09      	blt.n	800bba8 <__s2b+0x30>
 800bb94:	4630      	mov	r0, r6
 800bb96:	f7ff ff43 	bl	800ba20 <_Balloc>
 800bb9a:	b940      	cbnz	r0, 800bbae <__s2b+0x36>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	4b19      	ldr	r3, [pc, #100]	; (800bc04 <__s2b+0x8c>)
 800bba0:	4819      	ldr	r0, [pc, #100]	; (800bc08 <__s2b+0x90>)
 800bba2:	21ce      	movs	r1, #206	; 0xce
 800bba4:	f000 fe44 	bl	800c830 <__assert_func>
 800bba8:	0052      	lsls	r2, r2, #1
 800bbaa:	3101      	adds	r1, #1
 800bbac:	e7f0      	b.n	800bb90 <__s2b+0x18>
 800bbae:	9b08      	ldr	r3, [sp, #32]
 800bbb0:	6143      	str	r3, [r0, #20]
 800bbb2:	2d09      	cmp	r5, #9
 800bbb4:	f04f 0301 	mov.w	r3, #1
 800bbb8:	6103      	str	r3, [r0, #16]
 800bbba:	dd16      	ble.n	800bbea <__s2b+0x72>
 800bbbc:	f104 0909 	add.w	r9, r4, #9
 800bbc0:	46c8      	mov	r8, r9
 800bbc2:	442c      	add	r4, r5
 800bbc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbc8:	4601      	mov	r1, r0
 800bbca:	3b30      	subs	r3, #48	; 0x30
 800bbcc:	220a      	movs	r2, #10
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f7ff ff88 	bl	800bae4 <__multadd>
 800bbd4:	45a0      	cmp	r8, r4
 800bbd6:	d1f5      	bne.n	800bbc4 <__s2b+0x4c>
 800bbd8:	f1a5 0408 	sub.w	r4, r5, #8
 800bbdc:	444c      	add	r4, r9
 800bbde:	1b2d      	subs	r5, r5, r4
 800bbe0:	1963      	adds	r3, r4, r5
 800bbe2:	42bb      	cmp	r3, r7
 800bbe4:	db04      	blt.n	800bbf0 <__s2b+0x78>
 800bbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbea:	340a      	adds	r4, #10
 800bbec:	2509      	movs	r5, #9
 800bbee:	e7f6      	b.n	800bbde <__s2b+0x66>
 800bbf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	3b30      	subs	r3, #48	; 0x30
 800bbf8:	220a      	movs	r2, #10
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f7ff ff72 	bl	800bae4 <__multadd>
 800bc00:	e7ee      	b.n	800bbe0 <__s2b+0x68>
 800bc02:	bf00      	nop
 800bc04:	0800d79b 	.word	0x0800d79b
 800bc08:	0800d82c 	.word	0x0800d82c

0800bc0c <__hi0bits>:
 800bc0c:	0c03      	lsrs	r3, r0, #16
 800bc0e:	041b      	lsls	r3, r3, #16
 800bc10:	b9d3      	cbnz	r3, 800bc48 <__hi0bits+0x3c>
 800bc12:	0400      	lsls	r0, r0, #16
 800bc14:	2310      	movs	r3, #16
 800bc16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc1a:	bf04      	itt	eq
 800bc1c:	0200      	lsleq	r0, r0, #8
 800bc1e:	3308      	addeq	r3, #8
 800bc20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc24:	bf04      	itt	eq
 800bc26:	0100      	lsleq	r0, r0, #4
 800bc28:	3304      	addeq	r3, #4
 800bc2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc2e:	bf04      	itt	eq
 800bc30:	0080      	lsleq	r0, r0, #2
 800bc32:	3302      	addeq	r3, #2
 800bc34:	2800      	cmp	r0, #0
 800bc36:	db05      	blt.n	800bc44 <__hi0bits+0x38>
 800bc38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc3c:	f103 0301 	add.w	r3, r3, #1
 800bc40:	bf08      	it	eq
 800bc42:	2320      	moveq	r3, #32
 800bc44:	4618      	mov	r0, r3
 800bc46:	4770      	bx	lr
 800bc48:	2300      	movs	r3, #0
 800bc4a:	e7e4      	b.n	800bc16 <__hi0bits+0xa>

0800bc4c <__lo0bits>:
 800bc4c:	6803      	ldr	r3, [r0, #0]
 800bc4e:	f013 0207 	ands.w	r2, r3, #7
 800bc52:	4601      	mov	r1, r0
 800bc54:	d00b      	beq.n	800bc6e <__lo0bits+0x22>
 800bc56:	07da      	lsls	r2, r3, #31
 800bc58:	d424      	bmi.n	800bca4 <__lo0bits+0x58>
 800bc5a:	0798      	lsls	r0, r3, #30
 800bc5c:	bf49      	itett	mi
 800bc5e:	085b      	lsrmi	r3, r3, #1
 800bc60:	089b      	lsrpl	r3, r3, #2
 800bc62:	2001      	movmi	r0, #1
 800bc64:	600b      	strmi	r3, [r1, #0]
 800bc66:	bf5c      	itt	pl
 800bc68:	600b      	strpl	r3, [r1, #0]
 800bc6a:	2002      	movpl	r0, #2
 800bc6c:	4770      	bx	lr
 800bc6e:	b298      	uxth	r0, r3
 800bc70:	b9b0      	cbnz	r0, 800bca0 <__lo0bits+0x54>
 800bc72:	0c1b      	lsrs	r3, r3, #16
 800bc74:	2010      	movs	r0, #16
 800bc76:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc7a:	bf04      	itt	eq
 800bc7c:	0a1b      	lsreq	r3, r3, #8
 800bc7e:	3008      	addeq	r0, #8
 800bc80:	071a      	lsls	r2, r3, #28
 800bc82:	bf04      	itt	eq
 800bc84:	091b      	lsreq	r3, r3, #4
 800bc86:	3004      	addeq	r0, #4
 800bc88:	079a      	lsls	r2, r3, #30
 800bc8a:	bf04      	itt	eq
 800bc8c:	089b      	lsreq	r3, r3, #2
 800bc8e:	3002      	addeq	r0, #2
 800bc90:	07da      	lsls	r2, r3, #31
 800bc92:	d403      	bmi.n	800bc9c <__lo0bits+0x50>
 800bc94:	085b      	lsrs	r3, r3, #1
 800bc96:	f100 0001 	add.w	r0, r0, #1
 800bc9a:	d005      	beq.n	800bca8 <__lo0bits+0x5c>
 800bc9c:	600b      	str	r3, [r1, #0]
 800bc9e:	4770      	bx	lr
 800bca0:	4610      	mov	r0, r2
 800bca2:	e7e8      	b.n	800bc76 <__lo0bits+0x2a>
 800bca4:	2000      	movs	r0, #0
 800bca6:	4770      	bx	lr
 800bca8:	2020      	movs	r0, #32
 800bcaa:	4770      	bx	lr

0800bcac <__i2b>:
 800bcac:	b510      	push	{r4, lr}
 800bcae:	460c      	mov	r4, r1
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	f7ff feb5 	bl	800ba20 <_Balloc>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	b928      	cbnz	r0, 800bcc6 <__i2b+0x1a>
 800bcba:	4b05      	ldr	r3, [pc, #20]	; (800bcd0 <__i2b+0x24>)
 800bcbc:	4805      	ldr	r0, [pc, #20]	; (800bcd4 <__i2b+0x28>)
 800bcbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcc2:	f000 fdb5 	bl	800c830 <__assert_func>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	6144      	str	r4, [r0, #20]
 800bcca:	6103      	str	r3, [r0, #16]
 800bccc:	bd10      	pop	{r4, pc}
 800bcce:	bf00      	nop
 800bcd0:	0800d79b 	.word	0x0800d79b
 800bcd4:	0800d82c 	.word	0x0800d82c

0800bcd8 <__multiply>:
 800bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcdc:	4614      	mov	r4, r2
 800bcde:	690a      	ldr	r2, [r1, #16]
 800bce0:	6923      	ldr	r3, [r4, #16]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	bfb8      	it	lt
 800bce6:	460b      	movlt	r3, r1
 800bce8:	460d      	mov	r5, r1
 800bcea:	bfbc      	itt	lt
 800bcec:	4625      	movlt	r5, r4
 800bcee:	461c      	movlt	r4, r3
 800bcf0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bcf4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bcf8:	68ab      	ldr	r3, [r5, #8]
 800bcfa:	6869      	ldr	r1, [r5, #4]
 800bcfc:	eb0a 0709 	add.w	r7, sl, r9
 800bd00:	42bb      	cmp	r3, r7
 800bd02:	b085      	sub	sp, #20
 800bd04:	bfb8      	it	lt
 800bd06:	3101      	addlt	r1, #1
 800bd08:	f7ff fe8a 	bl	800ba20 <_Balloc>
 800bd0c:	b930      	cbnz	r0, 800bd1c <__multiply+0x44>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	4b42      	ldr	r3, [pc, #264]	; (800be1c <__multiply+0x144>)
 800bd12:	4843      	ldr	r0, [pc, #268]	; (800be20 <__multiply+0x148>)
 800bd14:	f240 115d 	movw	r1, #349	; 0x15d
 800bd18:	f000 fd8a 	bl	800c830 <__assert_func>
 800bd1c:	f100 0614 	add.w	r6, r0, #20
 800bd20:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bd24:	4633      	mov	r3, r6
 800bd26:	2200      	movs	r2, #0
 800bd28:	4543      	cmp	r3, r8
 800bd2a:	d31e      	bcc.n	800bd6a <__multiply+0x92>
 800bd2c:	f105 0c14 	add.w	ip, r5, #20
 800bd30:	f104 0314 	add.w	r3, r4, #20
 800bd34:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bd38:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bd3c:	9202      	str	r2, [sp, #8]
 800bd3e:	ebac 0205 	sub.w	r2, ip, r5
 800bd42:	3a15      	subs	r2, #21
 800bd44:	f022 0203 	bic.w	r2, r2, #3
 800bd48:	3204      	adds	r2, #4
 800bd4a:	f105 0115 	add.w	r1, r5, #21
 800bd4e:	458c      	cmp	ip, r1
 800bd50:	bf38      	it	cc
 800bd52:	2204      	movcc	r2, #4
 800bd54:	9201      	str	r2, [sp, #4]
 800bd56:	9a02      	ldr	r2, [sp, #8]
 800bd58:	9303      	str	r3, [sp, #12]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d808      	bhi.n	800bd70 <__multiply+0x98>
 800bd5e:	2f00      	cmp	r7, #0
 800bd60:	dc55      	bgt.n	800be0e <__multiply+0x136>
 800bd62:	6107      	str	r7, [r0, #16]
 800bd64:	b005      	add	sp, #20
 800bd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6a:	f843 2b04 	str.w	r2, [r3], #4
 800bd6e:	e7db      	b.n	800bd28 <__multiply+0x50>
 800bd70:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd74:	f1ba 0f00 	cmp.w	sl, #0
 800bd78:	d020      	beq.n	800bdbc <__multiply+0xe4>
 800bd7a:	f105 0e14 	add.w	lr, r5, #20
 800bd7e:	46b1      	mov	r9, r6
 800bd80:	2200      	movs	r2, #0
 800bd82:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd86:	f8d9 b000 	ldr.w	fp, [r9]
 800bd8a:	b2a1      	uxth	r1, r4
 800bd8c:	fa1f fb8b 	uxth.w	fp, fp
 800bd90:	fb0a b101 	mla	r1, sl, r1, fp
 800bd94:	4411      	add	r1, r2
 800bd96:	f8d9 2000 	ldr.w	r2, [r9]
 800bd9a:	0c24      	lsrs	r4, r4, #16
 800bd9c:	0c12      	lsrs	r2, r2, #16
 800bd9e:	fb0a 2404 	mla	r4, sl, r4, r2
 800bda2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bda6:	b289      	uxth	r1, r1
 800bda8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bdac:	45f4      	cmp	ip, lr
 800bdae:	f849 1b04 	str.w	r1, [r9], #4
 800bdb2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bdb6:	d8e4      	bhi.n	800bd82 <__multiply+0xaa>
 800bdb8:	9901      	ldr	r1, [sp, #4]
 800bdba:	5072      	str	r2, [r6, r1]
 800bdbc:	9a03      	ldr	r2, [sp, #12]
 800bdbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	f1b9 0f00 	cmp.w	r9, #0
 800bdc8:	d01f      	beq.n	800be0a <__multiply+0x132>
 800bdca:	6834      	ldr	r4, [r6, #0]
 800bdcc:	f105 0114 	add.w	r1, r5, #20
 800bdd0:	46b6      	mov	lr, r6
 800bdd2:	f04f 0a00 	mov.w	sl, #0
 800bdd6:	880a      	ldrh	r2, [r1, #0]
 800bdd8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bddc:	fb09 b202 	mla	r2, r9, r2, fp
 800bde0:	4492      	add	sl, r2
 800bde2:	b2a4      	uxth	r4, r4
 800bde4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bde8:	f84e 4b04 	str.w	r4, [lr], #4
 800bdec:	f851 4b04 	ldr.w	r4, [r1], #4
 800bdf0:	f8be 2000 	ldrh.w	r2, [lr]
 800bdf4:	0c24      	lsrs	r4, r4, #16
 800bdf6:	fb09 2404 	mla	r4, r9, r4, r2
 800bdfa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bdfe:	458c      	cmp	ip, r1
 800be00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800be04:	d8e7      	bhi.n	800bdd6 <__multiply+0xfe>
 800be06:	9a01      	ldr	r2, [sp, #4]
 800be08:	50b4      	str	r4, [r6, r2]
 800be0a:	3604      	adds	r6, #4
 800be0c:	e7a3      	b.n	800bd56 <__multiply+0x7e>
 800be0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1a5      	bne.n	800bd62 <__multiply+0x8a>
 800be16:	3f01      	subs	r7, #1
 800be18:	e7a1      	b.n	800bd5e <__multiply+0x86>
 800be1a:	bf00      	nop
 800be1c:	0800d79b 	.word	0x0800d79b
 800be20:	0800d82c 	.word	0x0800d82c

0800be24 <__pow5mult>:
 800be24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be28:	4615      	mov	r5, r2
 800be2a:	f012 0203 	ands.w	r2, r2, #3
 800be2e:	4606      	mov	r6, r0
 800be30:	460f      	mov	r7, r1
 800be32:	d007      	beq.n	800be44 <__pow5mult+0x20>
 800be34:	4c25      	ldr	r4, [pc, #148]	; (800becc <__pow5mult+0xa8>)
 800be36:	3a01      	subs	r2, #1
 800be38:	2300      	movs	r3, #0
 800be3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be3e:	f7ff fe51 	bl	800bae4 <__multadd>
 800be42:	4607      	mov	r7, r0
 800be44:	10ad      	asrs	r5, r5, #2
 800be46:	d03d      	beq.n	800bec4 <__pow5mult+0xa0>
 800be48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be4a:	b97c      	cbnz	r4, 800be6c <__pow5mult+0x48>
 800be4c:	2010      	movs	r0, #16
 800be4e:	f7ff fdbf 	bl	800b9d0 <malloc>
 800be52:	4602      	mov	r2, r0
 800be54:	6270      	str	r0, [r6, #36]	; 0x24
 800be56:	b928      	cbnz	r0, 800be64 <__pow5mult+0x40>
 800be58:	4b1d      	ldr	r3, [pc, #116]	; (800bed0 <__pow5mult+0xac>)
 800be5a:	481e      	ldr	r0, [pc, #120]	; (800bed4 <__pow5mult+0xb0>)
 800be5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be60:	f000 fce6 	bl	800c830 <__assert_func>
 800be64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be68:	6004      	str	r4, [r0, #0]
 800be6a:	60c4      	str	r4, [r0, #12]
 800be6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be74:	b94c      	cbnz	r4, 800be8a <__pow5mult+0x66>
 800be76:	f240 2171 	movw	r1, #625	; 0x271
 800be7a:	4630      	mov	r0, r6
 800be7c:	f7ff ff16 	bl	800bcac <__i2b>
 800be80:	2300      	movs	r3, #0
 800be82:	f8c8 0008 	str.w	r0, [r8, #8]
 800be86:	4604      	mov	r4, r0
 800be88:	6003      	str	r3, [r0, #0]
 800be8a:	f04f 0900 	mov.w	r9, #0
 800be8e:	07eb      	lsls	r3, r5, #31
 800be90:	d50a      	bpl.n	800bea8 <__pow5mult+0x84>
 800be92:	4639      	mov	r1, r7
 800be94:	4622      	mov	r2, r4
 800be96:	4630      	mov	r0, r6
 800be98:	f7ff ff1e 	bl	800bcd8 <__multiply>
 800be9c:	4639      	mov	r1, r7
 800be9e:	4680      	mov	r8, r0
 800bea0:	4630      	mov	r0, r6
 800bea2:	f7ff fdfd 	bl	800baa0 <_Bfree>
 800bea6:	4647      	mov	r7, r8
 800bea8:	106d      	asrs	r5, r5, #1
 800beaa:	d00b      	beq.n	800bec4 <__pow5mult+0xa0>
 800beac:	6820      	ldr	r0, [r4, #0]
 800beae:	b938      	cbnz	r0, 800bec0 <__pow5mult+0x9c>
 800beb0:	4622      	mov	r2, r4
 800beb2:	4621      	mov	r1, r4
 800beb4:	4630      	mov	r0, r6
 800beb6:	f7ff ff0f 	bl	800bcd8 <__multiply>
 800beba:	6020      	str	r0, [r4, #0]
 800bebc:	f8c0 9000 	str.w	r9, [r0]
 800bec0:	4604      	mov	r4, r0
 800bec2:	e7e4      	b.n	800be8e <__pow5mult+0x6a>
 800bec4:	4638      	mov	r0, r7
 800bec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beca:	bf00      	nop
 800becc:	0800d980 	.word	0x0800d980
 800bed0:	0800d725 	.word	0x0800d725
 800bed4:	0800d82c 	.word	0x0800d82c

0800bed8 <__lshift>:
 800bed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bedc:	460c      	mov	r4, r1
 800bede:	6849      	ldr	r1, [r1, #4]
 800bee0:	6923      	ldr	r3, [r4, #16]
 800bee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bee6:	68a3      	ldr	r3, [r4, #8]
 800bee8:	4607      	mov	r7, r0
 800beea:	4691      	mov	r9, r2
 800beec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bef0:	f108 0601 	add.w	r6, r8, #1
 800bef4:	42b3      	cmp	r3, r6
 800bef6:	db0b      	blt.n	800bf10 <__lshift+0x38>
 800bef8:	4638      	mov	r0, r7
 800befa:	f7ff fd91 	bl	800ba20 <_Balloc>
 800befe:	4605      	mov	r5, r0
 800bf00:	b948      	cbnz	r0, 800bf16 <__lshift+0x3e>
 800bf02:	4602      	mov	r2, r0
 800bf04:	4b28      	ldr	r3, [pc, #160]	; (800bfa8 <__lshift+0xd0>)
 800bf06:	4829      	ldr	r0, [pc, #164]	; (800bfac <__lshift+0xd4>)
 800bf08:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf0c:	f000 fc90 	bl	800c830 <__assert_func>
 800bf10:	3101      	adds	r1, #1
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	e7ee      	b.n	800bef4 <__lshift+0x1c>
 800bf16:	2300      	movs	r3, #0
 800bf18:	f100 0114 	add.w	r1, r0, #20
 800bf1c:	f100 0210 	add.w	r2, r0, #16
 800bf20:	4618      	mov	r0, r3
 800bf22:	4553      	cmp	r3, sl
 800bf24:	db33      	blt.n	800bf8e <__lshift+0xb6>
 800bf26:	6920      	ldr	r0, [r4, #16]
 800bf28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf2c:	f104 0314 	add.w	r3, r4, #20
 800bf30:	f019 091f 	ands.w	r9, r9, #31
 800bf34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf3c:	d02b      	beq.n	800bf96 <__lshift+0xbe>
 800bf3e:	f1c9 0e20 	rsb	lr, r9, #32
 800bf42:	468a      	mov	sl, r1
 800bf44:	2200      	movs	r2, #0
 800bf46:	6818      	ldr	r0, [r3, #0]
 800bf48:	fa00 f009 	lsl.w	r0, r0, r9
 800bf4c:	4302      	orrs	r2, r0
 800bf4e:	f84a 2b04 	str.w	r2, [sl], #4
 800bf52:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf56:	459c      	cmp	ip, r3
 800bf58:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf5c:	d8f3      	bhi.n	800bf46 <__lshift+0x6e>
 800bf5e:	ebac 0304 	sub.w	r3, ip, r4
 800bf62:	3b15      	subs	r3, #21
 800bf64:	f023 0303 	bic.w	r3, r3, #3
 800bf68:	3304      	adds	r3, #4
 800bf6a:	f104 0015 	add.w	r0, r4, #21
 800bf6e:	4584      	cmp	ip, r0
 800bf70:	bf38      	it	cc
 800bf72:	2304      	movcc	r3, #4
 800bf74:	50ca      	str	r2, [r1, r3]
 800bf76:	b10a      	cbz	r2, 800bf7c <__lshift+0xa4>
 800bf78:	f108 0602 	add.w	r6, r8, #2
 800bf7c:	3e01      	subs	r6, #1
 800bf7e:	4638      	mov	r0, r7
 800bf80:	612e      	str	r6, [r5, #16]
 800bf82:	4621      	mov	r1, r4
 800bf84:	f7ff fd8c 	bl	800baa0 <_Bfree>
 800bf88:	4628      	mov	r0, r5
 800bf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf92:	3301      	adds	r3, #1
 800bf94:	e7c5      	b.n	800bf22 <__lshift+0x4a>
 800bf96:	3904      	subs	r1, #4
 800bf98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfa0:	459c      	cmp	ip, r3
 800bfa2:	d8f9      	bhi.n	800bf98 <__lshift+0xc0>
 800bfa4:	e7ea      	b.n	800bf7c <__lshift+0xa4>
 800bfa6:	bf00      	nop
 800bfa8:	0800d79b 	.word	0x0800d79b
 800bfac:	0800d82c 	.word	0x0800d82c

0800bfb0 <__mcmp>:
 800bfb0:	b530      	push	{r4, r5, lr}
 800bfb2:	6902      	ldr	r2, [r0, #16]
 800bfb4:	690c      	ldr	r4, [r1, #16]
 800bfb6:	1b12      	subs	r2, r2, r4
 800bfb8:	d10e      	bne.n	800bfd8 <__mcmp+0x28>
 800bfba:	f100 0314 	add.w	r3, r0, #20
 800bfbe:	3114      	adds	r1, #20
 800bfc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfd0:	42a5      	cmp	r5, r4
 800bfd2:	d003      	beq.n	800bfdc <__mcmp+0x2c>
 800bfd4:	d305      	bcc.n	800bfe2 <__mcmp+0x32>
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	4610      	mov	r0, r2
 800bfda:	bd30      	pop	{r4, r5, pc}
 800bfdc:	4283      	cmp	r3, r0
 800bfde:	d3f3      	bcc.n	800bfc8 <__mcmp+0x18>
 800bfe0:	e7fa      	b.n	800bfd8 <__mcmp+0x28>
 800bfe2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe6:	e7f7      	b.n	800bfd8 <__mcmp+0x28>

0800bfe8 <__mdiff>:
 800bfe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	460c      	mov	r4, r1
 800bfee:	4606      	mov	r6, r0
 800bff0:	4611      	mov	r1, r2
 800bff2:	4620      	mov	r0, r4
 800bff4:	4617      	mov	r7, r2
 800bff6:	f7ff ffdb 	bl	800bfb0 <__mcmp>
 800bffa:	1e05      	subs	r5, r0, #0
 800bffc:	d110      	bne.n	800c020 <__mdiff+0x38>
 800bffe:	4629      	mov	r1, r5
 800c000:	4630      	mov	r0, r6
 800c002:	f7ff fd0d 	bl	800ba20 <_Balloc>
 800c006:	b930      	cbnz	r0, 800c016 <__mdiff+0x2e>
 800c008:	4b39      	ldr	r3, [pc, #228]	; (800c0f0 <__mdiff+0x108>)
 800c00a:	4602      	mov	r2, r0
 800c00c:	f240 2132 	movw	r1, #562	; 0x232
 800c010:	4838      	ldr	r0, [pc, #224]	; (800c0f4 <__mdiff+0x10c>)
 800c012:	f000 fc0d 	bl	800c830 <__assert_func>
 800c016:	2301      	movs	r3, #1
 800c018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c01c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c020:	bfa4      	itt	ge
 800c022:	463b      	movge	r3, r7
 800c024:	4627      	movge	r7, r4
 800c026:	4630      	mov	r0, r6
 800c028:	6879      	ldr	r1, [r7, #4]
 800c02a:	bfa6      	itte	ge
 800c02c:	461c      	movge	r4, r3
 800c02e:	2500      	movge	r5, #0
 800c030:	2501      	movlt	r5, #1
 800c032:	f7ff fcf5 	bl	800ba20 <_Balloc>
 800c036:	b920      	cbnz	r0, 800c042 <__mdiff+0x5a>
 800c038:	4b2d      	ldr	r3, [pc, #180]	; (800c0f0 <__mdiff+0x108>)
 800c03a:	4602      	mov	r2, r0
 800c03c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c040:	e7e6      	b.n	800c010 <__mdiff+0x28>
 800c042:	693e      	ldr	r6, [r7, #16]
 800c044:	60c5      	str	r5, [r0, #12]
 800c046:	6925      	ldr	r5, [r4, #16]
 800c048:	f107 0114 	add.w	r1, r7, #20
 800c04c:	f104 0914 	add.w	r9, r4, #20
 800c050:	f100 0e14 	add.w	lr, r0, #20
 800c054:	f107 0210 	add.w	r2, r7, #16
 800c058:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c05c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c060:	46f2      	mov	sl, lr
 800c062:	2700      	movs	r7, #0
 800c064:	f859 3b04 	ldr.w	r3, [r9], #4
 800c068:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c06c:	fa1f f883 	uxth.w	r8, r3
 800c070:	fa17 f78b 	uxtah	r7, r7, fp
 800c074:	0c1b      	lsrs	r3, r3, #16
 800c076:	eba7 0808 	sub.w	r8, r7, r8
 800c07a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c07e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c082:	fa1f f888 	uxth.w	r8, r8
 800c086:	141f      	asrs	r7, r3, #16
 800c088:	454d      	cmp	r5, r9
 800c08a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c08e:	f84a 3b04 	str.w	r3, [sl], #4
 800c092:	d8e7      	bhi.n	800c064 <__mdiff+0x7c>
 800c094:	1b2b      	subs	r3, r5, r4
 800c096:	3b15      	subs	r3, #21
 800c098:	f023 0303 	bic.w	r3, r3, #3
 800c09c:	3304      	adds	r3, #4
 800c09e:	3415      	adds	r4, #21
 800c0a0:	42a5      	cmp	r5, r4
 800c0a2:	bf38      	it	cc
 800c0a4:	2304      	movcc	r3, #4
 800c0a6:	4419      	add	r1, r3
 800c0a8:	4473      	add	r3, lr
 800c0aa:	469e      	mov	lr, r3
 800c0ac:	460d      	mov	r5, r1
 800c0ae:	4565      	cmp	r5, ip
 800c0b0:	d30e      	bcc.n	800c0d0 <__mdiff+0xe8>
 800c0b2:	f10c 0203 	add.w	r2, ip, #3
 800c0b6:	1a52      	subs	r2, r2, r1
 800c0b8:	f022 0203 	bic.w	r2, r2, #3
 800c0bc:	3903      	subs	r1, #3
 800c0be:	458c      	cmp	ip, r1
 800c0c0:	bf38      	it	cc
 800c0c2:	2200      	movcc	r2, #0
 800c0c4:	441a      	add	r2, r3
 800c0c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0ca:	b17b      	cbz	r3, 800c0ec <__mdiff+0x104>
 800c0cc:	6106      	str	r6, [r0, #16]
 800c0ce:	e7a5      	b.n	800c01c <__mdiff+0x34>
 800c0d0:	f855 8b04 	ldr.w	r8, [r5], #4
 800c0d4:	fa17 f488 	uxtah	r4, r7, r8
 800c0d8:	1422      	asrs	r2, r4, #16
 800c0da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c0de:	b2a4      	uxth	r4, r4
 800c0e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c0e4:	f84e 4b04 	str.w	r4, [lr], #4
 800c0e8:	1417      	asrs	r7, r2, #16
 800c0ea:	e7e0      	b.n	800c0ae <__mdiff+0xc6>
 800c0ec:	3e01      	subs	r6, #1
 800c0ee:	e7ea      	b.n	800c0c6 <__mdiff+0xde>
 800c0f0:	0800d79b 	.word	0x0800d79b
 800c0f4:	0800d82c 	.word	0x0800d82c

0800c0f8 <__ulp>:
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	ed8d 0b00 	vstr	d0, [sp]
 800c0fe:	9b01      	ldr	r3, [sp, #4]
 800c100:	4912      	ldr	r1, [pc, #72]	; (800c14c <__ulp+0x54>)
 800c102:	4019      	ands	r1, r3
 800c104:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c108:	2900      	cmp	r1, #0
 800c10a:	dd05      	ble.n	800c118 <__ulp+0x20>
 800c10c:	2200      	movs	r2, #0
 800c10e:	460b      	mov	r3, r1
 800c110:	ec43 2b10 	vmov	d0, r2, r3
 800c114:	b002      	add	sp, #8
 800c116:	4770      	bx	lr
 800c118:	4249      	negs	r1, r1
 800c11a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c11e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	f04f 0300 	mov.w	r3, #0
 800c12a:	da04      	bge.n	800c136 <__ulp+0x3e>
 800c12c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c130:	fa41 f300 	asr.w	r3, r1, r0
 800c134:	e7ec      	b.n	800c110 <__ulp+0x18>
 800c136:	f1a0 0114 	sub.w	r1, r0, #20
 800c13a:	291e      	cmp	r1, #30
 800c13c:	bfda      	itte	le
 800c13e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c142:	fa20 f101 	lsrle.w	r1, r0, r1
 800c146:	2101      	movgt	r1, #1
 800c148:	460a      	mov	r2, r1
 800c14a:	e7e1      	b.n	800c110 <__ulp+0x18>
 800c14c:	7ff00000 	.word	0x7ff00000

0800c150 <__b2d>:
 800c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c152:	6905      	ldr	r5, [r0, #16]
 800c154:	f100 0714 	add.w	r7, r0, #20
 800c158:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c15c:	1f2e      	subs	r6, r5, #4
 800c15e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c162:	4620      	mov	r0, r4
 800c164:	f7ff fd52 	bl	800bc0c <__hi0bits>
 800c168:	f1c0 0320 	rsb	r3, r0, #32
 800c16c:	280a      	cmp	r0, #10
 800c16e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c1ec <__b2d+0x9c>
 800c172:	600b      	str	r3, [r1, #0]
 800c174:	dc14      	bgt.n	800c1a0 <__b2d+0x50>
 800c176:	f1c0 0e0b 	rsb	lr, r0, #11
 800c17a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c17e:	42b7      	cmp	r7, r6
 800c180:	ea41 030c 	orr.w	r3, r1, ip
 800c184:	bf34      	ite	cc
 800c186:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c18a:	2100      	movcs	r1, #0
 800c18c:	3015      	adds	r0, #21
 800c18e:	fa04 f000 	lsl.w	r0, r4, r0
 800c192:	fa21 f10e 	lsr.w	r1, r1, lr
 800c196:	ea40 0201 	orr.w	r2, r0, r1
 800c19a:	ec43 2b10 	vmov	d0, r2, r3
 800c19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a0:	42b7      	cmp	r7, r6
 800c1a2:	bf3a      	itte	cc
 800c1a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c1a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800c1ac:	2100      	movcs	r1, #0
 800c1ae:	380b      	subs	r0, #11
 800c1b0:	d017      	beq.n	800c1e2 <__b2d+0x92>
 800c1b2:	f1c0 0c20 	rsb	ip, r0, #32
 800c1b6:	fa04 f500 	lsl.w	r5, r4, r0
 800c1ba:	42be      	cmp	r6, r7
 800c1bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800c1c0:	ea45 0504 	orr.w	r5, r5, r4
 800c1c4:	bf8c      	ite	hi
 800c1c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c1ca:	2400      	movls	r4, #0
 800c1cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c1d0:	fa01 f000 	lsl.w	r0, r1, r0
 800c1d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800c1d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1dc:	ea40 0204 	orr.w	r2, r0, r4
 800c1e0:	e7db      	b.n	800c19a <__b2d+0x4a>
 800c1e2:	ea44 030c 	orr.w	r3, r4, ip
 800c1e6:	460a      	mov	r2, r1
 800c1e8:	e7d7      	b.n	800c19a <__b2d+0x4a>
 800c1ea:	bf00      	nop
 800c1ec:	3ff00000 	.word	0x3ff00000

0800c1f0 <__d2b>:
 800c1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1f4:	4689      	mov	r9, r1
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	ec57 6b10 	vmov	r6, r7, d0
 800c1fc:	4690      	mov	r8, r2
 800c1fe:	f7ff fc0f 	bl	800ba20 <_Balloc>
 800c202:	4604      	mov	r4, r0
 800c204:	b930      	cbnz	r0, 800c214 <__d2b+0x24>
 800c206:	4602      	mov	r2, r0
 800c208:	4b25      	ldr	r3, [pc, #148]	; (800c2a0 <__d2b+0xb0>)
 800c20a:	4826      	ldr	r0, [pc, #152]	; (800c2a4 <__d2b+0xb4>)
 800c20c:	f240 310a 	movw	r1, #778	; 0x30a
 800c210:	f000 fb0e 	bl	800c830 <__assert_func>
 800c214:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c21c:	bb35      	cbnz	r5, 800c26c <__d2b+0x7c>
 800c21e:	2e00      	cmp	r6, #0
 800c220:	9301      	str	r3, [sp, #4]
 800c222:	d028      	beq.n	800c276 <__d2b+0x86>
 800c224:	4668      	mov	r0, sp
 800c226:	9600      	str	r6, [sp, #0]
 800c228:	f7ff fd10 	bl	800bc4c <__lo0bits>
 800c22c:	9900      	ldr	r1, [sp, #0]
 800c22e:	b300      	cbz	r0, 800c272 <__d2b+0x82>
 800c230:	9a01      	ldr	r2, [sp, #4]
 800c232:	f1c0 0320 	rsb	r3, r0, #32
 800c236:	fa02 f303 	lsl.w	r3, r2, r3
 800c23a:	430b      	orrs	r3, r1
 800c23c:	40c2      	lsrs	r2, r0
 800c23e:	6163      	str	r3, [r4, #20]
 800c240:	9201      	str	r2, [sp, #4]
 800c242:	9b01      	ldr	r3, [sp, #4]
 800c244:	61a3      	str	r3, [r4, #24]
 800c246:	2b00      	cmp	r3, #0
 800c248:	bf14      	ite	ne
 800c24a:	2202      	movne	r2, #2
 800c24c:	2201      	moveq	r2, #1
 800c24e:	6122      	str	r2, [r4, #16]
 800c250:	b1d5      	cbz	r5, 800c288 <__d2b+0x98>
 800c252:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c256:	4405      	add	r5, r0
 800c258:	f8c9 5000 	str.w	r5, [r9]
 800c25c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c260:	f8c8 0000 	str.w	r0, [r8]
 800c264:	4620      	mov	r0, r4
 800c266:	b003      	add	sp, #12
 800c268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c26c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c270:	e7d5      	b.n	800c21e <__d2b+0x2e>
 800c272:	6161      	str	r1, [r4, #20]
 800c274:	e7e5      	b.n	800c242 <__d2b+0x52>
 800c276:	a801      	add	r0, sp, #4
 800c278:	f7ff fce8 	bl	800bc4c <__lo0bits>
 800c27c:	9b01      	ldr	r3, [sp, #4]
 800c27e:	6163      	str	r3, [r4, #20]
 800c280:	2201      	movs	r2, #1
 800c282:	6122      	str	r2, [r4, #16]
 800c284:	3020      	adds	r0, #32
 800c286:	e7e3      	b.n	800c250 <__d2b+0x60>
 800c288:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c28c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c290:	f8c9 0000 	str.w	r0, [r9]
 800c294:	6918      	ldr	r0, [r3, #16]
 800c296:	f7ff fcb9 	bl	800bc0c <__hi0bits>
 800c29a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c29e:	e7df      	b.n	800c260 <__d2b+0x70>
 800c2a0:	0800d79b 	.word	0x0800d79b
 800c2a4:	0800d82c 	.word	0x0800d82c

0800c2a8 <__ratio>:
 800c2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	4688      	mov	r8, r1
 800c2ae:	4669      	mov	r1, sp
 800c2b0:	4681      	mov	r9, r0
 800c2b2:	f7ff ff4d 	bl	800c150 <__b2d>
 800c2b6:	a901      	add	r1, sp, #4
 800c2b8:	4640      	mov	r0, r8
 800c2ba:	ec55 4b10 	vmov	r4, r5, d0
 800c2be:	f7ff ff47 	bl	800c150 <__b2d>
 800c2c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c2ca:	eba3 0c02 	sub.w	ip, r3, r2
 800c2ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2d2:	1a9b      	subs	r3, r3, r2
 800c2d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2d8:	ec51 0b10 	vmov	r0, r1, d0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bfd6      	itet	le
 800c2e0:	460a      	movle	r2, r1
 800c2e2:	462a      	movgt	r2, r5
 800c2e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2e8:	468b      	mov	fp, r1
 800c2ea:	462f      	mov	r7, r5
 800c2ec:	bfd4      	ite	le
 800c2ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	ee10 2a10 	vmov	r2, s0
 800c2fc:	465b      	mov	r3, fp
 800c2fe:	4639      	mov	r1, r7
 800c300:	f7f4 fac4 	bl	800088c <__aeabi_ddiv>
 800c304:	ec41 0b10 	vmov	d0, r0, r1
 800c308:	b003      	add	sp, #12
 800c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c30e <__copybits>:
 800c30e:	3901      	subs	r1, #1
 800c310:	b570      	push	{r4, r5, r6, lr}
 800c312:	1149      	asrs	r1, r1, #5
 800c314:	6914      	ldr	r4, [r2, #16]
 800c316:	3101      	adds	r1, #1
 800c318:	f102 0314 	add.w	r3, r2, #20
 800c31c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c320:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c324:	1f05      	subs	r5, r0, #4
 800c326:	42a3      	cmp	r3, r4
 800c328:	d30c      	bcc.n	800c344 <__copybits+0x36>
 800c32a:	1aa3      	subs	r3, r4, r2
 800c32c:	3b11      	subs	r3, #17
 800c32e:	f023 0303 	bic.w	r3, r3, #3
 800c332:	3211      	adds	r2, #17
 800c334:	42a2      	cmp	r2, r4
 800c336:	bf88      	it	hi
 800c338:	2300      	movhi	r3, #0
 800c33a:	4418      	add	r0, r3
 800c33c:	2300      	movs	r3, #0
 800c33e:	4288      	cmp	r0, r1
 800c340:	d305      	bcc.n	800c34e <__copybits+0x40>
 800c342:	bd70      	pop	{r4, r5, r6, pc}
 800c344:	f853 6b04 	ldr.w	r6, [r3], #4
 800c348:	f845 6f04 	str.w	r6, [r5, #4]!
 800c34c:	e7eb      	b.n	800c326 <__copybits+0x18>
 800c34e:	f840 3b04 	str.w	r3, [r0], #4
 800c352:	e7f4      	b.n	800c33e <__copybits+0x30>

0800c354 <__any_on>:
 800c354:	f100 0214 	add.w	r2, r0, #20
 800c358:	6900      	ldr	r0, [r0, #16]
 800c35a:	114b      	asrs	r3, r1, #5
 800c35c:	4298      	cmp	r0, r3
 800c35e:	b510      	push	{r4, lr}
 800c360:	db11      	blt.n	800c386 <__any_on+0x32>
 800c362:	dd0a      	ble.n	800c37a <__any_on+0x26>
 800c364:	f011 011f 	ands.w	r1, r1, #31
 800c368:	d007      	beq.n	800c37a <__any_on+0x26>
 800c36a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c36e:	fa24 f001 	lsr.w	r0, r4, r1
 800c372:	fa00 f101 	lsl.w	r1, r0, r1
 800c376:	428c      	cmp	r4, r1
 800c378:	d10b      	bne.n	800c392 <__any_on+0x3e>
 800c37a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c37e:	4293      	cmp	r3, r2
 800c380:	d803      	bhi.n	800c38a <__any_on+0x36>
 800c382:	2000      	movs	r0, #0
 800c384:	bd10      	pop	{r4, pc}
 800c386:	4603      	mov	r3, r0
 800c388:	e7f7      	b.n	800c37a <__any_on+0x26>
 800c38a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c38e:	2900      	cmp	r1, #0
 800c390:	d0f5      	beq.n	800c37e <__any_on+0x2a>
 800c392:	2001      	movs	r0, #1
 800c394:	e7f6      	b.n	800c384 <__any_on+0x30>

0800c396 <_calloc_r>:
 800c396:	b513      	push	{r0, r1, r4, lr}
 800c398:	434a      	muls	r2, r1
 800c39a:	4611      	mov	r1, r2
 800c39c:	9201      	str	r2, [sp, #4]
 800c39e:	f000 f859 	bl	800c454 <_malloc_r>
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	b118      	cbz	r0, 800c3ae <_calloc_r+0x18>
 800c3a6:	9a01      	ldr	r2, [sp, #4]
 800c3a8:	2100      	movs	r1, #0
 800c3aa:	f7fc fe5f 	bl	800906c <memset>
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	b002      	add	sp, #8
 800c3b2:	bd10      	pop	{r4, pc}

0800c3b4 <_free_r>:
 800c3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3b6:	2900      	cmp	r1, #0
 800c3b8:	d048      	beq.n	800c44c <_free_r+0x98>
 800c3ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3be:	9001      	str	r0, [sp, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c3c6:	bfb8      	it	lt
 800c3c8:	18e4      	addlt	r4, r4, r3
 800c3ca:	f000 fa7b 	bl	800c8c4 <__malloc_lock>
 800c3ce:	4a20      	ldr	r2, [pc, #128]	; (800c450 <_free_r+0x9c>)
 800c3d0:	9801      	ldr	r0, [sp, #4]
 800c3d2:	6813      	ldr	r3, [r2, #0]
 800c3d4:	4615      	mov	r5, r2
 800c3d6:	b933      	cbnz	r3, 800c3e6 <_free_r+0x32>
 800c3d8:	6063      	str	r3, [r4, #4]
 800c3da:	6014      	str	r4, [r2, #0]
 800c3dc:	b003      	add	sp, #12
 800c3de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3e2:	f000 ba75 	b.w	800c8d0 <__malloc_unlock>
 800c3e6:	42a3      	cmp	r3, r4
 800c3e8:	d90b      	bls.n	800c402 <_free_r+0x4e>
 800c3ea:	6821      	ldr	r1, [r4, #0]
 800c3ec:	1862      	adds	r2, r4, r1
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	bf04      	itt	eq
 800c3f2:	681a      	ldreq	r2, [r3, #0]
 800c3f4:	685b      	ldreq	r3, [r3, #4]
 800c3f6:	6063      	str	r3, [r4, #4]
 800c3f8:	bf04      	itt	eq
 800c3fa:	1852      	addeq	r2, r2, r1
 800c3fc:	6022      	streq	r2, [r4, #0]
 800c3fe:	602c      	str	r4, [r5, #0]
 800c400:	e7ec      	b.n	800c3dc <_free_r+0x28>
 800c402:	461a      	mov	r2, r3
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	b10b      	cbz	r3, 800c40c <_free_r+0x58>
 800c408:	42a3      	cmp	r3, r4
 800c40a:	d9fa      	bls.n	800c402 <_free_r+0x4e>
 800c40c:	6811      	ldr	r1, [r2, #0]
 800c40e:	1855      	adds	r5, r2, r1
 800c410:	42a5      	cmp	r5, r4
 800c412:	d10b      	bne.n	800c42c <_free_r+0x78>
 800c414:	6824      	ldr	r4, [r4, #0]
 800c416:	4421      	add	r1, r4
 800c418:	1854      	adds	r4, r2, r1
 800c41a:	42a3      	cmp	r3, r4
 800c41c:	6011      	str	r1, [r2, #0]
 800c41e:	d1dd      	bne.n	800c3dc <_free_r+0x28>
 800c420:	681c      	ldr	r4, [r3, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	6053      	str	r3, [r2, #4]
 800c426:	4421      	add	r1, r4
 800c428:	6011      	str	r1, [r2, #0]
 800c42a:	e7d7      	b.n	800c3dc <_free_r+0x28>
 800c42c:	d902      	bls.n	800c434 <_free_r+0x80>
 800c42e:	230c      	movs	r3, #12
 800c430:	6003      	str	r3, [r0, #0]
 800c432:	e7d3      	b.n	800c3dc <_free_r+0x28>
 800c434:	6825      	ldr	r5, [r4, #0]
 800c436:	1961      	adds	r1, r4, r5
 800c438:	428b      	cmp	r3, r1
 800c43a:	bf04      	itt	eq
 800c43c:	6819      	ldreq	r1, [r3, #0]
 800c43e:	685b      	ldreq	r3, [r3, #4]
 800c440:	6063      	str	r3, [r4, #4]
 800c442:	bf04      	itt	eq
 800c444:	1949      	addeq	r1, r1, r5
 800c446:	6021      	streq	r1, [r4, #0]
 800c448:	6054      	str	r4, [r2, #4]
 800c44a:	e7c7      	b.n	800c3dc <_free_r+0x28>
 800c44c:	b003      	add	sp, #12
 800c44e:	bd30      	pop	{r4, r5, pc}
 800c450:	20000634 	.word	0x20000634

0800c454 <_malloc_r>:
 800c454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c456:	1ccd      	adds	r5, r1, #3
 800c458:	f025 0503 	bic.w	r5, r5, #3
 800c45c:	3508      	adds	r5, #8
 800c45e:	2d0c      	cmp	r5, #12
 800c460:	bf38      	it	cc
 800c462:	250c      	movcc	r5, #12
 800c464:	2d00      	cmp	r5, #0
 800c466:	4606      	mov	r6, r0
 800c468:	db01      	blt.n	800c46e <_malloc_r+0x1a>
 800c46a:	42a9      	cmp	r1, r5
 800c46c:	d903      	bls.n	800c476 <_malloc_r+0x22>
 800c46e:	230c      	movs	r3, #12
 800c470:	6033      	str	r3, [r6, #0]
 800c472:	2000      	movs	r0, #0
 800c474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c476:	f000 fa25 	bl	800c8c4 <__malloc_lock>
 800c47a:	4921      	ldr	r1, [pc, #132]	; (800c500 <_malloc_r+0xac>)
 800c47c:	680a      	ldr	r2, [r1, #0]
 800c47e:	4614      	mov	r4, r2
 800c480:	b99c      	cbnz	r4, 800c4aa <_malloc_r+0x56>
 800c482:	4f20      	ldr	r7, [pc, #128]	; (800c504 <_malloc_r+0xb0>)
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	b923      	cbnz	r3, 800c492 <_malloc_r+0x3e>
 800c488:	4621      	mov	r1, r4
 800c48a:	4630      	mov	r0, r6
 800c48c:	f000 f9a0 	bl	800c7d0 <_sbrk_r>
 800c490:	6038      	str	r0, [r7, #0]
 800c492:	4629      	mov	r1, r5
 800c494:	4630      	mov	r0, r6
 800c496:	f000 f99b 	bl	800c7d0 <_sbrk_r>
 800c49a:	1c43      	adds	r3, r0, #1
 800c49c:	d123      	bne.n	800c4e6 <_malloc_r+0x92>
 800c49e:	230c      	movs	r3, #12
 800c4a0:	6033      	str	r3, [r6, #0]
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f000 fa14 	bl	800c8d0 <__malloc_unlock>
 800c4a8:	e7e3      	b.n	800c472 <_malloc_r+0x1e>
 800c4aa:	6823      	ldr	r3, [r4, #0]
 800c4ac:	1b5b      	subs	r3, r3, r5
 800c4ae:	d417      	bmi.n	800c4e0 <_malloc_r+0x8c>
 800c4b0:	2b0b      	cmp	r3, #11
 800c4b2:	d903      	bls.n	800c4bc <_malloc_r+0x68>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	441c      	add	r4, r3
 800c4b8:	6025      	str	r5, [r4, #0]
 800c4ba:	e004      	b.n	800c4c6 <_malloc_r+0x72>
 800c4bc:	6863      	ldr	r3, [r4, #4]
 800c4be:	42a2      	cmp	r2, r4
 800c4c0:	bf0c      	ite	eq
 800c4c2:	600b      	streq	r3, [r1, #0]
 800c4c4:	6053      	strne	r3, [r2, #4]
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f000 fa02 	bl	800c8d0 <__malloc_unlock>
 800c4cc:	f104 000b 	add.w	r0, r4, #11
 800c4d0:	1d23      	adds	r3, r4, #4
 800c4d2:	f020 0007 	bic.w	r0, r0, #7
 800c4d6:	1ac2      	subs	r2, r0, r3
 800c4d8:	d0cc      	beq.n	800c474 <_malloc_r+0x20>
 800c4da:	1a1b      	subs	r3, r3, r0
 800c4dc:	50a3      	str	r3, [r4, r2]
 800c4de:	e7c9      	b.n	800c474 <_malloc_r+0x20>
 800c4e0:	4622      	mov	r2, r4
 800c4e2:	6864      	ldr	r4, [r4, #4]
 800c4e4:	e7cc      	b.n	800c480 <_malloc_r+0x2c>
 800c4e6:	1cc4      	adds	r4, r0, #3
 800c4e8:	f024 0403 	bic.w	r4, r4, #3
 800c4ec:	42a0      	cmp	r0, r4
 800c4ee:	d0e3      	beq.n	800c4b8 <_malloc_r+0x64>
 800c4f0:	1a21      	subs	r1, r4, r0
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f000 f96c 	bl	800c7d0 <_sbrk_r>
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	d1dd      	bne.n	800c4b8 <_malloc_r+0x64>
 800c4fc:	e7cf      	b.n	800c49e <_malloc_r+0x4a>
 800c4fe:	bf00      	nop
 800c500:	20000634 	.word	0x20000634
 800c504:	20000638 	.word	0x20000638

0800c508 <__ssputs_r>:
 800c508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c50c:	688e      	ldr	r6, [r1, #8]
 800c50e:	429e      	cmp	r6, r3
 800c510:	4682      	mov	sl, r0
 800c512:	460c      	mov	r4, r1
 800c514:	4690      	mov	r8, r2
 800c516:	461f      	mov	r7, r3
 800c518:	d838      	bhi.n	800c58c <__ssputs_r+0x84>
 800c51a:	898a      	ldrh	r2, [r1, #12]
 800c51c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c520:	d032      	beq.n	800c588 <__ssputs_r+0x80>
 800c522:	6825      	ldr	r5, [r4, #0]
 800c524:	6909      	ldr	r1, [r1, #16]
 800c526:	eba5 0901 	sub.w	r9, r5, r1
 800c52a:	6965      	ldr	r5, [r4, #20]
 800c52c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c530:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c534:	3301      	adds	r3, #1
 800c536:	444b      	add	r3, r9
 800c538:	106d      	asrs	r5, r5, #1
 800c53a:	429d      	cmp	r5, r3
 800c53c:	bf38      	it	cc
 800c53e:	461d      	movcc	r5, r3
 800c540:	0553      	lsls	r3, r2, #21
 800c542:	d531      	bpl.n	800c5a8 <__ssputs_r+0xa0>
 800c544:	4629      	mov	r1, r5
 800c546:	f7ff ff85 	bl	800c454 <_malloc_r>
 800c54a:	4606      	mov	r6, r0
 800c54c:	b950      	cbnz	r0, 800c564 <__ssputs_r+0x5c>
 800c54e:	230c      	movs	r3, #12
 800c550:	f8ca 3000 	str.w	r3, [sl]
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c55a:	81a3      	strh	r3, [r4, #12]
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c564:	6921      	ldr	r1, [r4, #16]
 800c566:	464a      	mov	r2, r9
 800c568:	f7ff fa4c 	bl	800ba04 <memcpy>
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c576:	81a3      	strh	r3, [r4, #12]
 800c578:	6126      	str	r6, [r4, #16]
 800c57a:	6165      	str	r5, [r4, #20]
 800c57c:	444e      	add	r6, r9
 800c57e:	eba5 0509 	sub.w	r5, r5, r9
 800c582:	6026      	str	r6, [r4, #0]
 800c584:	60a5      	str	r5, [r4, #8]
 800c586:	463e      	mov	r6, r7
 800c588:	42be      	cmp	r6, r7
 800c58a:	d900      	bls.n	800c58e <__ssputs_r+0x86>
 800c58c:	463e      	mov	r6, r7
 800c58e:	4632      	mov	r2, r6
 800c590:	6820      	ldr	r0, [r4, #0]
 800c592:	4641      	mov	r1, r8
 800c594:	f000 f97c 	bl	800c890 <memmove>
 800c598:	68a3      	ldr	r3, [r4, #8]
 800c59a:	6822      	ldr	r2, [r4, #0]
 800c59c:	1b9b      	subs	r3, r3, r6
 800c59e:	4432      	add	r2, r6
 800c5a0:	60a3      	str	r3, [r4, #8]
 800c5a2:	6022      	str	r2, [r4, #0]
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	e7db      	b.n	800c560 <__ssputs_r+0x58>
 800c5a8:	462a      	mov	r2, r5
 800c5aa:	f000 f997 	bl	800c8dc <_realloc_r>
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d1e1      	bne.n	800c578 <__ssputs_r+0x70>
 800c5b4:	6921      	ldr	r1, [r4, #16]
 800c5b6:	4650      	mov	r0, sl
 800c5b8:	f7ff fefc 	bl	800c3b4 <_free_r>
 800c5bc:	e7c7      	b.n	800c54e <__ssputs_r+0x46>
	...

0800c5c0 <_svfiprintf_r>:
 800c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	4698      	mov	r8, r3
 800c5c6:	898b      	ldrh	r3, [r1, #12]
 800c5c8:	061b      	lsls	r3, r3, #24
 800c5ca:	b09d      	sub	sp, #116	; 0x74
 800c5cc:	4607      	mov	r7, r0
 800c5ce:	460d      	mov	r5, r1
 800c5d0:	4614      	mov	r4, r2
 800c5d2:	d50e      	bpl.n	800c5f2 <_svfiprintf_r+0x32>
 800c5d4:	690b      	ldr	r3, [r1, #16]
 800c5d6:	b963      	cbnz	r3, 800c5f2 <_svfiprintf_r+0x32>
 800c5d8:	2140      	movs	r1, #64	; 0x40
 800c5da:	f7ff ff3b 	bl	800c454 <_malloc_r>
 800c5de:	6028      	str	r0, [r5, #0]
 800c5e0:	6128      	str	r0, [r5, #16]
 800c5e2:	b920      	cbnz	r0, 800c5ee <_svfiprintf_r+0x2e>
 800c5e4:	230c      	movs	r3, #12
 800c5e6:	603b      	str	r3, [r7, #0]
 800c5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ec:	e0d1      	b.n	800c792 <_svfiprintf_r+0x1d2>
 800c5ee:	2340      	movs	r3, #64	; 0x40
 800c5f0:	616b      	str	r3, [r5, #20]
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f6:	2320      	movs	r3, #32
 800c5f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c600:	2330      	movs	r3, #48	; 0x30
 800c602:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7ac <_svfiprintf_r+0x1ec>
 800c606:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c60a:	f04f 0901 	mov.w	r9, #1
 800c60e:	4623      	mov	r3, r4
 800c610:	469a      	mov	sl, r3
 800c612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c616:	b10a      	cbz	r2, 800c61c <_svfiprintf_r+0x5c>
 800c618:	2a25      	cmp	r2, #37	; 0x25
 800c61a:	d1f9      	bne.n	800c610 <_svfiprintf_r+0x50>
 800c61c:	ebba 0b04 	subs.w	fp, sl, r4
 800c620:	d00b      	beq.n	800c63a <_svfiprintf_r+0x7a>
 800c622:	465b      	mov	r3, fp
 800c624:	4622      	mov	r2, r4
 800c626:	4629      	mov	r1, r5
 800c628:	4638      	mov	r0, r7
 800c62a:	f7ff ff6d 	bl	800c508 <__ssputs_r>
 800c62e:	3001      	adds	r0, #1
 800c630:	f000 80aa 	beq.w	800c788 <_svfiprintf_r+0x1c8>
 800c634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c636:	445a      	add	r2, fp
 800c638:	9209      	str	r2, [sp, #36]	; 0x24
 800c63a:	f89a 3000 	ldrb.w	r3, [sl]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	f000 80a2 	beq.w	800c788 <_svfiprintf_r+0x1c8>
 800c644:	2300      	movs	r3, #0
 800c646:	f04f 32ff 	mov.w	r2, #4294967295
 800c64a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c64e:	f10a 0a01 	add.w	sl, sl, #1
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	9307      	str	r3, [sp, #28]
 800c656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c65a:	931a      	str	r3, [sp, #104]	; 0x68
 800c65c:	4654      	mov	r4, sl
 800c65e:	2205      	movs	r2, #5
 800c660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c664:	4851      	ldr	r0, [pc, #324]	; (800c7ac <_svfiprintf_r+0x1ec>)
 800c666:	f7f3 fddb 	bl	8000220 <memchr>
 800c66a:	9a04      	ldr	r2, [sp, #16]
 800c66c:	b9d8      	cbnz	r0, 800c6a6 <_svfiprintf_r+0xe6>
 800c66e:	06d0      	lsls	r0, r2, #27
 800c670:	bf44      	itt	mi
 800c672:	2320      	movmi	r3, #32
 800c674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c678:	0711      	lsls	r1, r2, #28
 800c67a:	bf44      	itt	mi
 800c67c:	232b      	movmi	r3, #43	; 0x2b
 800c67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c682:	f89a 3000 	ldrb.w	r3, [sl]
 800c686:	2b2a      	cmp	r3, #42	; 0x2a
 800c688:	d015      	beq.n	800c6b6 <_svfiprintf_r+0xf6>
 800c68a:	9a07      	ldr	r2, [sp, #28]
 800c68c:	4654      	mov	r4, sl
 800c68e:	2000      	movs	r0, #0
 800c690:	f04f 0c0a 	mov.w	ip, #10
 800c694:	4621      	mov	r1, r4
 800c696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c69a:	3b30      	subs	r3, #48	; 0x30
 800c69c:	2b09      	cmp	r3, #9
 800c69e:	d94e      	bls.n	800c73e <_svfiprintf_r+0x17e>
 800c6a0:	b1b0      	cbz	r0, 800c6d0 <_svfiprintf_r+0x110>
 800c6a2:	9207      	str	r2, [sp, #28]
 800c6a4:	e014      	b.n	800c6d0 <_svfiprintf_r+0x110>
 800c6a6:	eba0 0308 	sub.w	r3, r0, r8
 800c6aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	9304      	str	r3, [sp, #16]
 800c6b2:	46a2      	mov	sl, r4
 800c6b4:	e7d2      	b.n	800c65c <_svfiprintf_r+0x9c>
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	1d19      	adds	r1, r3, #4
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	9103      	str	r1, [sp, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	bfbb      	ittet	lt
 800c6c2:	425b      	neglt	r3, r3
 800c6c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c8:	9307      	strge	r3, [sp, #28]
 800c6ca:	9307      	strlt	r3, [sp, #28]
 800c6cc:	bfb8      	it	lt
 800c6ce:	9204      	strlt	r2, [sp, #16]
 800c6d0:	7823      	ldrb	r3, [r4, #0]
 800c6d2:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d4:	d10c      	bne.n	800c6f0 <_svfiprintf_r+0x130>
 800c6d6:	7863      	ldrb	r3, [r4, #1]
 800c6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6da:	d135      	bne.n	800c748 <_svfiprintf_r+0x188>
 800c6dc:	9b03      	ldr	r3, [sp, #12]
 800c6de:	1d1a      	adds	r2, r3, #4
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	9203      	str	r2, [sp, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	bfb8      	it	lt
 800c6e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6ec:	3402      	adds	r4, #2
 800c6ee:	9305      	str	r3, [sp, #20]
 800c6f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7bc <_svfiprintf_r+0x1fc>
 800c6f4:	7821      	ldrb	r1, [r4, #0]
 800c6f6:	2203      	movs	r2, #3
 800c6f8:	4650      	mov	r0, sl
 800c6fa:	f7f3 fd91 	bl	8000220 <memchr>
 800c6fe:	b140      	cbz	r0, 800c712 <_svfiprintf_r+0x152>
 800c700:	2340      	movs	r3, #64	; 0x40
 800c702:	eba0 000a 	sub.w	r0, r0, sl
 800c706:	fa03 f000 	lsl.w	r0, r3, r0
 800c70a:	9b04      	ldr	r3, [sp, #16]
 800c70c:	4303      	orrs	r3, r0
 800c70e:	3401      	adds	r4, #1
 800c710:	9304      	str	r3, [sp, #16]
 800c712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c716:	4826      	ldr	r0, [pc, #152]	; (800c7b0 <_svfiprintf_r+0x1f0>)
 800c718:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c71c:	2206      	movs	r2, #6
 800c71e:	f7f3 fd7f 	bl	8000220 <memchr>
 800c722:	2800      	cmp	r0, #0
 800c724:	d038      	beq.n	800c798 <_svfiprintf_r+0x1d8>
 800c726:	4b23      	ldr	r3, [pc, #140]	; (800c7b4 <_svfiprintf_r+0x1f4>)
 800c728:	bb1b      	cbnz	r3, 800c772 <_svfiprintf_r+0x1b2>
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	3307      	adds	r3, #7
 800c72e:	f023 0307 	bic.w	r3, r3, #7
 800c732:	3308      	adds	r3, #8
 800c734:	9303      	str	r3, [sp, #12]
 800c736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c738:	4433      	add	r3, r6
 800c73a:	9309      	str	r3, [sp, #36]	; 0x24
 800c73c:	e767      	b.n	800c60e <_svfiprintf_r+0x4e>
 800c73e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c742:	460c      	mov	r4, r1
 800c744:	2001      	movs	r0, #1
 800c746:	e7a5      	b.n	800c694 <_svfiprintf_r+0xd4>
 800c748:	2300      	movs	r3, #0
 800c74a:	3401      	adds	r4, #1
 800c74c:	9305      	str	r3, [sp, #20]
 800c74e:	4619      	mov	r1, r3
 800c750:	f04f 0c0a 	mov.w	ip, #10
 800c754:	4620      	mov	r0, r4
 800c756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c75a:	3a30      	subs	r2, #48	; 0x30
 800c75c:	2a09      	cmp	r2, #9
 800c75e:	d903      	bls.n	800c768 <_svfiprintf_r+0x1a8>
 800c760:	2b00      	cmp	r3, #0
 800c762:	d0c5      	beq.n	800c6f0 <_svfiprintf_r+0x130>
 800c764:	9105      	str	r1, [sp, #20]
 800c766:	e7c3      	b.n	800c6f0 <_svfiprintf_r+0x130>
 800c768:	fb0c 2101 	mla	r1, ip, r1, r2
 800c76c:	4604      	mov	r4, r0
 800c76e:	2301      	movs	r3, #1
 800c770:	e7f0      	b.n	800c754 <_svfiprintf_r+0x194>
 800c772:	ab03      	add	r3, sp, #12
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	462a      	mov	r2, r5
 800c778:	4b0f      	ldr	r3, [pc, #60]	; (800c7b8 <_svfiprintf_r+0x1f8>)
 800c77a:	a904      	add	r1, sp, #16
 800c77c:	4638      	mov	r0, r7
 800c77e:	f7fc fd1d 	bl	80091bc <_printf_float>
 800c782:	1c42      	adds	r2, r0, #1
 800c784:	4606      	mov	r6, r0
 800c786:	d1d6      	bne.n	800c736 <_svfiprintf_r+0x176>
 800c788:	89ab      	ldrh	r3, [r5, #12]
 800c78a:	065b      	lsls	r3, r3, #25
 800c78c:	f53f af2c 	bmi.w	800c5e8 <_svfiprintf_r+0x28>
 800c790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c792:	b01d      	add	sp, #116	; 0x74
 800c794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c798:	ab03      	add	r3, sp, #12
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	462a      	mov	r2, r5
 800c79e:	4b06      	ldr	r3, [pc, #24]	; (800c7b8 <_svfiprintf_r+0x1f8>)
 800c7a0:	a904      	add	r1, sp, #16
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	f7fc ffae 	bl	8009704 <_printf_i>
 800c7a8:	e7eb      	b.n	800c782 <_svfiprintf_r+0x1c2>
 800c7aa:	bf00      	nop
 800c7ac:	0800d98c 	.word	0x0800d98c
 800c7b0:	0800d996 	.word	0x0800d996
 800c7b4:	080091bd 	.word	0x080091bd
 800c7b8:	0800c509 	.word	0x0800c509
 800c7bc:	0800d992 	.word	0x0800d992

0800c7c0 <nan>:
 800c7c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c7c8 <nan+0x8>
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	00000000 	.word	0x00000000
 800c7cc:	7ff80000 	.word	0x7ff80000

0800c7d0 <_sbrk_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d06      	ldr	r5, [pc, #24]	; (800c7ec <_sbrk_r+0x1c>)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	602b      	str	r3, [r5, #0]
 800c7dc:	f7f6 fade 	bl	8002d9c <_sbrk>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d102      	bne.n	800c7ea <_sbrk_r+0x1a>
 800c7e4:	682b      	ldr	r3, [r5, #0]
 800c7e6:	b103      	cbz	r3, 800c7ea <_sbrk_r+0x1a>
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	bd38      	pop	{r3, r4, r5, pc}
 800c7ec:	20000cf0 	.word	0x20000cf0

0800c7f0 <strncmp>:
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	b16a      	cbz	r2, 800c810 <strncmp+0x20>
 800c7f4:	3901      	subs	r1, #1
 800c7f6:	1884      	adds	r4, r0, r2
 800c7f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c7fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c800:	4293      	cmp	r3, r2
 800c802:	d103      	bne.n	800c80c <strncmp+0x1c>
 800c804:	42a0      	cmp	r0, r4
 800c806:	d001      	beq.n	800c80c <strncmp+0x1c>
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1f5      	bne.n	800c7f8 <strncmp+0x8>
 800c80c:	1a98      	subs	r0, r3, r2
 800c80e:	bd10      	pop	{r4, pc}
 800c810:	4610      	mov	r0, r2
 800c812:	e7fc      	b.n	800c80e <strncmp+0x1e>

0800c814 <__ascii_wctomb>:
 800c814:	b149      	cbz	r1, 800c82a <__ascii_wctomb+0x16>
 800c816:	2aff      	cmp	r2, #255	; 0xff
 800c818:	bf85      	ittet	hi
 800c81a:	238a      	movhi	r3, #138	; 0x8a
 800c81c:	6003      	strhi	r3, [r0, #0]
 800c81e:	700a      	strbls	r2, [r1, #0]
 800c820:	f04f 30ff 	movhi.w	r0, #4294967295
 800c824:	bf98      	it	ls
 800c826:	2001      	movls	r0, #1
 800c828:	4770      	bx	lr
 800c82a:	4608      	mov	r0, r1
 800c82c:	4770      	bx	lr
	...

0800c830 <__assert_func>:
 800c830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c832:	4614      	mov	r4, r2
 800c834:	461a      	mov	r2, r3
 800c836:	4b09      	ldr	r3, [pc, #36]	; (800c85c <__assert_func+0x2c>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4605      	mov	r5, r0
 800c83c:	68d8      	ldr	r0, [r3, #12]
 800c83e:	b14c      	cbz	r4, 800c854 <__assert_func+0x24>
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <__assert_func+0x30>)
 800c842:	9100      	str	r1, [sp, #0]
 800c844:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c848:	4906      	ldr	r1, [pc, #24]	; (800c864 <__assert_func+0x34>)
 800c84a:	462b      	mov	r3, r5
 800c84c:	f000 f80e 	bl	800c86c <fiprintf>
 800c850:	f000 fa84 	bl	800cd5c <abort>
 800c854:	4b04      	ldr	r3, [pc, #16]	; (800c868 <__assert_func+0x38>)
 800c856:	461c      	mov	r4, r3
 800c858:	e7f3      	b.n	800c842 <__assert_func+0x12>
 800c85a:	bf00      	nop
 800c85c:	20000034 	.word	0x20000034
 800c860:	0800d99d 	.word	0x0800d99d
 800c864:	0800d9aa 	.word	0x0800d9aa
 800c868:	0800d9d8 	.word	0x0800d9d8

0800c86c <fiprintf>:
 800c86c:	b40e      	push	{r1, r2, r3}
 800c86e:	b503      	push	{r0, r1, lr}
 800c870:	4601      	mov	r1, r0
 800c872:	ab03      	add	r3, sp, #12
 800c874:	4805      	ldr	r0, [pc, #20]	; (800c88c <fiprintf+0x20>)
 800c876:	f853 2b04 	ldr.w	r2, [r3], #4
 800c87a:	6800      	ldr	r0, [r0, #0]
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	f000 f87d 	bl	800c97c <_vfiprintf_r>
 800c882:	b002      	add	sp, #8
 800c884:	f85d eb04 	ldr.w	lr, [sp], #4
 800c888:	b003      	add	sp, #12
 800c88a:	4770      	bx	lr
 800c88c:	20000034 	.word	0x20000034

0800c890 <memmove>:
 800c890:	4288      	cmp	r0, r1
 800c892:	b510      	push	{r4, lr}
 800c894:	eb01 0402 	add.w	r4, r1, r2
 800c898:	d902      	bls.n	800c8a0 <memmove+0x10>
 800c89a:	4284      	cmp	r4, r0
 800c89c:	4623      	mov	r3, r4
 800c89e:	d807      	bhi.n	800c8b0 <memmove+0x20>
 800c8a0:	1e43      	subs	r3, r0, #1
 800c8a2:	42a1      	cmp	r1, r4
 800c8a4:	d008      	beq.n	800c8b8 <memmove+0x28>
 800c8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8ae:	e7f8      	b.n	800c8a2 <memmove+0x12>
 800c8b0:	4402      	add	r2, r0
 800c8b2:	4601      	mov	r1, r0
 800c8b4:	428a      	cmp	r2, r1
 800c8b6:	d100      	bne.n	800c8ba <memmove+0x2a>
 800c8b8:	bd10      	pop	{r4, pc}
 800c8ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8c2:	e7f7      	b.n	800c8b4 <memmove+0x24>

0800c8c4 <__malloc_lock>:
 800c8c4:	4801      	ldr	r0, [pc, #4]	; (800c8cc <__malloc_lock+0x8>)
 800c8c6:	f000 bc09 	b.w	800d0dc <__retarget_lock_acquire_recursive>
 800c8ca:	bf00      	nop
 800c8cc:	20000cf8 	.word	0x20000cf8

0800c8d0 <__malloc_unlock>:
 800c8d0:	4801      	ldr	r0, [pc, #4]	; (800c8d8 <__malloc_unlock+0x8>)
 800c8d2:	f000 bc04 	b.w	800d0de <__retarget_lock_release_recursive>
 800c8d6:	bf00      	nop
 800c8d8:	20000cf8 	.word	0x20000cf8

0800c8dc <_realloc_r>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	4607      	mov	r7, r0
 800c8e0:	4614      	mov	r4, r2
 800c8e2:	460e      	mov	r6, r1
 800c8e4:	b921      	cbnz	r1, 800c8f0 <_realloc_r+0x14>
 800c8e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c8ea:	4611      	mov	r1, r2
 800c8ec:	f7ff bdb2 	b.w	800c454 <_malloc_r>
 800c8f0:	b922      	cbnz	r2, 800c8fc <_realloc_r+0x20>
 800c8f2:	f7ff fd5f 	bl	800c3b4 <_free_r>
 800c8f6:	4625      	mov	r5, r4
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8fc:	f000 fc54 	bl	800d1a8 <_malloc_usable_size_r>
 800c900:	42a0      	cmp	r0, r4
 800c902:	d20f      	bcs.n	800c924 <_realloc_r+0x48>
 800c904:	4621      	mov	r1, r4
 800c906:	4638      	mov	r0, r7
 800c908:	f7ff fda4 	bl	800c454 <_malloc_r>
 800c90c:	4605      	mov	r5, r0
 800c90e:	2800      	cmp	r0, #0
 800c910:	d0f2      	beq.n	800c8f8 <_realloc_r+0x1c>
 800c912:	4631      	mov	r1, r6
 800c914:	4622      	mov	r2, r4
 800c916:	f7ff f875 	bl	800ba04 <memcpy>
 800c91a:	4631      	mov	r1, r6
 800c91c:	4638      	mov	r0, r7
 800c91e:	f7ff fd49 	bl	800c3b4 <_free_r>
 800c922:	e7e9      	b.n	800c8f8 <_realloc_r+0x1c>
 800c924:	4635      	mov	r5, r6
 800c926:	e7e7      	b.n	800c8f8 <_realloc_r+0x1c>

0800c928 <__sfputc_r>:
 800c928:	6893      	ldr	r3, [r2, #8]
 800c92a:	3b01      	subs	r3, #1
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	b410      	push	{r4}
 800c930:	6093      	str	r3, [r2, #8]
 800c932:	da08      	bge.n	800c946 <__sfputc_r+0x1e>
 800c934:	6994      	ldr	r4, [r2, #24]
 800c936:	42a3      	cmp	r3, r4
 800c938:	db01      	blt.n	800c93e <__sfputc_r+0x16>
 800c93a:	290a      	cmp	r1, #10
 800c93c:	d103      	bne.n	800c946 <__sfputc_r+0x1e>
 800c93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c942:	f000 b94b 	b.w	800cbdc <__swbuf_r>
 800c946:	6813      	ldr	r3, [r2, #0]
 800c948:	1c58      	adds	r0, r3, #1
 800c94a:	6010      	str	r0, [r2, #0]
 800c94c:	7019      	strb	r1, [r3, #0]
 800c94e:	4608      	mov	r0, r1
 800c950:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c954:	4770      	bx	lr

0800c956 <__sfputs_r>:
 800c956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c958:	4606      	mov	r6, r0
 800c95a:	460f      	mov	r7, r1
 800c95c:	4614      	mov	r4, r2
 800c95e:	18d5      	adds	r5, r2, r3
 800c960:	42ac      	cmp	r4, r5
 800c962:	d101      	bne.n	800c968 <__sfputs_r+0x12>
 800c964:	2000      	movs	r0, #0
 800c966:	e007      	b.n	800c978 <__sfputs_r+0x22>
 800c968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c96c:	463a      	mov	r2, r7
 800c96e:	4630      	mov	r0, r6
 800c970:	f7ff ffda 	bl	800c928 <__sfputc_r>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d1f3      	bne.n	800c960 <__sfputs_r+0xa>
 800c978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c97c <_vfiprintf_r>:
 800c97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	460d      	mov	r5, r1
 800c982:	b09d      	sub	sp, #116	; 0x74
 800c984:	4614      	mov	r4, r2
 800c986:	4698      	mov	r8, r3
 800c988:	4606      	mov	r6, r0
 800c98a:	b118      	cbz	r0, 800c994 <_vfiprintf_r+0x18>
 800c98c:	6983      	ldr	r3, [r0, #24]
 800c98e:	b90b      	cbnz	r3, 800c994 <_vfiprintf_r+0x18>
 800c990:	f000 fb06 	bl	800cfa0 <__sinit>
 800c994:	4b89      	ldr	r3, [pc, #548]	; (800cbbc <_vfiprintf_r+0x240>)
 800c996:	429d      	cmp	r5, r3
 800c998:	d11b      	bne.n	800c9d2 <_vfiprintf_r+0x56>
 800c99a:	6875      	ldr	r5, [r6, #4]
 800c99c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c99e:	07d9      	lsls	r1, r3, #31
 800c9a0:	d405      	bmi.n	800c9ae <_vfiprintf_r+0x32>
 800c9a2:	89ab      	ldrh	r3, [r5, #12]
 800c9a4:	059a      	lsls	r2, r3, #22
 800c9a6:	d402      	bmi.n	800c9ae <_vfiprintf_r+0x32>
 800c9a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9aa:	f000 fb97 	bl	800d0dc <__retarget_lock_acquire_recursive>
 800c9ae:	89ab      	ldrh	r3, [r5, #12]
 800c9b0:	071b      	lsls	r3, r3, #28
 800c9b2:	d501      	bpl.n	800c9b8 <_vfiprintf_r+0x3c>
 800c9b4:	692b      	ldr	r3, [r5, #16]
 800c9b6:	b9eb      	cbnz	r3, 800c9f4 <_vfiprintf_r+0x78>
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f000 f960 	bl	800cc80 <__swsetup_r>
 800c9c0:	b1c0      	cbz	r0, 800c9f4 <_vfiprintf_r+0x78>
 800c9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9c4:	07dc      	lsls	r4, r3, #31
 800c9c6:	d50e      	bpl.n	800c9e6 <_vfiprintf_r+0x6a>
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9cc:	b01d      	add	sp, #116	; 0x74
 800c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d2:	4b7b      	ldr	r3, [pc, #492]	; (800cbc0 <_vfiprintf_r+0x244>)
 800c9d4:	429d      	cmp	r5, r3
 800c9d6:	d101      	bne.n	800c9dc <_vfiprintf_r+0x60>
 800c9d8:	68b5      	ldr	r5, [r6, #8]
 800c9da:	e7df      	b.n	800c99c <_vfiprintf_r+0x20>
 800c9dc:	4b79      	ldr	r3, [pc, #484]	; (800cbc4 <_vfiprintf_r+0x248>)
 800c9de:	429d      	cmp	r5, r3
 800c9e0:	bf08      	it	eq
 800c9e2:	68f5      	ldreq	r5, [r6, #12]
 800c9e4:	e7da      	b.n	800c99c <_vfiprintf_r+0x20>
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	0598      	lsls	r0, r3, #22
 800c9ea:	d4ed      	bmi.n	800c9c8 <_vfiprintf_r+0x4c>
 800c9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ee:	f000 fb76 	bl	800d0de <__retarget_lock_release_recursive>
 800c9f2:	e7e9      	b.n	800c9c8 <_vfiprintf_r+0x4c>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f8:	2320      	movs	r3, #32
 800c9fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca02:	2330      	movs	r3, #48	; 0x30
 800ca04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cbc8 <_vfiprintf_r+0x24c>
 800ca08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca0c:	f04f 0901 	mov.w	r9, #1
 800ca10:	4623      	mov	r3, r4
 800ca12:	469a      	mov	sl, r3
 800ca14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca18:	b10a      	cbz	r2, 800ca1e <_vfiprintf_r+0xa2>
 800ca1a:	2a25      	cmp	r2, #37	; 0x25
 800ca1c:	d1f9      	bne.n	800ca12 <_vfiprintf_r+0x96>
 800ca1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca22:	d00b      	beq.n	800ca3c <_vfiprintf_r+0xc0>
 800ca24:	465b      	mov	r3, fp
 800ca26:	4622      	mov	r2, r4
 800ca28:	4629      	mov	r1, r5
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f7ff ff93 	bl	800c956 <__sfputs_r>
 800ca30:	3001      	adds	r0, #1
 800ca32:	f000 80aa 	beq.w	800cb8a <_vfiprintf_r+0x20e>
 800ca36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca38:	445a      	add	r2, fp
 800ca3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 80a2 	beq.w	800cb8a <_vfiprintf_r+0x20e>
 800ca46:	2300      	movs	r3, #0
 800ca48:	f04f 32ff 	mov.w	r2, #4294967295
 800ca4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca50:	f10a 0a01 	add.w	sl, sl, #1
 800ca54:	9304      	str	r3, [sp, #16]
 800ca56:	9307      	str	r3, [sp, #28]
 800ca58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca5c:	931a      	str	r3, [sp, #104]	; 0x68
 800ca5e:	4654      	mov	r4, sl
 800ca60:	2205      	movs	r2, #5
 800ca62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca66:	4858      	ldr	r0, [pc, #352]	; (800cbc8 <_vfiprintf_r+0x24c>)
 800ca68:	f7f3 fbda 	bl	8000220 <memchr>
 800ca6c:	9a04      	ldr	r2, [sp, #16]
 800ca6e:	b9d8      	cbnz	r0, 800caa8 <_vfiprintf_r+0x12c>
 800ca70:	06d1      	lsls	r1, r2, #27
 800ca72:	bf44      	itt	mi
 800ca74:	2320      	movmi	r3, #32
 800ca76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca7a:	0713      	lsls	r3, r2, #28
 800ca7c:	bf44      	itt	mi
 800ca7e:	232b      	movmi	r3, #43	; 0x2b
 800ca80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca84:	f89a 3000 	ldrb.w	r3, [sl]
 800ca88:	2b2a      	cmp	r3, #42	; 0x2a
 800ca8a:	d015      	beq.n	800cab8 <_vfiprintf_r+0x13c>
 800ca8c:	9a07      	ldr	r2, [sp, #28]
 800ca8e:	4654      	mov	r4, sl
 800ca90:	2000      	movs	r0, #0
 800ca92:	f04f 0c0a 	mov.w	ip, #10
 800ca96:	4621      	mov	r1, r4
 800ca98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca9c:	3b30      	subs	r3, #48	; 0x30
 800ca9e:	2b09      	cmp	r3, #9
 800caa0:	d94e      	bls.n	800cb40 <_vfiprintf_r+0x1c4>
 800caa2:	b1b0      	cbz	r0, 800cad2 <_vfiprintf_r+0x156>
 800caa4:	9207      	str	r2, [sp, #28]
 800caa6:	e014      	b.n	800cad2 <_vfiprintf_r+0x156>
 800caa8:	eba0 0308 	sub.w	r3, r0, r8
 800caac:	fa09 f303 	lsl.w	r3, r9, r3
 800cab0:	4313      	orrs	r3, r2
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	46a2      	mov	sl, r4
 800cab6:	e7d2      	b.n	800ca5e <_vfiprintf_r+0xe2>
 800cab8:	9b03      	ldr	r3, [sp, #12]
 800caba:	1d19      	adds	r1, r3, #4
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	9103      	str	r1, [sp, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	bfbb      	ittet	lt
 800cac4:	425b      	neglt	r3, r3
 800cac6:	f042 0202 	orrlt.w	r2, r2, #2
 800caca:	9307      	strge	r3, [sp, #28]
 800cacc:	9307      	strlt	r3, [sp, #28]
 800cace:	bfb8      	it	lt
 800cad0:	9204      	strlt	r2, [sp, #16]
 800cad2:	7823      	ldrb	r3, [r4, #0]
 800cad4:	2b2e      	cmp	r3, #46	; 0x2e
 800cad6:	d10c      	bne.n	800caf2 <_vfiprintf_r+0x176>
 800cad8:	7863      	ldrb	r3, [r4, #1]
 800cada:	2b2a      	cmp	r3, #42	; 0x2a
 800cadc:	d135      	bne.n	800cb4a <_vfiprintf_r+0x1ce>
 800cade:	9b03      	ldr	r3, [sp, #12]
 800cae0:	1d1a      	adds	r2, r3, #4
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	9203      	str	r2, [sp, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	bfb8      	it	lt
 800caea:	f04f 33ff 	movlt.w	r3, #4294967295
 800caee:	3402      	adds	r4, #2
 800caf0:	9305      	str	r3, [sp, #20]
 800caf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cbd8 <_vfiprintf_r+0x25c>
 800caf6:	7821      	ldrb	r1, [r4, #0]
 800caf8:	2203      	movs	r2, #3
 800cafa:	4650      	mov	r0, sl
 800cafc:	f7f3 fb90 	bl	8000220 <memchr>
 800cb00:	b140      	cbz	r0, 800cb14 <_vfiprintf_r+0x198>
 800cb02:	2340      	movs	r3, #64	; 0x40
 800cb04:	eba0 000a 	sub.w	r0, r0, sl
 800cb08:	fa03 f000 	lsl.w	r0, r3, r0
 800cb0c:	9b04      	ldr	r3, [sp, #16]
 800cb0e:	4303      	orrs	r3, r0
 800cb10:	3401      	adds	r4, #1
 800cb12:	9304      	str	r3, [sp, #16]
 800cb14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb18:	482c      	ldr	r0, [pc, #176]	; (800cbcc <_vfiprintf_r+0x250>)
 800cb1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb1e:	2206      	movs	r2, #6
 800cb20:	f7f3 fb7e 	bl	8000220 <memchr>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d03f      	beq.n	800cba8 <_vfiprintf_r+0x22c>
 800cb28:	4b29      	ldr	r3, [pc, #164]	; (800cbd0 <_vfiprintf_r+0x254>)
 800cb2a:	bb1b      	cbnz	r3, 800cb74 <_vfiprintf_r+0x1f8>
 800cb2c:	9b03      	ldr	r3, [sp, #12]
 800cb2e:	3307      	adds	r3, #7
 800cb30:	f023 0307 	bic.w	r3, r3, #7
 800cb34:	3308      	adds	r3, #8
 800cb36:	9303      	str	r3, [sp, #12]
 800cb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb3a:	443b      	add	r3, r7
 800cb3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb3e:	e767      	b.n	800ca10 <_vfiprintf_r+0x94>
 800cb40:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb44:	460c      	mov	r4, r1
 800cb46:	2001      	movs	r0, #1
 800cb48:	e7a5      	b.n	800ca96 <_vfiprintf_r+0x11a>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	3401      	adds	r4, #1
 800cb4e:	9305      	str	r3, [sp, #20]
 800cb50:	4619      	mov	r1, r3
 800cb52:	f04f 0c0a 	mov.w	ip, #10
 800cb56:	4620      	mov	r0, r4
 800cb58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb5c:	3a30      	subs	r2, #48	; 0x30
 800cb5e:	2a09      	cmp	r2, #9
 800cb60:	d903      	bls.n	800cb6a <_vfiprintf_r+0x1ee>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d0c5      	beq.n	800caf2 <_vfiprintf_r+0x176>
 800cb66:	9105      	str	r1, [sp, #20]
 800cb68:	e7c3      	b.n	800caf2 <_vfiprintf_r+0x176>
 800cb6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb6e:	4604      	mov	r4, r0
 800cb70:	2301      	movs	r3, #1
 800cb72:	e7f0      	b.n	800cb56 <_vfiprintf_r+0x1da>
 800cb74:	ab03      	add	r3, sp, #12
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	462a      	mov	r2, r5
 800cb7a:	4b16      	ldr	r3, [pc, #88]	; (800cbd4 <_vfiprintf_r+0x258>)
 800cb7c:	a904      	add	r1, sp, #16
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f7fc fb1c 	bl	80091bc <_printf_float>
 800cb84:	4607      	mov	r7, r0
 800cb86:	1c78      	adds	r0, r7, #1
 800cb88:	d1d6      	bne.n	800cb38 <_vfiprintf_r+0x1bc>
 800cb8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb8c:	07d9      	lsls	r1, r3, #31
 800cb8e:	d405      	bmi.n	800cb9c <_vfiprintf_r+0x220>
 800cb90:	89ab      	ldrh	r3, [r5, #12]
 800cb92:	059a      	lsls	r2, r3, #22
 800cb94:	d402      	bmi.n	800cb9c <_vfiprintf_r+0x220>
 800cb96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb98:	f000 faa1 	bl	800d0de <__retarget_lock_release_recursive>
 800cb9c:	89ab      	ldrh	r3, [r5, #12]
 800cb9e:	065b      	lsls	r3, r3, #25
 800cba0:	f53f af12 	bmi.w	800c9c8 <_vfiprintf_r+0x4c>
 800cba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cba6:	e711      	b.n	800c9cc <_vfiprintf_r+0x50>
 800cba8:	ab03      	add	r3, sp, #12
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	462a      	mov	r2, r5
 800cbae:	4b09      	ldr	r3, [pc, #36]	; (800cbd4 <_vfiprintf_r+0x258>)
 800cbb0:	a904      	add	r1, sp, #16
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	f7fc fda6 	bl	8009704 <_printf_i>
 800cbb8:	e7e4      	b.n	800cb84 <_vfiprintf_r+0x208>
 800cbba:	bf00      	nop
 800cbbc:	0800dafc 	.word	0x0800dafc
 800cbc0:	0800db1c 	.word	0x0800db1c
 800cbc4:	0800dadc 	.word	0x0800dadc
 800cbc8:	0800d98c 	.word	0x0800d98c
 800cbcc:	0800d996 	.word	0x0800d996
 800cbd0:	080091bd 	.word	0x080091bd
 800cbd4:	0800c957 	.word	0x0800c957
 800cbd8:	0800d992 	.word	0x0800d992

0800cbdc <__swbuf_r>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	460e      	mov	r6, r1
 800cbe0:	4614      	mov	r4, r2
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	b118      	cbz	r0, 800cbee <__swbuf_r+0x12>
 800cbe6:	6983      	ldr	r3, [r0, #24]
 800cbe8:	b90b      	cbnz	r3, 800cbee <__swbuf_r+0x12>
 800cbea:	f000 f9d9 	bl	800cfa0 <__sinit>
 800cbee:	4b21      	ldr	r3, [pc, #132]	; (800cc74 <__swbuf_r+0x98>)
 800cbf0:	429c      	cmp	r4, r3
 800cbf2:	d12b      	bne.n	800cc4c <__swbuf_r+0x70>
 800cbf4:	686c      	ldr	r4, [r5, #4]
 800cbf6:	69a3      	ldr	r3, [r4, #24]
 800cbf8:	60a3      	str	r3, [r4, #8]
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	071a      	lsls	r2, r3, #28
 800cbfe:	d52f      	bpl.n	800cc60 <__swbuf_r+0x84>
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	b36b      	cbz	r3, 800cc60 <__swbuf_r+0x84>
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	6820      	ldr	r0, [r4, #0]
 800cc08:	1ac0      	subs	r0, r0, r3
 800cc0a:	6963      	ldr	r3, [r4, #20]
 800cc0c:	b2f6      	uxtb	r6, r6
 800cc0e:	4283      	cmp	r3, r0
 800cc10:	4637      	mov	r7, r6
 800cc12:	dc04      	bgt.n	800cc1e <__swbuf_r+0x42>
 800cc14:	4621      	mov	r1, r4
 800cc16:	4628      	mov	r0, r5
 800cc18:	f000 f92e 	bl	800ce78 <_fflush_r>
 800cc1c:	bb30      	cbnz	r0, 800cc6c <__swbuf_r+0x90>
 800cc1e:	68a3      	ldr	r3, [r4, #8]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	60a3      	str	r3, [r4, #8]
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	6022      	str	r2, [r4, #0]
 800cc2a:	701e      	strb	r6, [r3, #0]
 800cc2c:	6963      	ldr	r3, [r4, #20]
 800cc2e:	3001      	adds	r0, #1
 800cc30:	4283      	cmp	r3, r0
 800cc32:	d004      	beq.n	800cc3e <__swbuf_r+0x62>
 800cc34:	89a3      	ldrh	r3, [r4, #12]
 800cc36:	07db      	lsls	r3, r3, #31
 800cc38:	d506      	bpl.n	800cc48 <__swbuf_r+0x6c>
 800cc3a:	2e0a      	cmp	r6, #10
 800cc3c:	d104      	bne.n	800cc48 <__swbuf_r+0x6c>
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4628      	mov	r0, r5
 800cc42:	f000 f919 	bl	800ce78 <_fflush_r>
 800cc46:	b988      	cbnz	r0, 800cc6c <__swbuf_r+0x90>
 800cc48:	4638      	mov	r0, r7
 800cc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc4c:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <__swbuf_r+0x9c>)
 800cc4e:	429c      	cmp	r4, r3
 800cc50:	d101      	bne.n	800cc56 <__swbuf_r+0x7a>
 800cc52:	68ac      	ldr	r4, [r5, #8]
 800cc54:	e7cf      	b.n	800cbf6 <__swbuf_r+0x1a>
 800cc56:	4b09      	ldr	r3, [pc, #36]	; (800cc7c <__swbuf_r+0xa0>)
 800cc58:	429c      	cmp	r4, r3
 800cc5a:	bf08      	it	eq
 800cc5c:	68ec      	ldreq	r4, [r5, #12]
 800cc5e:	e7ca      	b.n	800cbf6 <__swbuf_r+0x1a>
 800cc60:	4621      	mov	r1, r4
 800cc62:	4628      	mov	r0, r5
 800cc64:	f000 f80c 	bl	800cc80 <__swsetup_r>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d0cb      	beq.n	800cc04 <__swbuf_r+0x28>
 800cc6c:	f04f 37ff 	mov.w	r7, #4294967295
 800cc70:	e7ea      	b.n	800cc48 <__swbuf_r+0x6c>
 800cc72:	bf00      	nop
 800cc74:	0800dafc 	.word	0x0800dafc
 800cc78:	0800db1c 	.word	0x0800db1c
 800cc7c:	0800dadc 	.word	0x0800dadc

0800cc80 <__swsetup_r>:
 800cc80:	4b32      	ldr	r3, [pc, #200]	; (800cd4c <__swsetup_r+0xcc>)
 800cc82:	b570      	push	{r4, r5, r6, lr}
 800cc84:	681d      	ldr	r5, [r3, #0]
 800cc86:	4606      	mov	r6, r0
 800cc88:	460c      	mov	r4, r1
 800cc8a:	b125      	cbz	r5, 800cc96 <__swsetup_r+0x16>
 800cc8c:	69ab      	ldr	r3, [r5, #24]
 800cc8e:	b913      	cbnz	r3, 800cc96 <__swsetup_r+0x16>
 800cc90:	4628      	mov	r0, r5
 800cc92:	f000 f985 	bl	800cfa0 <__sinit>
 800cc96:	4b2e      	ldr	r3, [pc, #184]	; (800cd50 <__swsetup_r+0xd0>)
 800cc98:	429c      	cmp	r4, r3
 800cc9a:	d10f      	bne.n	800ccbc <__swsetup_r+0x3c>
 800cc9c:	686c      	ldr	r4, [r5, #4]
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cca4:	0719      	lsls	r1, r3, #28
 800cca6:	d42c      	bmi.n	800cd02 <__swsetup_r+0x82>
 800cca8:	06dd      	lsls	r5, r3, #27
 800ccaa:	d411      	bmi.n	800ccd0 <__swsetup_r+0x50>
 800ccac:	2309      	movs	r3, #9
 800ccae:	6033      	str	r3, [r6, #0]
 800ccb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccb4:	81a3      	strh	r3, [r4, #12]
 800ccb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccba:	e03e      	b.n	800cd3a <__swsetup_r+0xba>
 800ccbc:	4b25      	ldr	r3, [pc, #148]	; (800cd54 <__swsetup_r+0xd4>)
 800ccbe:	429c      	cmp	r4, r3
 800ccc0:	d101      	bne.n	800ccc6 <__swsetup_r+0x46>
 800ccc2:	68ac      	ldr	r4, [r5, #8]
 800ccc4:	e7eb      	b.n	800cc9e <__swsetup_r+0x1e>
 800ccc6:	4b24      	ldr	r3, [pc, #144]	; (800cd58 <__swsetup_r+0xd8>)
 800ccc8:	429c      	cmp	r4, r3
 800ccca:	bf08      	it	eq
 800cccc:	68ec      	ldreq	r4, [r5, #12]
 800ccce:	e7e6      	b.n	800cc9e <__swsetup_r+0x1e>
 800ccd0:	0758      	lsls	r0, r3, #29
 800ccd2:	d512      	bpl.n	800ccfa <__swsetup_r+0x7a>
 800ccd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccd6:	b141      	cbz	r1, 800ccea <__swsetup_r+0x6a>
 800ccd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	d002      	beq.n	800cce6 <__swsetup_r+0x66>
 800cce0:	4630      	mov	r0, r6
 800cce2:	f7ff fb67 	bl	800c3b4 <_free_r>
 800cce6:	2300      	movs	r3, #0
 800cce8:	6363      	str	r3, [r4, #52]	; 0x34
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	6063      	str	r3, [r4, #4]
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	6023      	str	r3, [r4, #0]
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	f043 0308 	orr.w	r3, r3, #8
 800cd00:	81a3      	strh	r3, [r4, #12]
 800cd02:	6923      	ldr	r3, [r4, #16]
 800cd04:	b94b      	cbnz	r3, 800cd1a <__swsetup_r+0x9a>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd10:	d003      	beq.n	800cd1a <__swsetup_r+0x9a>
 800cd12:	4621      	mov	r1, r4
 800cd14:	4630      	mov	r0, r6
 800cd16:	f000 fa07 	bl	800d128 <__smakebuf_r>
 800cd1a:	89a0      	ldrh	r0, [r4, #12]
 800cd1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd20:	f010 0301 	ands.w	r3, r0, #1
 800cd24:	d00a      	beq.n	800cd3c <__swsetup_r+0xbc>
 800cd26:	2300      	movs	r3, #0
 800cd28:	60a3      	str	r3, [r4, #8]
 800cd2a:	6963      	ldr	r3, [r4, #20]
 800cd2c:	425b      	negs	r3, r3
 800cd2e:	61a3      	str	r3, [r4, #24]
 800cd30:	6923      	ldr	r3, [r4, #16]
 800cd32:	b943      	cbnz	r3, 800cd46 <__swsetup_r+0xc6>
 800cd34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd38:	d1ba      	bne.n	800ccb0 <__swsetup_r+0x30>
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	0781      	lsls	r1, r0, #30
 800cd3e:	bf58      	it	pl
 800cd40:	6963      	ldrpl	r3, [r4, #20]
 800cd42:	60a3      	str	r3, [r4, #8]
 800cd44:	e7f4      	b.n	800cd30 <__swsetup_r+0xb0>
 800cd46:	2000      	movs	r0, #0
 800cd48:	e7f7      	b.n	800cd3a <__swsetup_r+0xba>
 800cd4a:	bf00      	nop
 800cd4c:	20000034 	.word	0x20000034
 800cd50:	0800dafc 	.word	0x0800dafc
 800cd54:	0800db1c 	.word	0x0800db1c
 800cd58:	0800dadc 	.word	0x0800dadc

0800cd5c <abort>:
 800cd5c:	b508      	push	{r3, lr}
 800cd5e:	2006      	movs	r0, #6
 800cd60:	f000 fa52 	bl	800d208 <raise>
 800cd64:	2001      	movs	r0, #1
 800cd66:	f7f5 ffa1 	bl	8002cac <_exit>
	...

0800cd6c <__sflush_r>:
 800cd6c:	898a      	ldrh	r2, [r1, #12]
 800cd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd72:	4605      	mov	r5, r0
 800cd74:	0710      	lsls	r0, r2, #28
 800cd76:	460c      	mov	r4, r1
 800cd78:	d458      	bmi.n	800ce2c <__sflush_r+0xc0>
 800cd7a:	684b      	ldr	r3, [r1, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	dc05      	bgt.n	800cd8c <__sflush_r+0x20>
 800cd80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	dc02      	bgt.n	800cd8c <__sflush_r+0x20>
 800cd86:	2000      	movs	r0, #0
 800cd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd8e:	2e00      	cmp	r6, #0
 800cd90:	d0f9      	beq.n	800cd86 <__sflush_r+0x1a>
 800cd92:	2300      	movs	r3, #0
 800cd94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd98:	682f      	ldr	r7, [r5, #0]
 800cd9a:	602b      	str	r3, [r5, #0]
 800cd9c:	d032      	beq.n	800ce04 <__sflush_r+0x98>
 800cd9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cda0:	89a3      	ldrh	r3, [r4, #12]
 800cda2:	075a      	lsls	r2, r3, #29
 800cda4:	d505      	bpl.n	800cdb2 <__sflush_r+0x46>
 800cda6:	6863      	ldr	r3, [r4, #4]
 800cda8:	1ac0      	subs	r0, r0, r3
 800cdaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdac:	b10b      	cbz	r3, 800cdb2 <__sflush_r+0x46>
 800cdae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cdb0:	1ac0      	subs	r0, r0, r3
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdb8:	6a21      	ldr	r1, [r4, #32]
 800cdba:	4628      	mov	r0, r5
 800cdbc:	47b0      	blx	r6
 800cdbe:	1c43      	adds	r3, r0, #1
 800cdc0:	89a3      	ldrh	r3, [r4, #12]
 800cdc2:	d106      	bne.n	800cdd2 <__sflush_r+0x66>
 800cdc4:	6829      	ldr	r1, [r5, #0]
 800cdc6:	291d      	cmp	r1, #29
 800cdc8:	d82c      	bhi.n	800ce24 <__sflush_r+0xb8>
 800cdca:	4a2a      	ldr	r2, [pc, #168]	; (800ce74 <__sflush_r+0x108>)
 800cdcc:	40ca      	lsrs	r2, r1
 800cdce:	07d6      	lsls	r6, r2, #31
 800cdd0:	d528      	bpl.n	800ce24 <__sflush_r+0xb8>
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	6062      	str	r2, [r4, #4]
 800cdd6:	04d9      	lsls	r1, r3, #19
 800cdd8:	6922      	ldr	r2, [r4, #16]
 800cdda:	6022      	str	r2, [r4, #0]
 800cddc:	d504      	bpl.n	800cde8 <__sflush_r+0x7c>
 800cdde:	1c42      	adds	r2, r0, #1
 800cde0:	d101      	bne.n	800cde6 <__sflush_r+0x7a>
 800cde2:	682b      	ldr	r3, [r5, #0]
 800cde4:	b903      	cbnz	r3, 800cde8 <__sflush_r+0x7c>
 800cde6:	6560      	str	r0, [r4, #84]	; 0x54
 800cde8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdea:	602f      	str	r7, [r5, #0]
 800cdec:	2900      	cmp	r1, #0
 800cdee:	d0ca      	beq.n	800cd86 <__sflush_r+0x1a>
 800cdf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdf4:	4299      	cmp	r1, r3
 800cdf6:	d002      	beq.n	800cdfe <__sflush_r+0x92>
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	f7ff fadb 	bl	800c3b4 <_free_r>
 800cdfe:	2000      	movs	r0, #0
 800ce00:	6360      	str	r0, [r4, #52]	; 0x34
 800ce02:	e7c1      	b.n	800cd88 <__sflush_r+0x1c>
 800ce04:	6a21      	ldr	r1, [r4, #32]
 800ce06:	2301      	movs	r3, #1
 800ce08:	4628      	mov	r0, r5
 800ce0a:	47b0      	blx	r6
 800ce0c:	1c41      	adds	r1, r0, #1
 800ce0e:	d1c7      	bne.n	800cda0 <__sflush_r+0x34>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d0c4      	beq.n	800cda0 <__sflush_r+0x34>
 800ce16:	2b1d      	cmp	r3, #29
 800ce18:	d001      	beq.n	800ce1e <__sflush_r+0xb2>
 800ce1a:	2b16      	cmp	r3, #22
 800ce1c:	d101      	bne.n	800ce22 <__sflush_r+0xb6>
 800ce1e:	602f      	str	r7, [r5, #0]
 800ce20:	e7b1      	b.n	800cd86 <__sflush_r+0x1a>
 800ce22:	89a3      	ldrh	r3, [r4, #12]
 800ce24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce28:	81a3      	strh	r3, [r4, #12]
 800ce2a:	e7ad      	b.n	800cd88 <__sflush_r+0x1c>
 800ce2c:	690f      	ldr	r7, [r1, #16]
 800ce2e:	2f00      	cmp	r7, #0
 800ce30:	d0a9      	beq.n	800cd86 <__sflush_r+0x1a>
 800ce32:	0793      	lsls	r3, r2, #30
 800ce34:	680e      	ldr	r6, [r1, #0]
 800ce36:	bf08      	it	eq
 800ce38:	694b      	ldreq	r3, [r1, #20]
 800ce3a:	600f      	str	r7, [r1, #0]
 800ce3c:	bf18      	it	ne
 800ce3e:	2300      	movne	r3, #0
 800ce40:	eba6 0807 	sub.w	r8, r6, r7
 800ce44:	608b      	str	r3, [r1, #8]
 800ce46:	f1b8 0f00 	cmp.w	r8, #0
 800ce4a:	dd9c      	ble.n	800cd86 <__sflush_r+0x1a>
 800ce4c:	6a21      	ldr	r1, [r4, #32]
 800ce4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce50:	4643      	mov	r3, r8
 800ce52:	463a      	mov	r2, r7
 800ce54:	4628      	mov	r0, r5
 800ce56:	47b0      	blx	r6
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	dc06      	bgt.n	800ce6a <__sflush_r+0xfe>
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	f04f 30ff 	mov.w	r0, #4294967295
 800ce68:	e78e      	b.n	800cd88 <__sflush_r+0x1c>
 800ce6a:	4407      	add	r7, r0
 800ce6c:	eba8 0800 	sub.w	r8, r8, r0
 800ce70:	e7e9      	b.n	800ce46 <__sflush_r+0xda>
 800ce72:	bf00      	nop
 800ce74:	20400001 	.word	0x20400001

0800ce78 <_fflush_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	690b      	ldr	r3, [r1, #16]
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	460c      	mov	r4, r1
 800ce80:	b913      	cbnz	r3, 800ce88 <_fflush_r+0x10>
 800ce82:	2500      	movs	r5, #0
 800ce84:	4628      	mov	r0, r5
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	b118      	cbz	r0, 800ce92 <_fflush_r+0x1a>
 800ce8a:	6983      	ldr	r3, [r0, #24]
 800ce8c:	b90b      	cbnz	r3, 800ce92 <_fflush_r+0x1a>
 800ce8e:	f000 f887 	bl	800cfa0 <__sinit>
 800ce92:	4b14      	ldr	r3, [pc, #80]	; (800cee4 <_fflush_r+0x6c>)
 800ce94:	429c      	cmp	r4, r3
 800ce96:	d11b      	bne.n	800ced0 <_fflush_r+0x58>
 800ce98:	686c      	ldr	r4, [r5, #4]
 800ce9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d0ef      	beq.n	800ce82 <_fflush_r+0xa>
 800cea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cea4:	07d0      	lsls	r0, r2, #31
 800cea6:	d404      	bmi.n	800ceb2 <_fflush_r+0x3a>
 800cea8:	0599      	lsls	r1, r3, #22
 800ceaa:	d402      	bmi.n	800ceb2 <_fflush_r+0x3a>
 800ceac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceae:	f000 f915 	bl	800d0dc <__retarget_lock_acquire_recursive>
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	f7ff ff59 	bl	800cd6c <__sflush_r>
 800ceba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cebc:	07da      	lsls	r2, r3, #31
 800cebe:	4605      	mov	r5, r0
 800cec0:	d4e0      	bmi.n	800ce84 <_fflush_r+0xc>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	059b      	lsls	r3, r3, #22
 800cec6:	d4dd      	bmi.n	800ce84 <_fflush_r+0xc>
 800cec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceca:	f000 f908 	bl	800d0de <__retarget_lock_release_recursive>
 800cece:	e7d9      	b.n	800ce84 <_fflush_r+0xc>
 800ced0:	4b05      	ldr	r3, [pc, #20]	; (800cee8 <_fflush_r+0x70>)
 800ced2:	429c      	cmp	r4, r3
 800ced4:	d101      	bne.n	800ceda <_fflush_r+0x62>
 800ced6:	68ac      	ldr	r4, [r5, #8]
 800ced8:	e7df      	b.n	800ce9a <_fflush_r+0x22>
 800ceda:	4b04      	ldr	r3, [pc, #16]	; (800ceec <_fflush_r+0x74>)
 800cedc:	429c      	cmp	r4, r3
 800cede:	bf08      	it	eq
 800cee0:	68ec      	ldreq	r4, [r5, #12]
 800cee2:	e7da      	b.n	800ce9a <_fflush_r+0x22>
 800cee4:	0800dafc 	.word	0x0800dafc
 800cee8:	0800db1c 	.word	0x0800db1c
 800ceec:	0800dadc 	.word	0x0800dadc

0800cef0 <std>:
 800cef0:	2300      	movs	r3, #0
 800cef2:	b510      	push	{r4, lr}
 800cef4:	4604      	mov	r4, r0
 800cef6:	e9c0 3300 	strd	r3, r3, [r0]
 800cefa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cefe:	6083      	str	r3, [r0, #8]
 800cf00:	8181      	strh	r1, [r0, #12]
 800cf02:	6643      	str	r3, [r0, #100]	; 0x64
 800cf04:	81c2      	strh	r2, [r0, #14]
 800cf06:	6183      	str	r3, [r0, #24]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	305c      	adds	r0, #92	; 0x5c
 800cf0e:	f7fc f8ad 	bl	800906c <memset>
 800cf12:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <std+0x38>)
 800cf14:	6263      	str	r3, [r4, #36]	; 0x24
 800cf16:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <std+0x3c>)
 800cf18:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf1a:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <std+0x40>)
 800cf1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf1e:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <std+0x44>)
 800cf20:	6224      	str	r4, [r4, #32]
 800cf22:	6323      	str	r3, [r4, #48]	; 0x30
 800cf24:	bd10      	pop	{r4, pc}
 800cf26:	bf00      	nop
 800cf28:	0800d241 	.word	0x0800d241
 800cf2c:	0800d263 	.word	0x0800d263
 800cf30:	0800d29b 	.word	0x0800d29b
 800cf34:	0800d2bf 	.word	0x0800d2bf

0800cf38 <_cleanup_r>:
 800cf38:	4901      	ldr	r1, [pc, #4]	; (800cf40 <_cleanup_r+0x8>)
 800cf3a:	f000 b8af 	b.w	800d09c <_fwalk_reent>
 800cf3e:	bf00      	nop
 800cf40:	0800ce79 	.word	0x0800ce79

0800cf44 <__sfmoreglue>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	1e4a      	subs	r2, r1, #1
 800cf48:	2568      	movs	r5, #104	; 0x68
 800cf4a:	4355      	muls	r5, r2
 800cf4c:	460e      	mov	r6, r1
 800cf4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf52:	f7ff fa7f 	bl	800c454 <_malloc_r>
 800cf56:	4604      	mov	r4, r0
 800cf58:	b140      	cbz	r0, 800cf6c <__sfmoreglue+0x28>
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	e9c0 1600 	strd	r1, r6, [r0]
 800cf60:	300c      	adds	r0, #12
 800cf62:	60a0      	str	r0, [r4, #8]
 800cf64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf68:	f7fc f880 	bl	800906c <memset>
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}

0800cf70 <__sfp_lock_acquire>:
 800cf70:	4801      	ldr	r0, [pc, #4]	; (800cf78 <__sfp_lock_acquire+0x8>)
 800cf72:	f000 b8b3 	b.w	800d0dc <__retarget_lock_acquire_recursive>
 800cf76:	bf00      	nop
 800cf78:	20000cfc 	.word	0x20000cfc

0800cf7c <__sfp_lock_release>:
 800cf7c:	4801      	ldr	r0, [pc, #4]	; (800cf84 <__sfp_lock_release+0x8>)
 800cf7e:	f000 b8ae 	b.w	800d0de <__retarget_lock_release_recursive>
 800cf82:	bf00      	nop
 800cf84:	20000cfc 	.word	0x20000cfc

0800cf88 <__sinit_lock_acquire>:
 800cf88:	4801      	ldr	r0, [pc, #4]	; (800cf90 <__sinit_lock_acquire+0x8>)
 800cf8a:	f000 b8a7 	b.w	800d0dc <__retarget_lock_acquire_recursive>
 800cf8e:	bf00      	nop
 800cf90:	20000cf7 	.word	0x20000cf7

0800cf94 <__sinit_lock_release>:
 800cf94:	4801      	ldr	r0, [pc, #4]	; (800cf9c <__sinit_lock_release+0x8>)
 800cf96:	f000 b8a2 	b.w	800d0de <__retarget_lock_release_recursive>
 800cf9a:	bf00      	nop
 800cf9c:	20000cf7 	.word	0x20000cf7

0800cfa0 <__sinit>:
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	f7ff fff0 	bl	800cf88 <__sinit_lock_acquire>
 800cfa8:	69a3      	ldr	r3, [r4, #24]
 800cfaa:	b11b      	cbz	r3, 800cfb4 <__sinit+0x14>
 800cfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb0:	f7ff bff0 	b.w	800cf94 <__sinit_lock_release>
 800cfb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cfb8:	6523      	str	r3, [r4, #80]	; 0x50
 800cfba:	4b13      	ldr	r3, [pc, #76]	; (800d008 <__sinit+0x68>)
 800cfbc:	4a13      	ldr	r2, [pc, #76]	; (800d00c <__sinit+0x6c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cfc2:	42a3      	cmp	r3, r4
 800cfc4:	bf04      	itt	eq
 800cfc6:	2301      	moveq	r3, #1
 800cfc8:	61a3      	streq	r3, [r4, #24]
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f000 f820 	bl	800d010 <__sfp>
 800cfd0:	6060      	str	r0, [r4, #4]
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f000 f81c 	bl	800d010 <__sfp>
 800cfd8:	60a0      	str	r0, [r4, #8]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 f818 	bl	800d010 <__sfp>
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	60e0      	str	r0, [r4, #12]
 800cfe4:	2104      	movs	r1, #4
 800cfe6:	6860      	ldr	r0, [r4, #4]
 800cfe8:	f7ff ff82 	bl	800cef0 <std>
 800cfec:	68a0      	ldr	r0, [r4, #8]
 800cfee:	2201      	movs	r2, #1
 800cff0:	2109      	movs	r1, #9
 800cff2:	f7ff ff7d 	bl	800cef0 <std>
 800cff6:	68e0      	ldr	r0, [r4, #12]
 800cff8:	2202      	movs	r2, #2
 800cffa:	2112      	movs	r1, #18
 800cffc:	f7ff ff78 	bl	800cef0 <std>
 800d000:	2301      	movs	r3, #1
 800d002:	61a3      	str	r3, [r4, #24]
 800d004:	e7d2      	b.n	800cfac <__sinit+0xc>
 800d006:	bf00      	nop
 800d008:	0800d690 	.word	0x0800d690
 800d00c:	0800cf39 	.word	0x0800cf39

0800d010 <__sfp>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	4607      	mov	r7, r0
 800d014:	f7ff ffac 	bl	800cf70 <__sfp_lock_acquire>
 800d018:	4b1e      	ldr	r3, [pc, #120]	; (800d094 <__sfp+0x84>)
 800d01a:	681e      	ldr	r6, [r3, #0]
 800d01c:	69b3      	ldr	r3, [r6, #24]
 800d01e:	b913      	cbnz	r3, 800d026 <__sfp+0x16>
 800d020:	4630      	mov	r0, r6
 800d022:	f7ff ffbd 	bl	800cfa0 <__sinit>
 800d026:	3648      	adds	r6, #72	; 0x48
 800d028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	d503      	bpl.n	800d038 <__sfp+0x28>
 800d030:	6833      	ldr	r3, [r6, #0]
 800d032:	b30b      	cbz	r3, 800d078 <__sfp+0x68>
 800d034:	6836      	ldr	r6, [r6, #0]
 800d036:	e7f7      	b.n	800d028 <__sfp+0x18>
 800d038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d03c:	b9d5      	cbnz	r5, 800d074 <__sfp+0x64>
 800d03e:	4b16      	ldr	r3, [pc, #88]	; (800d098 <__sfp+0x88>)
 800d040:	60e3      	str	r3, [r4, #12]
 800d042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d046:	6665      	str	r5, [r4, #100]	; 0x64
 800d048:	f000 f847 	bl	800d0da <__retarget_lock_init_recursive>
 800d04c:	f7ff ff96 	bl	800cf7c <__sfp_lock_release>
 800d050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d058:	6025      	str	r5, [r4, #0]
 800d05a:	61a5      	str	r5, [r4, #24]
 800d05c:	2208      	movs	r2, #8
 800d05e:	4629      	mov	r1, r5
 800d060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d064:	f7fc f802 	bl	800906c <memset>
 800d068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d06c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d070:	4620      	mov	r0, r4
 800d072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d074:	3468      	adds	r4, #104	; 0x68
 800d076:	e7d9      	b.n	800d02c <__sfp+0x1c>
 800d078:	2104      	movs	r1, #4
 800d07a:	4638      	mov	r0, r7
 800d07c:	f7ff ff62 	bl	800cf44 <__sfmoreglue>
 800d080:	4604      	mov	r4, r0
 800d082:	6030      	str	r0, [r6, #0]
 800d084:	2800      	cmp	r0, #0
 800d086:	d1d5      	bne.n	800d034 <__sfp+0x24>
 800d088:	f7ff ff78 	bl	800cf7c <__sfp_lock_release>
 800d08c:	230c      	movs	r3, #12
 800d08e:	603b      	str	r3, [r7, #0]
 800d090:	e7ee      	b.n	800d070 <__sfp+0x60>
 800d092:	bf00      	nop
 800d094:	0800d690 	.word	0x0800d690
 800d098:	ffff0001 	.word	0xffff0001

0800d09c <_fwalk_reent>:
 800d09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	4688      	mov	r8, r1
 800d0a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0a8:	2700      	movs	r7, #0
 800d0aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0ae:	f1b9 0901 	subs.w	r9, r9, #1
 800d0b2:	d505      	bpl.n	800d0c0 <_fwalk_reent+0x24>
 800d0b4:	6824      	ldr	r4, [r4, #0]
 800d0b6:	2c00      	cmp	r4, #0
 800d0b8:	d1f7      	bne.n	800d0aa <_fwalk_reent+0xe>
 800d0ba:	4638      	mov	r0, r7
 800d0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c0:	89ab      	ldrh	r3, [r5, #12]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d907      	bls.n	800d0d6 <_fwalk_reent+0x3a>
 800d0c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	d003      	beq.n	800d0d6 <_fwalk_reent+0x3a>
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	47c0      	blx	r8
 800d0d4:	4307      	orrs	r7, r0
 800d0d6:	3568      	adds	r5, #104	; 0x68
 800d0d8:	e7e9      	b.n	800d0ae <_fwalk_reent+0x12>

0800d0da <__retarget_lock_init_recursive>:
 800d0da:	4770      	bx	lr

0800d0dc <__retarget_lock_acquire_recursive>:
 800d0dc:	4770      	bx	lr

0800d0de <__retarget_lock_release_recursive>:
 800d0de:	4770      	bx	lr

0800d0e0 <__swhatbuf_r>:
 800d0e0:	b570      	push	{r4, r5, r6, lr}
 800d0e2:	460e      	mov	r6, r1
 800d0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e8:	2900      	cmp	r1, #0
 800d0ea:	b096      	sub	sp, #88	; 0x58
 800d0ec:	4614      	mov	r4, r2
 800d0ee:	461d      	mov	r5, r3
 800d0f0:	da07      	bge.n	800d102 <__swhatbuf_r+0x22>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	602b      	str	r3, [r5, #0]
 800d0f6:	89b3      	ldrh	r3, [r6, #12]
 800d0f8:	061a      	lsls	r2, r3, #24
 800d0fa:	d410      	bmi.n	800d11e <__swhatbuf_r+0x3e>
 800d0fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d100:	e00e      	b.n	800d120 <__swhatbuf_r+0x40>
 800d102:	466a      	mov	r2, sp
 800d104:	f000 f902 	bl	800d30c <_fstat_r>
 800d108:	2800      	cmp	r0, #0
 800d10a:	dbf2      	blt.n	800d0f2 <__swhatbuf_r+0x12>
 800d10c:	9a01      	ldr	r2, [sp, #4]
 800d10e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d112:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d116:	425a      	negs	r2, r3
 800d118:	415a      	adcs	r2, r3
 800d11a:	602a      	str	r2, [r5, #0]
 800d11c:	e7ee      	b.n	800d0fc <__swhatbuf_r+0x1c>
 800d11e:	2340      	movs	r3, #64	; 0x40
 800d120:	2000      	movs	r0, #0
 800d122:	6023      	str	r3, [r4, #0]
 800d124:	b016      	add	sp, #88	; 0x58
 800d126:	bd70      	pop	{r4, r5, r6, pc}

0800d128 <__smakebuf_r>:
 800d128:	898b      	ldrh	r3, [r1, #12]
 800d12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d12c:	079d      	lsls	r5, r3, #30
 800d12e:	4606      	mov	r6, r0
 800d130:	460c      	mov	r4, r1
 800d132:	d507      	bpl.n	800d144 <__smakebuf_r+0x1c>
 800d134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	6123      	str	r3, [r4, #16]
 800d13c:	2301      	movs	r3, #1
 800d13e:	6163      	str	r3, [r4, #20]
 800d140:	b002      	add	sp, #8
 800d142:	bd70      	pop	{r4, r5, r6, pc}
 800d144:	ab01      	add	r3, sp, #4
 800d146:	466a      	mov	r2, sp
 800d148:	f7ff ffca 	bl	800d0e0 <__swhatbuf_r>
 800d14c:	9900      	ldr	r1, [sp, #0]
 800d14e:	4605      	mov	r5, r0
 800d150:	4630      	mov	r0, r6
 800d152:	f7ff f97f 	bl	800c454 <_malloc_r>
 800d156:	b948      	cbnz	r0, 800d16c <__smakebuf_r+0x44>
 800d158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d15c:	059a      	lsls	r2, r3, #22
 800d15e:	d4ef      	bmi.n	800d140 <__smakebuf_r+0x18>
 800d160:	f023 0303 	bic.w	r3, r3, #3
 800d164:	f043 0302 	orr.w	r3, r3, #2
 800d168:	81a3      	strh	r3, [r4, #12]
 800d16a:	e7e3      	b.n	800d134 <__smakebuf_r+0xc>
 800d16c:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <__smakebuf_r+0x7c>)
 800d16e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	6020      	str	r0, [r4, #0]
 800d174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d178:	81a3      	strh	r3, [r4, #12]
 800d17a:	9b00      	ldr	r3, [sp, #0]
 800d17c:	6163      	str	r3, [r4, #20]
 800d17e:	9b01      	ldr	r3, [sp, #4]
 800d180:	6120      	str	r0, [r4, #16]
 800d182:	b15b      	cbz	r3, 800d19c <__smakebuf_r+0x74>
 800d184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d188:	4630      	mov	r0, r6
 800d18a:	f000 f8d1 	bl	800d330 <_isatty_r>
 800d18e:	b128      	cbz	r0, 800d19c <__smakebuf_r+0x74>
 800d190:	89a3      	ldrh	r3, [r4, #12]
 800d192:	f023 0303 	bic.w	r3, r3, #3
 800d196:	f043 0301 	orr.w	r3, r3, #1
 800d19a:	81a3      	strh	r3, [r4, #12]
 800d19c:	89a0      	ldrh	r0, [r4, #12]
 800d19e:	4305      	orrs	r5, r0
 800d1a0:	81a5      	strh	r5, [r4, #12]
 800d1a2:	e7cd      	b.n	800d140 <__smakebuf_r+0x18>
 800d1a4:	0800cf39 	.word	0x0800cf39

0800d1a8 <_malloc_usable_size_r>:
 800d1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ac:	1f18      	subs	r0, r3, #4
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfbc      	itt	lt
 800d1b2:	580b      	ldrlt	r3, [r1, r0]
 800d1b4:	18c0      	addlt	r0, r0, r3
 800d1b6:	4770      	bx	lr

0800d1b8 <_raise_r>:
 800d1b8:	291f      	cmp	r1, #31
 800d1ba:	b538      	push	{r3, r4, r5, lr}
 800d1bc:	4604      	mov	r4, r0
 800d1be:	460d      	mov	r5, r1
 800d1c0:	d904      	bls.n	800d1cc <_raise_r+0x14>
 800d1c2:	2316      	movs	r3, #22
 800d1c4:	6003      	str	r3, [r0, #0]
 800d1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1ce:	b112      	cbz	r2, 800d1d6 <_raise_r+0x1e>
 800d1d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1d4:	b94b      	cbnz	r3, 800d1ea <_raise_r+0x32>
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f000 f830 	bl	800d23c <_getpid_r>
 800d1dc:	462a      	mov	r2, r5
 800d1de:	4601      	mov	r1, r0
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1e6:	f000 b817 	b.w	800d218 <_kill_r>
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	d00a      	beq.n	800d204 <_raise_r+0x4c>
 800d1ee:	1c59      	adds	r1, r3, #1
 800d1f0:	d103      	bne.n	800d1fa <_raise_r+0x42>
 800d1f2:	2316      	movs	r3, #22
 800d1f4:	6003      	str	r3, [r0, #0]
 800d1f6:	2001      	movs	r0, #1
 800d1f8:	e7e7      	b.n	800d1ca <_raise_r+0x12>
 800d1fa:	2400      	movs	r4, #0
 800d1fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d200:	4628      	mov	r0, r5
 800d202:	4798      	blx	r3
 800d204:	2000      	movs	r0, #0
 800d206:	e7e0      	b.n	800d1ca <_raise_r+0x12>

0800d208 <raise>:
 800d208:	4b02      	ldr	r3, [pc, #8]	; (800d214 <raise+0xc>)
 800d20a:	4601      	mov	r1, r0
 800d20c:	6818      	ldr	r0, [r3, #0]
 800d20e:	f7ff bfd3 	b.w	800d1b8 <_raise_r>
 800d212:	bf00      	nop
 800d214:	20000034 	.word	0x20000034

0800d218 <_kill_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d07      	ldr	r5, [pc, #28]	; (800d238 <_kill_r+0x20>)
 800d21c:	2300      	movs	r3, #0
 800d21e:	4604      	mov	r4, r0
 800d220:	4608      	mov	r0, r1
 800d222:	4611      	mov	r1, r2
 800d224:	602b      	str	r3, [r5, #0]
 800d226:	f7f5 fd31 	bl	8002c8c <_kill>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	d102      	bne.n	800d234 <_kill_r+0x1c>
 800d22e:	682b      	ldr	r3, [r5, #0]
 800d230:	b103      	cbz	r3, 800d234 <_kill_r+0x1c>
 800d232:	6023      	str	r3, [r4, #0]
 800d234:	bd38      	pop	{r3, r4, r5, pc}
 800d236:	bf00      	nop
 800d238:	20000cf0 	.word	0x20000cf0

0800d23c <_getpid_r>:
 800d23c:	f7f5 bd1e 	b.w	8002c7c <_getpid>

0800d240 <__sread>:
 800d240:	b510      	push	{r4, lr}
 800d242:	460c      	mov	r4, r1
 800d244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d248:	f000 f894 	bl	800d374 <_read_r>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	bfab      	itete	ge
 800d250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d252:	89a3      	ldrhlt	r3, [r4, #12]
 800d254:	181b      	addge	r3, r3, r0
 800d256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d25a:	bfac      	ite	ge
 800d25c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d25e:	81a3      	strhlt	r3, [r4, #12]
 800d260:	bd10      	pop	{r4, pc}

0800d262 <__swrite>:
 800d262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d266:	461f      	mov	r7, r3
 800d268:	898b      	ldrh	r3, [r1, #12]
 800d26a:	05db      	lsls	r3, r3, #23
 800d26c:	4605      	mov	r5, r0
 800d26e:	460c      	mov	r4, r1
 800d270:	4616      	mov	r6, r2
 800d272:	d505      	bpl.n	800d280 <__swrite+0x1e>
 800d274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d278:	2302      	movs	r3, #2
 800d27a:	2200      	movs	r2, #0
 800d27c:	f000 f868 	bl	800d350 <_lseek_r>
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d28a:	81a3      	strh	r3, [r4, #12]
 800d28c:	4632      	mov	r2, r6
 800d28e:	463b      	mov	r3, r7
 800d290:	4628      	mov	r0, r5
 800d292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d296:	f000 b817 	b.w	800d2c8 <_write_r>

0800d29a <__sseek>:
 800d29a:	b510      	push	{r4, lr}
 800d29c:	460c      	mov	r4, r1
 800d29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a2:	f000 f855 	bl	800d350 <_lseek_r>
 800d2a6:	1c43      	adds	r3, r0, #1
 800d2a8:	89a3      	ldrh	r3, [r4, #12]
 800d2aa:	bf15      	itete	ne
 800d2ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2b6:	81a3      	strheq	r3, [r4, #12]
 800d2b8:	bf18      	it	ne
 800d2ba:	81a3      	strhne	r3, [r4, #12]
 800d2bc:	bd10      	pop	{r4, pc}

0800d2be <__sclose>:
 800d2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c2:	f000 b813 	b.w	800d2ec <_close_r>
	...

0800d2c8 <_write_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4d07      	ldr	r5, [pc, #28]	; (800d2e8 <_write_r+0x20>)
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	4608      	mov	r0, r1
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	602a      	str	r2, [r5, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	f7f5 fd0f 	bl	8002cfa <_write>
 800d2dc:	1c43      	adds	r3, r0, #1
 800d2de:	d102      	bne.n	800d2e6 <_write_r+0x1e>
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	b103      	cbz	r3, 800d2e6 <_write_r+0x1e>
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	bd38      	pop	{r3, r4, r5, pc}
 800d2e8:	20000cf0 	.word	0x20000cf0

0800d2ec <_close_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4d06      	ldr	r5, [pc, #24]	; (800d308 <_close_r+0x1c>)
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	4608      	mov	r0, r1
 800d2f6:	602b      	str	r3, [r5, #0]
 800d2f8:	f7f5 fd1b 	bl	8002d32 <_close>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_close_r+0x1a>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_close_r+0x1a>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	20000cf0 	.word	0x20000cf0

0800d30c <_fstat_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4d07      	ldr	r5, [pc, #28]	; (800d32c <_fstat_r+0x20>)
 800d310:	2300      	movs	r3, #0
 800d312:	4604      	mov	r4, r0
 800d314:	4608      	mov	r0, r1
 800d316:	4611      	mov	r1, r2
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	f7f5 fd16 	bl	8002d4a <_fstat>
 800d31e:	1c43      	adds	r3, r0, #1
 800d320:	d102      	bne.n	800d328 <_fstat_r+0x1c>
 800d322:	682b      	ldr	r3, [r5, #0]
 800d324:	b103      	cbz	r3, 800d328 <_fstat_r+0x1c>
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	bd38      	pop	{r3, r4, r5, pc}
 800d32a:	bf00      	nop
 800d32c:	20000cf0 	.word	0x20000cf0

0800d330 <_isatty_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d06      	ldr	r5, [pc, #24]	; (800d34c <_isatty_r+0x1c>)
 800d334:	2300      	movs	r3, #0
 800d336:	4604      	mov	r4, r0
 800d338:	4608      	mov	r0, r1
 800d33a:	602b      	str	r3, [r5, #0]
 800d33c:	f7f5 fd15 	bl	8002d6a <_isatty>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d102      	bne.n	800d34a <_isatty_r+0x1a>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	b103      	cbz	r3, 800d34a <_isatty_r+0x1a>
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	bd38      	pop	{r3, r4, r5, pc}
 800d34c:	20000cf0 	.word	0x20000cf0

0800d350 <_lseek_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4d07      	ldr	r5, [pc, #28]	; (800d370 <_lseek_r+0x20>)
 800d354:	4604      	mov	r4, r0
 800d356:	4608      	mov	r0, r1
 800d358:	4611      	mov	r1, r2
 800d35a:	2200      	movs	r2, #0
 800d35c:	602a      	str	r2, [r5, #0]
 800d35e:	461a      	mov	r2, r3
 800d360:	f7f5 fd0e 	bl	8002d80 <_lseek>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_lseek_r+0x1e>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_lseek_r+0x1e>
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	20000cf0 	.word	0x20000cf0

0800d374 <_read_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d07      	ldr	r5, [pc, #28]	; (800d394 <_read_r+0x20>)
 800d378:	4604      	mov	r4, r0
 800d37a:	4608      	mov	r0, r1
 800d37c:	4611      	mov	r1, r2
 800d37e:	2200      	movs	r2, #0
 800d380:	602a      	str	r2, [r5, #0]
 800d382:	461a      	mov	r2, r3
 800d384:	f7f5 fc9c 	bl	8002cc0 <_read>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d102      	bne.n	800d392 <_read_r+0x1e>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	b103      	cbz	r3, 800d392 <_read_r+0x1e>
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	bd38      	pop	{r3, r4, r5, pc}
 800d394:	20000cf0 	.word	0x20000cf0

0800d398 <_init>:
 800d398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39a:	bf00      	nop
 800d39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d39e:	bc08      	pop	{r3}
 800d3a0:	469e      	mov	lr, r3
 800d3a2:	4770      	bx	lr

0800d3a4 <_fini>:
 800d3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3a6:	bf00      	nop
 800d3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3aa:	bc08      	pop	{r3}
 800d3ac:	469e      	mov	lr, r3
 800d3ae:	4770      	bx	lr
