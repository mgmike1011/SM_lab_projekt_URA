
Projekt_URA_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d038  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800d208  0800d208  0001d208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d99c  0800d99c  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800d99c  0800d99c  0001d99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9a4  0800d9a4  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9a4  0800d9a4  0001d9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9a8  0800d9a8  0001d9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800d9ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b00  20000208  0800dbb4  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d08  0800dbb4  00020d08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222d2  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041fb  00000000  00000000  0004250a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00046708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00047f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a76  00000000  00000000  000495c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd52  00000000  00000000  00073036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b48  00000000  00000000  00092d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b8d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007afc  00000000  00000000  0018b924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d1f0 	.word	0x0800d1f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0800d1f0 	.word	0x0800d1f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <BMP280_Read8+0x50>)
 80010ec:	f002 fc3a 	bl	8003964 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <BMP280_Read8+0x54>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	f107 020c 	add.w	r2, r7, #12
 80010f8:	f107 010c 	add.w	r1, r7, #12
 80010fc:	230a      	movs	r3, #10
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2302      	movs	r3, #2
 8001102:	f004 fb8a 	bl	800581a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <BMP280_Read8+0x50>)
 800110e:	f002 fc29 	bl	8003964 <HAL_GPIO_WritePin>
	return tmp[1];
 8001112:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020400 	.word	0x40020400
 8001120:	20000650 	.word	0x20000650

08001124 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001132:	7b3b      	ldrb	r3, [r7, #12]
 8001134:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001138:	b2db      	uxtb	r3, r3
 800113a:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001142:	4810      	ldr	r0, [pc, #64]	; (8001184 <BMP280_Read16+0x60>)
 8001144:	f002 fc0e 	bl	8003964 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <BMP280_Read16+0x64>)
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	f107 020c 	add.w	r2, r7, #12
 8001150:	f107 010c 	add.w	r1, r7, #12
 8001154:	230a      	movs	r3, #10
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2303      	movs	r3, #3
 800115a:	f004 fb5e 	bl	800581a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <BMP280_Read16+0x60>)
 8001166:	f002 fbfd 	bl	8003964 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29b      	uxth	r3, r3
#endif
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020400 	.word	0x40020400
 8001188:	20000650 	.word	0x20000650

0800118c <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ffc3 	bl	8001124 <BMP280_Read16>
 800119e:	4603      	mov	r3, r0
 80011a0:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	b29b      	uxth	r3, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80011d4:	7b3b      	ldrb	r3, [r7, #12]
 80011d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <BMP280_Write8+0x58>)
 80011ea:	f002 fbbb 	bl	8003964 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <BMP280_Write8+0x5c>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	f107 010c 	add.w	r1, r7, #12
 80011fa:	230a      	movs	r3, #10
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2302      	movs	r3, #2
 8001200:	f004 fb0b 	bl	800581a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <BMP280_Write8+0x58>)
 800120c:	f002 fbaa 	bl	8003964 <HAL_GPIO_WritePin>
#endif
}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020400 	.word	0x40020400
 800121c:	20000650 	.word	0x20000650

08001220 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001234:	b2db      	uxtb	r3, r3
 8001236:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <BMP280_Read24+0x5c>)
 8001240:	f002 fb90 	bl	8003964 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <BMP280_Read24+0x60>)
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	f107 020c 	add.w	r2, r7, #12
 800124c:	f107 010c 	add.w	r1, r7, #12
 8001250:	230a      	movs	r3, #10
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2303      	movs	r3, #3
 8001256:	f004 fae0 	bl	800581a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001260:	4806      	ldr	r0, [pc, #24]	; (800127c <BMP280_Read24+0x5c>)
 8001262:	f002 fb7f 	bl	8003964 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8001266:	7b7b      	ldrb	r3, [r7, #13]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4313      	orrs	r3, r2
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	4313      	orrs	r3, r2
#endif
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40020400 	.word	0x40020400
 8001280:	20000650 	.word	0x20000650

08001284 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	4608      	mov	r0, r1
 800128e:	4611      	mov	r1, r2
 8001290:	461a      	mov	r2, r3
 8001292:	4603      	mov	r3, r0
 8001294:	70fb      	strb	r3, [r7, #3]
 8001296:	460b      	mov	r3, r1
 8001298:	70bb      	strb	r3, [r7, #2]
 800129a:	4613      	mov	r3, r2
 800129c:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 800129e:	4a4f      	ldr	r2, [pc, #316]	; (80013dc <BMP280_Init+0x158>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012aa:	484d      	ldr	r0, [pc, #308]	; (80013e0 <BMP280_Init+0x15c>)
 80012ac:	f002 fb5a 	bl	8003964 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012b0:	2005      	movs	r0, #5
 80012b2:	f001 ffe3 	bl	800327c <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012bc:	4848      	ldr	r0, [pc, #288]	; (80013e0 <BMP280_Init+0x15c>)
 80012be:	f002 fb51 	bl	8003964 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 80012c2:	787b      	ldrb	r3, [r7, #1]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d901      	bls.n	80012cc <BMP280_Init+0x48>
	    mode = BMP280_NORMALMODE;
 80012c8:	2303      	movs	r3, #3
 80012ca:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012cc:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <BMP280_Init+0x160>)
 80012ce:	787b      	ldrb	r3, [r7, #1]
 80012d0:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012d2:	787b      	ldrb	r3, [r7, #1]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <BMP280_Init+0x58>
		mode = BMP280_SLEEPMODE;
 80012d8:	2300      	movs	r3, #0
 80012da:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b05      	cmp	r3, #5
 80012e0:	d901      	bls.n	80012e6 <BMP280_Init+0x62>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012e2:	2305      	movs	r3, #5
 80012e4:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012e6:	4a40      	ldr	r2, [pc, #256]	; (80013e8 <BMP280_Init+0x164>)
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012ec:	78bb      	ldrb	r3, [r7, #2]
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d901      	bls.n	80012f6 <BMP280_Init+0x72>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012f2:	2305      	movs	r3, #5
 80012f4:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012f6:	4a3d      	ldr	r2, [pc, #244]	; (80013ec <BMP280_Init+0x168>)
 80012f8:	78bb      	ldrb	r3, [r7, #2]
 80012fa:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012fc:	bf00      	nop
 80012fe:	20d0      	movs	r0, #208	; 0xd0
 8001300:	f7ff fee4 	bl	80010cc <BMP280_Read8>
 8001304:	4603      	mov	r3, r0
 8001306:	2b58      	cmp	r3, #88	; 0x58
 8001308:	d1f9      	bne.n	80012fe <BMP280_Init+0x7a>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800130a:	2088      	movs	r0, #136	; 0x88
 800130c:	f7ff ff3e 	bl	800118c <BMP280_Read16LE>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <BMP280_Init+0x16c>)
 8001316:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001318:	208a      	movs	r0, #138	; 0x8a
 800131a:	f7ff ff37 	bl	800118c <BMP280_Read16LE>
 800131e:	4603      	mov	r3, r0
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <BMP280_Init+0x170>)
 8001324:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001326:	208c      	movs	r0, #140	; 0x8c
 8001328:	f7ff ff30 	bl	800118c <BMP280_Read16LE>
 800132c:	4603      	mov	r3, r0
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <BMP280_Init+0x174>)
 8001332:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001334:	208e      	movs	r0, #142	; 0x8e
 8001336:	f7ff ff29 	bl	800118c <BMP280_Read16LE>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <BMP280_Init+0x178>)
 8001340:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001342:	2090      	movs	r0, #144	; 0x90
 8001344:	f7ff ff22 	bl	800118c <BMP280_Read16LE>
 8001348:	4603      	mov	r3, r0
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <BMP280_Init+0x17c>)
 800134e:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001350:	2092      	movs	r0, #146	; 0x92
 8001352:	f7ff ff1b 	bl	800118c <BMP280_Read16LE>
 8001356:	4603      	mov	r3, r0
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <BMP280_Init+0x180>)
 800135c:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 800135e:	2094      	movs	r0, #148	; 0x94
 8001360:	f7ff ff14 	bl	800118c <BMP280_Read16LE>
 8001364:	4603      	mov	r3, r0
 8001366:	b21a      	sxth	r2, r3
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <BMP280_Init+0x184>)
 800136a:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 800136c:	2096      	movs	r0, #150	; 0x96
 800136e:	f7ff ff0d 	bl	800118c <BMP280_Read16LE>
 8001372:	4603      	mov	r3, r0
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <BMP280_Init+0x188>)
 8001378:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 800137a:	2098      	movs	r0, #152	; 0x98
 800137c:	f7ff ff06 	bl	800118c <BMP280_Read16LE>
 8001380:	4603      	mov	r3, r0
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <BMP280_Init+0x18c>)
 8001386:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001388:	209a      	movs	r0, #154	; 0x9a
 800138a:	f7ff feff 	bl	800118c <BMP280_Read16LE>
 800138e:	4603      	mov	r3, r0
 8001390:	b21a      	sxth	r2, r3
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <BMP280_Init+0x190>)
 8001394:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001396:	209c      	movs	r0, #156	; 0x9c
 8001398:	f7ff fef8 	bl	800118c <BMP280_Read16LE>
 800139c:	4603      	mov	r3, r0
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <BMP280_Init+0x194>)
 80013a2:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80013a4:	209e      	movs	r0, #158	; 0x9e
 80013a6:	f7ff fef1 	bl	800118c <BMP280_Read16LE>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <BMP280_Init+0x198>)
 80013b0:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	015b      	lsls	r3, r3, #5
 80013b6:	b25a      	sxtb	r2, r3
 80013b8:	78bb      	ldrb	r3, [r7, #2]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4619      	mov	r1, r3
 80013ce:	20f4      	movs	r0, #244	; 0xf4
 80013d0:	f7ff fef6 	bl	80011c0 <BMP280_Write8>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000650 	.word	0x20000650
 80013e0:	40020400 	.word	0x40020400
 80013e4:	20000657 	.word	0x20000657
 80013e8:	20000656 	.word	0x20000656
 80013ec:	20000642 	.word	0x20000642
 80013f0:	20000654 	.word	0x20000654
 80013f4:	20000644 	.word	0x20000644
 80013f8:	2000063c 	.word	0x2000063c
 80013fc:	20000648 	.word	0x20000648
 8001400:	2000063e 	.word	0x2000063e
 8001404:	20000658 	.word	0x20000658
 8001408:	2000065c 	.word	0x2000065c
 800140c:	20000646 	.word	0x20000646
 8001410:	2000064c 	.word	0x2000064c
 8001414:	20000640 	.word	0x20000640
 8001418:	2000064a 	.word	0x2000064a
 800141c:	2000065a 	.word	0x2000065a

08001420 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <BMP280_ReadTemperature+0xfc>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d16d      	bne.n	800150a <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800142e:	20f4      	movs	r0, #244	; 0xf4
 8001430:	f7ff fe4c 	bl	80010cc <BMP280_Read8>
 8001434:	4603      	mov	r3, r0
 8001436:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	4619      	mov	r1, r3
 800144c:	20f4      	movs	r0, #244	; 0xf4
 800144e:	f7ff feb7 	bl	80011c0 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001452:	20f4      	movs	r0, #244	; 0xf4
 8001454:	f7ff fe3a 	bl	80010cc <BMP280_Read8>
 8001458:	4603      	mov	r3, r0
 800145a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001464:	7dbb      	ldrb	r3, [r7, #22]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d14f      	bne.n	800150a <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800146a:	20f4      	movs	r0, #244	; 0xf4
 800146c:	f7ff fe2e 	bl	80010cc <BMP280_Read8>
 8001470:	4603      	mov	r3, r0
 8001472:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 800147c:	7dbb      	ldrb	r3, [r7, #22]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d000      	beq.n	8001484 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001482:	e7f2      	b.n	800146a <BMP280_ReadTemperature+0x4a>
				  break;
 8001484:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 8001486:	20fa      	movs	r0, #250	; 0xfa
 8001488:	f7ff feca 	bl	8001220 <BMP280_Read24>
 800148c:	4603      	mov	r3, r0
 800148e:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	111b      	asrs	r3, r3, #4
 8001494:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	10da      	asrs	r2, r3, #3
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <BMP280_ReadTemperature+0x100>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80014a2:	4a20      	ldr	r2, [pc, #128]	; (8001524 <BMP280_ReadTemperature+0x104>)
 80014a4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	12db      	asrs	r3, r3, #11
 80014ae:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	111b      	asrs	r3, r3, #4
 80014b4:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <BMP280_ReadTemperature+0x100>)
 80014b6:	8812      	ldrh	r2, [r2, #0]
 80014b8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	1112      	asrs	r2, r2, #4
 80014be:	4918      	ldr	r1, [pc, #96]	; (8001520 <BMP280_ReadTemperature+0x100>)
 80014c0:	8809      	ldrh	r1, [r1, #0]
 80014c2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <BMP280_ReadTemperature+0x108>)
 80014cc:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014d4:	139b      	asrs	r3, r3, #14
 80014d6:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	4413      	add	r3, r2
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <BMP280_ReadTemperature+0x10c>)
 80014e0:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <BMP280_ReadTemperature+0x10c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3380      	adds	r3, #128	; 0x80
 80014ee:	121b      	asrs	r3, r3, #8
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f8:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001530 <BMP280_ReadTemperature+0x110>
 8001504:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001508:	e001      	b.n	800150e <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 800150a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001534 <BMP280_ReadTemperature+0x114>
 800150e:	eef0 7a47 	vmov.f32	s15, s14
}
 8001512:	eeb0 0a67 	vmov.f32	s0, s15
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000657 	.word	0x20000657
 8001520:	20000654 	.word	0x20000654
 8001524:	20000644 	.word	0x20000644
 8001528:	2000063c 	.word	0x2000063c
 800152c:	20000660 	.word	0x20000660
 8001530:	42c80000 	.word	0x42c80000
 8001534:	c2c60000 	.word	0xc2c60000

08001538 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800153c:	b09c      	sub	sp, #112	; 0x70
 800153e:	af00      	add	r7, sp, #0
 8001540:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001542:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001544:	f7ff ff6c 	bl	8001420 <BMP280_ReadTemperature>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
 800154c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800154e:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001728 <BMP280_ReadTemperatureAndPressure+0x1f0>
 800155c:	eef4 7a47 	vcmp.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d101      	bne.n	800156a <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 8001566:	23ff      	movs	r3, #255	; 0xff
 8001568:	e1d8      	b.n	800191c <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800156a:	20f7      	movs	r0, #247	; 0xf7
 800156c:	f7ff fe58 	bl	8001220 <BMP280_Read24>
 8001570:	4603      	mov	r3, r0
 8001572:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 8001574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001576:	111b      	asrs	r3, r3, #4
 8001578:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 800157a:	4b6c      	ldr	r3, [pc, #432]	; (800172c <BMP280_ReadTemperatureAndPressure+0x1f4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001584:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001588:	f143 35ff 	adc.w	r5, r3, #4294967295
 800158c:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 8001590:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001594:	fb03 f102 	mul.w	r1, r3, r2
 8001598:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800159a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800159c:	fb03 f302 	mul.w	r3, r3, r2
 80015a0:	18ca      	adds	r2, r1, r3
 80015a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015a4:	fba3 4503 	umull	r4, r5, r3, r3
 80015a8:	1953      	adds	r3, r2, r5
 80015aa:	461d      	mov	r5, r3
 80015ac:	4b60      	ldr	r3, [pc, #384]	; (8001730 <BMP280_ReadTemperatureAndPressure+0x1f8>)
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015b8:	fb02 f005 	mul.w	r0, r2, r5
 80015bc:	fb04 f103 	mul.w	r1, r4, r3
 80015c0:	4401      	add	r1, r0
 80015c2:	fba4 2302 	umull	r2, r3, r4, r2
 80015c6:	4419      	add	r1, r3
 80015c8:	460b      	mov	r3, r1
 80015ca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80015ce:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80015d2:	4b58      	ldr	r3, [pc, #352]	; (8001734 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 80015d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d8:	b21a      	sxth	r2, r3
 80015da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015e0:	fb03 f001 	mul.w	r0, r3, r1
 80015e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80015e6:	fb02 f101 	mul.w	r1, r2, r1
 80015ea:	4408      	add	r0, r1
 80015ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015ee:	fba1 2302 	umull	r2, r3, r1, r2
 80015f2:	18c1      	adds	r1, r0, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	f04f 0100 	mov.w	r1, #0
 80015fe:	0459      	lsls	r1, r3, #17
 8001600:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001604:	0450      	lsls	r0, r2, #17
 8001606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800160a:	eb12 0800 	adds.w	r8, r2, r0
 800160e:	eb43 0901 	adc.w	r9, r3, r1
 8001612:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 8001616:	4b48      	ldr	r3, [pc, #288]	; (8001738 <BMP280_ReadTemperatureAndPressure+0x200>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	b21a      	sxth	r2, r3
 800161e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001622:	f04f 0000 	mov.w	r0, #0
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	00d1      	lsls	r1, r2, #3
 800162c:	2000      	movs	r0, #0
 800162e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001632:	1814      	adds	r4, r2, r0
 8001634:	61bc      	str	r4, [r7, #24]
 8001636:	414b      	adcs	r3, r1
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800163e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001642:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001646:	fb03 f102 	mul.w	r1, r3, r2
 800164a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800164c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800164e:	fb03 f302 	mul.w	r3, r3, r2
 8001652:	18ca      	adds	r2, r1, r3
 8001654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001656:	fba3 4503 	umull	r4, r5, r3, r3
 800165a:	1953      	adds	r3, r2, r5
 800165c:	461d      	mov	r5, r3
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <BMP280_ReadTemperatureAndPressure+0x204>)
 8001660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001664:	b21a      	sxth	r2, r3
 8001666:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800166a:	fb02 f005 	mul.w	r0, r2, r5
 800166e:	fb04 f103 	mul.w	r1, r4, r3
 8001672:	4401      	add	r1, r0
 8001674:	fba4 2302 	umull	r2, r3, r4, r2
 8001678:	4419      	add	r1, r3
 800167a:	460b      	mov	r3, r1
 800167c:	f04f 0800 	mov.w	r8, #0
 8001680:	f04f 0900 	mov.w	r9, #0
 8001684:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001688:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800168c:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <BMP280_ReadTemperatureAndPressure+0x208>)
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	b21a      	sxth	r2, r3
 8001698:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800169c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800169e:	fb03 f001 	mul.w	r0, r3, r1
 80016a2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80016a4:	fb02 f101 	mul.w	r1, r2, r1
 80016a8:	1844      	adds	r4, r0, r1
 80016aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016ac:	fba1 0102 	umull	r0, r1, r1, r2
 80016b0:	1863      	adds	r3, r4, r1
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	030b      	lsls	r3, r1, #12
 80016be:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80016c2:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016c4:	eb18 0102 	adds.w	r1, r8, r2
 80016c8:	6139      	str	r1, [r7, #16]
 80016ca:	eb49 0303 	adc.w	r3, r9, r3
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016d4:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80016d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016dc:	1c11      	adds	r1, r2, #0
 80016de:	6439      	str	r1, [r7, #64]	; 0x40
 80016e0:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80016e4:	647b      	str	r3, [r7, #68]	; 0x44
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <BMP280_ReadTemperatureAndPressure+0x20c>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80016f4:	4629      	mov	r1, r5
 80016f6:	fb02 f001 	mul.w	r0, r2, r1
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f103 	mul.w	r1, r1, r3
 8001700:	4401      	add	r1, r0
 8001702:	4620      	mov	r0, r4
 8001704:	fba0 2302 	umull	r2, r3, r0, r2
 8001708:	4419      	add	r1, r3
 800170a:	460b      	mov	r3, r1
 800170c:	f04f 0000 	mov.w	r0, #0
 8001710:	f04f 0100 	mov.w	r1, #0
 8001714:	1058      	asrs	r0, r3, #1
 8001716:	17d9      	asrs	r1, r3, #31
 8001718:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 800171c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001720:	4313      	orrs	r3, r2
 8001722:	d111      	bne.n	8001748 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 8001724:	2300      	movs	r3, #0
 8001726:	e0f9      	b.n	800191c <BMP280_ReadTemperatureAndPressure+0x3e4>
 8001728:	c2c60000 	.word	0xc2c60000
 800172c:	20000660 	.word	0x20000660
 8001730:	2000064c 	.word	0x2000064c
 8001734:	20000646 	.word	0x20000646
 8001738:	2000065c 	.word	0x2000065c
 800173c:	20000658 	.word	0x20000658
 8001740:	2000063e 	.word	0x2000063e
 8001744:	20000648 	.word	0x20000648
	  }
	  p = 1048576 - adc_P;
 8001748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800174a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800174e:	461a      	mov	r2, r3
 8001750:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001754:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 8001758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800175a:	105b      	asrs	r3, r3, #1
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800175e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001760:	07db      	lsls	r3, r3, #31
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
 8001764:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001768:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800176c:	4621      	mov	r1, r4
 800176e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001772:	4629      	mov	r1, r5
 8001774:	eb61 0b03 	sbc.w	fp, r1, r3
 8001778:	4652      	mov	r2, sl
 800177a:	465b      	mov	r3, fp
 800177c:	1891      	adds	r1, r2, r2
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	415b      	adcs	r3, r3
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001788:	eb12 020a 	adds.w	r2, r2, sl
 800178c:	eb43 030b 	adc.w	r3, r3, fp
 8001790:	f04f 0000 	mov.w	r0, #0
 8001794:	f04f 0100 	mov.w	r1, #0
 8001798:	0199      	lsls	r1, r3, #6
 800179a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800179e:	0190      	lsls	r0, r2, #6
 80017a0:	1812      	adds	r2, r2, r0
 80017a2:	eb41 0303 	adc.w	r3, r1, r3
 80017a6:	f04f 0000 	mov.w	r0, #0
 80017aa:	f04f 0100 	mov.w	r1, #0
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017b4:	0090      	lsls	r0, r2, #2
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	eb12 020a 	adds.w	r2, r2, sl
 80017be:	eb43 030b 	adc.w	r3, r3, fp
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	0099      	lsls	r1, r3, #2
 80017cc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017d0:	0090      	lsls	r0, r2, #2
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	eb12 010a 	adds.w	r1, r2, sl
 80017da:	6339      	str	r1, [r7, #48]	; 0x30
 80017dc:	eb43 030b 	adc.w	r3, r3, fp
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
 80017e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017ea:	f7ff fa6d 	bl	8000cc8 <__aeabi_ldivmod>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80017f6:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 80017f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fc:	b218      	sxth	r0, r3
 80017fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001802:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	0b62      	lsrs	r2, r4, #13
 8001810:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001814:	136b      	asrs	r3, r5, #13
 8001816:	fb02 f501 	mul.w	r5, r2, r1
 800181a:	fb00 f403 	mul.w	r4, r0, r3
 800181e:	442c      	add	r4, r5
 8001820:	fba0 0102 	umull	r0, r1, r0, r2
 8001824:	1863      	adds	r3, r4, r1
 8001826:	4619      	mov	r1, r3
 8001828:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	0b62      	lsrs	r2, r4, #13
 8001836:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800183a:	136b      	asrs	r3, r5, #13
 800183c:	fb02 f501 	mul.w	r5, r2, r1
 8001840:	fb00 f403 	mul.w	r4, r0, r3
 8001844:	442c      	add	r4, r5
 8001846:	fba0 0102 	umull	r0, r1, r0, r2
 800184a:	1863      	adds	r3, r4, r1
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	0e42      	lsrs	r2, r0, #25
 8001858:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800185c:	164b      	asrs	r3, r1, #25
 800185e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 8001862:	4b32      	ldr	r3, [pc, #200]	; (800192c <BMP280_ReadTemperatureAndPressure+0x3f4>)
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	b21a      	sxth	r2, r3
 800186a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800186e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001870:	fb03 f001 	mul.w	r0, r3, r1
 8001874:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001876:	fb02 f101 	mul.w	r1, r2, r1
 800187a:	1844      	adds	r4, r0, r1
 800187c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800187e:	fba1 0102 	umull	r0, r1, r1, r2
 8001882:	1863      	adds	r3, r4, r1
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	0cc2      	lsrs	r2, r0, #19
 8001890:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001894:	14cb      	asrs	r3, r1, #19
 8001896:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 800189a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800189e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018a2:	1884      	adds	r4, r0, r2
 80018a4:	62bc      	str	r4, [r7, #40]	; 0x28
 80018a6:	eb41 0303 	adc.w	r3, r1, r3
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018b0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018b4:	4621      	mov	r1, r4
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	6239      	str	r1, [r7, #32]
 80018ba:	4629      	mov	r1, r5
 80018bc:	eb43 0101 	adc.w	r1, r3, r1
 80018c0:	6279      	str	r1, [r7, #36]	; 0x24
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	f04f 0100 	mov.w	r1, #0
 80018ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018ce:	4623      	mov	r3, r4
 80018d0:	0a18      	lsrs	r0, r3, #8
 80018d2:	462b      	mov	r3, r5
 80018d4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018d8:	462b      	mov	r3, r5
 80018da:	1219      	asrs	r1, r3, #8
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <BMP280_ReadTemperatureAndPressure+0x3f8>)
 80018de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e2:	b21c      	sxth	r4, r3
 80018e4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	012b      	lsls	r3, r5, #4
 80018f2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018f6:	0122      	lsls	r2, r4, #4
 80018f8:	1884      	adds	r4, r0, r2
 80018fa:	603c      	str	r4, [r7, #0]
 80018fc:	eb41 0303 	adc.w	r3, r1, r3
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001906:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 800190a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800190c:	2b00      	cmp	r3, #0
 800190e:	da00      	bge.n	8001912 <BMP280_ReadTemperatureAndPressure+0x3da>
 8001910:	33ff      	adds	r3, #255	; 0xff
 8001912:	121b      	asrs	r3, r3, #8
 8001914:	461a      	mov	r2, r3
 8001916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001918:	601a      	str	r2, [r3, #0]

	  return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3770      	adds	r7, #112	; 0x70
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001926:	bf00      	nop
 8001928:	2000065a 	.word	0x2000065a
 800192c:	2000064a 	.word	0x2000064a
 8001930:	20000640 	.word	0x20000640

08001934 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	font = font_t;
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <GFX_SetFont+0x1c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000664 	.word	0x20000664

08001954 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <GFX_SetFontSize+0x16>
		size = size_t;
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <GFX_SetFontSize+0x24>)
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	7013      	strb	r3, [r2, #0]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000000 	.word	0x20000000

0800197c <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	460b      	mov	r3, r1
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	4613      	mov	r3, r2
 8001990:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b7e      	cmp	r3, #126	; 0x7e
 8001996:	f200 80a3 	bhi.w	8001ae0 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
 800199e:	e096      	b.n	8001ace <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80019a0:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <GFX_DrawChar+0x16c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	3b20      	subs	r3, #32
 80019a8:	494f      	ldr	r1, [pc, #316]	; (8001ae8 <GFX_DrawChar+0x16c>)
 80019aa:	6809      	ldr	r1, [r1, #0]
 80019ac:	3101      	adds	r1, #1
 80019ae:	7809      	ldrb	r1, [r1, #0]
 80019b0:	fb01 f103 	mul.w	r1, r1, r3
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	440b      	add	r3, r1
 80019b8:	3302      	adds	r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80019c0:	2300      	movs	r3, #0
 80019c2:	757b      	strb	r3, [r7, #21]
 80019c4:	e078      	b.n	8001ab8 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80019c6:	7dbb      	ldrb	r3, [r7, #22]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d032      	beq.n	8001a36 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 80019d0:	4b46      	ldr	r3, [pc, #280]	; (8001aec <GFX_DrawChar+0x170>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d113      	bne.n	8001a00 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b218      	sxth	r0, r3
 80019e6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	79ba      	ldrb	r2, [r7, #6]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f000 fa5d 	bl	8001eb8 <SSD1306_DrawPixel>
 80019fe:	e052      	b.n	8001aa6 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <GFX_DrawChar+0x170>)
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	fb02 f203 	mul.w	r2, r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	18d0      	adds	r0, r2, r3
 8001a0e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a12:	4a36      	ldr	r2, [pc, #216]	; (8001aec <GFX_DrawChar+0x170>)
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	fb02 f203 	mul.w	r2, r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	18d1      	adds	r1, r2, r3
 8001a1e:	4b33      	ldr	r3, [pc, #204]	; (8001aec <GFX_DrawChar+0x170>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <GFX_DrawChar+0x170>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b29c      	uxth	r4, r3
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	4623      	mov	r3, r4
 8001a30:	f000 f9ea 	bl	8001e08 <GFX_DrawFillRectangle>
 8001a34:	e037      	b.n	8001aa6 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001a36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d133      	bne.n	8001aa6 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <GFX_DrawChar+0x170>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d114      	bne.n	8001a70 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b218      	sxth	r0, r3
 8001a54:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f000 fa25 	bl	8001eb8 <SSD1306_DrawPixel>
 8001a6e:	e01a      	b.n	8001aa6 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <GFX_DrawChar+0x170>)
 8001a74:	7812      	ldrb	r2, [r2, #0]
 8001a76:	fb02 f203 	mul.w	r2, r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	18d0      	adds	r0, r2, r3
 8001a7e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a82:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <GFX_DrawChar+0x170>)
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	fb02 f203 	mul.w	r2, r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	18d1      	adds	r1, r2, r3
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <GFX_DrawChar+0x170>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <GFX_DrawChar+0x170>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b29c      	uxth	r4, r3
 8001a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	f000 f9b1 	bl	8001e08 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001aa6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	757b      	strb	r3, [r7, #21]
 8001ab2:	7dbb      	ldrb	r3, [r7, #22]
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	75bb      	strb	r3, [r7, #22]
 8001ab8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <GFX_DrawChar+0x16c>)
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	f6ff af7f 	blt.w	80019c6 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	3301      	adds	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <GFX_DrawChar+0x16c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	7dfa      	ldrb	r2, [r7, #23]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f4ff af61 	bcc.w	80019a0 <GFX_DrawChar+0x24>
 8001ade:	e000      	b.n	8001ae2 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001ae0:	bf00      	nop
            }
        }
    }
}
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}
 8001ae8:	20000664 	.word	0x20000664
 8001aec:	20000000 	.word	0x20000000

08001af0 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001b08:	e03e      	b.n	8001b88 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001b0a:	78f9      	ldrb	r1, [r7, #3]
 8001b0c:	7cfa      	ldrb	r2, [r7, #19]
 8001b0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	460b      	mov	r3, r1
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f7ff ff2f 	bl	800197c <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <GFX_DrawString+0xb0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <GFX_DrawString+0xb4>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	fb03 f302 	mul.w	r3, r3, r2
 8001b30:	3301      	adds	r3, #1
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4413      	add	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001b38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d120      	bne.n	8001b82 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	74bb      	strb	r3, [r7, #18]
 8001b44:	e012      	b.n	8001b6c <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	b218      	sxth	r0, r3
 8001b50:	7cbb      	ldrb	r3, [r7, #18]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	f000 f9a9 	bl	8001eb8 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001b66:	7cbb      	ldrb	r3, [r7, #18]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	74bb      	strb	r3, [r7, #18]
 8001b6c:	7cba      	ldrb	r2, [r7, #18]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <GFX_DrawString+0xb0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <GFX_DrawString+0xb4>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	fb03 f301 	mul.w	r3, r3, r1
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbe1      	blt.n	8001b46 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ba      	bne.n	8001b0a <GFX_DrawString+0x1a>
	}
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000664 	.word	0x20000664
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bc0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1acb      	subs	r3, r1, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bfb8      	it	lt
 8001bce:	425b      	neglt	r3, r3
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	bfcc      	ite	gt
 8001bd4:	2301      	movgt	r3, #1
 8001bd6:	2300      	movle	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001bdc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00b      	beq.n	8001bfc <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	623b      	str	r3, [r7, #32]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dd0b      	ble.n	8001c1c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bfb8      	it	lt
 8001c34:	425b      	neglt	r3, r3
 8001c36:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001c38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	da00      	bge.n	8001c42 <GFX_WriteLine+0x9a>
 8001c40:	3301      	adds	r3, #1
 8001c42:	105b      	asrs	r3, r3, #1
 8001c44:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da02      	bge.n	8001c54 <GFX_WriteLine+0xac>
	        ystep = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001c52:	e030      	b.n	8001cb6 <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 8001c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c58:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001c5a:	e02c      	b.n	8001cb6 <GFX_WriteLine+0x10e>
	        if (steep) {
 8001c5c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	b211      	sxth	r1, r2
 8001c6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f921 	bl	8001eb8 <SSD1306_DrawPixel>
 8001c76:	e008      	b.n	8001c8a <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	b211      	sxth	r1, r2
 8001c80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f917 	bl	8001eb8 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8001c8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001c8c:	8abb      	ldrh	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001c94:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da09      	bge.n	8001cb0 <GFX_WriteLine+0x108>
	            y_start += ystep;
 8001c9c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001ca6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001ca8:	8afb      	ldrh	r3, [r7, #22]
 8001caa:	4413      	add	r3, r2
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	ddce      	ble.n	8001c5c <GFX_WriteLine+0xb4>
	        }
	    }
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	3730      	adds	r7, #48	; 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff ff5d 	bl	8001ba8 <GFX_WriteLine>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff ff47 	bl	8001ba8 <GFX_WriteLine>
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b088      	sub	sp, #32
 8001d26:	af02      	add	r7, sp, #8
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d114      	bne.n	8001d62 <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dd05      	ble.n	8001d4c <GFX_DrawLine+0x2a>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff ffb4 	bl	8001cc8 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001d60:	e021      	b.n	8001da6 <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d114      	bne.n	8001d94 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	dd05      	ble.n	8001d7e <GFX_DrawLine+0x5c>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff ffb2 	bl	8001cf6 <GFX_DrawFastHLine>
}
 8001d92:	e008      	b.n	8001da6 <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 8001d94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f7ff ff01 	bl	8001ba8 <GFX_WriteLine>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <GFX_DrawRectangle>:
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	4611      	mov	r1, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	80fb      	strh	r3, [r7, #6]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8001dc4:	88fa      	ldrh	r2, [r7, #6]
 8001dc6:	7e3b      	ldrb	r3, [r7, #24]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff ff93 	bl	8001cf6 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8001dd0:	88ba      	ldrh	r2, [r7, #4]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	1e59      	subs	r1, r3, #1
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	7e3b      	ldrb	r3, [r7, #24]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff ff8a 	bl	8001cf6 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8001de2:	88ba      	ldrh	r2, [r7, #4]
 8001de4:	7e3b      	ldrb	r3, [r7, #24]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff ff6d 	bl	8001cc8 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	1e58      	subs	r0, r3, #1
 8001df6:	88ba      	ldrh	r2, [r7, #4]
 8001df8:	7e3b      	ldrb	r3, [r7, #24]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	f7ff ff64 	bl	8001cc8 <GFX_DrawFastVLine>

}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	460b      	mov	r3, r1
 8001e18:	80fb      	strh	r3, [r7, #6]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e009      	b.n	8001e38 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001e24:	88ba      	ldrh	r2, [r7, #4]
 8001e26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6978      	ldr	r0, [r7, #20]
 8001e2e:	f7ff ff4b 	bl	8001cc8 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	88fa      	ldrh	r2, [r7, #6]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dbef      	blt.n	8001e24 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <SSD1306_Command+0x30>)
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	2301      	movs	r3, #1
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	1dfb      	adds	r3, r7, #7
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2178      	movs	r1, #120	; 0x78
 8001e72:	f001 fe3b 	bl	8003aec <HAL_I2C_Mem_Write>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000668 	.word	0x20000668

08001e84 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af04      	add	r7, sp, #16
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <SSD1306_Data+0x30>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	2240      	movs	r2, #64	; 0x40
 8001ea6:	2178      	movs	r1, #120	; 0x78
 8001ea8:	f001 fe20 	bl	8003aec <HAL_I2C_Mem_Write>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000668 	.word	0x20000668

08001eb8 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	80bb      	strh	r3, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	db79      	blt.n	8001fc6 <SSD1306_DrawPixel+0x10e>
 8001ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ed8:	dc75      	bgt.n	8001fc6 <SSD1306_DrawPixel+0x10e>
 8001eda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db71      	blt.n	8001fc6 <SSD1306_DrawPixel+0x10e>
 8001ee2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ee6:	2b3f      	cmp	r3, #63	; 0x3f
 8001ee8:	dc6d      	bgt.n	8001fc6 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d049      	beq.n	8001f84 <SSD1306_DrawPixel+0xcc>
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	dc69      	bgt.n	8001fc8 <SSD1306_DrawPixel+0x110>
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d022      	beq.n	8001f3e <SSD1306_DrawPixel+0x86>
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d165      	bne.n	8001fc8 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001efc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	da00      	bge.n	8001f0a <SSD1306_DrawPixel+0x52>
 8001f08:	3307      	adds	r3, #7
 8001f0a:	10db      	asrs	r3, r3, #3
 8001f0c:	b218      	sxth	r0, r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	01db      	lsls	r3, r3, #7
 8001f12:	4413      	add	r3, r2
 8001f14:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <SSD1306_DrawPixel+0x11c>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	b25a      	sxtb	r2, r3
 8001f1a:	88bb      	ldrh	r3, [r7, #4]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b259      	sxtb	r1, r3
 8001f2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f30:	4603      	mov	r3, r0
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	4413      	add	r3, r2
 8001f36:	b2c9      	uxtb	r1, r1
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <SSD1306_DrawPixel+0x11c>)
 8001f3a:	54d1      	strb	r1, [r2, r3]
      break;
 8001f3c:	e044      	b.n	8001fc8 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001f3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da00      	bge.n	8001f4c <SSD1306_DrawPixel+0x94>
 8001f4a:	3307      	adds	r3, #7
 8001f4c:	10db      	asrs	r3, r3, #3
 8001f4e:	b218      	sxth	r0, r3
 8001f50:	4603      	mov	r3, r0
 8001f52:	01db      	lsls	r3, r3, #7
 8001f54:	4413      	add	r3, r2
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <SSD1306_DrawPixel+0x11c>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	b25a      	sxtb	r2, r3
 8001f5c:	88bb      	ldrh	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	4013      	ands	r3, r2
 8001f70:	b259      	sxtb	r1, r3
 8001f72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f76:	4603      	mov	r3, r0
 8001f78:	01db      	lsls	r3, r3, #7
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b2c9      	uxtb	r1, r1
 8001f7e:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <SSD1306_DrawPixel+0x11c>)
 8001f80:	54d1      	strb	r1, [r2, r3]
      break;
 8001f82:	e021      	b.n	8001fc8 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8001f84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da00      	bge.n	8001f92 <SSD1306_DrawPixel+0xda>
 8001f90:	3307      	adds	r3, #7
 8001f92:	10db      	asrs	r3, r3, #3
 8001f94:	b218      	sxth	r0, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	01db      	lsls	r3, r3, #7
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <SSD1306_DrawPixel+0x11c>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	b25a      	sxtb	r2, r3
 8001fa2:	88bb      	ldrh	r3, [r7, #4]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	4053      	eors	r3, r2
 8001fb2:	b259      	sxtb	r1, r3
 8001fb4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fb8:	4603      	mov	r3, r0
 8001fba:	01db      	lsls	r3, r3, #7
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b2c9      	uxtb	r1, r1
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <SSD1306_DrawPixel+0x11c>)
 8001fc2:	54d1      	strb	r1, [r2, r3]
      break;
 8001fc4:	e000      	b.n	8001fc8 <SSD1306_DrawPixel+0x110>
	  return;
 8001fc6:	bf00      	nop
    }
}
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000224 	.word	0x20000224

08001fd8 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <SSD1306_Clear+0x22>
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10d      	bne.n	8002008 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff0:	21ff      	movs	r1, #255	; 0xff
 8001ff2:	4807      	ldr	r0, [pc, #28]	; (8002010 <SSD1306_Clear+0x38>)
 8001ff4:	f006 ff64 	bl	8008ec0 <memset>
		break;
 8001ff8:	e006      	b.n	8002008 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8001ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffe:	2100      	movs	r1, #0
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <SSD1306_Clear+0x38>)
 8002002:	f006 ff5d 	bl	8008ec0 <memset>
		break;
 8002006:	bf00      	nop
	}
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000224 	.word	0x20000224

08002014 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8002018:	2022      	movs	r0, #34	; 0x22
 800201a:	f7ff ff19 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 800201e:	2000      	movs	r0, #0
 8002020:	f7ff ff16 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8002024:	20ff      	movs	r0, #255	; 0xff
 8002026:	f7ff ff13 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800202a:	2021      	movs	r0, #33	; 0x21
 800202c:	f7ff ff10 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff ff0d 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8002036:	207f      	movs	r0, #127	; 0x7f
 8002038:	f7ff ff0a 	bl	8001e50 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 800203c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <SSD1306_Display+0x38>)
 8002042:	f7ff ff1f 	bl	8001e84 <SSD1306_Data>
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000224 	.word	0x20000224

08002050 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8002058:	4a28      	ldr	r2, [pc, #160]	; (80020fc <SSD1306_Init+0xac>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 800205e:	20ae      	movs	r0, #174	; 0xae
 8002060:	f7ff fef6 	bl	8001e50 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8002064:	20d5      	movs	r0, #213	; 0xd5
 8002066:	f7ff fef3 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0x80);
 800206a:	2080      	movs	r0, #128	; 0x80
 800206c:	f7ff fef0 	bl	8001e50 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8002070:	203f      	movs	r0, #63	; 0x3f
 8002072:	f7ff feed 	bl	8001e50 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8002076:	20d3      	movs	r0, #211	; 0xd3
 8002078:	f7ff feea 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0x00);
 800207c:	2000      	movs	r0, #0
 800207e:	f7ff fee7 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8002082:	2040      	movs	r0, #64	; 0x40
 8002084:	f7ff fee4 	bl	8001e50 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8002088:	208d      	movs	r0, #141	; 0x8d
 800208a:	f7ff fee1 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0x14);
 800208e:	2014      	movs	r0, #20
 8002090:	f7ff fede 	bl	8001e50 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8002094:	2020      	movs	r0, #32
 8002096:	f7ff fedb 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff fed8 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80020a0:	20a1      	movs	r0, #161	; 0xa1
 80020a2:	f7ff fed5 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80020a6:	20c8      	movs	r0, #200	; 0xc8
 80020a8:	f7ff fed2 	bl	8001e50 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80020ac:	20da      	movs	r0, #218	; 0xda
 80020ae:	f7ff fecf 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0x12);
 80020b2:	2012      	movs	r0, #18
 80020b4:	f7ff fecc 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80020b8:	2081      	movs	r0, #129	; 0x81
 80020ba:	f7ff fec9 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80020be:	20ff      	movs	r0, #255	; 0xff
 80020c0:	f7ff fec6 	bl	8001e50 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80020c4:	20d9      	movs	r0, #217	; 0xd9
 80020c6:	f7ff fec3 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80020ca:	20f1      	movs	r0, #241	; 0xf1
 80020cc:	f7ff fec0 	bl	8001e50 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80020d0:	20db      	movs	r0, #219	; 0xdb
 80020d2:	f7ff febd 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(0x40);
 80020d6:	2040      	movs	r0, #64	; 0x40
 80020d8:	f7ff feba 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80020dc:	20a4      	movs	r0, #164	; 0xa4
 80020de:	f7ff feb7 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80020e2:	20a6      	movs	r0, #166	; 0xa6
 80020e4:	f7ff feb4 	bl	8001e50 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80020e8:	202e      	movs	r0, #46	; 0x2e
 80020ea:	f7ff feb1 	bl	8001e50 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80020ee:	20af      	movs	r0, #175	; 0xaf
 80020f0:	f7ff feae 	bl	8001e50 <SSD1306_Command>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000668 	.word	0x20000668

08002100 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	4b51      	ldr	r3, [pc, #324]	; (800225c <MX_GPIO_Init+0x15c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a50      	ldr	r2, [pc, #320]	; (800225c <MX_GPIO_Init+0x15c>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b4e      	ldr	r3, [pc, #312]	; (800225c <MX_GPIO_Init+0x15c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212e:	4b4b      	ldr	r3, [pc, #300]	; (800225c <MX_GPIO_Init+0x15c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a4a      	ldr	r2, [pc, #296]	; (800225c <MX_GPIO_Init+0x15c>)
 8002134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b48      	ldr	r3, [pc, #288]	; (800225c <MX_GPIO_Init+0x15c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b45      	ldr	r3, [pc, #276]	; (800225c <MX_GPIO_Init+0x15c>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a44      	ldr	r2, [pc, #272]	; (800225c <MX_GPIO_Init+0x15c>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b42      	ldr	r3, [pc, #264]	; (800225c <MX_GPIO_Init+0x15c>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	4b3f      	ldr	r3, [pc, #252]	; (800225c <MX_GPIO_Init+0x15c>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a3e      	ldr	r2, [pc, #248]	; (800225c <MX_GPIO_Init+0x15c>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b3c      	ldr	r3, [pc, #240]	; (800225c <MX_GPIO_Init+0x15c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <MX_GPIO_Init+0x15c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a38      	ldr	r2, [pc, #224]	; (800225c <MX_GPIO_Init+0x15c>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b36      	ldr	r3, [pc, #216]	; (800225c <MX_GPIO_Init+0x15c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <MX_GPIO_Init+0x15c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a32      	ldr	r2, [pc, #200]	; (800225c <MX_GPIO_Init+0x15c>)
 8002194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <MX_GPIO_Init+0x15c>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80021ac:	482c      	ldr	r0, [pc, #176]	; (8002260 <MX_GPIO_Init+0x160>)
 80021ae:	f001 fbd9 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2140      	movs	r1, #64	; 0x40
 80021b6:	482b      	ldr	r0, [pc, #172]	; (8002264 <MX_GPIO_Init+0x164>)
 80021b8:	f001 fbd4 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80021bc:	2201      	movs	r2, #1
 80021be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c2:	4827      	ldr	r0, [pc, #156]	; (8002260 <MX_GPIO_Init+0x160>)
 80021c4:	f001 fbce 	bl	8003964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80021c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	4822      	ldr	r0, [pc, #136]	; (8002268 <MX_GPIO_Init+0x168>)
 80021e0:	f001 fa14 	bl	800360c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80021e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80021e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	4818      	ldr	r0, [pc, #96]	; (8002260 <MX_GPIO_Init+0x160>)
 80021fe:	f001 fa05 	bl	800360c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002202:	2340      	movs	r3, #64	; 0x40
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	4812      	ldr	r0, [pc, #72]	; (8002264 <MX_GPIO_Init+0x164>)
 800221a:	f001 f9f7 	bl	800360c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	480c      	ldr	r0, [pc, #48]	; (8002264 <MX_GPIO_Init+0x164>)
 8002232:	f001 f9eb 	bl	800360c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002244:	2301      	movs	r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4804      	ldr	r0, [pc, #16]	; (8002260 <MX_GPIO_Init+0x160>)
 8002250:	f001 f9dc 	bl	800360c <HAL_GPIO_Init>

}
 8002254:	bf00      	nop
 8002256:	3730      	adds	r7, #48	; 0x30
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	40020400 	.word	0x40020400
 8002264:	40021800 	.word	0x40021800
 8002268:	40020800 	.word	0x40020800

0800226c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <MX_I2C1_Init+0x74>)
 8002272:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <MX_I2C1_Init+0x78>)
 8002274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_I2C1_Init+0x74>)
 8002278:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <MX_I2C1_Init+0x7c>)
 800227a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_I2C1_Init+0x74>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <MX_I2C1_Init+0x74>)
 8002284:	2201      	movs	r2, #1
 8002286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <MX_I2C1_Init+0x74>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_I2C1_Init+0x74>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <MX_I2C1_Init+0x74>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_I2C1_Init+0x74>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_I2C1_Init+0x74>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022a6:	480e      	ldr	r0, [pc, #56]	; (80022e0 <MX_I2C1_Init+0x74>)
 80022a8:	f001 fb90 	bl	80039cc <HAL_I2C_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022b2:	f000 fb23 	bl	80028fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022b6:	2100      	movs	r1, #0
 80022b8:	4809      	ldr	r0, [pc, #36]	; (80022e0 <MX_I2C1_Init+0x74>)
 80022ba:	f001 ff7d 	bl	80041b8 <HAL_I2CEx_ConfigAnalogFilter>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80022c4:	f000 fb1a 	bl	80028fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022c8:	2100      	movs	r1, #0
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_I2C1_Init+0x74>)
 80022cc:	f001 ffbf 	bl	800424e <HAL_I2CEx_ConfigDigitalFilter>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80022d6:	f000 fb11 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000066c 	.word	0x2000066c
 80022e4:	40005400 	.word	0x40005400
 80022e8:	00301739 	.word	0x00301739

080022ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b0aa      	sub	sp, #168	; 0xa8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	2284      	movs	r2, #132	; 0x84
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f006 fdd7 	bl	8008ec0 <memset>
  if(i2cHandle->Instance==I2C1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <HAL_I2C_MspInit+0xb4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d13c      	bne.n	8002396 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800231c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002320:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002322:	2300      	movs	r3, #0
 8002324:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4618      	mov	r0, r3
 800232c:	f002 fdda 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002336:	f000 fae1 	bl	80028fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_I2C_MspInit+0xb8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_I2C_MspInit+0xb8>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_I2C_MspInit+0xb8>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002352:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800235a:	2312      	movs	r3, #18
 800235c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800236c:	2304      	movs	r3, #4
 800236e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002376:	4619      	mov	r1, r3
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <HAL_I2C_MspInit+0xbc>)
 800237a:	f001 f947 	bl	800360c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_I2C_MspInit+0xb8>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_I2C_MspInit+0xb8>)
 8002384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_I2C_MspInit+0xb8>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002396:	bf00      	nop
 8002398:	37a8      	adds	r7, #168	; 0xa8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40005400 	.word	0x40005400
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020400 	.word	0x40020400

080023ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80023ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b0:	b092      	sub	sp, #72	; 0x48
 80023b2:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80023b4:	f000 ff05 	bl	80031c2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80023b8:	f000 f996 	bl	80026e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80023bc:	f7ff fea0 	bl	8002100 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80023c0:	f000 fd96 	bl	8002ef0 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80023c4:	f000 fe2c 	bl	8003020 <MX_USB_OTG_FS_PCD_Init>
	MX_I2C1_Init();
 80023c8:	f7ff ff50 	bl	800226c <MX_I2C1_Init>
	MX_TIM2_Init();
 80023cc:	f000 fc58 	bl	8002c80 <MX_TIM2_Init>
	MX_TIM3_Init();
 80023d0:	f000 fca6 	bl	8002d20 <MX_TIM3_Init>
	MX_SPI1_Init();
 80023d4:	f000 fa98 	bl	8002908 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//
	//Włączenie TIM
	//
	HAL_TIM_Base_Start_IT(&htim2); //Podstawowy do dt = 1s
 80023d8:	48a6      	ldr	r0, [pc, #664]	; (8002674 <main+0x2c8>)
 80023da:	f003 fe11 	bl	8006000 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //Sterowanie transytorem 1kHz
 80023de:	2108      	movs	r1, #8
 80023e0:	48a5      	ldr	r0, [pc, #660]	; (8002678 <main+0x2cc>)
 80023e2:	f003 fee7 	bl	80061b4 <HAL_TIM_PWM_Start>

	//
	//Ustawienie czujnika Temperatury
	//
	BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80023e6:	2301      	movs	r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	2101      	movs	r1, #1
 80023ec:	48a3      	ldr	r0, [pc, #652]	; (800267c <main+0x2d0>)
 80023ee:	f7fe ff49 	bl	8001284 <BMP280_Init>

	//
	// Ustawienie Wyświetlacza OLED
	//
	SSD1306_Init(&hi2c1);
 80023f2:	48a3      	ldr	r0, [pc, #652]	; (8002680 <main+0x2d4>)
 80023f4:	f7ff fe2c 	bl	8002050 <SSD1306_Init>
	GFX_SetFont(font_8x5);
 80023f8:	48a2      	ldr	r0, [pc, #648]	; (8002684 <main+0x2d8>)
 80023fa:	f7ff fa9b 	bl	8001934 <GFX_SetFont>
	GFX_SetFontSize(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff faa8 	bl	8001954 <GFX_SetFontSize>
	SSD1306_Clear(BLACK);
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff fde7 	bl	8001fd8 <SSD1306_Clear>
	SSD1306_Display();
 800240a:	f7ff fe03 	bl	8002014 <SSD1306_Display>
	//
	//Pobranie danych z czujnika - wartości początkowe
	//
	BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 800240e:	499e      	ldr	r1, [pc, #632]	; (8002688 <main+0x2dc>)
 8002410:	489e      	ldr	r0, [pc, #632]	; (800268c <main+0x2e0>)
 8002412:	f7ff f891 	bl	8001538 <BMP280_ReadTemperatureAndPressure>
	//
	//Otworzenie portu do nasłuchu na przychodzące komendy
	//
	HAL_UART_Receive_IT(&huart3, Buffor_Rx, 8);
 8002416:	2208      	movs	r2, #8
 8002418:	499d      	ldr	r1, [pc, #628]	; (8002690 <main+0x2e4>)
 800241a:	489e      	ldr	r0, [pc, #632]	; (8002694 <main+0x2e8>)
 800241c:	f005 f835 	bl	800748a <HAL_UART_Receive_IT>
	while (1)
	{
		//
		//Wyświetlanie danych na wyświetlaczu OLED
		//
		if((HAL_GetTick() - SoftTimerOled) > 100){
 8002420:	f000 ff20 	bl	8003264 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	4b9c      	ldr	r3, [pc, #624]	; (8002698 <main+0x2ec>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b64      	cmp	r3, #100	; 0x64
 800242e:	f240 80c5 	bls.w	80025bc <main+0x210>
			SoftTimerOled = HAL_GetTick();
 8002432:	f000 ff17 	bl	8003264 <HAL_GetTick>
 8002436:	4603      	mov	r3, r0
 8002438:	4a97      	ldr	r2, [pc, #604]	; (8002698 <main+0x2ec>)
 800243a:	6013      	str	r3, [r2, #0]
			SSD1306_Clear(BLACK);
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff fdcb 	bl	8001fd8 <SSD1306_Clear>
			sprintf(Message, "Regulacja Temperatury");
 8002442:	4996      	ldr	r1, [pc, #600]	; (800269c <main+0x2f0>)
 8002444:	4896      	ldr	r0, [pc, #600]	; (80026a0 <main+0x2f4>)
 8002446:	f007 f9ad 	bl	80097a4 <siprintf>
			GFX_DrawString(0, 0, Message, WHITE, 0);
 800244a:	2300      	movs	r3, #0
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2301      	movs	r3, #1
 8002450:	4a93      	ldr	r2, [pc, #588]	; (80026a0 <main+0x2f4>)
 8002452:	2100      	movs	r1, #0
 8002454:	2000      	movs	r0, #0
 8002456:	f7ff fb4b 	bl	8001af0 <GFX_DrawString>
			GFX_DrawLine(0, 9, 128, 9, WHITE);
 800245a:	2301      	movs	r3, #1
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2309      	movs	r3, #9
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	2109      	movs	r1, #9
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fc5c 	bl	8001d22 <GFX_DrawLine>
			sprintf(Message, "Aktualna temp: %.2fC", temperature);
 800246a:	4b88      	ldr	r3, [pc, #544]	; (800268c <main+0x2e0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f88a 	bl	8000588 <__aeabi_f2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	498a      	ldr	r1, [pc, #552]	; (80026a4 <main+0x2f8>)
 800247a:	4889      	ldr	r0, [pc, #548]	; (80026a0 <main+0x2f4>)
 800247c:	f007 f992 	bl	80097a4 <siprintf>
			GFX_DrawString(0, 12, Message, WHITE, 0);
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2301      	movs	r3, #1
 8002486:	4a86      	ldr	r2, [pc, #536]	; (80026a0 <main+0x2f4>)
 8002488:	210c      	movs	r1, #12
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff fb30 	bl	8001af0 <GFX_DrawString>
			sprintf(Message, "Zadana temp: %.1f C", temperature_set);
 8002490:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <main+0x2fc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f877 	bl	8000588 <__aeabi_f2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4983      	ldr	r1, [pc, #524]	; (80026ac <main+0x300>)
 80024a0:	487f      	ldr	r0, [pc, #508]	; (80026a0 <main+0x2f4>)
 80024a2:	f007 f97f 	bl	80097a4 <siprintf>
			GFX_DrawString(0, 22, Message, WHITE, 0);
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2301      	movs	r3, #1
 80024ac:	4a7c      	ldr	r2, [pc, #496]	; (80026a0 <main+0x2f4>)
 80024ae:	2116      	movs	r1, #22
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7ff fb1d 	bl	8001af0 <GFX_DrawString>
			sprintf(Message, "Cisnienie: %.1f HPa", ((float)pressure/100.0));
 80024b6:	4b74      	ldr	r3, [pc, #464]	; (8002688 <main+0x2dc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c2:	ee17 0a90 	vmov	r0, s15
 80024c6:	f7fe f85f 	bl	8000588 <__aeabi_f2d>
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	4b78      	ldr	r3, [pc, #480]	; (80026b0 <main+0x304>)
 80024d0:	f7fe f9dc 	bl	800088c <__aeabi_ddiv>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4976      	ldr	r1, [pc, #472]	; (80026b4 <main+0x308>)
 80024da:	4871      	ldr	r0, [pc, #452]	; (80026a0 <main+0x2f4>)
 80024dc:	f007 f962 	bl	80097a4 <siprintf>
			GFX_DrawString(0, 32, Message, WHITE, 0);
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2301      	movs	r3, #1
 80024e6:	4a6e      	ldr	r2, [pc, #440]	; (80026a0 <main+0x2f4>)
 80024e8:	2120      	movs	r1, #32
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff fb00 	bl	8001af0 <GFX_DrawString>
			switch (status){
 80024f0:	4b71      	ldr	r3, [pc, #452]	; (80026b8 <main+0x30c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d83e      	bhi.n	8002578 <main+0x1cc>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <main+0x154>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	08002511 	.word	0x08002511
 8002504:	0800252b 	.word	0x0800252b
 8002508:	08002545 	.word	0x08002545
 800250c:	0800255f 	.word	0x0800255f
			case 1:
				sprintf(Message, "Status: Grzanie");
 8002510:	496a      	ldr	r1, [pc, #424]	; (80026bc <main+0x310>)
 8002512:	4863      	ldr	r0, [pc, #396]	; (80026a0 <main+0x2f4>)
 8002514:	f007 f946 	bl	80097a4 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2301      	movs	r3, #1
 800251e:	4a60      	ldr	r2, [pc, #384]	; (80026a0 <main+0x2f4>)
 8002520:	212a      	movs	r1, #42	; 0x2a
 8002522:	2000      	movs	r0, #0
 8002524:	f7ff fae4 	bl	8001af0 <GFX_DrawString>
				break;
 8002528:	e026      	b.n	8002578 <main+0x1cc>
			case 2:
				sprintf(Message, "Status: Chlodzenie");
 800252a:	4965      	ldr	r1, [pc, #404]	; (80026c0 <main+0x314>)
 800252c:	485c      	ldr	r0, [pc, #368]	; (80026a0 <main+0x2f4>)
 800252e:	f007 f939 	bl	80097a4 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 8002532:	2300      	movs	r3, #0
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2301      	movs	r3, #1
 8002538:	4a59      	ldr	r2, [pc, #356]	; (80026a0 <main+0x2f4>)
 800253a:	212a      	movs	r1, #42	; 0x2a
 800253c:	2000      	movs	r0, #0
 800253e:	f7ff fad7 	bl	8001af0 <GFX_DrawString>
				break;
 8002542:	e019      	b.n	8002578 <main+0x1cc>
			case 3:
				sprintf(Message, "Status: ERROR!!!");
 8002544:	495f      	ldr	r1, [pc, #380]	; (80026c4 <main+0x318>)
 8002546:	4856      	ldr	r0, [pc, #344]	; (80026a0 <main+0x2f4>)
 8002548:	f007 f92c 	bl	80097a4 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 800254c:	2300      	movs	r3, #0
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2301      	movs	r3, #1
 8002552:	4a53      	ldr	r2, [pc, #332]	; (80026a0 <main+0x2f4>)
 8002554:	212a      	movs	r1, #42	; 0x2a
 8002556:	2000      	movs	r0, #0
 8002558:	f7ff faca 	bl	8001af0 <GFX_DrawString>
				break;
 800255c:	e00c      	b.n	8002578 <main+0x1cc>
			case 4:
				sprintf(Message, "Status: STOP");
 800255e:	495a      	ldr	r1, [pc, #360]	; (80026c8 <main+0x31c>)
 8002560:	484f      	ldr	r0, [pc, #316]	; (80026a0 <main+0x2f4>)
 8002562:	f007 f91f 	bl	80097a4 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 8002566:	2300      	movs	r3, #0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2301      	movs	r3, #1
 800256c:	4a4c      	ldr	r2, [pc, #304]	; (80026a0 <main+0x2f4>)
 800256e:	212a      	movs	r1, #42	; 0x2a
 8002570:	2000      	movs	r0, #0
 8002572:	f7ff fabd 	bl	8001af0 <GFX_DrawString>
				break;
 8002576:	bf00      	nop
			}
			GFX_DrawLine(127, 53, 127, 64, WHITE);
 8002578:	2301      	movs	r3, #1
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2340      	movs	r3, #64	; 0x40
 800257e:	227f      	movs	r2, #127	; 0x7f
 8002580:	2135      	movs	r1, #53	; 0x35
 8002582:	207f      	movs	r0, #127	; 0x7f
 8002584:	f7ff fbcd 	bl	8001d22 <GFX_DrawLine>
			GFX_DrawRectangle(0, 53, (uint16_t)(128*temperature/temperature_set), 11, WHITE);
 8002588:	4b40      	ldr	r3, [pc, #256]	; (800268c <main+0x2e0>)
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80026cc <main+0x320>
 8002592:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002596:	4b44      	ldr	r3, [pc, #272]	; (80026a8 <main+0x2fc>)
 8002598:	ed93 7a00 	vldr	s14, [r3]
 800259c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a4:	ee17 3a90 	vmov	r3, s15
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	2301      	movs	r3, #1
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	230b      	movs	r3, #11
 80025b0:	2135      	movs	r1, #53	; 0x35
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7ff fbfb 	bl	8001dae <GFX_DrawRectangle>
			SSD1306_Display();
 80025b8:	f7ff fd2c 	bl	8002014 <SSD1306_Display>
		}
		if(zezwolenie){
 80025bc:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <main+0x324>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f43f af2d 	beq.w	8002420 <main+0x74>
			length = sprintf((char*)Buffor, "{\"Temp\":%.2f,\"t\":%.1f,\"Temp_set\":%.2f,\"Kp\":%.4f,\"Ki\":%.4f,\"Kd\":%.4f,\"u\":%.2f}\r\n",temperature,pid.dt,temperature_set,pid.Kp,pid.Ki,pid.Kd,u);
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <main+0x2e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffdc 	bl	8000588 <__aeabi_f2d>
 80025d0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80025d4:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <main+0x328>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffd5 	bl	8000588 <__aeabi_f2d>
 80025de:	4680      	mov	r8, r0
 80025e0:	4689      	mov	r9, r1
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <main+0x2fc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffce 	bl	8000588 <__aeabi_f2d>
 80025ec:	4682      	mov	sl, r0
 80025ee:	468b      	mov	fp, r1
 80025f0:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <main+0x328>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffc7 	bl	8000588 <__aeabi_f2d>
 80025fa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80025fe:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <main+0x328>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ffc0 	bl	8000588 <__aeabi_f2d>
 8002608:	e9c7 0100 	strd	r0, r1, [r7]
 800260c:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <main+0x328>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd ffb9 	bl	8000588 <__aeabi_f2d>
 8002616:	4604      	mov	r4, r0
 8002618:	460d      	mov	r5, r1
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <main+0x32c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ffb2 	bl	8000588 <__aeabi_f2d>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800262c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002630:	ed97 7b00 	vldr	d7, [r7]
 8002634:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002638:	ed97 7b02 	vldr	d7, [r7, #8]
 800263c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002640:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002644:	e9cd 8900 	strd	r8, r9, [sp]
 8002648:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800264c:	4923      	ldr	r1, [pc, #140]	; (80026dc <main+0x330>)
 800264e:	4824      	ldr	r0, [pc, #144]	; (80026e0 <main+0x334>)
 8002650:	f007 f8a8 	bl	80097a4 <siprintf>
 8002654:	4603      	mov	r3, r0
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <main+0x338>)
 800265a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, Buffor, length, 1000);
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <main+0x338>)
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002664:	491e      	ldr	r1, [pc, #120]	; (80026e0 <main+0x334>)
 8002666:	480b      	ldr	r0, [pc, #44]	; (8002694 <main+0x2e8>)
 8002668:	f004 fe7c 	bl	8007364 <HAL_UART_Transmit>
			zezwolenie = 0;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <main+0x324>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick() - SoftTimerOled) > 100){
 8002672:	e6d5      	b.n	8002420 <main+0x74>
 8002674:	20000820 	.word	0x20000820
 8002678:	200007d4 	.word	0x200007d4
 800267c:	20000770 	.word	0x20000770
 8002680:	2000066c 	.word	0x2000066c
 8002684:	0800d2f8 	.word	0x0800d2f8
 8002688:	20000624 	.word	0x20000624
 800268c:	20000628 	.word	0x20000628
 8002690:	200006bc 	.word	0x200006bc
 8002694:	2000086c 	.word	0x2000086c
 8002698:	200006e8 	.word	0x200006e8
 800269c:	0800d208 	.word	0x0800d208
 80026a0:	200006c4 	.word	0x200006c4
 80026a4:	0800d220 	.word	0x0800d220
 80026a8:	20000004 	.word	0x20000004
 80026ac:	0800d238 	.word	0x0800d238
 80026b0:	40590000 	.word	0x40590000
 80026b4:	0800d24c 	.word	0x0800d24c
 80026b8:	20000008 	.word	0x20000008
 80026bc:	0800d260 	.word	0x0800d260
 80026c0:	0800d270 	.word	0x0800d270
 80026c4:	0800d284 	.word	0x0800d284
 80026c8:	0800d298 	.word	0x0800d298
 80026cc:	43000000 	.word	0x43000000
 80026d0:	2000062c 	.word	0x2000062c
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	2000076c 	.word	0x2000076c
 80026dc:	0800d2a8 	.word	0x0800d2a8
 80026e0:	200006ec 	.word	0x200006ec
 80026e4:	200006b8 	.word	0x200006b8

080026e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b094      	sub	sp, #80	; 0x50
 80026ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	2230      	movs	r2, #48	; 0x30
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f006 fbe2 	bl	8008ec0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800270c:	f001 ff34 	bl	8004578 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <SystemClock_Config+0xc8>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <SystemClock_Config+0xc8>)
 8002716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271a:	6413      	str	r3, [r2, #64]	; 0x40
 800271c:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <SystemClock_Config+0xc8>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002728:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <SystemClock_Config+0xcc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002730:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <SystemClock_Config+0xcc>)
 8002732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <SystemClock_Config+0xcc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002744:	2301      	movs	r3, #1
 8002746:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002748:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800274e:	2302      	movs	r3, #2
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002758:	2304      	movs	r3, #4
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 800275c:	2348      	movs	r3, #72	; 0x48
 800275e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002760:	2302      	movs	r3, #2
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8002764:	2303      	movs	r3, #3
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002768:	f107 0320 	add.w	r3, r7, #32
 800276c:	4618      	mov	r0, r3
 800276e:	f001 ff13 	bl	8004598 <HAL_RCC_OscConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002778:	f000 f8c0 	bl	80028fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800277c:	230f      	movs	r3, #15
 800277e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002780:	2302      	movs	r3, #2
 8002782:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	2102      	movs	r1, #2
 8002798:	4618      	mov	r0, r3
 800279a:	f002 f9a1 	bl	8004ae0 <HAL_RCC_ClockConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80027a4:	f000 f8aa 	bl	80028fc <Error_Handler>
	}
}
 80027a8:	bf00      	nop
 80027aa:	3750      	adds	r7, #80	; 0x50
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000

080027b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 && (status == STATUS_GRZANIE || status == STATUS_CHLODZENIE))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c8:	d11b      	bne.n	8002802 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d003      	beq.n	80027da <HAL_TIM_PeriodElapsedCallback+0x22>
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d113      	bne.n	8002802 <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		//Sygnalizacja rozpoczęcia
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80027da:	2180      	movs	r1, #128	; 0x80
 80027dc:	480c      	ldr	r0, [pc, #48]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80027de:	f001 f8da 	bl	8003996 <HAL_GPIO_TogglePin>
		//
		//Pobranie danych z czujnika - aktualna temp i press
		//
		BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 80027e2:	490c      	ldr	r1, [pc, #48]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80027e6:	f7fe fea7 	bl	8001538 <BMP280_ReadTemperatureAndPressure>
//		}

		//
		//Wytworzenie sygnału
		//
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,999);
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027f2:	63da      	str	r2, [r3, #60]	; 0x3c
		//
		//Wysłanie danych
		//
		zezwolenie = 1;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
		//Sygnalizacja zakończenia
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80027fe:	f001 f8ca 	bl	8003996 <HAL_GPIO_TogglePin>
	}
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000008 	.word	0x20000008
 8002810:	40020400 	.word	0x40020400
 8002814:	20000624 	.word	0x20000624
 8002818:	20000628 	.word	0x20000628
 800281c:	200007d4 	.word	0x200007d4
 8002820:	2000062c 	.word	0x2000062c

08002824 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a2c      	ldr	r2, [pc, #176]	; (80028e4 <HAL_UART_RxCpltCallback+0xc0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d151      	bne.n	80028da <HAL_UART_RxCpltCallback+0xb6>
	{
		//Sygnalizacja odebrania
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002836:	2101      	movs	r1, #1
 8002838:	482b      	ldr	r0, [pc, #172]	; (80028e8 <HAL_UART_RxCpltCallback+0xc4>)
 800283a:	f001 f8ac 	bl	8003996 <HAL_GPIO_TogglePin>
		//
		//Możliwe komunikaty:
		//"TMP=27.5" lub dowolna inna temp
		//"STA=0001" lub "STA=0002" lub "STA=0003" lub "STA=0004"
		//
		if(Buffor_Rx[0] == 'S'){
 800283e:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_UART_RxCpltCallback+0xc8>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b53      	cmp	r3, #83	; 0x53
 8002844:	d120      	bne.n	8002888 <HAL_UART_RxCpltCallback+0x64>
			switch(Buffor_Rx[7]){
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_UART_RxCpltCallback+0xc8>)
 8002848:	79db      	ldrb	r3, [r3, #7]
 800284a:	3b31      	subs	r3, #49	; 0x31
 800284c:	2b03      	cmp	r3, #3
 800284e:	d83b      	bhi.n	80028c8 <HAL_UART_RxCpltCallback+0xa4>
 8002850:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <HAL_UART_RxCpltCallback+0x34>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	08002869 	.word	0x08002869
 800285c:	08002871 	.word	0x08002871
 8002860:	08002879 	.word	0x08002879
 8002864:	08002881 	.word	0x08002881
			case '1':
				status = STATUS_GRZANIE;
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_UART_RxCpltCallback+0xcc>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
				break;
 800286e:	e02b      	b.n	80028c8 <HAL_UART_RxCpltCallback+0xa4>
			case '2':
				status = STATUS_CHLODZENIE;
 8002870:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <HAL_UART_RxCpltCallback+0xcc>)
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
				break;
 8002876:	e027      	b.n	80028c8 <HAL_UART_RxCpltCallback+0xa4>
			case '3':
				status = STATUS_ERROR;
 8002878:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_UART_RxCpltCallback+0xcc>)
 800287a:	2203      	movs	r2, #3
 800287c:	701a      	strb	r2, [r3, #0]
				break;
 800287e:	e023      	b.n	80028c8 <HAL_UART_RxCpltCallback+0xa4>
			case '4':
				status = STATUS_STOP;
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_UART_RxCpltCallback+0xcc>)
 8002882:	2204      	movs	r2, #4
 8002884:	701a      	strb	r2, [r3, #0]
				break;
 8002886:	e01f      	b.n	80028c8 <HAL_UART_RxCpltCallback+0xa4>
			}
			}else if(Buffor_Rx[0] == 'T'){
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_UART_RxCpltCallback+0xc8>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b54      	cmp	r3, #84	; 0x54
 800288e:	d11b      	bne.n	80028c8 <HAL_UART_RxCpltCallback+0xa4>
				float temp_change;
				char temp_change_str[4];
				temp_change_str[0] = Buffor_Rx[4];
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_UART_RxCpltCallback+0xc8>)
 8002892:	791b      	ldrb	r3, [r3, #4]
 8002894:	723b      	strb	r3, [r7, #8]
				temp_change_str[1] = Buffor_Rx[5];
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_UART_RxCpltCallback+0xc8>)
 8002898:	795b      	ldrb	r3, [r3, #5]
 800289a:	727b      	strb	r3, [r7, #9]
				temp_change_str[2] = Buffor_Rx[6];
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_UART_RxCpltCallback+0xc8>)
 800289e:	799b      	ldrb	r3, [r3, #6]
 80028a0:	72bb      	strb	r3, [r7, #10]
				temp_change_str[3] = Buffor_Rx[7];
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_UART_RxCpltCallback+0xc8>)
 80028a4:	79db      	ldrb	r3, [r3, #7]
 80028a6:	72fb      	strb	r3, [r7, #11]
				temp_change = atof(temp_change_str);
 80028a8:	f107 0308 	add.w	r3, r7, #8
 80028ac:	4618      	mov	r0, r3
 80028ae:	f006 fad9 	bl	8008e64 <atof>
 80028b2:	ec53 2b10 	vmov	r2, r3, d0
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f9b5 	bl	8000c28 <__aeabi_d2f>
 80028be:	4603      	mov	r3, r0
 80028c0:	60fb      	str	r3, [r7, #12]
				temperature_set = temp_change;
 80028c2:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <HAL_UART_RxCpltCallback+0xd0>)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6013      	str	r3, [r2, #0]
			}

		//Sygnalizacja zakończenia
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80028c8:	2101      	movs	r1, #1
 80028ca:	4807      	ldr	r0, [pc, #28]	; (80028e8 <HAL_UART_RxCpltCallback+0xc4>)
 80028cc:	f001 f863 	bl	8003996 <HAL_GPIO_TogglePin>
		//
		//Ponowne ustawienie nasłuchu
		//
		HAL_UART_Receive_IT(&huart3, Buffor_Rx, 8);
 80028d0:	2208      	movs	r2, #8
 80028d2:	4906      	ldr	r1, [pc, #24]	; (80028ec <HAL_UART_RxCpltCallback+0xc8>)
 80028d4:	4808      	ldr	r0, [pc, #32]	; (80028f8 <HAL_UART_RxCpltCallback+0xd4>)
 80028d6:	f004 fdd8 	bl	800748a <HAL_UART_Receive_IT>
	}
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40004800 	.word	0x40004800
 80028e8:	40020400 	.word	0x40020400
 80028ec:	200006bc 	.word	0x200006bc
 80028f0:	20000008 	.word	0x20000008
 80028f4:	20000004 	.word	0x20000004
 80028f8:	2000086c 	.word	0x2000086c

080028fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002900:	b672      	cpsid	i
}
 8002902:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002904:	e7fe      	b.n	8002904 <Error_Handler+0x8>
	...

08002908 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <MX_SPI1_Init+0x74>)
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <MX_SPI1_Init+0x78>)
 8002910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <MX_SPI1_Init+0x74>)
 8002914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <MX_SPI1_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <MX_SPI1_Init+0x74>)
 8002922:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002926:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <MX_SPI1_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <MX_SPI1_Init+0x74>)
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_SPI1_Init+0x74>)
 8002936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <MX_SPI1_Init+0x74>)
 800293e:	2210      	movs	r2, #16
 8002940:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_SPI1_Init+0x74>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <MX_SPI1_Init+0x74>)
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <MX_SPI1_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <MX_SPI1_Init+0x74>)
 8002956:	2207      	movs	r2, #7
 8002958:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <MX_SPI1_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <MX_SPI1_Init+0x74>)
 8002962:	2208      	movs	r2, #8
 8002964:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_SPI1_Init+0x74>)
 8002968:	f002 feac 	bl	80056c4 <HAL_SPI_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002972:	f7ff ffc3 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000770 	.word	0x20000770
 8002980:	40013000 	.word	0x40013000

08002984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <HAL_SPI_MspInit+0x7c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d127      	bne.n	80029f6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_SPI_MspInit+0x80>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <HAL_SPI_MspInit+0x80>)
 80029ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_SPI_MspInit+0x80>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_SPI_MspInit+0x80>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_SPI_MspInit+0x80>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_SPI_MspInit+0x80>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029d6:	23e0      	movs	r3, #224	; 0xe0
 80029d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e2:	2303      	movs	r3, #3
 80029e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029e6:	2305      	movs	r3, #5
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	4805      	ldr	r0, [pc, #20]	; (8002a08 <HAL_SPI_MspInit+0x84>)
 80029f2:	f000 fe0b 	bl	800360c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80029f6:	bf00      	nop
 80029f8:	3728      	adds	r7, #40	; 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40013000 	.word	0x40013000
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020000 	.word	0x40020000

08002a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <HAL_MspInit+0x44>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4a0e      	ldr	r2, [pc, #56]	; (8002a50 <HAL_MspInit+0x44>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_MspInit+0x44>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_MspInit+0x44>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <HAL_MspInit+0x44>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_MspInit+0x44>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800

08002a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a58:	e7fe      	b.n	8002a58 <NMI_Handler+0x4>

08002a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a5e:	e7fe      	b.n	8002a5e <HardFault_Handler+0x4>

08002a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <MemManage_Handler+0x4>

08002a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a6a:	e7fe      	b.n	8002a6a <BusFault_Handler+0x4>

08002a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <UsageFault_Handler+0x4>

08002a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa0:	f000 fbcc 	bl	800323c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <TIM2_IRQHandler+0x10>)
 8002aae:	f003 fc7b 	bl	80063a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000820 	.word	0x20000820

08002abc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <USART3_IRQHandler+0x10>)
 8002ac2:	f004 fd31 	bl	8007528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	2000086c 	.word	0x2000086c

08002ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
	return 1;
 8002ad4:	2301      	movs	r3, #1
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <_kill>:

int _kill(int pid, int sig)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aea:	f006 f9bf 	bl	8008e6c <__errno>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2216      	movs	r2, #22
 8002af2:	601a      	str	r2, [r3, #0]
	return -1;
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_exit>:

void _exit (int status)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ffe7 	bl	8002ae0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b12:	e7fe      	b.n	8002b12 <_exit+0x12>

08002b14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e00a      	b.n	8002b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b26:	f3af 8000 	nop.w
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	60ba      	str	r2, [r7, #8]
 8002b32:	b2ca      	uxtb	r2, r1
 8002b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	dbf0      	blt.n	8002b26 <_read+0x12>
	}

return len;
 8002b44:	687b      	ldr	r3, [r7, #4]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	e009      	b.n	8002b74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	60ba      	str	r2, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3301      	adds	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	dbf1      	blt.n	8002b60 <_write+0x12>
	}
	return len;
 8002b7c:	687b      	ldr	r3, [r7, #4]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <_close>:

int _close(int file)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bae:	605a      	str	r2, [r3, #4]
	return 0;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <_isatty>:

int _isatty(int file)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
	return 1;
 8002bc6:	2301      	movs	r3, #1
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
	return 0;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <_sbrk+0x5c>)
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <_sbrk+0x60>)
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c04:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <_sbrk+0x64>)
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <_sbrk+0x68>)
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <_sbrk+0x64>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d207      	bcs.n	8002c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c20:	f006 f924 	bl	8008e6c <__errno>
 8002c24:	4603      	mov	r3, r0
 8002c26:	220c      	movs	r2, #12
 8002c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	e009      	b.n	8002c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <_sbrk+0x64>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <_sbrk+0x64>)
 8002c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c42:	68fb      	ldr	r3, [r7, #12]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20050000 	.word	0x20050000
 8002c50:	00000400 	.word	0x00000400
 8002c54:	20000630 	.word	0x20000630
 8002c58:	20000d08 	.word	0x20000d08

08002c5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <SystemInit+0x20>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	4a05      	ldr	r2, [pc, #20]	; (8002c7c <SystemInit+0x20>)
 8002c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c86:	f107 0310 	add.w	r3, r7, #16
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <MX_TIM2_Init+0x98>)
 8002ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ca4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <MX_TIM2_Init+0x98>)
 8002ca8:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <MX_TIM2_Init+0x98>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <MX_TIM2_Init+0x98>)
 8002cb6:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <MX_TIM2_Init+0x9c>)
 8002cb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <MX_TIM2_Init+0x98>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <MX_TIM2_Init+0x98>)
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cc6:	4814      	ldr	r0, [pc, #80]	; (8002d18 <MX_TIM2_Init+0x98>)
 8002cc8:	f003 f942 	bl	8005f50 <HAL_TIM_Base_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002cd2:	f7ff fe13 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	480d      	ldr	r0, [pc, #52]	; (8002d18 <MX_TIM2_Init+0x98>)
 8002ce4:	f003 fd94 	bl	8006810 <HAL_TIM_ConfigClockSource>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002cee:	f7ff fe05 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4806      	ldr	r0, [pc, #24]	; (8002d18 <MX_TIM2_Init+0x98>)
 8002d00:	f004 fa36 	bl	8007170 <HAL_TIMEx_MasterConfigSynchronization>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d0a:	f7ff fdf7 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d0e:	bf00      	nop
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000820 	.word	0x20000820
 8002d1c:	0001869f 	.word	0x0001869f

08002d20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d40:	463b      	mov	r3, r7
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	60da      	str	r2, [r3, #12]
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	615a      	str	r2, [r3, #20]
 8002d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d52:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002d54:	4a2d      	ldr	r2, [pc, #180]	; (8002e0c <MX_TIM3_Init+0xec>)
 8002d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002d5a:	2247      	movs	r2, #71	; 0x47
 8002d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002d64:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002d66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d72:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d78:	4823      	ldr	r0, [pc, #140]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002d7a:	f003 f8e9 	bl	8005f50 <HAL_TIM_Base_Init>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d84:	f7ff fdba 	bl	80028fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d92:	4619      	mov	r1, r3
 8002d94:	481c      	ldr	r0, [pc, #112]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002d96:	f003 fd3b 	bl	8006810 <HAL_TIM_ConfigClockSource>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002da0:	f7ff fdac 	bl	80028fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002da4:	4818      	ldr	r0, [pc, #96]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002da6:	f003 f9a3 	bl	80060f0 <HAL_TIM_PWM_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002db0:	f7ff fda4 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4811      	ldr	r0, [pc, #68]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002dc4:	f004 f9d4 	bl	8007170 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002dce:	f7ff fd95 	bl	80028fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dd2:	2360      	movs	r3, #96	; 0x60
 8002dd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002de2:	463b      	mov	r3, r7
 8002de4:	2208      	movs	r2, #8
 8002de6:	4619      	mov	r1, r3
 8002de8:	4807      	ldr	r0, [pc, #28]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002dea:	f003 fbfd 	bl	80065e8 <HAL_TIM_PWM_ConfigChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002df4:	f7ff fd82 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002df8:	4803      	ldr	r0, [pc, #12]	; (8002e08 <MX_TIM3_Init+0xe8>)
 8002dfa:	f000 f841 	bl	8002e80 <HAL_TIM_MspPostInit>

}
 8002dfe:	bf00      	nop
 8002e00:	3738      	adds	r7, #56	; 0x38
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200007d4 	.word	0x200007d4
 8002e0c:	40000400 	.word	0x40000400

08002e10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d114      	bne.n	8002e4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	201c      	movs	r0, #28
 8002e40:	f000 fb1b 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e44:	201c      	movs	r0, #28
 8002e46:	f000 fb34 	bl	80034b2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e4a:	e010      	b.n	8002e6e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <HAL_TIM_Base_MspInit+0x6c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10b      	bne.n	8002e6e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_TIM_Base_MspInit+0x68>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40000400 	.word	0x40000400

08002e80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 030c 	add.w	r3, r7, #12
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_TIM_MspPostInit+0x64>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d11c      	bne.n	8002edc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_TIM_MspPostInit+0x68>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_TIM_MspPostInit+0x68>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_TIM_MspPostInit+0x68>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ebe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <HAL_TIM_MspPostInit+0x6c>)
 8002ed8:	f000 fb98 	bl	800360c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002edc:	bf00      	nop
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40020800 	.word	0x40020800

08002ef0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002ef6:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <MX_USART3_UART_Init+0x5c>)
 8002ef8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002f16:	220c      	movs	r2, #12
 8002f18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <MX_USART3_UART_Init+0x58>)
 8002f34:	f004 f9c8 	bl	80072c8 <HAL_UART_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f3e:	f7ff fcdd 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000086c 	.word	0x2000086c
 8002f4c:	40004800 	.word	0x40004800

08002f50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b0aa      	sub	sp, #168	; 0xa8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	2284      	movs	r2, #132	; 0x84
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f005 ffa5 	bl	8008ec0 <memset>
  if(uartHandle->Instance==USART3)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a26      	ldr	r2, [pc, #152]	; (8003014 <HAL_UART_MspInit+0xc4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d144      	bne.n	800300a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f86:	2300      	movs	r3, #0
 8002f88:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 ffa8 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f9a:	f7ff fcaf 	bl	80028fc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <HAL_UART_MspInit+0xc8>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <HAL_UART_MspInit+0xc8>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_UART_MspInit+0xc8>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_UART_MspInit+0xc8>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a17      	ldr	r2, [pc, #92]	; (8003018 <HAL_UART_MspInit+0xc8>)
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_UART_MspInit+0xc8>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002fce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fe8:	2307      	movs	r3, #7
 8002fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4809      	ldr	r0, [pc, #36]	; (800301c <HAL_UART_MspInit+0xcc>)
 8002ff6:	f000 fb09 	bl	800360c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2027      	movs	r0, #39	; 0x27
 8003000:	f000 fa3b 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003004:	2027      	movs	r0, #39	; 0x27
 8003006:	f000 fa54 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800300a:	bf00      	nop
 800300c:	37a8      	adds	r7, #168	; 0xa8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40004800 	.word	0x40004800
 8003018:	40023800 	.word	0x40023800
 800301c:	40020c00 	.word	0x40020c00

08003020 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003026:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800302a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800302e:	2206      	movs	r2, #6
 8003030:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003034:	2202      	movs	r2, #2
 8003036:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800303e:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003040:	2202      	movs	r2, #2
 8003042:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003046:	2201      	movs	r2, #1
 8003048:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003052:	2200      	movs	r2, #0
 8003054:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003058:	2201      	movs	r2, #1
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003062:	4805      	ldr	r0, [pc, #20]	; (8003078 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003064:	f001 f93f 	bl	80042e6 <HAL_PCD_Init>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800306e:	f7ff fc45 	bl	80028fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	200008f0 	.word	0x200008f0

0800307c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b0ac      	sub	sp, #176	; 0xb0
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003094:	f107 0318 	add.w	r3, r7, #24
 8003098:	2284      	movs	r2, #132	; 0x84
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f005 ff0f 	bl	8008ec0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030aa:	d159      	bne.n	8003160 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80030ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b8:	f107 0318 	add.w	r3, r7, #24
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 ff11 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80030c8:	f7ff fc18 	bl	80028fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_PCD_MspInit+0xec>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	4a25      	ldr	r2, [pc, #148]	; (8003168 <HAL_PCD_MspInit+0xec>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6313      	str	r3, [r2, #48]	; 0x30
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_PCD_MspInit+0xec>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 80030e4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80030e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f8:	2303      	movs	r3, #3
 80030fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030fe:	230a      	movs	r3, #10
 8003100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003104:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003108:	4619      	mov	r1, r3
 800310a:	4818      	ldr	r0, [pc, #96]	; (800316c <HAL_PCD_MspInit+0xf0>)
 800310c:	f000 fa7e 	bl	800360c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003124:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003128:	4619      	mov	r1, r3
 800312a:	4810      	ldr	r0, [pc, #64]	; (800316c <HAL_PCD_MspInit+0xf0>)
 800312c:	f000 fa6e 	bl	800360c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_PCD_MspInit+0xec>)
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <HAL_PCD_MspInit+0xec>)
 8003136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313a:	6353      	str	r3, [r2, #52]	; 0x34
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_PCD_MspInit+0xec>)
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_PCD_MspInit+0xec>)
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	4a06      	ldr	r2, [pc, #24]	; (8003168 <HAL_PCD_MspInit+0xec>)
 800314e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003152:	6453      	str	r3, [r2, #68]	; 0x44
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <HAL_PCD_MspInit+0xec>)
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003160:	bf00      	nop
 8003162:	37b0      	adds	r7, #176	; 0xb0
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	40020000 	.word	0x40020000

08003170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003174:	480d      	ldr	r0, [pc, #52]	; (80031ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003176:	490e      	ldr	r1, [pc, #56]	; (80031b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003178:	4a0e      	ldr	r2, [pc, #56]	; (80031b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800317a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800317c:	e002      	b.n	8003184 <LoopCopyDataInit>

0800317e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800317e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003182:	3304      	adds	r3, #4

08003184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003188:	d3f9      	bcc.n	800317e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318a:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800318c:	4c0b      	ldr	r4, [pc, #44]	; (80031bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003190:	e001      	b.n	8003196 <LoopFillZerobss>

08003192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003194:	3204      	adds	r2, #4

08003196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003198:	d3fb      	bcc.n	8003192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800319a:	f7ff fd5f 	bl	8002c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319e:	f005 fe6b 	bl	8008e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031a2:	f7ff f903 	bl	80023ac <main>
  bx  lr    
 80031a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80031ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031b0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80031b4:	0800d9ac 	.word	0x0800d9ac
  ldr r2, =_sbss
 80031b8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80031bc:	20000d08 	.word	0x20000d08

080031c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c0:	e7fe      	b.n	80031c0 <ADC_IRQHandler>

080031c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c6:	2003      	movs	r0, #3
 80031c8:	f000 f94c 	bl	8003464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f000 f805 	bl	80031dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d2:	f7ff fc1b 	bl	8002a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_InitTick+0x54>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_InitTick+0x58>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f967 	bl	80034ce <HAL_SYSTICK_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e00e      	b.n	8003228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d80a      	bhi.n	8003226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003210:	2200      	movs	r2, #0
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f000 f92f 	bl	800347a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800321c:	4a06      	ldr	r2, [pc, #24]	; (8003238 <HAL_InitTick+0x5c>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000028 	.word	0x20000028
 8003234:	20000030 	.word	0x20000030
 8003238:	2000002c 	.word	0x2000002c

0800323c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_IncTick+0x20>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_IncTick+0x24>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4413      	add	r3, r2
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <HAL_IncTick+0x24>)
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000030 	.word	0x20000030
 8003260:	20000cf4 	.word	0x20000cf4

08003264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return uwTick;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_GetTick+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000cf4 	.word	0x20000cf4

0800327c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff ffee 	bl	8003264 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d005      	beq.n	80032a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_Delay+0x44>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032a2:	bf00      	nop
 80032a4:	f7ff ffde 	bl	8003264 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d8f7      	bhi.n	80032a4 <HAL_Delay+0x28>
  {
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000030 	.word	0x20000030

080032c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <__NVIC_SetPriorityGrouping+0x40>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e0:	4013      	ands	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f2:	4a04      	ldr	r2, [pc, #16]	; (8003304 <__NVIC_SetPriorityGrouping+0x40>)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	60d3      	str	r3, [r2, #12]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00
 8003308:	05fa0000 	.word	0x05fa0000

0800330c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <__NVIC_GetPriorityGrouping+0x18>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 0307 	and.w	r3, r3, #7
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db0b      	blt.n	8003352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <__NVIC_EnableIRQ+0x38>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2001      	movs	r0, #1
 800334a:	fa00 f202 	lsl.w	r2, r0, r2
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	db0a      	blt.n	800338e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	490c      	ldr	r1, [pc, #48]	; (80033b0 <__NVIC_SetPriority+0x4c>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	440b      	add	r3, r1
 8003388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800338c:	e00a      	b.n	80033a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <__NVIC_SetPriority+0x50>)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3b04      	subs	r3, #4
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	761a      	strb	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e100 	.word	0xe000e100
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1c3 0307 	rsb	r3, r3, #7
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf28      	it	cs
 80033d6:	2304      	movcs	r3, #4
 80033d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3304      	adds	r3, #4
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d902      	bls.n	80033e8 <NVIC_EncodePriority+0x30>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b03      	subs	r3, #3
 80033e6:	e000      	b.n	80033ea <NVIC_EncodePriority+0x32>
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 31ff 	mov.w	r1, #4294967295
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43d9      	mvns	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	4313      	orrs	r3, r2
         );
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003430:	d301      	bcc.n	8003436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003432:	2301      	movs	r3, #1
 8003434:	e00f      	b.n	8003456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <SysTick_Config+0x40>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343e:	210f      	movs	r1, #15
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	f7ff ff8e 	bl	8003364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <SysTick_Config+0x40>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <SysTick_Config+0x40>)
 8003450:	2207      	movs	r2, #7
 8003452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	e000e010 	.word	0xe000e010

08003464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff29 	bl	80032c4 <__NVIC_SetPriorityGrouping>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800348c:	f7ff ff3e 	bl	800330c <__NVIC_GetPriorityGrouping>
 8003490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	6978      	ldr	r0, [r7, #20]
 8003498:	f7ff ff8e 	bl	80033b8 <NVIC_EncodePriority>
 800349c:	4602      	mov	r2, r0
 800349e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff5d 	bl	8003364 <__NVIC_SetPriority>
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff31 	bl	8003328 <__NVIC_EnableIRQ>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ffa2 	bl	8003420 <SysTick_Config>
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff feb6 	bl	8003264 <HAL_GetTick>
 80034f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d008      	beq.n	8003518 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e052      	b.n	80035be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0216 	bic.w	r2, r2, #22
 8003526:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003536:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <HAL_DMA_Abort+0x62>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0208 	bic.w	r2, r2, #8
 8003556:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003568:	e013      	b.n	8003592 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800356a:	f7ff fe7b 	bl	8003264 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b05      	cmp	r3, #5
 8003576:	d90c      	bls.n	8003592 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2203      	movs	r2, #3
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e015      	b.n	80035be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e4      	bne.n	800356a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	223f      	movs	r2, #63	; 0x3f
 80035a6:	409a      	lsls	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d004      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e00c      	b.n	80035fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2205      	movs	r2, #5
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800360c:	b480      	push	{r7}
 800360e:	b089      	sub	sp, #36	; 0x24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e175      	b.n	8003918 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800362c:	2201      	movs	r2, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	429a      	cmp	r2, r3
 8003646:	f040 8164 	bne.w	8003912 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d005      	beq.n	8003662 <HAL_GPIO_Init+0x56>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d130      	bne.n	80036c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	2203      	movs	r2, #3
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003698:	2201      	movs	r2, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 0201 	and.w	r2, r3, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d017      	beq.n	8003700 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d123      	bne.n	8003754 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	220f      	movs	r2, #15
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	08da      	lsrs	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3208      	adds	r2, #8
 800374e:	69b9      	ldr	r1, [r7, #24]
 8003750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0203 	and.w	r2, r3, #3
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 80be 	beq.w	8003912 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003796:	4b66      	ldr	r3, [pc, #408]	; (8003930 <HAL_GPIO_Init+0x324>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	4a65      	ldr	r2, [pc, #404]	; (8003930 <HAL_GPIO_Init+0x324>)
 800379c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a0:	6453      	str	r3, [r2, #68]	; 0x44
 80037a2:	4b63      	ldr	r3, [pc, #396]	; (8003930 <HAL_GPIO_Init+0x324>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037ae:	4a61      	ldr	r2, [pc, #388]	; (8003934 <HAL_GPIO_Init+0x328>)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	3302      	adds	r3, #2
 80037b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	220f      	movs	r2, #15
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_GPIO_Init+0x32c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d037      	beq.n	800384a <HAL_GPIO_Init+0x23e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a57      	ldr	r2, [pc, #348]	; (800393c <HAL_GPIO_Init+0x330>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d031      	beq.n	8003846 <HAL_GPIO_Init+0x23a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a56      	ldr	r2, [pc, #344]	; (8003940 <HAL_GPIO_Init+0x334>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02b      	beq.n	8003842 <HAL_GPIO_Init+0x236>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a55      	ldr	r2, [pc, #340]	; (8003944 <HAL_GPIO_Init+0x338>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d025      	beq.n	800383e <HAL_GPIO_Init+0x232>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a54      	ldr	r2, [pc, #336]	; (8003948 <HAL_GPIO_Init+0x33c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01f      	beq.n	800383a <HAL_GPIO_Init+0x22e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a53      	ldr	r2, [pc, #332]	; (800394c <HAL_GPIO_Init+0x340>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d019      	beq.n	8003836 <HAL_GPIO_Init+0x22a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_GPIO_Init+0x344>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_GPIO_Init+0x226>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a51      	ldr	r2, [pc, #324]	; (8003954 <HAL_GPIO_Init+0x348>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_GPIO_Init+0x222>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a50      	ldr	r2, [pc, #320]	; (8003958 <HAL_GPIO_Init+0x34c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <HAL_GPIO_Init+0x21e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a4f      	ldr	r2, [pc, #316]	; (800395c <HAL_GPIO_Init+0x350>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_GPIO_Init+0x21a>
 8003822:	2309      	movs	r3, #9
 8003824:	e012      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003826:	230a      	movs	r3, #10
 8003828:	e010      	b.n	800384c <HAL_GPIO_Init+0x240>
 800382a:	2308      	movs	r3, #8
 800382c:	e00e      	b.n	800384c <HAL_GPIO_Init+0x240>
 800382e:	2307      	movs	r3, #7
 8003830:	e00c      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003832:	2306      	movs	r3, #6
 8003834:	e00a      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003836:	2305      	movs	r3, #5
 8003838:	e008      	b.n	800384c <HAL_GPIO_Init+0x240>
 800383a:	2304      	movs	r3, #4
 800383c:	e006      	b.n	800384c <HAL_GPIO_Init+0x240>
 800383e:	2303      	movs	r3, #3
 8003840:	e004      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003842:	2302      	movs	r3, #2
 8003844:	e002      	b.n	800384c <HAL_GPIO_Init+0x240>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_GPIO_Init+0x240>
 800384a:	2300      	movs	r3, #0
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	f002 0203 	and.w	r2, r2, #3
 8003852:	0092      	lsls	r2, r2, #2
 8003854:	4093      	lsls	r3, r2
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800385c:	4935      	ldr	r1, [pc, #212]	; (8003934 <HAL_GPIO_Init+0x328>)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	3302      	adds	r3, #2
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_GPIO_Init+0x354>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800388e:	4a34      	ldr	r2, [pc, #208]	; (8003960 <HAL_GPIO_Init+0x354>)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003894:	4b32      	ldr	r3, [pc, #200]	; (8003960 <HAL_GPIO_Init+0x354>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b8:	4a29      	ldr	r2, [pc, #164]	; (8003960 <HAL_GPIO_Init+0x354>)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038be:	4b28      	ldr	r3, [pc, #160]	; (8003960 <HAL_GPIO_Init+0x354>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038e2:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <HAL_GPIO_Init+0x354>)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_GPIO_Init+0x354>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <HAL_GPIO_Init+0x354>)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3301      	adds	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	f67f ae86 	bls.w	800362c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800
 8003934:	40013800 	.word	0x40013800
 8003938:	40020000 	.word	0x40020000
 800393c:	40020400 	.word	0x40020400
 8003940:	40020800 	.word	0x40020800
 8003944:	40020c00 	.word	0x40020c00
 8003948:	40021000 	.word	0x40021000
 800394c:	40021400 	.word	0x40021400
 8003950:	40021800 	.word	0x40021800
 8003954:	40021c00 	.word	0x40021c00
 8003958:	40022000 	.word	0x40022000
 800395c:	40022400 	.word	0x40022400
 8003960:	40013c00 	.word	0x40013c00

08003964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
 8003970:	4613      	mov	r3, r2
 8003972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003974:	787b      	ldrb	r3, [r7, #1]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800397a:	887a      	ldrh	r2, [r7, #2]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003980:	e003      	b.n	800398a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003982:	887b      	ldrh	r3, [r7, #2]
 8003984:	041a      	lsls	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	619a      	str	r2, [r3, #24]
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039a8:	887a      	ldrh	r2, [r7, #2]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4013      	ands	r3, r2
 80039ae:	041a      	lsls	r2, r3, #16
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	43d9      	mvns	r1, r3
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	400b      	ands	r3, r1
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	619a      	str	r2, [r3, #24]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07f      	b.n	8003ade <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fe fc7a 	bl	80022ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2224      	movs	r2, #36	; 0x24
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d107      	bne.n	8003a46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	e006      	b.n	8003a54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d104      	bne.n	8003a66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_I2C_Init+0x11c>)
 8003a72:	430b      	orrs	r3, r1
 8003a74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1a      	ldr	r2, [r3, #32]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	02008000 	.word	0x02008000

08003aec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	817b      	strh	r3, [r7, #10]
 8003afe:	460b      	mov	r3, r1
 8003b00:	813b      	strh	r3, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	f040 80f9 	bne.w	8003d06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x34>
 8003b1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0ed      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_I2C_Mem_Write+0x4e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e0e6      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b42:	f7ff fb8f 	bl	8003264 <HAL_GetTick>
 8003b46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2319      	movs	r3, #25
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f955 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0d1      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2221      	movs	r2, #33	; 0x21
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2240      	movs	r2, #64	; 0x40
 8003b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b8c:	88f8      	ldrh	r0, [r7, #6]
 8003b8e:	893a      	ldrh	r2, [r7, #8]
 8003b90:	8979      	ldrh	r1, [r7, #10]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f8b9 	bl	8003d14 <I2C_RequestMemoryWrite>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0a9      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2bff      	cmp	r3, #255	; 0xff
 8003bbc:	d90e      	bls.n	8003bdc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	22ff      	movs	r2, #255	; 0xff
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	8979      	ldrh	r1, [r7, #10]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fabd 	bl	8004154 <I2C_TransferConfig>
 8003bda:	e00f      	b.n	8003bfc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	8979      	ldrh	r1, [r7, #10]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 faac 	bl	8004154 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f93f 	bl	8003e84 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e07b      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d034      	beq.n	8003cb4 <HAL_I2C_Mem_Write+0x1c8>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d130      	bne.n	8003cb4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f8d1 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e04d      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2bff      	cmp	r3, #255	; 0xff
 8003c74:	d90e      	bls.n	8003c94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	8979      	ldrh	r1, [r7, #10]
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fa61 	bl	8004154 <I2C_TransferConfig>
 8003c92:	e00f      	b.n	8003cb4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	8979      	ldrh	r1, [r7, #10]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fa50 	bl	8004154 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d19e      	bne.n	8003bfc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f91e 	bl	8003f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e01a      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <HAL_I2C_Mem_Write+0x224>)
 8003ce6:	400b      	ands	r3, r1
 8003ce8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e000      	b.n	8003d08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
  }
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	fe00e800 	.word	0xfe00e800

08003d14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	817b      	strh	r3, [r7, #10]
 8003d26:	460b      	mov	r3, r1
 8003d28:	813b      	strh	r3, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	8979      	ldrh	r1, [r7, #10]
 8003d34:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <I2C_RequestMemoryWrite+0xa4>)
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fa09 	bl	8004154 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	69b9      	ldr	r1, [r7, #24]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f89c 	bl	8003e84 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e02c      	b.n	8003db0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5c:	893b      	ldrh	r3, [r7, #8]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	629a      	str	r2, [r3, #40]	; 0x28
 8003d66:	e015      	b.n	8003d94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d68:	893b      	ldrh	r3, [r7, #8]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f882 	bl	8003e84 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e012      	b.n	8003db0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8a:	893b      	ldrh	r3, [r7, #8]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f830 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	80002000 	.word	0x80002000

08003dbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d103      	bne.n	8003dda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d007      	beq.n	8003df8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	619a      	str	r2, [r3, #24]
  }
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	e022      	b.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d01e      	beq.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7ff fa21 	bl	8003264 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d113      	bne.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e00f      	b.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4013      	ands	r3, r2
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d0cd      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e90:	e02c      	b.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f870 	bl	8003f7c <I2C_IsErrorOccurred>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e02a      	b.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d01e      	beq.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7ff f9d9 	bl	8003264 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d113      	bne.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e007      	b.n	8003efc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d1cb      	bne.n	8003e92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f10:	e028      	b.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f830 	bl	8003f7c <I2C_IsErrorOccurred>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e026      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7ff f99d 	bl	8003264 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d113      	bne.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e007      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d1cf      	bne.n	8003f12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d075      	beq.n	8004094 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2210      	movs	r2, #16
 8003fae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fb0:	e056      	b.n	8004060 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb8:	d052      	beq.n	8004060 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7ff f953 	bl	8003264 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <I2C_IsErrorOccurred+0x54>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d147      	bne.n	8004060 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fe2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff2:	d12e      	bne.n	8004052 <I2C_IsErrorOccurred+0xd6>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ffa:	d02a      	beq.n	8004052 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d027      	beq.n	8004052 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004010:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004012:	f7ff f927 	bl	8003264 <HAL_GetTick>
 8004016:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004018:	e01b      	b.n	8004052 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800401a:	f7ff f923 	bl	8003264 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b19      	cmp	r3, #25
 8004026:	d914      	bls.n	8004052 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b20      	cmp	r3, #32
 800405e:	d1dc      	bne.n	800401a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b20      	cmp	r3, #32
 800406c:	d003      	beq.n	8004076 <I2C_IsErrorOccurred+0xfa>
 800406e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004072:	2b00      	cmp	r3, #0
 8004074:	d09d      	beq.n	8003fb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2220      	movs	r2, #32
 8004084:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f043 0304 	orr.w	r3, r3, #4
 800408c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	f043 0308 	orr.w	r3, r3, #8
 80040ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01c      	beq.n	8004144 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f7ff fe56 	bl	8003dbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <I2C_IsErrorOccurred+0x1d4>)
 800411c:	400b      	ands	r3, r1
 800411e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	431a      	orrs	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004148:	4618      	mov	r0, r3
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	fe00e800 	.word	0xfe00e800

08004154 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	817b      	strh	r3, [r7, #10]
 8004162:	4613      	mov	r3, r2
 8004164:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004166:	897b      	ldrh	r3, [r7, #10]
 8004168:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800416c:	7a7b      	ldrb	r3, [r7, #9]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004174:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	4313      	orrs	r3, r2
 800417e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004182:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	0d5b      	lsrs	r3, r3, #21
 800418e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <I2C_TransferConfig+0x60>)
 8004194:	430b      	orrs	r3, r1
 8004196:	43db      	mvns	r3, r3
 8004198:	ea02 0103 	and.w	r1, r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	03ff63ff 	.word	0x03ff63ff

080041b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d138      	bne.n	8004240 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041d8:	2302      	movs	r3, #2
 80041da:	e032      	b.n	8004242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800420a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6819      	ldr	r1, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e000      	b.n	8004242 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004240:	2302      	movs	r3, #2
  }
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b20      	cmp	r3, #32
 8004262:	d139      	bne.n	80042d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800426e:	2302      	movs	r3, #2
 8004270:	e033      	b.n	80042da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2224      	movs	r2, #36	; 0x24
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e000      	b.n	80042da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e8:	b08f      	sub	sp, #60	; 0x3c
 80042ea:	af0a      	add	r7, sp, #40	; 0x28
 80042ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e116      	b.n	8004526 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fe feb2 	bl	800307c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2203      	movs	r2, #3
 800431c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f004 fafe 	bl	8008938 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	687e      	ldr	r6, [r7, #4]
 8004344:	466d      	mov	r5, sp
 8004346:	f106 0410 	add.w	r4, r6, #16
 800434a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800434c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800434e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004352:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004356:	e885 0003 	stmia.w	r5, {r0, r1}
 800435a:	1d33      	adds	r3, r6, #4
 800435c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800435e:	6838      	ldr	r0, [r7, #0]
 8004360:	f004 fa92 	bl	8008888 <USB_CoreInit>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0d7      	b.n	8004526 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f004 faec 	bl	800895a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]
 8004386:	e04a      	b.n	800441e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	333d      	adds	r3, #61	; 0x3d
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800439c:	7bfa      	ldrb	r2, [r7, #15]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	333c      	adds	r3, #60	; 0x3c
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043b0:	7bfa      	ldrb	r2, [r7, #15]
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	b298      	uxth	r0, r3
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	3342      	adds	r3, #66	; 0x42
 80043c4:	4602      	mov	r2, r0
 80043c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	333f      	adds	r3, #63	; 0x3f
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043dc:	7bfa      	ldrb	r2, [r7, #15]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	3344      	adds	r3, #68	; 0x44
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043f0:	7bfa      	ldrb	r2, [r7, #15]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	3348      	adds	r3, #72	; 0x48
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	3350      	adds	r3, #80	; 0x50
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	3301      	adds	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
 800441e:	7bfa      	ldrb	r2, [r7, #15]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	429a      	cmp	r2, r3
 8004426:	d3af      	bcc.n	8004388 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004428:	2300      	movs	r3, #0
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e044      	b.n	80044b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800445a:	7bfa      	ldrb	r2, [r7, #15]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004486:	7bfa      	ldrb	r2, [r7, #15]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800449c:	7bfa      	ldrb	r2, [r7, #15]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	3301      	adds	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	7bfa      	ldrb	r2, [r7, #15]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3b5      	bcc.n	800442e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	687e      	ldr	r6, [r7, #4]
 80044ca:	466d      	mov	r5, sp
 80044cc:	f106 0410 	add.w	r4, r6, #16
 80044d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80044e0:	1d33      	adds	r3, r6, #4
 80044e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044e4:	6838      	ldr	r0, [r7, #0]
 80044e6:	f004 fa85 	bl	80089f4 <USB_DevInit>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e014      	b.n	8004526 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	2b01      	cmp	r3, #1
 8004512:	d102      	bne.n	800451a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f80b 	bl	8004530 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f004 fc3f 	bl	8008da2 <USB_DevDisconnect>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004530 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_PCDEx_ActivateLPM+0x44>)
 8004560:	4313      	orrs	r3, r2
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	10000003 	.word	0x10000003

08004578 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a04      	ldr	r2, [pc, #16]	; (8004594 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004586:	6013      	str	r3, [r2, #0]
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40007000 	.word	0x40007000

08004598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80045a0:	2300      	movs	r3, #0
 80045a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e291      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8087 	beq.w	80046ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045bc:	4b96      	ldr	r3, [pc, #600]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d00c      	beq.n	80045e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c8:	4b93      	ldr	r3, [pc, #588]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d112      	bne.n	80045fa <HAL_RCC_OscConfig+0x62>
 80045d4:	4b90      	ldr	r3, [pc, #576]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e0:	d10b      	bne.n	80045fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e2:	4b8d      	ldr	r3, [pc, #564]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d06c      	beq.n	80046c8 <HAL_RCC_OscConfig+0x130>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d168      	bne.n	80046c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e26b      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004602:	d106      	bne.n	8004612 <HAL_RCC_OscConfig+0x7a>
 8004604:	4b84      	ldr	r3, [pc, #528]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a83      	ldr	r2, [pc, #524]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 800460a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	e02e      	b.n	8004670 <HAL_RCC_OscConfig+0xd8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0x9c>
 800461a:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7e      	ldr	r2, [pc, #504]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	4b7c      	ldr	r3, [pc, #496]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7b      	ldr	r2, [pc, #492]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 800462c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e01d      	b.n	8004670 <HAL_RCC_OscConfig+0xd8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0xc0>
 800463e:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a75      	ldr	r2, [pc, #468]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	4b73      	ldr	r3, [pc, #460]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a72      	ldr	r2, [pc, #456]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0xd8>
 8004658:	4b6f      	ldr	r3, [pc, #444]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a6e      	ldr	r2, [pc, #440]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 800465e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b6c      	ldr	r3, [pc, #432]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6b      	ldr	r2, [pc, #428]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 800466a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800466e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fe fdf4 	bl	8003264 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fe fdf0 	bl	8003264 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e21f      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004692:	4b61      	ldr	r3, [pc, #388]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0xe8>
 800469e:	e014      	b.n	80046ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe fde0 	bl	8003264 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fe fddc 	bl	8003264 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e20b      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ba:	4b57      	ldr	r3, [pc, #348]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x110>
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d069      	beq.n	80047aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046d6:	4b50      	ldr	r3, [pc, #320]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e2:	4b4d      	ldr	r3, [pc, #308]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d11c      	bne.n	8004728 <HAL_RCC_OscConfig+0x190>
 80046ee:	4b4a      	ldr	r3, [pc, #296]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d116      	bne.n	8004728 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fa:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_RCC_OscConfig+0x17a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d001      	beq.n	8004712 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e1df      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004712:	4b41      	ldr	r3, [pc, #260]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	493d      	ldr	r1, [pc, #244]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004726:	e040      	b.n	80047aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d023      	beq.n	8004778 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004730:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a38      	ldr	r2, [pc, #224]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fe fd92 	bl	8003264 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004744:	f7fe fd8e 	bl	8003264 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e1bd      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004762:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4929      	ldr	r1, [pc, #164]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
 8004776:	e018      	b.n	80047aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004778:	4b27      	ldr	r3, [pc, #156]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a26      	ldr	r2, [pc, #152]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe fd6e 	bl	8003264 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478c:	f7fe fd6a 	bl	8003264 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e199      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d038      	beq.n	8004828 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d019      	beq.n	80047f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80047c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fe fd4b 	bl	8003264 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d2:	f7fe fd47 	bl	8003264 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e176      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80047e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCC_OscConfig+0x23a>
 80047f0:	e01a      	b.n	8004828 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80047f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <HAL_RCC_OscConfig+0x280>)
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fe:	f7fe fd31 	bl	8003264 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004804:	e00a      	b.n	800481c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004806:	f7fe fd2d 	bl	8003264 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d903      	bls.n	800481c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e15c      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
 8004818:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	4b91      	ldr	r3, [pc, #580]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 800481e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ee      	bne.n	8004806 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80a4 	beq.w	800497e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004836:	4b8b      	ldr	r3, [pc, #556]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10d      	bne.n	800485e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004842:	4b88      	ldr	r3, [pc, #544]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	4a87      	ldr	r2, [pc, #540]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484c:	6413      	str	r3, [r2, #64]	; 0x40
 800484e:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004856:	60bb      	str	r3, [r7, #8]
 8004858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800485e:	4b82      	ldr	r3, [pc, #520]	; (8004a68 <HAL_RCC_OscConfig+0x4d0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d118      	bne.n	800489c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800486a:	4b7f      	ldr	r3, [pc, #508]	; (8004a68 <HAL_RCC_OscConfig+0x4d0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7e      	ldr	r2, [pc, #504]	; (8004a68 <HAL_RCC_OscConfig+0x4d0>)
 8004870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004876:	f7fe fcf5 	bl	8003264 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487e:	f7fe fcf1 	bl	8003264 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b64      	cmp	r3, #100	; 0x64
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e120      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004890:	4b75      	ldr	r3, [pc, #468]	; (8004a68 <HAL_RCC_OscConfig+0x4d0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d106      	bne.n	80048b2 <HAL_RCC_OscConfig+0x31a>
 80048a4:	4b6f      	ldr	r3, [pc, #444]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a8:	4a6e      	ldr	r2, [pc, #440]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	6713      	str	r3, [r2, #112]	; 0x70
 80048b0:	e02d      	b.n	800490e <HAL_RCC_OscConfig+0x376>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x33c>
 80048ba:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	4a69      	ldr	r2, [pc, #420]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048c0:	f023 0301 	bic.w	r3, r3, #1
 80048c4:	6713      	str	r3, [r2, #112]	; 0x70
 80048c6:	4b67      	ldr	r3, [pc, #412]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	4a66      	ldr	r2, [pc, #408]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048cc:	f023 0304 	bic.w	r3, r3, #4
 80048d0:	6713      	str	r3, [r2, #112]	; 0x70
 80048d2:	e01c      	b.n	800490e <HAL_RCC_OscConfig+0x376>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b05      	cmp	r3, #5
 80048da:	d10c      	bne.n	80048f6 <HAL_RCC_OscConfig+0x35e>
 80048dc:	4b61      	ldr	r3, [pc, #388]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	4a60      	ldr	r2, [pc, #384]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048e2:	f043 0304 	orr.w	r3, r3, #4
 80048e6:	6713      	str	r3, [r2, #112]	; 0x70
 80048e8:	4b5e      	ldr	r3, [pc, #376]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	4a5d      	ldr	r2, [pc, #372]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6713      	str	r3, [r2, #112]	; 0x70
 80048f4:	e00b      	b.n	800490e <HAL_RCC_OscConfig+0x376>
 80048f6:	4b5b      	ldr	r3, [pc, #364]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4a5a      	ldr	r2, [pc, #360]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	6713      	str	r3, [r2, #112]	; 0x70
 8004902:	4b58      	ldr	r3, [pc, #352]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	4a57      	ldr	r2, [pc, #348]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004908:	f023 0304 	bic.w	r3, r3, #4
 800490c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d015      	beq.n	8004942 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004916:	f7fe fca5 	bl	8003264 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491c:	e00a      	b.n	8004934 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491e:	f7fe fca1 	bl	8003264 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	f241 3288 	movw	r2, #5000	; 0x1388
 800492c:	4293      	cmp	r3, r2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e0ce      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004934:	4b4b      	ldr	r3, [pc, #300]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0ee      	beq.n	800491e <HAL_RCC_OscConfig+0x386>
 8004940:	e014      	b.n	800496c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004942:	f7fe fc8f 	bl	8003264 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004948:	e00a      	b.n	8004960 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494a:	f7fe fc8b 	bl	8003264 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	4293      	cmp	r3, r2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e0b8      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004960:	4b40      	ldr	r3, [pc, #256]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1ee      	bne.n	800494a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d105      	bne.n	800497e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004972:	4b3c      	ldr	r3, [pc, #240]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	4a3b      	ldr	r2, [pc, #236]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80a4 	beq.w	8004ad0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004988:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 030c 	and.w	r3, r3, #12
 8004990:	2b08      	cmp	r3, #8
 8004992:	d06b      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d149      	bne.n	8004a30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499c:	4b31      	ldr	r3, [pc, #196]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a30      	ldr	r2, [pc, #192]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80049a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fe fc5c 	bl	8003264 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fe fc58 	bl	8003264 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e087      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69da      	ldr	r2, [r3, #28]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	019b      	lsls	r3, r3, #6
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	3b01      	subs	r3, #1
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	061b      	lsls	r3, r3, #24
 80049f2:	4313      	orrs	r3, r2
 80049f4:	4a1b      	ldr	r2, [pc, #108]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80049f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fc:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fe fc2c 	bl	8003264 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fe fc28 	bl	8003264 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e057      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a22:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x478>
 8004a2e:	e04f      	b.n	8004ad0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0b      	ldr	r2, [pc, #44]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fe fc12 	bl	8003264 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fe fc0e 	bl	8003264 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e03d      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a56:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x4ac>
 8004a62:	e035      	b.n	8004ad0 <HAL_RCC_OscConfig+0x538>
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x544>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d028      	beq.n	8004acc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d121      	bne.n	8004acc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d11a      	bne.n	8004acc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aa2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d111      	bne.n	8004acc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40023800 	.word	0x40023800

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0d0      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d910      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b67      	ldr	r3, [pc, #412]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 020f 	bic.w	r2, r3, #15
 8004b0e:	4965      	ldr	r1, [pc, #404]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0b8      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b40:	4b59      	ldr	r3, [pc, #356]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4a58      	ldr	r2, [pc, #352]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b58:	4b53      	ldr	r3, [pc, #332]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a52      	ldr	r2, [pc, #328]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b64:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	494d      	ldr	r1, [pc, #308]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d040      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d107      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	4b47      	ldr	r3, [pc, #284]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d115      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e07f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba2:	4b41      	ldr	r3, [pc, #260]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e073      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb2:	4b3d      	ldr	r3, [pc, #244]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e06b      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc2:	4b39      	ldr	r3, [pc, #228]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f023 0203 	bic.w	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4936      	ldr	r1, [pc, #216]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd4:	f7fe fb46 	bl	8003264 <HAL_GetTick>
 8004bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bdc:	f7fe fb42 	bl	8003264 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e053      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	4b2d      	ldr	r3, [pc, #180]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 020c 	and.w	r2, r3, #12
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d1eb      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c04:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d210      	bcs.n	8004c34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 020f 	bic.w	r2, r3, #15
 8004c1a:	4922      	ldr	r1, [pc, #136]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e032      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4916      	ldr	r1, [pc, #88]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	490e      	ldr	r1, [pc, #56]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c72:	f000 f821 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c76:	4602      	mov	r2, r0
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	490a      	ldr	r1, [pc, #40]	; (8004cac <HAL_RCC_ClockConfig+0x1cc>)
 8004c84:	5ccb      	ldrb	r3, [r1, r3]
 8004c86:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8a:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_RCC_ClockConfig+0x1d4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe faa2 	bl	80031dc <HAL_InitTick>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023c00 	.word	0x40023c00
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	0800d4d8 	.word	0x0800d4d8
 8004cb0:	20000028 	.word	0x20000028
 8004cb4:	2000002c 	.word	0x2000002c

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	607b      	str	r3, [r7, #4]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd0:	4b67      	ldr	r3, [pc, #412]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d00d      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	f200 80bd 	bhi.w	8004e5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x34>
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d003      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cea:	e0b7      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cec:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cee:	60bb      	str	r3, [r7, #8]
      break;
 8004cf0:	e0b7      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cf2:	4b61      	ldr	r3, [pc, #388]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004cf4:	60bb      	str	r3, [r7, #8]
      break;
 8004cf6:	e0b4      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf8:	4b5d      	ldr	r3, [pc, #372]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d00:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d02:	4b5b      	ldr	r3, [pc, #364]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04d      	beq.n	8004daa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0e:	4b58      	ldr	r3, [pc, #352]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	099b      	lsrs	r3, r3, #6
 8004d14:	461a      	mov	r2, r3
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d1e:	f04f 0100 	mov.w	r1, #0
 8004d22:	ea02 0800 	and.w	r8, r2, r0
 8004d26:	ea03 0901 	and.w	r9, r3, r1
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	014b      	lsls	r3, r1, #5
 8004d38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d3c:	0142      	lsls	r2, r0, #5
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	ebb0 0008 	subs.w	r0, r0, r8
 8004d46:	eb61 0109 	sbc.w	r1, r1, r9
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	018b      	lsls	r3, r1, #6
 8004d54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d58:	0182      	lsls	r2, r0, #6
 8004d5a:	1a12      	subs	r2, r2, r0
 8004d5c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d60:	f04f 0000 	mov.w	r0, #0
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	00d9      	lsls	r1, r3, #3
 8004d6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d6e:	00d0      	lsls	r0, r2, #3
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	eb12 0208 	adds.w	r2, r2, r8
 8004d78:	eb43 0309 	adc.w	r3, r3, r9
 8004d7c:	f04f 0000 	mov.w	r0, #0
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	0259      	lsls	r1, r3, #9
 8004d86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d8a:	0250      	lsls	r0, r2, #9
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	f7fb ffe4 	bl	8000d68 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e04a      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	099b      	lsrs	r3, r3, #6
 8004db0:	461a      	mov	r2, r3
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dba:	f04f 0100 	mov.w	r1, #0
 8004dbe:	ea02 0400 	and.w	r4, r2, r0
 8004dc2:	ea03 0501 	and.w	r5, r3, r1
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	014b      	lsls	r3, r1, #5
 8004dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dd8:	0142      	lsls	r2, r0, #5
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	1b00      	subs	r0, r0, r4
 8004de0:	eb61 0105 	sbc.w	r1, r1, r5
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	018b      	lsls	r3, r1, #6
 8004dee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004df2:	0182      	lsls	r2, r0, #6
 8004df4:	1a12      	subs	r2, r2, r0
 8004df6:	eb63 0301 	sbc.w	r3, r3, r1
 8004dfa:	f04f 0000 	mov.w	r0, #0
 8004dfe:	f04f 0100 	mov.w	r1, #0
 8004e02:	00d9      	lsls	r1, r3, #3
 8004e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e08:	00d0      	lsls	r0, r2, #3
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	1912      	adds	r2, r2, r4
 8004e10:	eb45 0303 	adc.w	r3, r5, r3
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	0299      	lsls	r1, r3, #10
 8004e1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e22:	0290      	lsls	r0, r2, #10
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	f7fb ff98 	bl	8000d68 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	60bb      	str	r3, [r7, #8]
      break;
 8004e5a:	e002      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e5e:	60bb      	str	r3, [r7, #8]
      break;
 8004e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e62:	68bb      	ldr	r3, [r7, #8]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	007a1200 	.word	0x007a1200

08004e7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000028 	.word	0x20000028

08004e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e98:	f7ff fff0 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0a9b      	lsrs	r3, r3, #10
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4903      	ldr	r1, [pc, #12]	; (8004eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800d4e8 	.word	0x0800d4e8

08004ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ec0:	f7ff ffdc 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	0b5b      	lsrs	r3, r3, #13
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	4903      	ldr	r1, [pc, #12]	; (8004ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ed2:	5ccb      	ldrb	r3, [r1, r3]
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	0800d4e8 	.word	0x0800d4e8

08004ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d012      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f0c:	4b69      	ldr	r3, [pc, #420]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a68      	ldr	r2, [pc, #416]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f16:	6093      	str	r3, [r2, #8]
 8004f18:	4b66      	ldr	r3, [pc, #408]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f20:	4964      	ldr	r1, [pc, #400]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d017      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f3e:	4b5d      	ldr	r3, [pc, #372]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4c:	4959      	ldr	r1, [pc, #356]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d017      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f7a:	4b4e      	ldr	r3, [pc, #312]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	494a      	ldr	r1, [pc, #296]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f98:	d101      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 808b 	beq.w	80050de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fc8:	4b3a      	ldr	r3, [pc, #232]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	4a39      	ldr	r2, [pc, #228]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd4:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fe0:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a34      	ldr	r2, [pc, #208]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fec:	f7fe f93a 	bl	8003264 <HAL_GetTick>
 8004ff0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff4:	f7fe f936 	bl	8003264 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	; 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e357      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005006:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005012:	4b28      	ldr	r3, [pc, #160]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d035      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	429a      	cmp	r2, r3
 800502e:	d02e      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005030:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005038:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800503a:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005044:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005046:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800504c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005050:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005052:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005058:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d114      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fe f8fe 	bl	8003264 <HAL_GetTick>
 8005068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506a:	e00a      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fe f8fa 	bl	8003264 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e319      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005082:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ee      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800509a:	d111      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050aa:	400b      	ands	r3, r1
 80050ac:	4901      	ldr	r1, [pc, #4]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
 80050b2:	e00b      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40007000 	.word	0x40007000
 80050bc:	0ffffcff 	.word	0x0ffffcff
 80050c0:	4bb1      	ldr	r3, [pc, #708]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4ab0      	ldr	r2, [pc, #704]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050ca:	6093      	str	r3, [r2, #8]
 80050cc:	4bae      	ldr	r3, [pc, #696]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d8:	49ab      	ldr	r1, [pc, #684]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050ea:	4ba7      	ldr	r3, [pc, #668]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f0:	4aa5      	ldr	r2, [pc, #660]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80050fa:	4ba3      	ldr	r3, [pc, #652]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	49a0      	ldr	r1, [pc, #640]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005118:	4b9b      	ldr	r3, [pc, #620]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005126:	4998      	ldr	r1, [pc, #608]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800513a:	4b93      	ldr	r3, [pc, #588]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005148:	498f      	ldr	r1, [pc, #572]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800515c:	4b8a      	ldr	r3, [pc, #552]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516a:	4987      	ldr	r1, [pc, #540]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800517e:	4b82      	ldr	r3, [pc, #520]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	497e      	ldr	r1, [pc, #504]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051a0:	4b79      	ldr	r3, [pc, #484]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	f023 0203 	bic.w	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	4976      	ldr	r1, [pc, #472]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051c2:	4b71      	ldr	r3, [pc, #452]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c8:	f023 020c 	bic.w	r2, r3, #12
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d0:	496d      	ldr	r1, [pc, #436]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051e4:	4b68      	ldr	r3, [pc, #416]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f2:	4965      	ldr	r1, [pc, #404]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005206:	4b60      	ldr	r3, [pc, #384]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005214:	495c      	ldr	r1, [pc, #368]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005228:	4b57      	ldr	r3, [pc, #348]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005236:	4954      	ldr	r1, [pc, #336]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800524a:	4b4f      	ldr	r3, [pc, #316]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005250:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	494b      	ldr	r1, [pc, #300]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800526c:	4b46      	ldr	r3, [pc, #280]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005272:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527a:	4943      	ldr	r1, [pc, #268]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800528e:	4b3e      	ldr	r3, [pc, #248]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529c:	493a      	ldr	r1, [pc, #232]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052be:	4932      	ldr	r1, [pc, #200]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d011      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052d2:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e0:	4929      	ldr	r1, [pc, #164]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f0:	d101      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80052f2:	2301      	movs	r3, #1
 80052f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005302:	2301      	movs	r3, #1
 8005304:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005312:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005318:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005320:	4919      	ldr	r1, [pc, #100]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005344:	4910      	ldr	r1, [pc, #64]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d006      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80d9 	beq.w	8005512 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a08      	ldr	r2, [pc, #32]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005366:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800536a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536c:	f7fd ff7a 	bl	8003264 <HAL_GetTick>
 8005370:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005372:	e00b      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005374:	f7fd ff76 	bl	8003264 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	; 0x64
 8005380:	d904      	bls.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e197      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005386:	bf00      	nop
 8005388:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800538c:	4b6c      	ldr	r3, [pc, #432]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ed      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d021      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d11d      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053ac:	4b64      	ldr	r3, [pc, #400]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053ba:	4b61      	ldr	r3, [pc, #388]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	019a      	lsls	r2, r3, #6
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	061b      	lsls	r3, r3, #24
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	071b      	lsls	r3, r3, #28
 80053e0:	4957      	ldr	r1, [pc, #348]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005406:	2b00      	cmp	r3, #0
 8005408:	d02e      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005412:	d129      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005414:	4b4a      	ldr	r3, [pc, #296]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541a:	0c1b      	lsrs	r3, r3, #16
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005422:	4b47      	ldr	r3, [pc, #284]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005428:	0f1b      	lsrs	r3, r3, #28
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	019a      	lsls	r2, r3, #6
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	061b      	lsls	r3, r3, #24
 8005442:	431a      	orrs	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	071b      	lsls	r3, r3, #28
 8005448:	493d      	ldr	r1, [pc, #244]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005450:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005456:	f023 021f 	bic.w	r2, r3, #31
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	3b01      	subs	r3, #1
 8005460:	4937      	ldr	r1, [pc, #220]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01d      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005474:	4b32      	ldr	r3, [pc, #200]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547a:	0e1b      	lsrs	r3, r3, #24
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005482:	4b2f      	ldr	r3, [pc, #188]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005488:	0f1b      	lsrs	r3, r3, #28
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	019a      	lsls	r2, r3, #6
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	431a      	orrs	r2, r3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	431a      	orrs	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	071b      	lsls	r3, r3, #28
 80054a8:	4925      	ldr	r1, [pc, #148]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d011      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	019a      	lsls	r2, r3, #6
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	071b      	lsls	r3, r3, #28
 80054d8:	4919      	ldr	r1, [pc, #100]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054e0:	4b17      	ldr	r3, [pc, #92]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a16      	ldr	r2, [pc, #88]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ec:	f7fd feba 	bl	8003264 <HAL_GetTick>
 80054f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054f4:	f7fd feb6 	bl	8003264 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	; 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e0d7      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005506:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f0      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b01      	cmp	r3, #1
 8005516:	f040 80cd 	bne.w	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a08      	ldr	r2, [pc, #32]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fd fe9d 	bl	8003264 <HAL_GetTick>
 800552a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800552c:	e00a      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800552e:	f7fd fe99 	bl	8003264 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b64      	cmp	r3, #100	; 0x64
 800553a:	d903      	bls.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e0ba      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005540:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005544:	4b5e      	ldr	r3, [pc, #376]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800554c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005550:	d0ed      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800556e:	2b00      	cmp	r3, #0
 8005570:	d02e      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d12a      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800557a:	4b51      	ldr	r3, [pc, #324]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005588:	4b4d      	ldr	r3, [pc, #308]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800558a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558e:	0f1b      	lsrs	r3, r3, #28
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	019a      	lsls	r2, r3, #6
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	071b      	lsls	r3, r3, #28
 80055ae:	4944      	ldr	r1, [pc, #272]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055b6:	4b42      	ldr	r3, [pc, #264]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	3b01      	subs	r3, #1
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	493d      	ldr	r1, [pc, #244]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d022      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e4:	d11d      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055e6:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	0e1b      	lsrs	r3, r3, #24
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055f4:	4b32      	ldr	r3, [pc, #200]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	0f1b      	lsrs	r3, r3, #28
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	019a      	lsls	r2, r3, #6
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	431a      	orrs	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	061b      	lsls	r3, r3, #24
 8005614:	431a      	orrs	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	071b      	lsls	r3, r3, #28
 800561a:	4929      	ldr	r1, [pc, #164]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d028      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800562e:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	0e1b      	lsrs	r3, r3, #24
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800563c:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	0c1b      	lsrs	r3, r3, #16
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	019a      	lsls	r2, r3, #6
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	431a      	orrs	r2, r3
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	061b      	lsls	r3, r3, #24
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	071b      	lsls	r3, r3, #28
 8005662:	4917      	ldr	r1, [pc, #92]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800566a:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	4911      	ldr	r1, [pc, #68]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005680:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a0e      	ldr	r2, [pc, #56]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568c:	f7fd fdea 	bl	8003264 <HAL_GetTick>
 8005690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005694:	f7fd fde6 	bl	8003264 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b64      	cmp	r3, #100	; 0x64
 80056a0:	d901      	bls.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e007      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b2:	d1ef      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800

080056c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e09d      	b.n	8005812 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d108      	bne.n	80056f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056e6:	d009      	beq.n	80056fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	61da      	str	r2, [r3, #28]
 80056ee:	e005      	b.n	80056fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7fd f934 	bl	8002984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005732:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800573c:	d902      	bls.n	8005744 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e002      	b.n	800574a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005748:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005752:	d007      	beq.n	8005764 <HAL_SPI_Init+0xa0>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a6:	ea42 0103 	orr.w	r1, r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	0c1b      	lsrs	r3, r3, #16
 80057c0:	f003 0204 	and.w	r2, r3, #4
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057e0:	ea42 0103 	orr.w	r1, r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005800:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b08a      	sub	sp, #40	; 0x28
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005828:	2301      	movs	r3, #1
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x26>
 800583c:	2302      	movs	r3, #2
 800583e:	e1fb      	b.n	8005c38 <HAL_SPI_TransmitReceive+0x41e>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005848:	f7fd fd0c 	bl	8003264 <HAL_GetTick>
 800584c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005854:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800585c:	887b      	ldrh	r3, [r7, #2]
 800585e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005860:	887b      	ldrh	r3, [r7, #2]
 8005862:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005864:	7efb      	ldrb	r3, [r7, #27]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d00e      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x6e>
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005870:	d106      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d102      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x66>
 800587a:	7efb      	ldrb	r3, [r7, #27]
 800587c:	2b04      	cmp	r3, #4
 800587e:	d003      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005880:	2302      	movs	r3, #2
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005886:	e1cd      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_SPI_TransmitReceive+0x80>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_SPI_TransmitReceive+0x80>
 8005894:	887b      	ldrh	r3, [r7, #2]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058a0:	e1c0      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d003      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2205      	movs	r2, #5
 80058b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	887a      	ldrh	r2, [r7, #2]
 80058c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	887a      	ldrh	r2, [r7, #2]
 80058ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	887a      	ldrh	r2, [r7, #2]
 80058dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	887a      	ldrh	r2, [r7, #2]
 80058e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058f8:	d802      	bhi.n	8005900 <HAL_SPI_TransmitReceive+0xe6>
 80058fa:	8a3b      	ldrh	r3, [r7, #16]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d908      	bls.n	8005912 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800590e:	605a      	str	r2, [r3, #4]
 8005910:	e007      	b.n	8005922 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005920:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d007      	beq.n	8005940 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005948:	d97c      	bls.n	8005a44 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x13e>
 8005952:	8a7b      	ldrh	r3, [r7, #18]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d169      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	881a      	ldrh	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	1c9a      	adds	r2, r3, #2
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597c:	e056      	b.n	8005a2c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b02      	cmp	r3, #2
 800598a:	d11b      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x1aa>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x1aa>
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	2b01      	cmp	r3, #1
 800599a:	d113      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	881a      	ldrh	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d11c      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x1f2>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d016      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	b292      	uxth	r2, r2
 80059ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	1c9a      	adds	r2, r3, #2
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a0c:	f7fd fc2a 	bl	8003264 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d807      	bhi.n	8005a2c <HAL_SPI_TransmitReceive+0x212>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d003      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a2a:	e0fb      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1a3      	bne.n	800597e <HAL_SPI_TransmitReceive+0x164>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d19d      	bne.n	800597e <HAL_SPI_TransmitReceive+0x164>
 8005a42:	e0df      	b.n	8005c04 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x23a>
 8005a4c:	8a7b      	ldrh	r3, [r7, #18]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	f040 80cb 	bne.w	8005bea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d912      	bls.n	8005a84 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	881a      	ldrh	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	1c9a      	adds	r2, r3, #2
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b02      	subs	r3, #2
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a82:	e0b2      	b.n	8005bea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	7812      	ldrb	r2, [r2, #0]
 8005a90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aaa:	e09e      	b.n	8005bea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d134      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x30a>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d02f      	beq.n	8005b24 <HAL_SPI_TransmitReceive+0x30a>
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d12c      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d912      	bls.n	8005afa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	881a      	ldrh	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	1c9a      	adds	r2, r3, #2
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b02      	subs	r3, #2
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005af8:	e012      	b.n	8005b20 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	7812      	ldrb	r2, [r2, #0]
 8005b06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d148      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x3aa>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d042      	beq.n	8005bc4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d923      	bls.n	8005b92 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	b292      	uxth	r2, r2
 8005b56:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b02      	subs	r3, #2
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d81f      	bhi.n	8005bc0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b8e:	605a      	str	r2, [r3, #4]
 8005b90:	e016      	b.n	8005bc0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f103 020c 	add.w	r2, r3, #12
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	7812      	ldrb	r2, [r2, #0]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bc4:	f7fd fb4e 	bl	8003264 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d803      	bhi.n	8005bdc <HAL_SPI_TransmitReceive+0x3c2>
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d102      	bne.n	8005be2 <HAL_SPI_TransmitReceive+0x3c8>
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005be8:	e01c      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f47f af5b 	bne.w	8005aac <HAL_SPI_TransmitReceive+0x292>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f47f af54 	bne.w	8005aac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f937 	bl	8005e7c <SPI_EndRxTxTransaction>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d006      	beq.n	8005c22 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60
 8005c20:	e000      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005c22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3728      	adds	r7, #40	; 0x28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c50:	f7fd fb08 	bl	8003264 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c60:	f7fd fb00 	bl	8003264 <HAL_GetTick>
 8005c64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c66:	4b39      	ldr	r3, [pc, #228]	; (8005d4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	015b      	lsls	r3, r3, #5
 8005c6c:	0d1b      	lsrs	r3, r3, #20
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
 8005c74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c76:	e054      	b.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d050      	beq.n	8005d22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c80:	f7fd faf0 	bl	8003264 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d902      	bls.n	8005c96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d13d      	bne.n	8005d12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ca4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cae:	d111      	bne.n	8005cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb8:	d004      	beq.n	8005cc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc2:	d107      	bne.n	8005cd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cdc:	d10f      	bne.n	8005cfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e017      	b.n	8005d42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d19b      	bne.n	8005c78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000028 	.word	0x20000028

08005d50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d62:	f7fd fa7f 	bl	8003264 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	4413      	add	r3, r2
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d72:	f7fd fa77 	bl	8003264 <HAL_GetTick>
 8005d76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d80:	4b3d      	ldr	r3, [pc, #244]	; (8005e78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	00da      	lsls	r2, r3, #3
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	0d1b      	lsrs	r3, r3, #20
 8005d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d92:	fb02 f303 	mul.w	r3, r2, r3
 8005d96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d98:	e060      	b.n	8005e5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005da0:	d107      	bne.n	8005db2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d050      	beq.n	8005e5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dba:	f7fd fa53 	bl	8003264 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d902      	bls.n	8005dd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d13d      	bne.n	8005e4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de8:	d111      	bne.n	8005e0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df2:	d004      	beq.n	8005dfe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dfc:	d107      	bne.n	8005e0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e16:	d10f      	bne.n	8005e38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e010      	b.n	8005e6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4013      	ands	r3, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d196      	bne.n	8005d9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3728      	adds	r7, #40	; 0x28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000028 	.word	0x20000028

08005e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff ff5b 	bl	8005d50 <SPI_WaitFifoStateUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea4:	f043 0220 	orr.w	r2, r3, #32
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e046      	b.n	8005f3e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005eb0:	4b25      	ldr	r3, [pc, #148]	; (8005f48 <SPI_EndRxTxTransaction+0xcc>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a25      	ldr	r2, [pc, #148]	; (8005f4c <SPI_EndRxTxTransaction+0xd0>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	0d5b      	lsrs	r3, r3, #21
 8005ebc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ece:	d112      	bne.n	8005ef6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2180      	movs	r1, #128	; 0x80
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff feb0 	bl	8005c40 <SPI_WaitFlagStateUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eea:	f043 0220 	orr.w	r2, r3, #32
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e023      	b.n	8005f3e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0c:	2b80      	cmp	r3, #128	; 0x80
 8005f0e:	d0f2      	beq.n	8005ef6 <SPI_EndRxTxTransaction+0x7a>
 8005f10:	e000      	b.n	8005f14 <SPI_EndRxTxTransaction+0x98>
        break;
 8005f12:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff ff15 	bl	8005d50 <SPI_WaitFifoStateUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f30:	f043 0220 	orr.w	r2, r3, #32
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e000      	b.n	8005f3e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000028 	.word	0x20000028
 8005f4c:	165e9f81 	.word	0x165e9f81

08005f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e049      	b.n	8005ff6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fc ff4a 	bl	8002e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	f000 fd30 	bl	80069f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d001      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e054      	b.n	80060c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a26      	ldr	r2, [pc, #152]	; (80060d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d022      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006042:	d01d      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d018      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d013      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <HAL_TIM_Base_Start_IT+0xdc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00e      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1e      	ldr	r2, [pc, #120]	; (80060e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d009      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d004      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x80>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1b      	ldr	r2, [pc, #108]	; (80060e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d115      	bne.n	80060ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	4b19      	ldr	r3, [pc, #100]	; (80060ec <HAL_TIM_Base_Start_IT+0xec>)
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b06      	cmp	r3, #6
 8006090:	d015      	beq.n	80060be <HAL_TIM_Base_Start_IT+0xbe>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006098:	d011      	beq.n	80060be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0201 	orr.w	r2, r2, #1
 80060a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	e008      	b.n	80060be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e000      	b.n	80060c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40010000 	.word	0x40010000
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40010400 	.word	0x40010400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40001800 	.word	0x40001800
 80060ec:	00010007 	.word	0x00010007

080060f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e049      	b.n	8006196 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f841 	bl	800619e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f000 fc60 	bl	80069f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d109      	bne.n	80061d8 <HAL_TIM_PWM_Start+0x24>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	bf14      	ite	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	2300      	moveq	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	e03c      	b.n	8006252 <HAL_TIM_PWM_Start+0x9e>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d109      	bne.n	80061f2 <HAL_TIM_PWM_Start+0x3e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	bf14      	ite	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	2300      	moveq	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	e02f      	b.n	8006252 <HAL_TIM_PWM_Start+0x9e>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d109      	bne.n	800620c <HAL_TIM_PWM_Start+0x58>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	e022      	b.n	8006252 <HAL_TIM_PWM_Start+0x9e>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b0c      	cmp	r3, #12
 8006210:	d109      	bne.n	8006226 <HAL_TIM_PWM_Start+0x72>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b01      	cmp	r3, #1
 800621c:	bf14      	ite	ne
 800621e:	2301      	movne	r3, #1
 8006220:	2300      	moveq	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	e015      	b.n	8006252 <HAL_TIM_PWM_Start+0x9e>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b10      	cmp	r3, #16
 800622a:	d109      	bne.n	8006240 <HAL_TIM_PWM_Start+0x8c>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	e008      	b.n	8006252 <HAL_TIM_PWM_Start+0x9e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	bf14      	ite	ne
 800624c:	2301      	movne	r3, #1
 800624e:	2300      	moveq	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e092      	b.n	8006380 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <HAL_TIM_PWM_Start+0xb6>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006268:	e023      	b.n	80062b2 <HAL_TIM_PWM_Start+0xfe>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b04      	cmp	r3, #4
 800626e:	d104      	bne.n	800627a <HAL_TIM_PWM_Start+0xc6>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006278:	e01b      	b.n	80062b2 <HAL_TIM_PWM_Start+0xfe>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d104      	bne.n	800628a <HAL_TIM_PWM_Start+0xd6>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006288:	e013      	b.n	80062b2 <HAL_TIM_PWM_Start+0xfe>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d104      	bne.n	800629a <HAL_TIM_PWM_Start+0xe6>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006298:	e00b      	b.n	80062b2 <HAL_TIM_PWM_Start+0xfe>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b10      	cmp	r3, #16
 800629e:	d104      	bne.n	80062aa <HAL_TIM_PWM_Start+0xf6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a8:	e003      	b.n	80062b2 <HAL_TIM_PWM_Start+0xfe>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2201      	movs	r2, #1
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 ff32 	bl	8007124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a30      	ldr	r2, [pc, #192]	; (8006388 <HAL_TIM_PWM_Start+0x1d4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <HAL_TIM_PWM_Start+0x120>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2f      	ldr	r2, [pc, #188]	; (800638c <HAL_TIM_PWM_Start+0x1d8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d101      	bne.n	80062d8 <HAL_TIM_PWM_Start+0x124>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <HAL_TIM_PWM_Start+0x126>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a25      	ldr	r2, [pc, #148]	; (8006388 <HAL_TIM_PWM_Start+0x1d4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d022      	beq.n	800633e <HAL_TIM_PWM_Start+0x18a>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006300:	d01d      	beq.n	800633e <HAL_TIM_PWM_Start+0x18a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a22      	ldr	r2, [pc, #136]	; (8006390 <HAL_TIM_PWM_Start+0x1dc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d018      	beq.n	800633e <HAL_TIM_PWM_Start+0x18a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a20      	ldr	r2, [pc, #128]	; (8006394 <HAL_TIM_PWM_Start+0x1e0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_TIM_PWM_Start+0x18a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <HAL_TIM_PWM_Start+0x1e4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_TIM_PWM_Start+0x18a>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a19      	ldr	r2, [pc, #100]	; (800638c <HAL_TIM_PWM_Start+0x1d8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_TIM_PWM_Start+0x18a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a1b      	ldr	r2, [pc, #108]	; (800639c <HAL_TIM_PWM_Start+0x1e8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIM_PWM_Start+0x18a>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a19      	ldr	r2, [pc, #100]	; (80063a0 <HAL_TIM_PWM_Start+0x1ec>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d115      	bne.n	800636a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	4b17      	ldr	r3, [pc, #92]	; (80063a4 <HAL_TIM_PWM_Start+0x1f0>)
 8006346:	4013      	ands	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b06      	cmp	r3, #6
 800634e:	d015      	beq.n	800637c <HAL_TIM_PWM_Start+0x1c8>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006356:	d011      	beq.n	800637c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006368:	e008      	b.n	800637c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0201 	orr.w	r2, r2, #1
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	e000      	b.n	800637e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40010000 	.word	0x40010000
 800638c:	40010400 	.word	0x40010400
 8006390:	40000400 	.word	0x40000400
 8006394:	40000800 	.word	0x40000800
 8006398:	40000c00 	.word	0x40000c00
 800639c:	40014000 	.word	0x40014000
 80063a0:	40001800 	.word	0x40001800
 80063a4:	00010007 	.word	0x00010007

080063a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d122      	bne.n	8006404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d11b      	bne.n	8006404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0202 	mvn.w	r2, #2
 80063d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fae4 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fad6 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fae7 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b04      	cmp	r3, #4
 8006410:	d122      	bne.n	8006458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b04      	cmp	r3, #4
 800641e:	d11b      	bne.n	8006458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0204 	mvn.w	r2, #4
 8006428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 faba 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 8006444:	e005      	b.n	8006452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 faac 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fabd 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b08      	cmp	r3, #8
 8006464:	d122      	bne.n	80064ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 0308 	and.w	r3, r3, #8
 8006470:	2b08      	cmp	r3, #8
 8006472:	d11b      	bne.n	80064ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0208 	mvn.w	r2, #8
 800647c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2204      	movs	r2, #4
 8006482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa90 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 8006498:	e005      	b.n	80064a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa82 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fa93 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b10      	cmp	r3, #16
 80064b8:	d122      	bne.n	8006500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d11b      	bne.n	8006500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0210 	mvn.w	r2, #16
 80064d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2208      	movs	r2, #8
 80064d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fa66 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 80064ec:	e005      	b.n	80064fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fa58 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fa69 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b01      	cmp	r3, #1
 800650c:	d10e      	bne.n	800652c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d107      	bne.n	800652c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0201 	mvn.w	r2, #1
 8006524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fc f946 	bl	80027b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006536:	2b80      	cmp	r3, #128	; 0x80
 8006538:	d10e      	bne.n	8006558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006544:	2b80      	cmp	r3, #128	; 0x80
 8006546:	d107      	bne.n	8006558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fea4 	bl	80072a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006566:	d10e      	bne.n	8006586 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d107      	bne.n	8006586 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800657e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fe97 	bl	80072b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	d10e      	bne.n	80065b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d107      	bne.n	80065b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa17 	bl	80069e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d10e      	bne.n	80065de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d107      	bne.n	80065de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f06f 0220 	mvn.w	r2, #32
 80065d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fe57 	bl	800728c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006602:	2302      	movs	r3, #2
 8006604:	e0ff      	b.n	8006806 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b14      	cmp	r3, #20
 8006612:	f200 80f0 	bhi.w	80067f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006671 	.word	0x08006671
 8006620:	080067f7 	.word	0x080067f7
 8006624:	080067f7 	.word	0x080067f7
 8006628:	080067f7 	.word	0x080067f7
 800662c:	080066b1 	.word	0x080066b1
 8006630:	080067f7 	.word	0x080067f7
 8006634:	080067f7 	.word	0x080067f7
 8006638:	080067f7 	.word	0x080067f7
 800663c:	080066f3 	.word	0x080066f3
 8006640:	080067f7 	.word	0x080067f7
 8006644:	080067f7 	.word	0x080067f7
 8006648:	080067f7 	.word	0x080067f7
 800664c:	08006733 	.word	0x08006733
 8006650:	080067f7 	.word	0x080067f7
 8006654:	080067f7 	.word	0x080067f7
 8006658:	080067f7 	.word	0x080067f7
 800665c:	08006775 	.word	0x08006775
 8006660:	080067f7 	.word	0x080067f7
 8006664:	080067f7 	.word	0x080067f7
 8006668:	080067f7 	.word	0x080067f7
 800666c:	080067b5 	.word	0x080067b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fa5c 	bl	8006b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0208 	orr.w	r2, r2, #8
 800668a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0204 	bic.w	r2, r2, #4
 800669a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6999      	ldr	r1, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	619a      	str	r2, [r3, #24]
      break;
 80066ae:	e0a5      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 faae 	bl	8006c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6999      	ldr	r1, [r3, #24]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	021a      	lsls	r2, r3, #8
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	619a      	str	r2, [r3, #24]
      break;
 80066f0:	e084      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fb05 	bl	8006d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0208 	orr.w	r2, r2, #8
 800670c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0204 	bic.w	r2, r2, #4
 800671c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69d9      	ldr	r1, [r3, #28]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	61da      	str	r2, [r3, #28]
      break;
 8006730:	e064      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fb5b 	bl	8006df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69da      	ldr	r2, [r3, #28]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800674c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800675c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69d9      	ldr	r1, [r3, #28]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	021a      	lsls	r2, r3, #8
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	61da      	str	r2, [r3, #28]
      break;
 8006772:	e043      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fb92 	bl	8006ea4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0208 	orr.w	r2, r2, #8
 800678e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0204 	bic.w	r2, r2, #4
 800679e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067b2:	e023      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fbc4 	bl	8006f48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	021a      	lsls	r2, r3, #8
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067f4:	e002      	b.n	80067fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
      break;
 80067fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop

08006810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_TIM_ConfigClockSource+0x1c>
 8006828:	2302      	movs	r3, #2
 800682a:	e0b4      	b.n	8006996 <HAL_TIM_ConfigClockSource+0x186>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	4b56      	ldr	r3, [pc, #344]	; (80069a0 <HAL_TIM_ConfigClockSource+0x190>)
 8006848:	4013      	ands	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006864:	d03e      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686a:	f200 8087 	bhi.w	800697c <HAL_TIM_ConfigClockSource+0x16c>
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	f000 8086 	beq.w	8006982 <HAL_TIM_ConfigClockSource+0x172>
 8006876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687a:	d87f      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x16c>
 800687c:	2b70      	cmp	r3, #112	; 0x70
 800687e:	d01a      	beq.n	80068b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006880:	2b70      	cmp	r3, #112	; 0x70
 8006882:	d87b      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x16c>
 8006884:	2b60      	cmp	r3, #96	; 0x60
 8006886:	d050      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x11a>
 8006888:	2b60      	cmp	r3, #96	; 0x60
 800688a:	d877      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x16c>
 800688c:	2b50      	cmp	r3, #80	; 0x50
 800688e:	d03c      	beq.n	800690a <HAL_TIM_ConfigClockSource+0xfa>
 8006890:	2b50      	cmp	r3, #80	; 0x50
 8006892:	d873      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x16c>
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	d058      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x13a>
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d86f      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x16c>
 800689c:	2b30      	cmp	r3, #48	; 0x30
 800689e:	d064      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x15a>
 80068a0:	2b30      	cmp	r3, #48	; 0x30
 80068a2:	d86b      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x16c>
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d060      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x15a>
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d867      	bhi.n	800697c <HAL_TIM_ConfigClockSource+0x16c>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d05c      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x15a>
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d05a      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x15a>
 80068b4:	e062      	b.n	800697c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6818      	ldr	r0, [r3, #0]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	6899      	ldr	r1, [r3, #8]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f000 fc0d 	bl	80070e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	609a      	str	r2, [r3, #8]
      break;
 80068e2:	e04f      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	6899      	ldr	r1, [r3, #8]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f000 fbf6 	bl	80070e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006906:	609a      	str	r2, [r3, #8]
      break;
 8006908:	e03c      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6818      	ldr	r0, [r3, #0]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	6859      	ldr	r1, [r3, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	461a      	mov	r2, r3
 8006918:	f000 fb6a 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2150      	movs	r1, #80	; 0x50
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fbc3 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006928:	e02c      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	461a      	mov	r2, r3
 8006938:	f000 fb89 	bl	800704e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2160      	movs	r1, #96	; 0x60
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fbb3 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006948:	e01c      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	461a      	mov	r2, r3
 8006958:	f000 fb4a 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2140      	movs	r1, #64	; 0x40
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fba3 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006968:	e00c      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f000 fb9a 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 800697a:	e003      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
      break;
 8006980:	e000      	b.n	8006984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	fffeff88 	.word	0xfffeff88

080069a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a40      	ldr	r2, [pc, #256]	; (8006b08 <TIM_Base_SetConfig+0x114>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d013      	beq.n	8006a34 <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a12:	d00f      	beq.n	8006a34 <TIM_Base_SetConfig+0x40>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a3d      	ldr	r2, [pc, #244]	; (8006b0c <TIM_Base_SetConfig+0x118>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00b      	beq.n	8006a34 <TIM_Base_SetConfig+0x40>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a3c      	ldr	r2, [pc, #240]	; (8006b10 <TIM_Base_SetConfig+0x11c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d007      	beq.n	8006a34 <TIM_Base_SetConfig+0x40>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a3b      	ldr	r2, [pc, #236]	; (8006b14 <TIM_Base_SetConfig+0x120>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_Base_SetConfig+0x40>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a3a      	ldr	r2, [pc, #232]	; (8006b18 <TIM_Base_SetConfig+0x124>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d108      	bne.n	8006a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2f      	ldr	r2, [pc, #188]	; (8006b08 <TIM_Base_SetConfig+0x114>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d02b      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a54:	d027      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a2c      	ldr	r2, [pc, #176]	; (8006b0c <TIM_Base_SetConfig+0x118>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d023      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a2b      	ldr	r2, [pc, #172]	; (8006b10 <TIM_Base_SetConfig+0x11c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d01f      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <TIM_Base_SetConfig+0x120>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01b      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a29      	ldr	r2, [pc, #164]	; (8006b18 <TIM_Base_SetConfig+0x124>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d017      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a28      	ldr	r2, [pc, #160]	; (8006b1c <TIM_Base_SetConfig+0x128>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a27      	ldr	r2, [pc, #156]	; (8006b20 <TIM_Base_SetConfig+0x12c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00f      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a26      	ldr	r2, [pc, #152]	; (8006b24 <TIM_Base_SetConfig+0x130>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00b      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a25      	ldr	r2, [pc, #148]	; (8006b28 <TIM_Base_SetConfig+0x134>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d007      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a24      	ldr	r2, [pc, #144]	; (8006b2c <TIM_Base_SetConfig+0x138>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d003      	beq.n	8006aa6 <TIM_Base_SetConfig+0xb2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a23      	ldr	r2, [pc, #140]	; (8006b30 <TIM_Base_SetConfig+0x13c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d108      	bne.n	8006ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <TIM_Base_SetConfig+0x114>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d003      	beq.n	8006aec <TIM_Base_SetConfig+0xf8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a0c      	ldr	r2, [pc, #48]	; (8006b18 <TIM_Base_SetConfig+0x124>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d103      	bne.n	8006af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	615a      	str	r2, [r3, #20]
}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40000400 	.word	0x40000400
 8006b10:	40000800 	.word	0x40000800
 8006b14:	40000c00 	.word	0x40000c00
 8006b18:	40010400 	.word	0x40010400
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40014400 	.word	0x40014400
 8006b24:	40014800 	.word	0x40014800
 8006b28:	40001800 	.word	0x40001800
 8006b2c:	40001c00 	.word	0x40001c00
 8006b30:	40002000 	.word	0x40002000

08006b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	f023 0201 	bic.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <TIM_OC1_SetConfig+0xd8>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0303 	bic.w	r3, r3, #3
 8006b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f023 0302 	bic.w	r3, r3, #2
 8006b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a21      	ldr	r2, [pc, #132]	; (8006c10 <TIM_OC1_SetConfig+0xdc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC1_SetConfig+0x64>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a20      	ldr	r2, [pc, #128]	; (8006c14 <TIM_OC1_SetConfig+0xe0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10c      	bne.n	8006bb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0308 	bic.w	r3, r3, #8
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f023 0304 	bic.w	r3, r3, #4
 8006bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a16      	ldr	r2, [pc, #88]	; (8006c10 <TIM_OC1_SetConfig+0xdc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d003      	beq.n	8006bc2 <TIM_OC1_SetConfig+0x8e>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a15      	ldr	r2, [pc, #84]	; (8006c14 <TIM_OC1_SetConfig+0xe0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d111      	bne.n	8006be6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	621a      	str	r2, [r3, #32]
}
 8006c00:	bf00      	nop
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	fffeff8f 	.word	0xfffeff8f
 8006c10:	40010000 	.word	0x40010000
 8006c14:	40010400 	.word	0x40010400

08006c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f023 0210 	bic.w	r2, r3, #16
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4b2e      	ldr	r3, [pc, #184]	; (8006cfc <TIM_OC2_SetConfig+0xe4>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0320 	bic.w	r3, r3, #32
 8006c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a23      	ldr	r2, [pc, #140]	; (8006d00 <TIM_OC2_SetConfig+0xe8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d003      	beq.n	8006c80 <TIM_OC2_SetConfig+0x68>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a22      	ldr	r2, [pc, #136]	; (8006d04 <TIM_OC2_SetConfig+0xec>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d10d      	bne.n	8006c9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a18      	ldr	r2, [pc, #96]	; (8006d00 <TIM_OC2_SetConfig+0xe8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d003      	beq.n	8006cac <TIM_OC2_SetConfig+0x94>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <TIM_OC2_SetConfig+0xec>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d113      	bne.n	8006cd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	feff8fff 	.word	0xfeff8fff
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40010400 	.word	0x40010400

08006d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <TIM_OC3_SetConfig+0xe0>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a22      	ldr	r2, [pc, #136]	; (8006dec <TIM_OC3_SetConfig+0xe4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_OC3_SetConfig+0x66>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a21      	ldr	r2, [pc, #132]	; (8006df0 <TIM_OC3_SetConfig+0xe8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10d      	bne.n	8006d8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a17      	ldr	r2, [pc, #92]	; (8006dec <TIM_OC3_SetConfig+0xe4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d003      	beq.n	8006d9a <TIM_OC3_SetConfig+0x92>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a16      	ldr	r2, [pc, #88]	; (8006df0 <TIM_OC3_SetConfig+0xe8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d113      	bne.n	8006dc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	621a      	str	r2, [r3, #32]
}
 8006ddc:	bf00      	nop
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	fffeff8f 	.word	0xfffeff8f
 8006dec:	40010000 	.word	0x40010000
 8006df0:	40010400 	.word	0x40010400

08006df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4b1e      	ldr	r3, [pc, #120]	; (8006e98 <TIM_OC4_SetConfig+0xa4>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	031b      	lsls	r3, r3, #12
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <TIM_OC4_SetConfig+0xa8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_OC4_SetConfig+0x68>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a12      	ldr	r2, [pc, #72]	; (8006ea0 <TIM_OC4_SetConfig+0xac>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d109      	bne.n	8006e70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	019b      	lsls	r3, r3, #6
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	feff8fff 	.word	0xfeff8fff
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	40010400 	.word	0x40010400

08006ea4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <TIM_OC5_SetConfig+0x98>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ee4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a12      	ldr	r2, [pc, #72]	; (8006f40 <TIM_OC5_SetConfig+0x9c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d003      	beq.n	8006f02 <TIM_OC5_SetConfig+0x5e>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a11      	ldr	r2, [pc, #68]	; (8006f44 <TIM_OC5_SetConfig+0xa0>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d109      	bne.n	8006f16 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	621a      	str	r2, [r3, #32]
}
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	fffeff8f 	.word	0xfffeff8f
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40010400 	.word	0x40010400

08006f48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <TIM_OC6_SetConfig+0x9c>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	051b      	lsls	r3, r3, #20
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a13      	ldr	r2, [pc, #76]	; (8006fe8 <TIM_OC6_SetConfig+0xa0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC6_SetConfig+0x60>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a12      	ldr	r2, [pc, #72]	; (8006fec <TIM_OC6_SetConfig+0xa4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d109      	bne.n	8006fbc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	029b      	lsls	r3, r3, #10
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	feff8fff 	.word	0xfeff8fff
 8006fe8:	40010000 	.word	0x40010000
 8006fec:	40010400 	.word	0x40010400

08006ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0201 	bic.w	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f023 030a 	bic.w	r3, r3, #10
 800702c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704e:	b480      	push	{r7}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f023 0210 	bic.w	r2, r3, #16
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	031b      	lsls	r3, r3, #12
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800708a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f043 0307 	orr.w	r3, r3, #7
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	609a      	str	r2, [r3, #8]
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	021a      	lsls	r2, r3, #8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	431a      	orrs	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	4313      	orrs	r3, r2
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	609a      	str	r2, [r3, #8]
}
 8007118:	bf00      	nop
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2201      	movs	r2, #1
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	43db      	mvns	r3, r3
 8007146:	401a      	ands	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1a      	ldr	r2, [r3, #32]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	fa01 f303 	lsl.w	r3, r1, r3
 800715c:	431a      	orrs	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007184:	2302      	movs	r3, #2
 8007186:	e06d      	b.n	8007264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a30      	ldr	r2, [pc, #192]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a2f      	ldr	r2, [pc, #188]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d108      	bne.n	80071ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a20      	ldr	r2, [pc, #128]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d022      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fa:	d01d      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1d      	ldr	r2, [pc, #116]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d018      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1c      	ldr	r2, [pc, #112]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d013      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1a      	ldr	r2, [pc, #104]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00e      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a15      	ldr	r2, [pc, #84]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d009      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d004      	beq.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a15      	ldr	r2, [pc, #84]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d10c      	bne.n	8007252 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800723e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	4313      	orrs	r3, r2
 8007248:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40014000 	.word	0x40014000
 8007288:	40001800 	.word	0x40001800

0800728c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e040      	b.n	800735c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fb fe30 	bl	8002f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2224      	movs	r2, #36	; 0x24
 80072f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0201 	bic.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fbf8 	bl	8007afc <UART_SetConfig>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e022      	b.n	800735c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fe4e 	bl	8007fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fed5 	bl	8008104 <UART_CheckIdleState>
 800735a:	4603      	mov	r3, r0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007378:	2b20      	cmp	r3, #32
 800737a:	f040 8081 	bne.w	8007480 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <HAL_UART_Transmit+0x26>
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e079      	b.n	8007482 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <HAL_UART_Transmit+0x38>
 8007398:	2302      	movs	r3, #2
 800739a:	e072      	b.n	8007482 <HAL_UART_Transmit+0x11e>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2221      	movs	r2, #33	; 0x21
 80073b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073b2:	f7fb ff57 	bl	8003264 <HAL_GetTick>
 80073b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	88fa      	ldrh	r2, [r7, #6]
 80073bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	88fa      	ldrh	r2, [r7, #6]
 80073c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d0:	d108      	bne.n	80073e4 <HAL_UART_Transmit+0x80>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	e003      	b.n	80073ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80073f4:	e02c      	b.n	8007450 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2200      	movs	r2, #0
 80073fe:	2180      	movs	r1, #128	; 0x80
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 feb2 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e038      	b.n	8007482 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007424:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	3302      	adds	r3, #2
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	e007      	b.n	800743e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	3301      	adds	r3, #1
 800743c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007444:	b29b      	uxth	r3, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1cc      	bne.n	80073f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2200      	movs	r2, #0
 8007464:	2140      	movs	r1, #64	; 0x40
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fe7f 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e005      	b.n	8007482 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2220      	movs	r2, #32
 800747a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	e000      	b.n	8007482 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	3720      	adds	r7, #32
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b08a      	sub	sp, #40	; 0x28
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	4613      	mov	r3, r2
 8007496:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749c:	2b20      	cmp	r3, #32
 800749e:	d13d      	bne.n	800751c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <HAL_UART_Receive_IT+0x22>
 80074a6:	88fb      	ldrh	r3, [r7, #6]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e036      	b.n	800751e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <HAL_UART_Receive_IT+0x34>
 80074ba:	2302      	movs	r3, #2
 80074bc:	e02f      	b.n	800751e <HAL_UART_Receive_IT+0x94>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d018      	beq.n	800750c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	613b      	str	r3, [r7, #16]
   return(result);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	623b      	str	r3, [r7, #32]
 80074fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	69f9      	ldr	r1, [r7, #28]
 80074fe:	6a3a      	ldr	r2, [r7, #32]
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	61bb      	str	r3, [r7, #24]
   return(result);
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e6      	bne.n	80074da <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	461a      	mov	r2, r3
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 feee 	bl	80082f4 <UART_Start_Receive_IT>
 8007518:	4603      	mov	r3, r0
 800751a:	e000      	b.n	800751e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800751c:	2302      	movs	r3, #2
  }
}
 800751e:	4618      	mov	r0, r3
 8007520:	3728      	adds	r7, #40	; 0x28
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b0ba      	sub	sp, #232	; 0xe8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800754e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007552:	f640 030f 	movw	r3, #2063	; 0x80f
 8007556:	4013      	ands	r3, r2
 8007558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800755c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d115      	bne.n	8007590 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00f      	beq.n	8007590 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d009      	beq.n	8007590 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 828f 	beq.w	8007aa4 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
      }
      return;
 800758e:	e289      	b.n	8007aa4 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 8117 	beq.w	80077c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800759a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075aa:	4b85      	ldr	r3, [pc, #532]	; (80077c0 <HAL_UART_IRQHandler+0x298>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 810a 	beq.w	80077c8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d011      	beq.n	80075e4 <HAL_UART_IRQHandler+0xbc>
 80075c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2201      	movs	r2, #1
 80075d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075da:	f043 0201 	orr.w	r2, r3, #1
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d011      	beq.n	8007614 <HAL_UART_IRQHandler+0xec>
 80075f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2202      	movs	r2, #2
 8007602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800760a:	f043 0204 	orr.w	r2, r3, #4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d011      	beq.n	8007644 <HAL_UART_IRQHandler+0x11c>
 8007620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2204      	movs	r2, #4
 8007632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800763a:	f043 0202 	orr.w	r2, r3, #2
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b00      	cmp	r3, #0
 800764e:	d017      	beq.n	8007680 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d105      	bne.n	8007668 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800765c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007660:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00b      	beq.n	8007680 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2208      	movs	r2, #8
 800766e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007676:	f043 0208 	orr.w	r2, r3, #8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007688:	2b00      	cmp	r3, #0
 800768a:	d012      	beq.n	80076b2 <HAL_UART_IRQHandler+0x18a>
 800768c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007690:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00c      	beq.n	80076b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a8:	f043 0220 	orr.w	r2, r3, #32
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 81f5 	beq.w	8007aa8 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00d      	beq.n	80076e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d007      	beq.n	80076e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d005      	beq.n	800770a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007706:	2b00      	cmp	r3, #0
 8007708:	d04f      	beq.n	80077aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 febc 	bl	8008488 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d141      	bne.n	80077a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800773c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800774a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800774e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1d9      	bne.n	800771e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776e:	2b00      	cmp	r3, #0
 8007770:	d013      	beq.n	800779a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007776:	4a13      	ldr	r2, [pc, #76]	; (80077c4 <HAL_UART_IRQHandler+0x29c>)
 8007778:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777e:	4618      	mov	r0, r3
 8007780:	f7fb ff21 	bl	80035c6 <HAL_DMA_Abort_IT>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d017      	beq.n	80077ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007798:	e00f      	b.n	80077ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f998 	bl	8007ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	e00b      	b.n	80077ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f994 	bl	8007ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a8:	e007      	b.n	80077ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f990 	bl	8007ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80077b8:	e176      	b.n	8007aa8 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ba:	bf00      	nop
    return;
 80077bc:	e174      	b.n	8007aa8 <HAL_UART_IRQHandler+0x580>
 80077be:	bf00      	nop
 80077c0:	04000120 	.word	0x04000120
 80077c4:	0800854f 	.word	0x0800854f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	f040 8144 	bne.w	8007a5a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f000 813d 	beq.w	8007a5a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e4:	f003 0310 	and.w	r3, r3, #16
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8136 	beq.w	8007a5a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2210      	movs	r2, #16
 80077f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	f040 80b2 	bne.w	800796a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007812:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8148 	beq.w	8007aac <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007826:	429a      	cmp	r2, r3
 8007828:	f080 8140 	bcs.w	8007aac <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007840:	f000 8085 	beq.w	800794e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800785c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800786e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007872:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800787a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1da      	bne.n	8007844 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800789e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078a0:	f023 0301 	bic.w	r3, r3, #1
 80078a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3308      	adds	r3, #8
 80078ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80078b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80078ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e1      	bne.n	800788e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3308      	adds	r3, #8
 80078ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e3      	bne.n	80078ca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007916:	e853 3f00 	ldrex	r3, [r3]
 800791a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800791c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800791e:	f023 0310 	bic.w	r3, r3, #16
 8007922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007930:	65bb      	str	r3, [r7, #88]	; 0x58
 8007932:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007938:	e841 2300 	strex	r3, r2, [r1]
 800793c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800793e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e4      	bne.n	800790e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007948:	4618      	mov	r0, r3
 800794a:	f7fb fdcc 	bl	80034e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800795a:	b29b      	uxth	r3, r3
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	b29b      	uxth	r3, r3
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8be 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007968:	e0a0      	b.n	8007aac <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007976:	b29b      	uxth	r3, r3
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 8092 	beq.w	8007ab0 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800798c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 808d 	beq.w	8007ab0 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079b8:	647b      	str	r3, [r7, #68]	; 0x44
 80079ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e4      	bne.n	8007996 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	623b      	str	r3, [r7, #32]
   return(result);
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	f023 0301 	bic.w	r3, r3, #1
 80079e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079f0:	633a      	str	r2, [r7, #48]	; 0x30
 80079f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e3      	bne.n	80079cc <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0310 	bic.w	r3, r3, #16
 8007a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a38:	61fb      	str	r3, [r7, #28]
 8007a3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	69b9      	ldr	r1, [r7, #24]
 8007a3e:	69fa      	ldr	r2, [r7, #28]
 8007a40:	e841 2300 	strex	r3, r2, [r1]
 8007a44:	617b      	str	r3, [r7, #20]
   return(result);
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1e4      	bne.n	8007a16 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f846 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a58:	e02a      	b.n	8007ab0 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00e      	beq.n	8007a84 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d008      	beq.n	8007a84 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01c      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
    }
    return;
 8007a82:	e017      	b.n	8007ab4 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d012      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x58e>
 8007a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00c      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fd6c 	bl	800857a <UART_EndTransmit_IT>
    return;
 8007aa2:	e008      	b.n	8007ab6 <HAL_UART_IRQHandler+0x58e>
      return;
 8007aa4:	bf00      	nop
 8007aa6:	e006      	b.n	8007ab6 <HAL_UART_IRQHandler+0x58e>
    return;
 8007aa8:	bf00      	nop
 8007aaa:	e004      	b.n	8007ab6 <HAL_UART_IRQHandler+0x58e>
      return;
 8007aac:	bf00      	nop
 8007aae:	e002      	b.n	8007ab6 <HAL_UART_IRQHandler+0x58e>
      return;
 8007ab0:	bf00      	nop
 8007ab2:	e000      	b.n	8007ab6 <HAL_UART_IRQHandler+0x58e>
    return;
 8007ab4:	bf00      	nop
  }

}
 8007ab6:	37e8      	adds	r7, #232	; 0xe8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4ba7      	ldr	r3, [pc, #668]	; (8007dc4 <UART_SetConfig+0x2c8>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	6979      	ldr	r1, [r7, #20]
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a95      	ldr	r2, [pc, #596]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d120      	bne.n	8007bba <UART_SetConfig+0xbe>
 8007b78:	4b94      	ldr	r3, [pc, #592]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d816      	bhi.n	8007bb4 <UART_SetConfig+0xb8>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <UART_SetConfig+0x90>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007b9d 	.word	0x08007b9d
 8007b90:	08007ba9 	.word	0x08007ba9
 8007b94:	08007ba3 	.word	0x08007ba3
 8007b98:	08007baf 	.word	0x08007baf
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	77fb      	strb	r3, [r7, #31]
 8007ba0:	e14f      	b.n	8007e42 <UART_SetConfig+0x346>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	77fb      	strb	r3, [r7, #31]
 8007ba6:	e14c      	b.n	8007e42 <UART_SetConfig+0x346>
 8007ba8:	2304      	movs	r3, #4
 8007baa:	77fb      	strb	r3, [r7, #31]
 8007bac:	e149      	b.n	8007e42 <UART_SetConfig+0x346>
 8007bae:	2308      	movs	r3, #8
 8007bb0:	77fb      	strb	r3, [r7, #31]
 8007bb2:	e146      	b.n	8007e42 <UART_SetConfig+0x346>
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	77fb      	strb	r3, [r7, #31]
 8007bb8:	e143      	b.n	8007e42 <UART_SetConfig+0x346>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a84      	ldr	r2, [pc, #528]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d132      	bne.n	8007c2a <UART_SetConfig+0x12e>
 8007bc4:	4b81      	ldr	r3, [pc, #516]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bca:	f003 030c 	and.w	r3, r3, #12
 8007bce:	2b0c      	cmp	r3, #12
 8007bd0:	d828      	bhi.n	8007c24 <UART_SetConfig+0x128>
 8007bd2:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <UART_SetConfig+0xdc>)
 8007bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd8:	08007c0d 	.word	0x08007c0d
 8007bdc:	08007c25 	.word	0x08007c25
 8007be0:	08007c25 	.word	0x08007c25
 8007be4:	08007c25 	.word	0x08007c25
 8007be8:	08007c19 	.word	0x08007c19
 8007bec:	08007c25 	.word	0x08007c25
 8007bf0:	08007c25 	.word	0x08007c25
 8007bf4:	08007c25 	.word	0x08007c25
 8007bf8:	08007c13 	.word	0x08007c13
 8007bfc:	08007c25 	.word	0x08007c25
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c25 	.word	0x08007c25
 8007c08:	08007c1f 	.word	0x08007c1f
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	77fb      	strb	r3, [r7, #31]
 8007c10:	e117      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c12:	2302      	movs	r3, #2
 8007c14:	77fb      	strb	r3, [r7, #31]
 8007c16:	e114      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c18:	2304      	movs	r3, #4
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	e111      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c1e:	2308      	movs	r3, #8
 8007c20:	77fb      	strb	r3, [r7, #31]
 8007c22:	e10e      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c24:	2310      	movs	r3, #16
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e10b      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a69      	ldr	r2, [pc, #420]	; (8007dd4 <UART_SetConfig+0x2d8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d120      	bne.n	8007c76 <UART_SetConfig+0x17a>
 8007c34:	4b65      	ldr	r3, [pc, #404]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c3e:	2b30      	cmp	r3, #48	; 0x30
 8007c40:	d013      	beq.n	8007c6a <UART_SetConfig+0x16e>
 8007c42:	2b30      	cmp	r3, #48	; 0x30
 8007c44:	d814      	bhi.n	8007c70 <UART_SetConfig+0x174>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d009      	beq.n	8007c5e <UART_SetConfig+0x162>
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d810      	bhi.n	8007c70 <UART_SetConfig+0x174>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <UART_SetConfig+0x15c>
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d006      	beq.n	8007c64 <UART_SetConfig+0x168>
 8007c56:	e00b      	b.n	8007c70 <UART_SetConfig+0x174>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e0f1      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	77fb      	strb	r3, [r7, #31]
 8007c62:	e0ee      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c64:	2304      	movs	r3, #4
 8007c66:	77fb      	strb	r3, [r7, #31]
 8007c68:	e0eb      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c6a:	2308      	movs	r3, #8
 8007c6c:	77fb      	strb	r3, [r7, #31]
 8007c6e:	e0e8      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c70:	2310      	movs	r3, #16
 8007c72:	77fb      	strb	r3, [r7, #31]
 8007c74:	e0e5      	b.n	8007e42 <UART_SetConfig+0x346>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a57      	ldr	r2, [pc, #348]	; (8007dd8 <UART_SetConfig+0x2dc>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d120      	bne.n	8007cc2 <UART_SetConfig+0x1c6>
 8007c80:	4b52      	ldr	r3, [pc, #328]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c8c:	d013      	beq.n	8007cb6 <UART_SetConfig+0x1ba>
 8007c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c90:	d814      	bhi.n	8007cbc <UART_SetConfig+0x1c0>
 8007c92:	2b80      	cmp	r3, #128	; 0x80
 8007c94:	d009      	beq.n	8007caa <UART_SetConfig+0x1ae>
 8007c96:	2b80      	cmp	r3, #128	; 0x80
 8007c98:	d810      	bhi.n	8007cbc <UART_SetConfig+0x1c0>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <UART_SetConfig+0x1a8>
 8007c9e:	2b40      	cmp	r3, #64	; 0x40
 8007ca0:	d006      	beq.n	8007cb0 <UART_SetConfig+0x1b4>
 8007ca2:	e00b      	b.n	8007cbc <UART_SetConfig+0x1c0>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e0cb      	b.n	8007e42 <UART_SetConfig+0x346>
 8007caa:	2302      	movs	r3, #2
 8007cac:	77fb      	strb	r3, [r7, #31]
 8007cae:	e0c8      	b.n	8007e42 <UART_SetConfig+0x346>
 8007cb0:	2304      	movs	r3, #4
 8007cb2:	77fb      	strb	r3, [r7, #31]
 8007cb4:	e0c5      	b.n	8007e42 <UART_SetConfig+0x346>
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	77fb      	strb	r3, [r7, #31]
 8007cba:	e0c2      	b.n	8007e42 <UART_SetConfig+0x346>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	77fb      	strb	r3, [r7, #31]
 8007cc0:	e0bf      	b.n	8007e42 <UART_SetConfig+0x346>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a45      	ldr	r2, [pc, #276]	; (8007ddc <UART_SetConfig+0x2e0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d125      	bne.n	8007d18 <UART_SetConfig+0x21c>
 8007ccc:	4b3f      	ldr	r3, [pc, #252]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cda:	d017      	beq.n	8007d0c <UART_SetConfig+0x210>
 8007cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ce0:	d817      	bhi.n	8007d12 <UART_SetConfig+0x216>
 8007ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce6:	d00b      	beq.n	8007d00 <UART_SetConfig+0x204>
 8007ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cec:	d811      	bhi.n	8007d12 <UART_SetConfig+0x216>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <UART_SetConfig+0x1fe>
 8007cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf6:	d006      	beq.n	8007d06 <UART_SetConfig+0x20a>
 8007cf8:	e00b      	b.n	8007d12 <UART_SetConfig+0x216>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e0a0      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d00:	2302      	movs	r3, #2
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e09d      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d06:	2304      	movs	r3, #4
 8007d08:	77fb      	strb	r3, [r7, #31]
 8007d0a:	e09a      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d0c:	2308      	movs	r3, #8
 8007d0e:	77fb      	strb	r3, [r7, #31]
 8007d10:	e097      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d12:	2310      	movs	r3, #16
 8007d14:	77fb      	strb	r3, [r7, #31]
 8007d16:	e094      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a30      	ldr	r2, [pc, #192]	; (8007de0 <UART_SetConfig+0x2e4>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d125      	bne.n	8007d6e <UART_SetConfig+0x272>
 8007d22:	4b2a      	ldr	r3, [pc, #168]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d30:	d017      	beq.n	8007d62 <UART_SetConfig+0x266>
 8007d32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d36:	d817      	bhi.n	8007d68 <UART_SetConfig+0x26c>
 8007d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d3c:	d00b      	beq.n	8007d56 <UART_SetConfig+0x25a>
 8007d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d42:	d811      	bhi.n	8007d68 <UART_SetConfig+0x26c>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <UART_SetConfig+0x254>
 8007d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d4c:	d006      	beq.n	8007d5c <UART_SetConfig+0x260>
 8007d4e:	e00b      	b.n	8007d68 <UART_SetConfig+0x26c>
 8007d50:	2301      	movs	r3, #1
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e075      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d56:	2302      	movs	r3, #2
 8007d58:	77fb      	strb	r3, [r7, #31]
 8007d5a:	e072      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d5c:	2304      	movs	r3, #4
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e06f      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d62:	2308      	movs	r3, #8
 8007d64:	77fb      	strb	r3, [r7, #31]
 8007d66:	e06c      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d68:	2310      	movs	r3, #16
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e069      	b.n	8007e42 <UART_SetConfig+0x346>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1c      	ldr	r2, [pc, #112]	; (8007de4 <UART_SetConfig+0x2e8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d137      	bne.n	8007de8 <UART_SetConfig+0x2ec>
 8007d78:	4b14      	ldr	r3, [pc, #80]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d86:	d017      	beq.n	8007db8 <UART_SetConfig+0x2bc>
 8007d88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d8c:	d817      	bhi.n	8007dbe <UART_SetConfig+0x2c2>
 8007d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d92:	d00b      	beq.n	8007dac <UART_SetConfig+0x2b0>
 8007d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d98:	d811      	bhi.n	8007dbe <UART_SetConfig+0x2c2>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <UART_SetConfig+0x2aa>
 8007d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da2:	d006      	beq.n	8007db2 <UART_SetConfig+0x2b6>
 8007da4:	e00b      	b.n	8007dbe <UART_SetConfig+0x2c2>
 8007da6:	2300      	movs	r3, #0
 8007da8:	77fb      	strb	r3, [r7, #31]
 8007daa:	e04a      	b.n	8007e42 <UART_SetConfig+0x346>
 8007dac:	2302      	movs	r3, #2
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e047      	b.n	8007e42 <UART_SetConfig+0x346>
 8007db2:	2304      	movs	r3, #4
 8007db4:	77fb      	strb	r3, [r7, #31]
 8007db6:	e044      	b.n	8007e42 <UART_SetConfig+0x346>
 8007db8:	2308      	movs	r3, #8
 8007dba:	77fb      	strb	r3, [r7, #31]
 8007dbc:	e041      	b.n	8007e42 <UART_SetConfig+0x346>
 8007dbe:	2310      	movs	r3, #16
 8007dc0:	77fb      	strb	r3, [r7, #31]
 8007dc2:	e03e      	b.n	8007e42 <UART_SetConfig+0x346>
 8007dc4:	efff69f3 	.word	0xefff69f3
 8007dc8:	40011000 	.word	0x40011000
 8007dcc:	40023800 	.word	0x40023800
 8007dd0:	40004400 	.word	0x40004400
 8007dd4:	40004800 	.word	0x40004800
 8007dd8:	40004c00 	.word	0x40004c00
 8007ddc:	40005000 	.word	0x40005000
 8007de0:	40011400 	.word	0x40011400
 8007de4:	40007800 	.word	0x40007800
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a71      	ldr	r2, [pc, #452]	; (8007fb4 <UART_SetConfig+0x4b8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d125      	bne.n	8007e3e <UART_SetConfig+0x342>
 8007df2:	4b71      	ldr	r3, [pc, #452]	; (8007fb8 <UART_SetConfig+0x4bc>)
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dfc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e00:	d017      	beq.n	8007e32 <UART_SetConfig+0x336>
 8007e02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e06:	d817      	bhi.n	8007e38 <UART_SetConfig+0x33c>
 8007e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e0c:	d00b      	beq.n	8007e26 <UART_SetConfig+0x32a>
 8007e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e12:	d811      	bhi.n	8007e38 <UART_SetConfig+0x33c>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <UART_SetConfig+0x324>
 8007e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1c:	d006      	beq.n	8007e2c <UART_SetConfig+0x330>
 8007e1e:	e00b      	b.n	8007e38 <UART_SetConfig+0x33c>
 8007e20:	2300      	movs	r3, #0
 8007e22:	77fb      	strb	r3, [r7, #31]
 8007e24:	e00d      	b.n	8007e42 <UART_SetConfig+0x346>
 8007e26:	2302      	movs	r3, #2
 8007e28:	77fb      	strb	r3, [r7, #31]
 8007e2a:	e00a      	b.n	8007e42 <UART_SetConfig+0x346>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	77fb      	strb	r3, [r7, #31]
 8007e30:	e007      	b.n	8007e42 <UART_SetConfig+0x346>
 8007e32:	2308      	movs	r3, #8
 8007e34:	77fb      	strb	r3, [r7, #31]
 8007e36:	e004      	b.n	8007e42 <UART_SetConfig+0x346>
 8007e38:	2310      	movs	r3, #16
 8007e3a:	77fb      	strb	r3, [r7, #31]
 8007e3c:	e001      	b.n	8007e42 <UART_SetConfig+0x346>
 8007e3e:	2310      	movs	r3, #16
 8007e40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e4a:	d15a      	bne.n	8007f02 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007e4c:	7ffb      	ldrb	r3, [r7, #31]
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d827      	bhi.n	8007ea2 <UART_SetConfig+0x3a6>
 8007e52:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <UART_SetConfig+0x35c>)
 8007e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e85 	.word	0x08007e85
 8007e60:	08007e8d 	.word	0x08007e8d
 8007e64:	08007ea3 	.word	0x08007ea3
 8007e68:	08007e93 	.word	0x08007e93
 8007e6c:	08007ea3 	.word	0x08007ea3
 8007e70:	08007ea3 	.word	0x08007ea3
 8007e74:	08007ea3 	.word	0x08007ea3
 8007e78:	08007e9b 	.word	0x08007e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e7c:	f7fd f80a 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8007e80:	61b8      	str	r0, [r7, #24]
        break;
 8007e82:	e013      	b.n	8007eac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e84:	f7fd f81a 	bl	8004ebc <HAL_RCC_GetPCLK2Freq>
 8007e88:	61b8      	str	r0, [r7, #24]
        break;
 8007e8a:	e00f      	b.n	8007eac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e8c:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <UART_SetConfig+0x4c0>)
 8007e8e:	61bb      	str	r3, [r7, #24]
        break;
 8007e90:	e00c      	b.n	8007eac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e92:	f7fc ff11 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8007e96:	61b8      	str	r0, [r7, #24]
        break;
 8007e98:	e008      	b.n	8007eac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9e:	61bb      	str	r3, [r7, #24]
        break;
 8007ea0:	e004      	b.n	8007eac <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8007eaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d074      	beq.n	8007f9c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	005a      	lsls	r2, r3, #1
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	085b      	lsrs	r3, r3, #1
 8007ebc:	441a      	add	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b0f      	cmp	r3, #15
 8007ecc:	d916      	bls.n	8007efc <UART_SetConfig+0x400>
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed4:	d212      	bcs.n	8007efc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f023 030f 	bic.w	r3, r3, #15
 8007ede:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	085b      	lsrs	r3, r3, #1
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	89fb      	ldrh	r3, [r7, #14]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	89fa      	ldrh	r2, [r7, #14]
 8007ef8:	60da      	str	r2, [r3, #12]
 8007efa:	e04f      	b.n	8007f9c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	77bb      	strb	r3, [r7, #30]
 8007f00:	e04c      	b.n	8007f9c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f02:	7ffb      	ldrb	r3, [r7, #31]
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d828      	bhi.n	8007f5a <UART_SetConfig+0x45e>
 8007f08:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <UART_SetConfig+0x414>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f35 	.word	0x08007f35
 8007f14:	08007f3d 	.word	0x08007f3d
 8007f18:	08007f45 	.word	0x08007f45
 8007f1c:	08007f5b 	.word	0x08007f5b
 8007f20:	08007f4b 	.word	0x08007f4b
 8007f24:	08007f5b 	.word	0x08007f5b
 8007f28:	08007f5b 	.word	0x08007f5b
 8007f2c:	08007f5b 	.word	0x08007f5b
 8007f30:	08007f53 	.word	0x08007f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f34:	f7fc ffae 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8007f38:	61b8      	str	r0, [r7, #24]
        break;
 8007f3a:	e013      	b.n	8007f64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f3c:	f7fc ffbe 	bl	8004ebc <HAL_RCC_GetPCLK2Freq>
 8007f40:	61b8      	str	r0, [r7, #24]
        break;
 8007f42:	e00f      	b.n	8007f64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f44:	4b1d      	ldr	r3, [pc, #116]	; (8007fbc <UART_SetConfig+0x4c0>)
 8007f46:	61bb      	str	r3, [r7, #24]
        break;
 8007f48:	e00c      	b.n	8007f64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f4a:	f7fc feb5 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8007f4e:	61b8      	str	r0, [r7, #24]
        break;
 8007f50:	e008      	b.n	8007f64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f56:	61bb      	str	r3, [r7, #24]
        break;
 8007f58:	e004      	b.n	8007f64 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	77bb      	strb	r3, [r7, #30]
        break;
 8007f62:	bf00      	nop
    }

    if (pclk != 0U)
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d018      	beq.n	8007f9c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	085a      	lsrs	r2, r3, #1
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	441a      	add	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2b0f      	cmp	r3, #15
 8007f82:	d909      	bls.n	8007f98 <UART_SetConfig+0x49c>
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f8a:	d205      	bcs.n	8007f98 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60da      	str	r2, [r3, #12]
 8007f96:	e001      	b.n	8007f9c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007fa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40007c00 	.word	0x40007c00
 8007fb8:	40023800 	.word	0x40023800
 8007fbc:	00f42400 	.word	0x00f42400

08007fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00a      	beq.n	8007fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00a      	beq.n	800800c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00a      	beq.n	800802e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00a      	beq.n	8008050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	f003 0310 	and.w	r3, r3, #16
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00a      	beq.n	8008072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00a      	beq.n	8008094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d01a      	beq.n	80080d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080be:	d10a      	bne.n	80080d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	605a      	str	r2, [r3, #4]
  }
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af02      	add	r7, sp, #8
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008114:	f7fb f8a6 	bl	8003264 <HAL_GetTick>
 8008118:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0308 	and.w	r3, r3, #8
 8008124:	2b08      	cmp	r3, #8
 8008126:	d10e      	bne.n	8008146 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f817 	bl	800816a <UART_WaitOnFlagUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e00d      	b.n	8008162 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b09c      	sub	sp, #112	; 0x70
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	603b      	str	r3, [r7, #0]
 8008176:	4613      	mov	r3, r2
 8008178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800817a:	e0a5      	b.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800817c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	f000 80a1 	beq.w	80082c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008186:	f7fb f86d 	bl	8003264 <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008192:	429a      	cmp	r2, r3
 8008194:	d302      	bcc.n	800819c <UART_WaitOnFlagUntilTimeout+0x32>
 8008196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008198:	2b00      	cmp	r3, #0
 800819a:	d13e      	bne.n	800821a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081b0:	667b      	str	r3, [r7, #100]	; 0x64
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e6      	bne.n	800819c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	f023 0301 	bic.w	r3, r3, #1
 80081e4:	663b      	str	r3, [r7, #96]	; 0x60
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80081f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e5      	bne.n	80081ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2220      	movs	r2, #32
 800820c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e067      	b.n	80082ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	d04f      	beq.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008236:	d147      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008240:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008256:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008260:	637b      	str	r3, [r7, #52]	; 0x34
 8008262:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e6      	bne.n	8008242 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	613b      	str	r3, [r7, #16]
   return(result);
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f023 0301 	bic.w	r3, r3, #1
 800828a:	66bb      	str	r3, [r7, #104]	; 0x68
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3308      	adds	r3, #8
 8008292:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008294:	623a      	str	r2, [r7, #32]
 8008296:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	69f9      	ldr	r1, [r7, #28]
 800829a:	6a3a      	ldr	r2, [r7, #32]
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e5      	bne.n	8008274 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2220      	movs	r2, #32
 80082ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e010      	b.n	80082ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69da      	ldr	r2, [r3, #28]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	4013      	ands	r3, r2
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	bf0c      	ite	eq
 80082d8:	2301      	moveq	r3, #1
 80082da:	2300      	movne	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	461a      	mov	r2, r3
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	f43f af4a 	beq.w	800817c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3770      	adds	r7, #112	; 0x70
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b097      	sub	sp, #92	; 0x5c
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	88fa      	ldrh	r2, [r7, #6]
 800830c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	88fa      	ldrh	r2, [r7, #6]
 8008314:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008326:	d10e      	bne.n	8008346 <UART_Start_Receive_IT+0x52>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d105      	bne.n	800833c <UART_Start_Receive_IT+0x48>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008336:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800833a:	e02d      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	22ff      	movs	r2, #255	; 0xff
 8008340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008344:	e028      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10d      	bne.n	800836a <UART_Start_Receive_IT+0x76>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d104      	bne.n	8008360 <UART_Start_Receive_IT+0x6c>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	22ff      	movs	r2, #255	; 0xff
 800835a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800835e:	e01b      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	227f      	movs	r2, #127	; 0x7f
 8008364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008368:	e016      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008372:	d10d      	bne.n	8008390 <UART_Start_Receive_IT+0x9c>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <UART_Start_Receive_IT+0x92>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	227f      	movs	r2, #127	; 0x7f
 8008380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008384:	e008      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	223f      	movs	r2, #63	; 0x3f
 800838a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800838e:	e003      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2222      	movs	r2, #34	; 0x22
 80083a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	657b      	str	r3, [r7, #84]	; 0x54
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80083c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e5      	bne.n	80083a6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e2:	d107      	bne.n	80083f4 <UART_Start_Receive_IT+0x100>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d103      	bne.n	80083f4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4a24      	ldr	r2, [pc, #144]	; (8008480 <UART_Start_Receive_IT+0x18c>)
 80083f0:	665a      	str	r2, [r3, #100]	; 0x64
 80083f2:	e002      	b.n	80083fa <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4a23      	ldr	r2, [pc, #140]	; (8008484 <UART_Start_Receive_IT+0x190>)
 80083f8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d019      	beq.n	800843e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	e853 3f00 	ldrex	r3, [r3]
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800841e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	461a      	mov	r2, r3
 8008426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008428:	637b      	str	r3, [r7, #52]	; 0x34
 800842a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800842e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008430:	e841 2300 	strex	r3, r2, [r1]
 8008434:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e6      	bne.n	800840a <UART_Start_Receive_IT+0x116>
 800843c:	e018      	b.n	8008470 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	613b      	str	r3, [r7, #16]
   return(result);
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f043 0320 	orr.w	r3, r3, #32
 8008452:	653b      	str	r3, [r7, #80]	; 0x50
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800845c:	623b      	str	r3, [r7, #32]
 800845e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	69f9      	ldr	r1, [r7, #28]
 8008462:	6a3a      	ldr	r2, [r7, #32]
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	61bb      	str	r3, [r7, #24]
   return(result);
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e6      	bne.n	800843e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	375c      	adds	r7, #92	; 0x5c
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	0800872b 	.word	0x0800872b
 8008484:	080085cf 	.word	0x080085cf

08008488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b095      	sub	sp, #84	; 0x54
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ae:	643b      	str	r3, [r7, #64]	; 0x40
 80084b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e6      	bne.n	8008490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3308      	adds	r3, #8
 80084c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e5      	bne.n	80084c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d118      	bne.n	8008530 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	60bb      	str	r3, [r7, #8]
   return(result);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f023 0310 	bic.w	r3, r3, #16
 8008512:	647b      	str	r3, [r7, #68]	; 0x44
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800851c:	61bb      	str	r3, [r7, #24]
 800851e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008520:	6979      	ldr	r1, [r7, #20]
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	613b      	str	r3, [r7, #16]
   return(result);
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e6      	bne.n	80084fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2220      	movs	r2, #32
 8008534:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008542:	bf00      	nop
 8008544:	3754      	adds	r7, #84	; 0x54
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f7ff faaf 	bl	8007ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b088      	sub	sp, #32
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008596:	61fb      	str	r3, [r7, #28]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	61bb      	str	r3, [r7, #24]
 80085a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	6979      	ldr	r1, [r7, #20]
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	613b      	str	r3, [r7, #16]
   return(result);
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e6      	bne.n	8008582 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2220      	movs	r2, #32
 80085b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff fa7b 	bl	8007abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c6:	bf00      	nop
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b096      	sub	sp, #88	; 0x58
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e4:	2b22      	cmp	r3, #34	; 0x22
 80085e6:	f040 8094 	bne.w	8008712 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80085f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80085f8:	b2d9      	uxtb	r1, r3
 80085fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008604:	400a      	ands	r2, r1
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	b29a      	uxth	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d177      	bne.n	8008722 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008646:	653b      	str	r3, [r7, #80]	; 0x50
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008650:	647b      	str	r3, [r7, #68]	; 0x44
 8008652:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008656:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800865e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e6      	bne.n	8008632 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3308      	adds	r3, #8
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	623b      	str	r3, [r7, #32]
   return(result);
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	f023 0301 	bic.w	r3, r3, #1
 800867a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3308      	adds	r3, #8
 8008682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008684:	633a      	str	r2, [r7, #48]	; 0x30
 8008686:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800868a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e5      	bne.n	8008664 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2220      	movs	r2, #32
 800869c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d12e      	bne.n	800870a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	60fb      	str	r3, [r7, #12]
   return(result);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0310 	bic.w	r3, r3, #16
 80086c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	69b9      	ldr	r1, [r7, #24]
 80086d6:	69fa      	ldr	r2, [r7, #28]
 80086d8:	e841 2300 	strex	r3, r2, [r1]
 80086dc:	617b      	str	r3, [r7, #20]
   return(result);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e6      	bne.n	80086b2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f003 0310 	and.w	r3, r3, #16
 80086ee:	2b10      	cmp	r3, #16
 80086f0:	d103      	bne.n	80086fa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2210      	movs	r2, #16
 80086f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7ff f9ee 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008708:	e00b      	b.n	8008722 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fa f88a 	bl	8002824 <HAL_UART_RxCpltCallback>
}
 8008710:	e007      	b.n	8008722 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	699a      	ldr	r2, [r3, #24]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f042 0208 	orr.w	r2, r2, #8
 8008720:	619a      	str	r2, [r3, #24]
}
 8008722:	bf00      	nop
 8008724:	3758      	adds	r7, #88	; 0x58
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b096      	sub	sp, #88	; 0x58
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008738:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008740:	2b22      	cmp	r3, #34	; 0x22
 8008742:	f040 8094 	bne.w	800886e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008754:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008756:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800875a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800875e:	4013      	ands	r3, r2
 8008760:	b29a      	uxth	r2, r3
 8008762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008764:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800876a:	1c9a      	adds	r2, r3, #2
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b29a      	uxth	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d177      	bne.n	800887e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	461a      	mov	r2, r3
 80087aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ac:	643b      	str	r3, [r7, #64]	; 0x40
 80087ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087b4:	e841 2300 	strex	r3, r2, [r1]
 80087b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e6      	bne.n	800878e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	e853 3f00 	ldrex	r3, [r3]
 80087ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f023 0301 	bic.w	r3, r3, #1
 80087d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3308      	adds	r3, #8
 80087de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087e8:	e841 2300 	strex	r3, r2, [r1]
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e5      	bne.n	80087c0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008804:	2b01      	cmp	r3, #1
 8008806:	d12e      	bne.n	8008866 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	60bb      	str	r3, [r7, #8]
   return(result);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f023 0310 	bic.w	r3, r3, #16
 8008822:	647b      	str	r3, [r7, #68]	; 0x44
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	461a      	mov	r2, r3
 800882a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800882c:	61bb      	str	r3, [r7, #24]
 800882e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6979      	ldr	r1, [r7, #20]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	613b      	str	r3, [r7, #16]
   return(result);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e6      	bne.n	800880e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b10      	cmp	r3, #16
 800884c:	d103      	bne.n	8008856 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2210      	movs	r2, #16
 8008854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff f940 	bl	8007ae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008864:	e00b      	b.n	800887e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7f9 ffdc 	bl	8002824 <HAL_UART_RxCpltCallback>
}
 800886c:	e007      	b.n	800887e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699a      	ldr	r2, [r3, #24]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0208 	orr.w	r2, r2, #8
 800887c:	619a      	str	r2, [r3, #24]
}
 800887e:	bf00      	nop
 8008880:	3758      	adds	r7, #88	; 0x58
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008888:	b084      	sub	sp, #16
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	f107 001c 	add.w	r0, r7, #28
 8008896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	2b01      	cmp	r3, #1
 800889e:	d120      	bne.n	80088e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	4b20      	ldr	r3, [pc, #128]	; (8008934 <USB_CoreInit+0xac>)
 80088b2:	4013      	ands	r3, r2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d105      	bne.n	80088d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fa92 	bl	8008e00 <USB_CoreReset>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]
 80088e0:	e010      	b.n	8008904 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fa86 	bl	8008e00 <USB_CoreReset>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	2b01      	cmp	r3, #1
 8008908:	d10b      	bne.n	8008922 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f043 0206 	orr.w	r2, r3, #6
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f043 0220 	orr.w	r2, r3, #32
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800892e:	b004      	add	sp, #16
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	ffbdffbf 	.word	0xffbdffbf

08008938 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f023 0201 	bic.w	r2, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b084      	sub	sp, #16
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	460b      	mov	r3, r1
 8008964:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d115      	bne.n	80089a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008988:	2001      	movs	r0, #1
 800898a:	f7fa fc77 	bl	800327c <HAL_Delay>
      ms++;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3301      	adds	r3, #1
 8008992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fa25 	bl	8008de4 <USB_GetMode>
 800899a:	4603      	mov	r3, r0
 800899c:	2b01      	cmp	r3, #1
 800899e:	d01e      	beq.n	80089de <USB_SetCurrentMode+0x84>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b31      	cmp	r3, #49	; 0x31
 80089a4:	d9f0      	bls.n	8008988 <USB_SetCurrentMode+0x2e>
 80089a6:	e01a      	b.n	80089de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d115      	bne.n	80089da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089ba:	2001      	movs	r0, #1
 80089bc:	f7fa fc5e 	bl	800327c <HAL_Delay>
      ms++;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3301      	adds	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fa0c 	bl	8008de4 <USB_GetMode>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <USB_SetCurrentMode+0x84>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b31      	cmp	r3, #49	; 0x31
 80089d6:	d9f0      	bls.n	80089ba <USB_SetCurrentMode+0x60>
 80089d8:	e001      	b.n	80089de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e005      	b.n	80089ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b32      	cmp	r3, #50	; 0x32
 80089e2:	d101      	bne.n	80089e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e000      	b.n	80089ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

080089f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089f4:	b084      	sub	sp, #16
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b086      	sub	sp, #24
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a0e:	2300      	movs	r3, #0
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	e009      	b.n	8008a28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	3340      	adds	r3, #64	; 0x40
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	2200      	movs	r2, #0
 8008a20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	3301      	adds	r3, #1
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2b0e      	cmp	r3, #14
 8008a2c:	d9f2      	bls.n	8008a14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11c      	bne.n	8008a6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a42:	f043 0302 	orr.w	r3, r3, #2
 8008a46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	e005      	b.n	8008a7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a80:	461a      	mov	r2, r3
 8008a82:	2300      	movs	r3, #0
 8008a84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a94:	461a      	mov	r2, r3
 8008a96:	680b      	ldr	r3, [r1, #0]
 8008a98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d10c      	bne.n	8008aba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d104      	bne.n	8008ab0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f961 	bl	8008d70 <USB_SetDevSpeed>
 8008aae:	e008      	b.n	8008ac2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f95c 	bl	8008d70 <USB_SetDevSpeed>
 8008ab8:	e003      	b.n	8008ac2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008aba:	2103      	movs	r1, #3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f957 	bl	8008d70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ac2:	2110      	movs	r1, #16
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f8f3 	bl	8008cb0 <USB_FlushTxFifo>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f91d 	bl	8008d14 <USB_FlushRxFifo>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aea:	461a      	mov	r2, r3
 8008aec:	2300      	movs	r3, #0
 8008aee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af6:	461a      	mov	r2, r3
 8008af8:	2300      	movs	r3, #0
 8008afa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b02:	461a      	mov	r2, r3
 8008b04:	2300      	movs	r3, #0
 8008b06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	e043      	b.n	8008b96 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b24:	d118      	bne.n	8008b58 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10a      	bne.n	8008b42 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	e013      	b.n	8008b6a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	e008      	b.n	8008b6a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b64:	461a      	mov	r2, r3
 8008b66:	2300      	movs	r3, #0
 8008b68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	461a      	mov	r2, r3
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	461a      	mov	r2, r3
 8008b8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	3301      	adds	r3, #1
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d3b7      	bcc.n	8008b0e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	613b      	str	r3, [r7, #16]
 8008ba2:	e043      	b.n	8008c2c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bba:	d118      	bne.n	8008bee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10a      	bne.n	8008bd8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	e013      	b.n	8008c00 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	461a      	mov	r2, r3
 8008be6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	e008      	b.n	8008c00 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	2300      	movs	r3, #0
 8008c10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	613b      	str	r3, [r7, #16]
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d3b7      	bcc.n	8008ba4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d105      	bne.n	8008c68 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f043 0210 	orr.w	r2, r3, #16
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	699a      	ldr	r2, [r3, #24]
 8008c6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ca8 <USB_DevInit+0x2b4>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	f043 0208 	orr.w	r2, r3, #8
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d105      	bne.n	8008c98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	4b06      	ldr	r3, [pc, #24]	; (8008cac <USB_DevInit+0x2b8>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ca4:	b004      	add	sp, #16
 8008ca6:	4770      	bx	lr
 8008ca8:	803c3800 	.word	0x803c3800
 8008cac:	40000004 	.word	0x40000004

08008cb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	4a12      	ldr	r2, [pc, #72]	; (8008d10 <USB_FlushTxFifo+0x60>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d901      	bls.n	8008cce <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e01a      	b.n	8008d04 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	daf3      	bge.n	8008cbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	019b      	lsls	r3, r3, #6
 8008cde:	f043 0220 	orr.w	r2, r3, #32
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	4a08      	ldr	r2, [pc, #32]	; (8008d10 <USB_FlushTxFifo+0x60>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d901      	bls.n	8008cf6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e006      	b.n	8008d04 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d0f1      	beq.n	8008ce6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	00030d40 	.word	0x00030d40

08008d14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3301      	adds	r3, #1
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	4a11      	ldr	r2, [pc, #68]	; (8008d6c <USB_FlushRxFifo+0x58>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d901      	bls.n	8008d30 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e017      	b.n	8008d60 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	daf3      	bge.n	8008d20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2210      	movs	r2, #16
 8008d40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3301      	adds	r3, #1
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	4a08      	ldr	r2, [pc, #32]	; (8008d6c <USB_FlushRxFifo+0x58>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d901      	bls.n	8008d52 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e006      	b.n	8008d60 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f003 0310 	and.w	r3, r3, #16
 8008d5a:	2b10      	cmp	r3, #16
 8008d5c:	d0f1      	beq.n	8008d42 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	00030d40 	.word	0x00030d40

08008d70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d90:	4313      	orrs	r3, r2
 8008d92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b085      	sub	sp, #20
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008dbc:	f023 0303 	bic.w	r3, r3, #3
 8008dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd0:	f043 0302 	orr.w	r3, r3, #2
 8008dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	f003 0301 	and.w	r3, r3, #1
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	4a13      	ldr	r2, [pc, #76]	; (8008e60 <USB_CoreReset+0x60>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d901      	bls.n	8008e1c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e01a      	b.n	8008e52 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	daf3      	bge.n	8008e0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f043 0201 	orr.w	r2, r3, #1
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <USB_CoreReset+0x60>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d901      	bls.n	8008e44 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e006      	b.n	8008e52 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d0f1      	beq.n	8008e34 <USB_CoreReset+0x34>

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	00030d40 	.word	0x00030d40

08008e64 <atof>:
 8008e64:	2100      	movs	r1, #0
 8008e66:	f001 bae5 	b.w	800a434 <strtod>
	...

08008e6c <__errno>:
 8008e6c:	4b01      	ldr	r3, [pc, #4]	; (8008e74 <__errno+0x8>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	20000034 	.word	0x20000034

08008e78 <__libc_init_array>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4d0d      	ldr	r5, [pc, #52]	; (8008eb0 <__libc_init_array+0x38>)
 8008e7c:	4c0d      	ldr	r4, [pc, #52]	; (8008eb4 <__libc_init_array+0x3c>)
 8008e7e:	1b64      	subs	r4, r4, r5
 8008e80:	10a4      	asrs	r4, r4, #2
 8008e82:	2600      	movs	r6, #0
 8008e84:	42a6      	cmp	r6, r4
 8008e86:	d109      	bne.n	8008e9c <__libc_init_array+0x24>
 8008e88:	4d0b      	ldr	r5, [pc, #44]	; (8008eb8 <__libc_init_array+0x40>)
 8008e8a:	4c0c      	ldr	r4, [pc, #48]	; (8008ebc <__libc_init_array+0x44>)
 8008e8c:	f004 f9b0 	bl	800d1f0 <_init>
 8008e90:	1b64      	subs	r4, r4, r5
 8008e92:	10a4      	asrs	r4, r4, #2
 8008e94:	2600      	movs	r6, #0
 8008e96:	42a6      	cmp	r6, r4
 8008e98:	d105      	bne.n	8008ea6 <__libc_init_array+0x2e>
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea0:	4798      	blx	r3
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7ee      	b.n	8008e84 <__libc_init_array+0xc>
 8008ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eaa:	4798      	blx	r3
 8008eac:	3601      	adds	r6, #1
 8008eae:	e7f2      	b.n	8008e96 <__libc_init_array+0x1e>
 8008eb0:	0800d9a4 	.word	0x0800d9a4
 8008eb4:	0800d9a4 	.word	0x0800d9a4
 8008eb8:	0800d9a4 	.word	0x0800d9a4
 8008ebc:	0800d9a8 	.word	0x0800d9a8

08008ec0 <memset>:
 8008ec0:	4402      	add	r2, r0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d100      	bne.n	8008eca <memset+0xa>
 8008ec8:	4770      	bx	lr
 8008eca:	f803 1b01 	strb.w	r1, [r3], #1
 8008ece:	e7f9      	b.n	8008ec4 <memset+0x4>

08008ed0 <__cvt>:
 8008ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	ec55 4b10 	vmov	r4, r5, d0
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	460e      	mov	r6, r1
 8008edc:	4619      	mov	r1, r3
 8008ede:	462b      	mov	r3, r5
 8008ee0:	bfbb      	ittet	lt
 8008ee2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ee6:	461d      	movlt	r5, r3
 8008ee8:	2300      	movge	r3, #0
 8008eea:	232d      	movlt	r3, #45	; 0x2d
 8008eec:	700b      	strb	r3, [r1, #0]
 8008eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ef0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ef4:	4691      	mov	r9, r2
 8008ef6:	f023 0820 	bic.w	r8, r3, #32
 8008efa:	bfbc      	itt	lt
 8008efc:	4622      	movlt	r2, r4
 8008efe:	4614      	movlt	r4, r2
 8008f00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f04:	d005      	beq.n	8008f12 <__cvt+0x42>
 8008f06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f0a:	d100      	bne.n	8008f0e <__cvt+0x3e>
 8008f0c:	3601      	adds	r6, #1
 8008f0e:	2102      	movs	r1, #2
 8008f10:	e000      	b.n	8008f14 <__cvt+0x44>
 8008f12:	2103      	movs	r1, #3
 8008f14:	ab03      	add	r3, sp, #12
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	ab02      	add	r3, sp, #8
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	ec45 4b10 	vmov	d0, r4, r5
 8008f20:	4653      	mov	r3, sl
 8008f22:	4632      	mov	r2, r6
 8008f24:	f001 fb20 	bl	800a568 <_dtoa_r>
 8008f28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f2c:	4607      	mov	r7, r0
 8008f2e:	d102      	bne.n	8008f36 <__cvt+0x66>
 8008f30:	f019 0f01 	tst.w	r9, #1
 8008f34:	d022      	beq.n	8008f7c <__cvt+0xac>
 8008f36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f3a:	eb07 0906 	add.w	r9, r7, r6
 8008f3e:	d110      	bne.n	8008f62 <__cvt+0x92>
 8008f40:	783b      	ldrb	r3, [r7, #0]
 8008f42:	2b30      	cmp	r3, #48	; 0x30
 8008f44:	d10a      	bne.n	8008f5c <__cvt+0x8c>
 8008f46:	2200      	movs	r2, #0
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	f7f7 fddb 	bl	8000b08 <__aeabi_dcmpeq>
 8008f52:	b918      	cbnz	r0, 8008f5c <__cvt+0x8c>
 8008f54:	f1c6 0601 	rsb	r6, r6, #1
 8008f58:	f8ca 6000 	str.w	r6, [sl]
 8008f5c:	f8da 3000 	ldr.w	r3, [sl]
 8008f60:	4499      	add	r9, r3
 8008f62:	2200      	movs	r2, #0
 8008f64:	2300      	movs	r3, #0
 8008f66:	4620      	mov	r0, r4
 8008f68:	4629      	mov	r1, r5
 8008f6a:	f7f7 fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 8008f6e:	b108      	cbz	r0, 8008f74 <__cvt+0xa4>
 8008f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f74:	2230      	movs	r2, #48	; 0x30
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	454b      	cmp	r3, r9
 8008f7a:	d307      	bcc.n	8008f8c <__cvt+0xbc>
 8008f7c:	9b03      	ldr	r3, [sp, #12]
 8008f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f80:	1bdb      	subs	r3, r3, r7
 8008f82:	4638      	mov	r0, r7
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	b004      	add	sp, #16
 8008f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8c:	1c59      	adds	r1, r3, #1
 8008f8e:	9103      	str	r1, [sp, #12]
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	e7f0      	b.n	8008f76 <__cvt+0xa6>

08008f94 <__exponent>:
 8008f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f96:	4603      	mov	r3, r0
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	bfb8      	it	lt
 8008f9c:	4249      	neglt	r1, r1
 8008f9e:	f803 2b02 	strb.w	r2, [r3], #2
 8008fa2:	bfb4      	ite	lt
 8008fa4:	222d      	movlt	r2, #45	; 0x2d
 8008fa6:	222b      	movge	r2, #43	; 0x2b
 8008fa8:	2909      	cmp	r1, #9
 8008faa:	7042      	strb	r2, [r0, #1]
 8008fac:	dd2a      	ble.n	8009004 <__exponent+0x70>
 8008fae:	f10d 0407 	add.w	r4, sp, #7
 8008fb2:	46a4      	mov	ip, r4
 8008fb4:	270a      	movs	r7, #10
 8008fb6:	46a6      	mov	lr, r4
 8008fb8:	460a      	mov	r2, r1
 8008fba:	fb91 f6f7 	sdiv	r6, r1, r7
 8008fbe:	fb07 1516 	mls	r5, r7, r6, r1
 8008fc2:	3530      	adds	r5, #48	; 0x30
 8008fc4:	2a63      	cmp	r2, #99	; 0x63
 8008fc6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008fca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008fce:	4631      	mov	r1, r6
 8008fd0:	dcf1      	bgt.n	8008fb6 <__exponent+0x22>
 8008fd2:	3130      	adds	r1, #48	; 0x30
 8008fd4:	f1ae 0502 	sub.w	r5, lr, #2
 8008fd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fdc:	1c44      	adds	r4, r0, #1
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4561      	cmp	r1, ip
 8008fe2:	d30a      	bcc.n	8008ffa <__exponent+0x66>
 8008fe4:	f10d 0209 	add.w	r2, sp, #9
 8008fe8:	eba2 020e 	sub.w	r2, r2, lr
 8008fec:	4565      	cmp	r5, ip
 8008fee:	bf88      	it	hi
 8008ff0:	2200      	movhi	r2, #0
 8008ff2:	4413      	add	r3, r2
 8008ff4:	1a18      	subs	r0, r3, r0
 8008ff6:	b003      	add	sp, #12
 8008ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ffe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009002:	e7ed      	b.n	8008fe0 <__exponent+0x4c>
 8009004:	2330      	movs	r3, #48	; 0x30
 8009006:	3130      	adds	r1, #48	; 0x30
 8009008:	7083      	strb	r3, [r0, #2]
 800900a:	70c1      	strb	r1, [r0, #3]
 800900c:	1d03      	adds	r3, r0, #4
 800900e:	e7f1      	b.n	8008ff4 <__exponent+0x60>

08009010 <_printf_float>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	ed2d 8b02 	vpush	{d8}
 8009018:	b08d      	sub	sp, #52	; 0x34
 800901a:	460c      	mov	r4, r1
 800901c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009020:	4616      	mov	r6, r2
 8009022:	461f      	mov	r7, r3
 8009024:	4605      	mov	r5, r0
 8009026:	f002 fbfb 	bl	800b820 <_localeconv_r>
 800902a:	f8d0 a000 	ldr.w	sl, [r0]
 800902e:	4650      	mov	r0, sl
 8009030:	f7f7 f8ee 	bl	8000210 <strlen>
 8009034:	2300      	movs	r3, #0
 8009036:	930a      	str	r3, [sp, #40]	; 0x28
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	9305      	str	r3, [sp, #20]
 800903c:	f8d8 3000 	ldr.w	r3, [r8]
 8009040:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009044:	3307      	adds	r3, #7
 8009046:	f023 0307 	bic.w	r3, r3, #7
 800904a:	f103 0208 	add.w	r2, r3, #8
 800904e:	f8c8 2000 	str.w	r2, [r8]
 8009052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009056:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800905a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800905e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009062:	9307      	str	r3, [sp, #28]
 8009064:	f8cd 8018 	str.w	r8, [sp, #24]
 8009068:	ee08 0a10 	vmov	s16, r0
 800906c:	4b9f      	ldr	r3, [pc, #636]	; (80092ec <_printf_float+0x2dc>)
 800906e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009072:	f04f 32ff 	mov.w	r2, #4294967295
 8009076:	f7f7 fd79 	bl	8000b6c <__aeabi_dcmpun>
 800907a:	bb88      	cbnz	r0, 80090e0 <_printf_float+0xd0>
 800907c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009080:	4b9a      	ldr	r3, [pc, #616]	; (80092ec <_printf_float+0x2dc>)
 8009082:	f04f 32ff 	mov.w	r2, #4294967295
 8009086:	f7f7 fd53 	bl	8000b30 <__aeabi_dcmple>
 800908a:	bb48      	cbnz	r0, 80090e0 <_printf_float+0xd0>
 800908c:	2200      	movs	r2, #0
 800908e:	2300      	movs	r3, #0
 8009090:	4640      	mov	r0, r8
 8009092:	4649      	mov	r1, r9
 8009094:	f7f7 fd42 	bl	8000b1c <__aeabi_dcmplt>
 8009098:	b110      	cbz	r0, 80090a0 <_printf_float+0x90>
 800909a:	232d      	movs	r3, #45	; 0x2d
 800909c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a0:	4b93      	ldr	r3, [pc, #588]	; (80092f0 <_printf_float+0x2e0>)
 80090a2:	4894      	ldr	r0, [pc, #592]	; (80092f4 <_printf_float+0x2e4>)
 80090a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090a8:	bf94      	ite	ls
 80090aa:	4698      	movls	r8, r3
 80090ac:	4680      	movhi	r8, r0
 80090ae:	2303      	movs	r3, #3
 80090b0:	6123      	str	r3, [r4, #16]
 80090b2:	9b05      	ldr	r3, [sp, #20]
 80090b4:	f023 0204 	bic.w	r2, r3, #4
 80090b8:	6022      	str	r2, [r4, #0]
 80090ba:	f04f 0900 	mov.w	r9, #0
 80090be:	9700      	str	r7, [sp, #0]
 80090c0:	4633      	mov	r3, r6
 80090c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80090c4:	4621      	mov	r1, r4
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 f9d8 	bl	800947c <_printf_common>
 80090cc:	3001      	adds	r0, #1
 80090ce:	f040 8090 	bne.w	80091f2 <_printf_float+0x1e2>
 80090d2:	f04f 30ff 	mov.w	r0, #4294967295
 80090d6:	b00d      	add	sp, #52	; 0x34
 80090d8:	ecbd 8b02 	vpop	{d8}
 80090dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	4640      	mov	r0, r8
 80090e6:	4649      	mov	r1, r9
 80090e8:	f7f7 fd40 	bl	8000b6c <__aeabi_dcmpun>
 80090ec:	b140      	cbz	r0, 8009100 <_printf_float+0xf0>
 80090ee:	464b      	mov	r3, r9
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfbc      	itt	lt
 80090f4:	232d      	movlt	r3, #45	; 0x2d
 80090f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090fa:	487f      	ldr	r0, [pc, #508]	; (80092f8 <_printf_float+0x2e8>)
 80090fc:	4b7f      	ldr	r3, [pc, #508]	; (80092fc <_printf_float+0x2ec>)
 80090fe:	e7d1      	b.n	80090a4 <_printf_float+0x94>
 8009100:	6863      	ldr	r3, [r4, #4]
 8009102:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009106:	9206      	str	r2, [sp, #24]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	d13f      	bne.n	800918c <_printf_float+0x17c>
 800910c:	2306      	movs	r3, #6
 800910e:	6063      	str	r3, [r4, #4]
 8009110:	9b05      	ldr	r3, [sp, #20]
 8009112:	6861      	ldr	r1, [r4, #4]
 8009114:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009118:	2300      	movs	r3, #0
 800911a:	9303      	str	r3, [sp, #12]
 800911c:	ab0a      	add	r3, sp, #40	; 0x28
 800911e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009122:	ab09      	add	r3, sp, #36	; 0x24
 8009124:	ec49 8b10 	vmov	d0, r8, r9
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009130:	4628      	mov	r0, r5
 8009132:	f7ff fecd 	bl	8008ed0 <__cvt>
 8009136:	9b06      	ldr	r3, [sp, #24]
 8009138:	9909      	ldr	r1, [sp, #36]	; 0x24
 800913a:	2b47      	cmp	r3, #71	; 0x47
 800913c:	4680      	mov	r8, r0
 800913e:	d108      	bne.n	8009152 <_printf_float+0x142>
 8009140:	1cc8      	adds	r0, r1, #3
 8009142:	db02      	blt.n	800914a <_printf_float+0x13a>
 8009144:	6863      	ldr	r3, [r4, #4]
 8009146:	4299      	cmp	r1, r3
 8009148:	dd41      	ble.n	80091ce <_printf_float+0x1be>
 800914a:	f1ab 0b02 	sub.w	fp, fp, #2
 800914e:	fa5f fb8b 	uxtb.w	fp, fp
 8009152:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009156:	d820      	bhi.n	800919a <_printf_float+0x18a>
 8009158:	3901      	subs	r1, #1
 800915a:	465a      	mov	r2, fp
 800915c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009160:	9109      	str	r1, [sp, #36]	; 0x24
 8009162:	f7ff ff17 	bl	8008f94 <__exponent>
 8009166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009168:	1813      	adds	r3, r2, r0
 800916a:	2a01      	cmp	r2, #1
 800916c:	4681      	mov	r9, r0
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	dc02      	bgt.n	8009178 <_printf_float+0x168>
 8009172:	6822      	ldr	r2, [r4, #0]
 8009174:	07d2      	lsls	r2, r2, #31
 8009176:	d501      	bpl.n	800917c <_printf_float+0x16c>
 8009178:	3301      	adds	r3, #1
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009180:	2b00      	cmp	r3, #0
 8009182:	d09c      	beq.n	80090be <_printf_float+0xae>
 8009184:	232d      	movs	r3, #45	; 0x2d
 8009186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800918a:	e798      	b.n	80090be <_printf_float+0xae>
 800918c:	9a06      	ldr	r2, [sp, #24]
 800918e:	2a47      	cmp	r2, #71	; 0x47
 8009190:	d1be      	bne.n	8009110 <_printf_float+0x100>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1bc      	bne.n	8009110 <_printf_float+0x100>
 8009196:	2301      	movs	r3, #1
 8009198:	e7b9      	b.n	800910e <_printf_float+0xfe>
 800919a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800919e:	d118      	bne.n	80091d2 <_printf_float+0x1c2>
 80091a0:	2900      	cmp	r1, #0
 80091a2:	6863      	ldr	r3, [r4, #4]
 80091a4:	dd0b      	ble.n	80091be <_printf_float+0x1ae>
 80091a6:	6121      	str	r1, [r4, #16]
 80091a8:	b913      	cbnz	r3, 80091b0 <_printf_float+0x1a0>
 80091aa:	6822      	ldr	r2, [r4, #0]
 80091ac:	07d0      	lsls	r0, r2, #31
 80091ae:	d502      	bpl.n	80091b6 <_printf_float+0x1a6>
 80091b0:	3301      	adds	r3, #1
 80091b2:	440b      	add	r3, r1
 80091b4:	6123      	str	r3, [r4, #16]
 80091b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80091b8:	f04f 0900 	mov.w	r9, #0
 80091bc:	e7de      	b.n	800917c <_printf_float+0x16c>
 80091be:	b913      	cbnz	r3, 80091c6 <_printf_float+0x1b6>
 80091c0:	6822      	ldr	r2, [r4, #0]
 80091c2:	07d2      	lsls	r2, r2, #31
 80091c4:	d501      	bpl.n	80091ca <_printf_float+0x1ba>
 80091c6:	3302      	adds	r3, #2
 80091c8:	e7f4      	b.n	80091b4 <_printf_float+0x1a4>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e7f2      	b.n	80091b4 <_printf_float+0x1a4>
 80091ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091d4:	4299      	cmp	r1, r3
 80091d6:	db05      	blt.n	80091e4 <_printf_float+0x1d4>
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	6121      	str	r1, [r4, #16]
 80091dc:	07d8      	lsls	r0, r3, #31
 80091de:	d5ea      	bpl.n	80091b6 <_printf_float+0x1a6>
 80091e0:	1c4b      	adds	r3, r1, #1
 80091e2:	e7e7      	b.n	80091b4 <_printf_float+0x1a4>
 80091e4:	2900      	cmp	r1, #0
 80091e6:	bfd4      	ite	le
 80091e8:	f1c1 0202 	rsble	r2, r1, #2
 80091ec:	2201      	movgt	r2, #1
 80091ee:	4413      	add	r3, r2
 80091f0:	e7e0      	b.n	80091b4 <_printf_float+0x1a4>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	055a      	lsls	r2, r3, #21
 80091f6:	d407      	bmi.n	8009208 <_printf_float+0x1f8>
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	4642      	mov	r2, r8
 80091fc:	4631      	mov	r1, r6
 80091fe:	4628      	mov	r0, r5
 8009200:	47b8      	blx	r7
 8009202:	3001      	adds	r0, #1
 8009204:	d12c      	bne.n	8009260 <_printf_float+0x250>
 8009206:	e764      	b.n	80090d2 <_printf_float+0xc2>
 8009208:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800920c:	f240 80e0 	bls.w	80093d0 <_printf_float+0x3c0>
 8009210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009214:	2200      	movs	r2, #0
 8009216:	2300      	movs	r3, #0
 8009218:	f7f7 fc76 	bl	8000b08 <__aeabi_dcmpeq>
 800921c:	2800      	cmp	r0, #0
 800921e:	d034      	beq.n	800928a <_printf_float+0x27a>
 8009220:	4a37      	ldr	r2, [pc, #220]	; (8009300 <_printf_float+0x2f0>)
 8009222:	2301      	movs	r3, #1
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	f43f af51 	beq.w	80090d2 <_printf_float+0xc2>
 8009230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009234:	429a      	cmp	r2, r3
 8009236:	db02      	blt.n	800923e <_printf_float+0x22e>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	07d8      	lsls	r0, r3, #31
 800923c:	d510      	bpl.n	8009260 <_printf_float+0x250>
 800923e:	ee18 3a10 	vmov	r3, s16
 8009242:	4652      	mov	r2, sl
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	f43f af41 	beq.w	80090d2 <_printf_float+0xc2>
 8009250:	f04f 0800 	mov.w	r8, #0
 8009254:	f104 091a 	add.w	r9, r4, #26
 8009258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800925a:	3b01      	subs	r3, #1
 800925c:	4543      	cmp	r3, r8
 800925e:	dc09      	bgt.n	8009274 <_printf_float+0x264>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	079b      	lsls	r3, r3, #30
 8009264:	f100 8105 	bmi.w	8009472 <_printf_float+0x462>
 8009268:	68e0      	ldr	r0, [r4, #12]
 800926a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800926c:	4298      	cmp	r0, r3
 800926e:	bfb8      	it	lt
 8009270:	4618      	movlt	r0, r3
 8009272:	e730      	b.n	80090d6 <_printf_float+0xc6>
 8009274:	2301      	movs	r3, #1
 8009276:	464a      	mov	r2, r9
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f af27 	beq.w	80090d2 <_printf_float+0xc2>
 8009284:	f108 0801 	add.w	r8, r8, #1
 8009288:	e7e6      	b.n	8009258 <_printf_float+0x248>
 800928a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928c:	2b00      	cmp	r3, #0
 800928e:	dc39      	bgt.n	8009304 <_printf_float+0x2f4>
 8009290:	4a1b      	ldr	r2, [pc, #108]	; (8009300 <_printf_float+0x2f0>)
 8009292:	2301      	movs	r3, #1
 8009294:	4631      	mov	r1, r6
 8009296:	4628      	mov	r0, r5
 8009298:	47b8      	blx	r7
 800929a:	3001      	adds	r0, #1
 800929c:	f43f af19 	beq.w	80090d2 <_printf_float+0xc2>
 80092a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092a4:	4313      	orrs	r3, r2
 80092a6:	d102      	bne.n	80092ae <_printf_float+0x29e>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	07d9      	lsls	r1, r3, #31
 80092ac:	d5d8      	bpl.n	8009260 <_printf_float+0x250>
 80092ae:	ee18 3a10 	vmov	r3, s16
 80092b2:	4652      	mov	r2, sl
 80092b4:	4631      	mov	r1, r6
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	f43f af09 	beq.w	80090d2 <_printf_float+0xc2>
 80092c0:	f04f 0900 	mov.w	r9, #0
 80092c4:	f104 0a1a 	add.w	sl, r4, #26
 80092c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ca:	425b      	negs	r3, r3
 80092cc:	454b      	cmp	r3, r9
 80092ce:	dc01      	bgt.n	80092d4 <_printf_float+0x2c4>
 80092d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d2:	e792      	b.n	80091fa <_printf_float+0x1ea>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4652      	mov	r2, sl
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	f43f aef7 	beq.w	80090d2 <_printf_float+0xc2>
 80092e4:	f109 0901 	add.w	r9, r9, #1
 80092e8:	e7ee      	b.n	80092c8 <_printf_float+0x2b8>
 80092ea:	bf00      	nop
 80092ec:	7fefffff 	.word	0x7fefffff
 80092f0:	0800d4f4 	.word	0x0800d4f4
 80092f4:	0800d4f8 	.word	0x0800d4f8
 80092f8:	0800d500 	.word	0x0800d500
 80092fc:	0800d4fc 	.word	0x0800d4fc
 8009300:	0800d504 	.word	0x0800d504
 8009304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009308:	429a      	cmp	r2, r3
 800930a:	bfa8      	it	ge
 800930c:	461a      	movge	r2, r3
 800930e:	2a00      	cmp	r2, #0
 8009310:	4691      	mov	r9, r2
 8009312:	dc37      	bgt.n	8009384 <_printf_float+0x374>
 8009314:	f04f 0b00 	mov.w	fp, #0
 8009318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800931c:	f104 021a 	add.w	r2, r4, #26
 8009320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009322:	9305      	str	r3, [sp, #20]
 8009324:	eba3 0309 	sub.w	r3, r3, r9
 8009328:	455b      	cmp	r3, fp
 800932a:	dc33      	bgt.n	8009394 <_printf_float+0x384>
 800932c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009330:	429a      	cmp	r2, r3
 8009332:	db3b      	blt.n	80093ac <_printf_float+0x39c>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	07da      	lsls	r2, r3, #31
 8009338:	d438      	bmi.n	80093ac <_printf_float+0x39c>
 800933a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800933c:	9b05      	ldr	r3, [sp, #20]
 800933e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	eba2 0901 	sub.w	r9, r2, r1
 8009346:	4599      	cmp	r9, r3
 8009348:	bfa8      	it	ge
 800934a:	4699      	movge	r9, r3
 800934c:	f1b9 0f00 	cmp.w	r9, #0
 8009350:	dc35      	bgt.n	80093be <_printf_float+0x3ae>
 8009352:	f04f 0800 	mov.w	r8, #0
 8009356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800935a:	f104 0a1a 	add.w	sl, r4, #26
 800935e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009362:	1a9b      	subs	r3, r3, r2
 8009364:	eba3 0309 	sub.w	r3, r3, r9
 8009368:	4543      	cmp	r3, r8
 800936a:	f77f af79 	ble.w	8009260 <_printf_float+0x250>
 800936e:	2301      	movs	r3, #1
 8009370:	4652      	mov	r2, sl
 8009372:	4631      	mov	r1, r6
 8009374:	4628      	mov	r0, r5
 8009376:	47b8      	blx	r7
 8009378:	3001      	adds	r0, #1
 800937a:	f43f aeaa 	beq.w	80090d2 <_printf_float+0xc2>
 800937e:	f108 0801 	add.w	r8, r8, #1
 8009382:	e7ec      	b.n	800935e <_printf_float+0x34e>
 8009384:	4613      	mov	r3, r2
 8009386:	4631      	mov	r1, r6
 8009388:	4642      	mov	r2, r8
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	d1c0      	bne.n	8009314 <_printf_float+0x304>
 8009392:	e69e      	b.n	80090d2 <_printf_float+0xc2>
 8009394:	2301      	movs	r3, #1
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	9205      	str	r2, [sp, #20]
 800939c:	47b8      	blx	r7
 800939e:	3001      	adds	r0, #1
 80093a0:	f43f ae97 	beq.w	80090d2 <_printf_float+0xc2>
 80093a4:	9a05      	ldr	r2, [sp, #20]
 80093a6:	f10b 0b01 	add.w	fp, fp, #1
 80093aa:	e7b9      	b.n	8009320 <_printf_float+0x310>
 80093ac:	ee18 3a10 	vmov	r3, s16
 80093b0:	4652      	mov	r2, sl
 80093b2:	4631      	mov	r1, r6
 80093b4:	4628      	mov	r0, r5
 80093b6:	47b8      	blx	r7
 80093b8:	3001      	adds	r0, #1
 80093ba:	d1be      	bne.n	800933a <_printf_float+0x32a>
 80093bc:	e689      	b.n	80090d2 <_printf_float+0xc2>
 80093be:	9a05      	ldr	r2, [sp, #20]
 80093c0:	464b      	mov	r3, r9
 80093c2:	4442      	add	r2, r8
 80093c4:	4631      	mov	r1, r6
 80093c6:	4628      	mov	r0, r5
 80093c8:	47b8      	blx	r7
 80093ca:	3001      	adds	r0, #1
 80093cc:	d1c1      	bne.n	8009352 <_printf_float+0x342>
 80093ce:	e680      	b.n	80090d2 <_printf_float+0xc2>
 80093d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093d2:	2a01      	cmp	r2, #1
 80093d4:	dc01      	bgt.n	80093da <_printf_float+0x3ca>
 80093d6:	07db      	lsls	r3, r3, #31
 80093d8:	d538      	bpl.n	800944c <_printf_float+0x43c>
 80093da:	2301      	movs	r3, #1
 80093dc:	4642      	mov	r2, r8
 80093de:	4631      	mov	r1, r6
 80093e0:	4628      	mov	r0, r5
 80093e2:	47b8      	blx	r7
 80093e4:	3001      	adds	r0, #1
 80093e6:	f43f ae74 	beq.w	80090d2 <_printf_float+0xc2>
 80093ea:	ee18 3a10 	vmov	r3, s16
 80093ee:	4652      	mov	r2, sl
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f ae6b 	beq.w	80090d2 <_printf_float+0xc2>
 80093fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009400:	2200      	movs	r2, #0
 8009402:	2300      	movs	r3, #0
 8009404:	f7f7 fb80 	bl	8000b08 <__aeabi_dcmpeq>
 8009408:	b9d8      	cbnz	r0, 8009442 <_printf_float+0x432>
 800940a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940c:	f108 0201 	add.w	r2, r8, #1
 8009410:	3b01      	subs	r3, #1
 8009412:	4631      	mov	r1, r6
 8009414:	4628      	mov	r0, r5
 8009416:	47b8      	blx	r7
 8009418:	3001      	adds	r0, #1
 800941a:	d10e      	bne.n	800943a <_printf_float+0x42a>
 800941c:	e659      	b.n	80090d2 <_printf_float+0xc2>
 800941e:	2301      	movs	r3, #1
 8009420:	4652      	mov	r2, sl
 8009422:	4631      	mov	r1, r6
 8009424:	4628      	mov	r0, r5
 8009426:	47b8      	blx	r7
 8009428:	3001      	adds	r0, #1
 800942a:	f43f ae52 	beq.w	80090d2 <_printf_float+0xc2>
 800942e:	f108 0801 	add.w	r8, r8, #1
 8009432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009434:	3b01      	subs	r3, #1
 8009436:	4543      	cmp	r3, r8
 8009438:	dcf1      	bgt.n	800941e <_printf_float+0x40e>
 800943a:	464b      	mov	r3, r9
 800943c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009440:	e6dc      	b.n	80091fc <_printf_float+0x1ec>
 8009442:	f04f 0800 	mov.w	r8, #0
 8009446:	f104 0a1a 	add.w	sl, r4, #26
 800944a:	e7f2      	b.n	8009432 <_printf_float+0x422>
 800944c:	2301      	movs	r3, #1
 800944e:	4642      	mov	r2, r8
 8009450:	e7df      	b.n	8009412 <_printf_float+0x402>
 8009452:	2301      	movs	r3, #1
 8009454:	464a      	mov	r2, r9
 8009456:	4631      	mov	r1, r6
 8009458:	4628      	mov	r0, r5
 800945a:	47b8      	blx	r7
 800945c:	3001      	adds	r0, #1
 800945e:	f43f ae38 	beq.w	80090d2 <_printf_float+0xc2>
 8009462:	f108 0801 	add.w	r8, r8, #1
 8009466:	68e3      	ldr	r3, [r4, #12]
 8009468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800946a:	1a5b      	subs	r3, r3, r1
 800946c:	4543      	cmp	r3, r8
 800946e:	dcf0      	bgt.n	8009452 <_printf_float+0x442>
 8009470:	e6fa      	b.n	8009268 <_printf_float+0x258>
 8009472:	f04f 0800 	mov.w	r8, #0
 8009476:	f104 0919 	add.w	r9, r4, #25
 800947a:	e7f4      	b.n	8009466 <_printf_float+0x456>

0800947c <_printf_common>:
 800947c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009480:	4616      	mov	r6, r2
 8009482:	4699      	mov	r9, r3
 8009484:	688a      	ldr	r2, [r1, #8]
 8009486:	690b      	ldr	r3, [r1, #16]
 8009488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800948c:	4293      	cmp	r3, r2
 800948e:	bfb8      	it	lt
 8009490:	4613      	movlt	r3, r2
 8009492:	6033      	str	r3, [r6, #0]
 8009494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009498:	4607      	mov	r7, r0
 800949a:	460c      	mov	r4, r1
 800949c:	b10a      	cbz	r2, 80094a2 <_printf_common+0x26>
 800949e:	3301      	adds	r3, #1
 80094a0:	6033      	str	r3, [r6, #0]
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	0699      	lsls	r1, r3, #26
 80094a6:	bf42      	ittt	mi
 80094a8:	6833      	ldrmi	r3, [r6, #0]
 80094aa:	3302      	addmi	r3, #2
 80094ac:	6033      	strmi	r3, [r6, #0]
 80094ae:	6825      	ldr	r5, [r4, #0]
 80094b0:	f015 0506 	ands.w	r5, r5, #6
 80094b4:	d106      	bne.n	80094c4 <_printf_common+0x48>
 80094b6:	f104 0a19 	add.w	sl, r4, #25
 80094ba:	68e3      	ldr	r3, [r4, #12]
 80094bc:	6832      	ldr	r2, [r6, #0]
 80094be:	1a9b      	subs	r3, r3, r2
 80094c0:	42ab      	cmp	r3, r5
 80094c2:	dc26      	bgt.n	8009512 <_printf_common+0x96>
 80094c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094c8:	1e13      	subs	r3, r2, #0
 80094ca:	6822      	ldr	r2, [r4, #0]
 80094cc:	bf18      	it	ne
 80094ce:	2301      	movne	r3, #1
 80094d0:	0692      	lsls	r2, r2, #26
 80094d2:	d42b      	bmi.n	800952c <_printf_common+0xb0>
 80094d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094d8:	4649      	mov	r1, r9
 80094da:	4638      	mov	r0, r7
 80094dc:	47c0      	blx	r8
 80094de:	3001      	adds	r0, #1
 80094e0:	d01e      	beq.n	8009520 <_printf_common+0xa4>
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	68e5      	ldr	r5, [r4, #12]
 80094e6:	6832      	ldr	r2, [r6, #0]
 80094e8:	f003 0306 	and.w	r3, r3, #6
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	bf08      	it	eq
 80094f0:	1aad      	subeq	r5, r5, r2
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	6922      	ldr	r2, [r4, #16]
 80094f6:	bf0c      	ite	eq
 80094f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094fc:	2500      	movne	r5, #0
 80094fe:	4293      	cmp	r3, r2
 8009500:	bfc4      	itt	gt
 8009502:	1a9b      	subgt	r3, r3, r2
 8009504:	18ed      	addgt	r5, r5, r3
 8009506:	2600      	movs	r6, #0
 8009508:	341a      	adds	r4, #26
 800950a:	42b5      	cmp	r5, r6
 800950c:	d11a      	bne.n	8009544 <_printf_common+0xc8>
 800950e:	2000      	movs	r0, #0
 8009510:	e008      	b.n	8009524 <_printf_common+0xa8>
 8009512:	2301      	movs	r3, #1
 8009514:	4652      	mov	r2, sl
 8009516:	4649      	mov	r1, r9
 8009518:	4638      	mov	r0, r7
 800951a:	47c0      	blx	r8
 800951c:	3001      	adds	r0, #1
 800951e:	d103      	bne.n	8009528 <_printf_common+0xac>
 8009520:	f04f 30ff 	mov.w	r0, #4294967295
 8009524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009528:	3501      	adds	r5, #1
 800952a:	e7c6      	b.n	80094ba <_printf_common+0x3e>
 800952c:	18e1      	adds	r1, r4, r3
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	2030      	movs	r0, #48	; 0x30
 8009532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009536:	4422      	add	r2, r4
 8009538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800953c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009540:	3302      	adds	r3, #2
 8009542:	e7c7      	b.n	80094d4 <_printf_common+0x58>
 8009544:	2301      	movs	r3, #1
 8009546:	4622      	mov	r2, r4
 8009548:	4649      	mov	r1, r9
 800954a:	4638      	mov	r0, r7
 800954c:	47c0      	blx	r8
 800954e:	3001      	adds	r0, #1
 8009550:	d0e6      	beq.n	8009520 <_printf_common+0xa4>
 8009552:	3601      	adds	r6, #1
 8009554:	e7d9      	b.n	800950a <_printf_common+0x8e>
	...

08009558 <_printf_i>:
 8009558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800955c:	460c      	mov	r4, r1
 800955e:	4691      	mov	r9, r2
 8009560:	7e27      	ldrb	r7, [r4, #24]
 8009562:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009564:	2f78      	cmp	r7, #120	; 0x78
 8009566:	4680      	mov	r8, r0
 8009568:	469a      	mov	sl, r3
 800956a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800956e:	d807      	bhi.n	8009580 <_printf_i+0x28>
 8009570:	2f62      	cmp	r7, #98	; 0x62
 8009572:	d80a      	bhi.n	800958a <_printf_i+0x32>
 8009574:	2f00      	cmp	r7, #0
 8009576:	f000 80d8 	beq.w	800972a <_printf_i+0x1d2>
 800957a:	2f58      	cmp	r7, #88	; 0x58
 800957c:	f000 80a3 	beq.w	80096c6 <_printf_i+0x16e>
 8009580:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009588:	e03a      	b.n	8009600 <_printf_i+0xa8>
 800958a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800958e:	2b15      	cmp	r3, #21
 8009590:	d8f6      	bhi.n	8009580 <_printf_i+0x28>
 8009592:	a001      	add	r0, pc, #4	; (adr r0, 8009598 <_printf_i+0x40>)
 8009594:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009598:	080095f1 	.word	0x080095f1
 800959c:	08009605 	.word	0x08009605
 80095a0:	08009581 	.word	0x08009581
 80095a4:	08009581 	.word	0x08009581
 80095a8:	08009581 	.word	0x08009581
 80095ac:	08009581 	.word	0x08009581
 80095b0:	08009605 	.word	0x08009605
 80095b4:	08009581 	.word	0x08009581
 80095b8:	08009581 	.word	0x08009581
 80095bc:	08009581 	.word	0x08009581
 80095c0:	08009581 	.word	0x08009581
 80095c4:	08009711 	.word	0x08009711
 80095c8:	08009635 	.word	0x08009635
 80095cc:	080096f3 	.word	0x080096f3
 80095d0:	08009581 	.word	0x08009581
 80095d4:	08009581 	.word	0x08009581
 80095d8:	08009733 	.word	0x08009733
 80095dc:	08009581 	.word	0x08009581
 80095e0:	08009635 	.word	0x08009635
 80095e4:	08009581 	.word	0x08009581
 80095e8:	08009581 	.word	0x08009581
 80095ec:	080096fb 	.word	0x080096fb
 80095f0:	680b      	ldr	r3, [r1, #0]
 80095f2:	1d1a      	adds	r2, r3, #4
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	600a      	str	r2, [r1, #0]
 80095f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009600:	2301      	movs	r3, #1
 8009602:	e0a3      	b.n	800974c <_printf_i+0x1f4>
 8009604:	6825      	ldr	r5, [r4, #0]
 8009606:	6808      	ldr	r0, [r1, #0]
 8009608:	062e      	lsls	r6, r5, #24
 800960a:	f100 0304 	add.w	r3, r0, #4
 800960e:	d50a      	bpl.n	8009626 <_printf_i+0xce>
 8009610:	6805      	ldr	r5, [r0, #0]
 8009612:	600b      	str	r3, [r1, #0]
 8009614:	2d00      	cmp	r5, #0
 8009616:	da03      	bge.n	8009620 <_printf_i+0xc8>
 8009618:	232d      	movs	r3, #45	; 0x2d
 800961a:	426d      	negs	r5, r5
 800961c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009620:	485e      	ldr	r0, [pc, #376]	; (800979c <_printf_i+0x244>)
 8009622:	230a      	movs	r3, #10
 8009624:	e019      	b.n	800965a <_printf_i+0x102>
 8009626:	f015 0f40 	tst.w	r5, #64	; 0x40
 800962a:	6805      	ldr	r5, [r0, #0]
 800962c:	600b      	str	r3, [r1, #0]
 800962e:	bf18      	it	ne
 8009630:	b22d      	sxthne	r5, r5
 8009632:	e7ef      	b.n	8009614 <_printf_i+0xbc>
 8009634:	680b      	ldr	r3, [r1, #0]
 8009636:	6825      	ldr	r5, [r4, #0]
 8009638:	1d18      	adds	r0, r3, #4
 800963a:	6008      	str	r0, [r1, #0]
 800963c:	0628      	lsls	r0, r5, #24
 800963e:	d501      	bpl.n	8009644 <_printf_i+0xec>
 8009640:	681d      	ldr	r5, [r3, #0]
 8009642:	e002      	b.n	800964a <_printf_i+0xf2>
 8009644:	0669      	lsls	r1, r5, #25
 8009646:	d5fb      	bpl.n	8009640 <_printf_i+0xe8>
 8009648:	881d      	ldrh	r5, [r3, #0]
 800964a:	4854      	ldr	r0, [pc, #336]	; (800979c <_printf_i+0x244>)
 800964c:	2f6f      	cmp	r7, #111	; 0x6f
 800964e:	bf0c      	ite	eq
 8009650:	2308      	moveq	r3, #8
 8009652:	230a      	movne	r3, #10
 8009654:	2100      	movs	r1, #0
 8009656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800965a:	6866      	ldr	r6, [r4, #4]
 800965c:	60a6      	str	r6, [r4, #8]
 800965e:	2e00      	cmp	r6, #0
 8009660:	bfa2      	ittt	ge
 8009662:	6821      	ldrge	r1, [r4, #0]
 8009664:	f021 0104 	bicge.w	r1, r1, #4
 8009668:	6021      	strge	r1, [r4, #0]
 800966a:	b90d      	cbnz	r5, 8009670 <_printf_i+0x118>
 800966c:	2e00      	cmp	r6, #0
 800966e:	d04d      	beq.n	800970c <_printf_i+0x1b4>
 8009670:	4616      	mov	r6, r2
 8009672:	fbb5 f1f3 	udiv	r1, r5, r3
 8009676:	fb03 5711 	mls	r7, r3, r1, r5
 800967a:	5dc7      	ldrb	r7, [r0, r7]
 800967c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009680:	462f      	mov	r7, r5
 8009682:	42bb      	cmp	r3, r7
 8009684:	460d      	mov	r5, r1
 8009686:	d9f4      	bls.n	8009672 <_printf_i+0x11a>
 8009688:	2b08      	cmp	r3, #8
 800968a:	d10b      	bne.n	80096a4 <_printf_i+0x14c>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	07df      	lsls	r7, r3, #31
 8009690:	d508      	bpl.n	80096a4 <_printf_i+0x14c>
 8009692:	6923      	ldr	r3, [r4, #16]
 8009694:	6861      	ldr	r1, [r4, #4]
 8009696:	4299      	cmp	r1, r3
 8009698:	bfde      	ittt	le
 800969a:	2330      	movle	r3, #48	; 0x30
 800969c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096a4:	1b92      	subs	r2, r2, r6
 80096a6:	6122      	str	r2, [r4, #16]
 80096a8:	f8cd a000 	str.w	sl, [sp]
 80096ac:	464b      	mov	r3, r9
 80096ae:	aa03      	add	r2, sp, #12
 80096b0:	4621      	mov	r1, r4
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7ff fee2 	bl	800947c <_printf_common>
 80096b8:	3001      	adds	r0, #1
 80096ba:	d14c      	bne.n	8009756 <_printf_i+0x1fe>
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295
 80096c0:	b004      	add	sp, #16
 80096c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c6:	4835      	ldr	r0, [pc, #212]	; (800979c <_printf_i+0x244>)
 80096c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	680e      	ldr	r6, [r1, #0]
 80096d0:	061f      	lsls	r7, r3, #24
 80096d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80096d6:	600e      	str	r6, [r1, #0]
 80096d8:	d514      	bpl.n	8009704 <_printf_i+0x1ac>
 80096da:	07d9      	lsls	r1, r3, #31
 80096dc:	bf44      	itt	mi
 80096de:	f043 0320 	orrmi.w	r3, r3, #32
 80096e2:	6023      	strmi	r3, [r4, #0]
 80096e4:	b91d      	cbnz	r5, 80096ee <_printf_i+0x196>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	f023 0320 	bic.w	r3, r3, #32
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	2310      	movs	r3, #16
 80096f0:	e7b0      	b.n	8009654 <_printf_i+0xfc>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	f043 0320 	orr.w	r3, r3, #32
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	2378      	movs	r3, #120	; 0x78
 80096fc:	4828      	ldr	r0, [pc, #160]	; (80097a0 <_printf_i+0x248>)
 80096fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009702:	e7e3      	b.n	80096cc <_printf_i+0x174>
 8009704:	065e      	lsls	r6, r3, #25
 8009706:	bf48      	it	mi
 8009708:	b2ad      	uxthmi	r5, r5
 800970a:	e7e6      	b.n	80096da <_printf_i+0x182>
 800970c:	4616      	mov	r6, r2
 800970e:	e7bb      	b.n	8009688 <_printf_i+0x130>
 8009710:	680b      	ldr	r3, [r1, #0]
 8009712:	6826      	ldr	r6, [r4, #0]
 8009714:	6960      	ldr	r0, [r4, #20]
 8009716:	1d1d      	adds	r5, r3, #4
 8009718:	600d      	str	r5, [r1, #0]
 800971a:	0635      	lsls	r5, r6, #24
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	d501      	bpl.n	8009724 <_printf_i+0x1cc>
 8009720:	6018      	str	r0, [r3, #0]
 8009722:	e002      	b.n	800972a <_printf_i+0x1d2>
 8009724:	0671      	lsls	r1, r6, #25
 8009726:	d5fb      	bpl.n	8009720 <_printf_i+0x1c8>
 8009728:	8018      	strh	r0, [r3, #0]
 800972a:	2300      	movs	r3, #0
 800972c:	6123      	str	r3, [r4, #16]
 800972e:	4616      	mov	r6, r2
 8009730:	e7ba      	b.n	80096a8 <_printf_i+0x150>
 8009732:	680b      	ldr	r3, [r1, #0]
 8009734:	1d1a      	adds	r2, r3, #4
 8009736:	600a      	str	r2, [r1, #0]
 8009738:	681e      	ldr	r6, [r3, #0]
 800973a:	6862      	ldr	r2, [r4, #4]
 800973c:	2100      	movs	r1, #0
 800973e:	4630      	mov	r0, r6
 8009740:	f7f6 fd6e 	bl	8000220 <memchr>
 8009744:	b108      	cbz	r0, 800974a <_printf_i+0x1f2>
 8009746:	1b80      	subs	r0, r0, r6
 8009748:	6060      	str	r0, [r4, #4]
 800974a:	6863      	ldr	r3, [r4, #4]
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	2300      	movs	r3, #0
 8009750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009754:	e7a8      	b.n	80096a8 <_printf_i+0x150>
 8009756:	6923      	ldr	r3, [r4, #16]
 8009758:	4632      	mov	r2, r6
 800975a:	4649      	mov	r1, r9
 800975c:	4640      	mov	r0, r8
 800975e:	47d0      	blx	sl
 8009760:	3001      	adds	r0, #1
 8009762:	d0ab      	beq.n	80096bc <_printf_i+0x164>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	079b      	lsls	r3, r3, #30
 8009768:	d413      	bmi.n	8009792 <_printf_i+0x23a>
 800976a:	68e0      	ldr	r0, [r4, #12]
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	4298      	cmp	r0, r3
 8009770:	bfb8      	it	lt
 8009772:	4618      	movlt	r0, r3
 8009774:	e7a4      	b.n	80096c0 <_printf_i+0x168>
 8009776:	2301      	movs	r3, #1
 8009778:	4632      	mov	r2, r6
 800977a:	4649      	mov	r1, r9
 800977c:	4640      	mov	r0, r8
 800977e:	47d0      	blx	sl
 8009780:	3001      	adds	r0, #1
 8009782:	d09b      	beq.n	80096bc <_printf_i+0x164>
 8009784:	3501      	adds	r5, #1
 8009786:	68e3      	ldr	r3, [r4, #12]
 8009788:	9903      	ldr	r1, [sp, #12]
 800978a:	1a5b      	subs	r3, r3, r1
 800978c:	42ab      	cmp	r3, r5
 800978e:	dcf2      	bgt.n	8009776 <_printf_i+0x21e>
 8009790:	e7eb      	b.n	800976a <_printf_i+0x212>
 8009792:	2500      	movs	r5, #0
 8009794:	f104 0619 	add.w	r6, r4, #25
 8009798:	e7f5      	b.n	8009786 <_printf_i+0x22e>
 800979a:	bf00      	nop
 800979c:	0800d506 	.word	0x0800d506
 80097a0:	0800d517 	.word	0x0800d517

080097a4 <siprintf>:
 80097a4:	b40e      	push	{r1, r2, r3}
 80097a6:	b500      	push	{lr}
 80097a8:	b09c      	sub	sp, #112	; 0x70
 80097aa:	ab1d      	add	r3, sp, #116	; 0x74
 80097ac:	9002      	str	r0, [sp, #8]
 80097ae:	9006      	str	r0, [sp, #24]
 80097b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097b4:	4809      	ldr	r0, [pc, #36]	; (80097dc <siprintf+0x38>)
 80097b6:	9107      	str	r1, [sp, #28]
 80097b8:	9104      	str	r1, [sp, #16]
 80097ba:	4909      	ldr	r1, [pc, #36]	; (80097e0 <siprintf+0x3c>)
 80097bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c0:	9105      	str	r1, [sp, #20]
 80097c2:	6800      	ldr	r0, [r0, #0]
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	a902      	add	r1, sp, #8
 80097c8:	f002 fe26 	bl	800c418 <_svfiprintf_r>
 80097cc:	9b02      	ldr	r3, [sp, #8]
 80097ce:	2200      	movs	r2, #0
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	b01c      	add	sp, #112	; 0x70
 80097d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097d8:	b003      	add	sp, #12
 80097da:	4770      	bx	lr
 80097dc:	20000034 	.word	0x20000034
 80097e0:	ffff0208 	.word	0xffff0208

080097e4 <sulp>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4604      	mov	r4, r0
 80097e8:	460d      	mov	r5, r1
 80097ea:	ec45 4b10 	vmov	d0, r4, r5
 80097ee:	4616      	mov	r6, r2
 80097f0:	f002 fbae 	bl	800bf50 <__ulp>
 80097f4:	ec51 0b10 	vmov	r0, r1, d0
 80097f8:	b17e      	cbz	r6, 800981a <sulp+0x36>
 80097fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80097fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd09      	ble.n	800981a <sulp+0x36>
 8009806:	051b      	lsls	r3, r3, #20
 8009808:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800980c:	2400      	movs	r4, #0
 800980e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009812:	4622      	mov	r2, r4
 8009814:	462b      	mov	r3, r5
 8009816:	f7f6 ff0f 	bl	8000638 <__aeabi_dmul>
 800981a:	bd70      	pop	{r4, r5, r6, pc}
 800981c:	0000      	movs	r0, r0
	...

08009820 <_strtod_l>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	b0a3      	sub	sp, #140	; 0x8c
 8009826:	461f      	mov	r7, r3
 8009828:	2300      	movs	r3, #0
 800982a:	931e      	str	r3, [sp, #120]	; 0x78
 800982c:	4ba4      	ldr	r3, [pc, #656]	; (8009ac0 <_strtod_l+0x2a0>)
 800982e:	9219      	str	r2, [sp, #100]	; 0x64
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	9307      	str	r3, [sp, #28]
 8009834:	4604      	mov	r4, r0
 8009836:	4618      	mov	r0, r3
 8009838:	4688      	mov	r8, r1
 800983a:	f7f6 fce9 	bl	8000210 <strlen>
 800983e:	f04f 0a00 	mov.w	sl, #0
 8009842:	4605      	mov	r5, r0
 8009844:	f04f 0b00 	mov.w	fp, #0
 8009848:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800984c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800984e:	781a      	ldrb	r2, [r3, #0]
 8009850:	2a2b      	cmp	r2, #43	; 0x2b
 8009852:	d04c      	beq.n	80098ee <_strtod_l+0xce>
 8009854:	d839      	bhi.n	80098ca <_strtod_l+0xaa>
 8009856:	2a0d      	cmp	r2, #13
 8009858:	d832      	bhi.n	80098c0 <_strtod_l+0xa0>
 800985a:	2a08      	cmp	r2, #8
 800985c:	d832      	bhi.n	80098c4 <_strtod_l+0xa4>
 800985e:	2a00      	cmp	r2, #0
 8009860:	d03c      	beq.n	80098dc <_strtod_l+0xbc>
 8009862:	2300      	movs	r3, #0
 8009864:	930e      	str	r3, [sp, #56]	; 0x38
 8009866:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009868:	7833      	ldrb	r3, [r6, #0]
 800986a:	2b30      	cmp	r3, #48	; 0x30
 800986c:	f040 80b4 	bne.w	80099d8 <_strtod_l+0x1b8>
 8009870:	7873      	ldrb	r3, [r6, #1]
 8009872:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009876:	2b58      	cmp	r3, #88	; 0x58
 8009878:	d16c      	bne.n	8009954 <_strtod_l+0x134>
 800987a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	ab1e      	add	r3, sp, #120	; 0x78
 8009880:	9702      	str	r7, [sp, #8]
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	4a8f      	ldr	r2, [pc, #572]	; (8009ac4 <_strtod_l+0x2a4>)
 8009886:	ab1f      	add	r3, sp, #124	; 0x7c
 8009888:	a91d      	add	r1, sp, #116	; 0x74
 800988a:	4620      	mov	r0, r4
 800988c:	f001 fcc0 	bl	800b210 <__gethex>
 8009890:	f010 0707 	ands.w	r7, r0, #7
 8009894:	4605      	mov	r5, r0
 8009896:	d005      	beq.n	80098a4 <_strtod_l+0x84>
 8009898:	2f06      	cmp	r7, #6
 800989a:	d12a      	bne.n	80098f2 <_strtod_l+0xd2>
 800989c:	3601      	adds	r6, #1
 800989e:	2300      	movs	r3, #0
 80098a0:	961d      	str	r6, [sp, #116]	; 0x74
 80098a2:	930e      	str	r3, [sp, #56]	; 0x38
 80098a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f040 8596 	bne.w	800a3d8 <_strtod_l+0xbb8>
 80098ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ae:	b1db      	cbz	r3, 80098e8 <_strtod_l+0xc8>
 80098b0:	4652      	mov	r2, sl
 80098b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80098b6:	ec43 2b10 	vmov	d0, r2, r3
 80098ba:	b023      	add	sp, #140	; 0x8c
 80098bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c0:	2a20      	cmp	r2, #32
 80098c2:	d1ce      	bne.n	8009862 <_strtod_l+0x42>
 80098c4:	3301      	adds	r3, #1
 80098c6:	931d      	str	r3, [sp, #116]	; 0x74
 80098c8:	e7c0      	b.n	800984c <_strtod_l+0x2c>
 80098ca:	2a2d      	cmp	r2, #45	; 0x2d
 80098cc:	d1c9      	bne.n	8009862 <_strtod_l+0x42>
 80098ce:	2201      	movs	r2, #1
 80098d0:	920e      	str	r2, [sp, #56]	; 0x38
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	921d      	str	r2, [sp, #116]	; 0x74
 80098d6:	785b      	ldrb	r3, [r3, #1]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1c4      	bne.n	8009866 <_strtod_l+0x46>
 80098dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f040 8576 	bne.w	800a3d4 <_strtod_l+0xbb4>
 80098e8:	4652      	mov	r2, sl
 80098ea:	465b      	mov	r3, fp
 80098ec:	e7e3      	b.n	80098b6 <_strtod_l+0x96>
 80098ee:	2200      	movs	r2, #0
 80098f0:	e7ee      	b.n	80098d0 <_strtod_l+0xb0>
 80098f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80098f4:	b13a      	cbz	r2, 8009906 <_strtod_l+0xe6>
 80098f6:	2135      	movs	r1, #53	; 0x35
 80098f8:	a820      	add	r0, sp, #128	; 0x80
 80098fa:	f002 fc34 	bl	800c166 <__copybits>
 80098fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009900:	4620      	mov	r0, r4
 8009902:	f001 fff9 	bl	800b8f8 <_Bfree>
 8009906:	3f01      	subs	r7, #1
 8009908:	2f05      	cmp	r7, #5
 800990a:	d807      	bhi.n	800991c <_strtod_l+0xfc>
 800990c:	e8df f007 	tbb	[pc, r7]
 8009910:	1d180b0e 	.word	0x1d180b0e
 8009914:	030e      	.short	0x030e
 8009916:	f04f 0b00 	mov.w	fp, #0
 800991a:	46da      	mov	sl, fp
 800991c:	0728      	lsls	r0, r5, #28
 800991e:	d5c1      	bpl.n	80098a4 <_strtod_l+0x84>
 8009920:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009924:	e7be      	b.n	80098a4 <_strtod_l+0x84>
 8009926:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800992a:	e7f7      	b.n	800991c <_strtod_l+0xfc>
 800992c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009930:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009932:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009936:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800993a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800993e:	e7ed      	b.n	800991c <_strtod_l+0xfc>
 8009940:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009ac8 <_strtod_l+0x2a8>
 8009944:	f04f 0a00 	mov.w	sl, #0
 8009948:	e7e8      	b.n	800991c <_strtod_l+0xfc>
 800994a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800994e:	f04f 3aff 	mov.w	sl, #4294967295
 8009952:	e7e3      	b.n	800991c <_strtod_l+0xfc>
 8009954:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	921d      	str	r2, [sp, #116]	; 0x74
 800995a:	785b      	ldrb	r3, [r3, #1]
 800995c:	2b30      	cmp	r3, #48	; 0x30
 800995e:	d0f9      	beq.n	8009954 <_strtod_l+0x134>
 8009960:	2b00      	cmp	r3, #0
 8009962:	d09f      	beq.n	80098a4 <_strtod_l+0x84>
 8009964:	2301      	movs	r3, #1
 8009966:	f04f 0900 	mov.w	r9, #0
 800996a:	9304      	str	r3, [sp, #16]
 800996c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800996e:	930a      	str	r3, [sp, #40]	; 0x28
 8009970:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009974:	464f      	mov	r7, r9
 8009976:	220a      	movs	r2, #10
 8009978:	981d      	ldr	r0, [sp, #116]	; 0x74
 800997a:	7806      	ldrb	r6, [r0, #0]
 800997c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009980:	b2d9      	uxtb	r1, r3
 8009982:	2909      	cmp	r1, #9
 8009984:	d92a      	bls.n	80099dc <_strtod_l+0x1bc>
 8009986:	9907      	ldr	r1, [sp, #28]
 8009988:	462a      	mov	r2, r5
 800998a:	f002 fe5d 	bl	800c648 <strncmp>
 800998e:	b398      	cbz	r0, 80099f8 <_strtod_l+0x1d8>
 8009990:	2000      	movs	r0, #0
 8009992:	4633      	mov	r3, r6
 8009994:	463d      	mov	r5, r7
 8009996:	9007      	str	r0, [sp, #28]
 8009998:	4602      	mov	r2, r0
 800999a:	2b65      	cmp	r3, #101	; 0x65
 800999c:	d001      	beq.n	80099a2 <_strtod_l+0x182>
 800999e:	2b45      	cmp	r3, #69	; 0x45
 80099a0:	d118      	bne.n	80099d4 <_strtod_l+0x1b4>
 80099a2:	b91d      	cbnz	r5, 80099ac <_strtod_l+0x18c>
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	4303      	orrs	r3, r0
 80099a8:	d098      	beq.n	80098dc <_strtod_l+0xbc>
 80099aa:	2500      	movs	r5, #0
 80099ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80099b0:	f108 0301 	add.w	r3, r8, #1
 80099b4:	931d      	str	r3, [sp, #116]	; 0x74
 80099b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80099ba:	2b2b      	cmp	r3, #43	; 0x2b
 80099bc:	d075      	beq.n	8009aaa <_strtod_l+0x28a>
 80099be:	2b2d      	cmp	r3, #45	; 0x2d
 80099c0:	d07b      	beq.n	8009aba <_strtod_l+0x29a>
 80099c2:	f04f 0c00 	mov.w	ip, #0
 80099c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80099ca:	2909      	cmp	r1, #9
 80099cc:	f240 8082 	bls.w	8009ad4 <_strtod_l+0x2b4>
 80099d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80099d4:	2600      	movs	r6, #0
 80099d6:	e09d      	b.n	8009b14 <_strtod_l+0x2f4>
 80099d8:	2300      	movs	r3, #0
 80099da:	e7c4      	b.n	8009966 <_strtod_l+0x146>
 80099dc:	2f08      	cmp	r7, #8
 80099de:	bfd8      	it	le
 80099e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80099e2:	f100 0001 	add.w	r0, r0, #1
 80099e6:	bfda      	itte	le
 80099e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80099ec:	9309      	strle	r3, [sp, #36]	; 0x24
 80099ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 80099f2:	3701      	adds	r7, #1
 80099f4:	901d      	str	r0, [sp, #116]	; 0x74
 80099f6:	e7bf      	b.n	8009978 <_strtod_l+0x158>
 80099f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099fa:	195a      	adds	r2, r3, r5
 80099fc:	921d      	str	r2, [sp, #116]	; 0x74
 80099fe:	5d5b      	ldrb	r3, [r3, r5]
 8009a00:	2f00      	cmp	r7, #0
 8009a02:	d037      	beq.n	8009a74 <_strtod_l+0x254>
 8009a04:	9007      	str	r0, [sp, #28]
 8009a06:	463d      	mov	r5, r7
 8009a08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009a0c:	2a09      	cmp	r2, #9
 8009a0e:	d912      	bls.n	8009a36 <_strtod_l+0x216>
 8009a10:	2201      	movs	r2, #1
 8009a12:	e7c2      	b.n	800999a <_strtod_l+0x17a>
 8009a14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	921d      	str	r2, [sp, #116]	; 0x74
 8009a1a:	785b      	ldrb	r3, [r3, #1]
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	2b30      	cmp	r3, #48	; 0x30
 8009a20:	d0f8      	beq.n	8009a14 <_strtod_l+0x1f4>
 8009a22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009a26:	2a08      	cmp	r2, #8
 8009a28:	f200 84db 	bhi.w	800a3e2 <_strtod_l+0xbc2>
 8009a2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009a2e:	9007      	str	r0, [sp, #28]
 8009a30:	2000      	movs	r0, #0
 8009a32:	920a      	str	r2, [sp, #40]	; 0x28
 8009a34:	4605      	mov	r5, r0
 8009a36:	3b30      	subs	r3, #48	; 0x30
 8009a38:	f100 0201 	add.w	r2, r0, #1
 8009a3c:	d014      	beq.n	8009a68 <_strtod_l+0x248>
 8009a3e:	9907      	ldr	r1, [sp, #28]
 8009a40:	4411      	add	r1, r2
 8009a42:	9107      	str	r1, [sp, #28]
 8009a44:	462a      	mov	r2, r5
 8009a46:	eb00 0e05 	add.w	lr, r0, r5
 8009a4a:	210a      	movs	r1, #10
 8009a4c:	4572      	cmp	r2, lr
 8009a4e:	d113      	bne.n	8009a78 <_strtod_l+0x258>
 8009a50:	182a      	adds	r2, r5, r0
 8009a52:	2a08      	cmp	r2, #8
 8009a54:	f105 0501 	add.w	r5, r5, #1
 8009a58:	4405      	add	r5, r0
 8009a5a:	dc1c      	bgt.n	8009a96 <_strtod_l+0x276>
 8009a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a5e:	220a      	movs	r2, #10
 8009a60:	fb02 3301 	mla	r3, r2, r1, r3
 8009a64:	9309      	str	r3, [sp, #36]	; 0x24
 8009a66:	2200      	movs	r2, #0
 8009a68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a6a:	1c59      	adds	r1, r3, #1
 8009a6c:	911d      	str	r1, [sp, #116]	; 0x74
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	4610      	mov	r0, r2
 8009a72:	e7c9      	b.n	8009a08 <_strtod_l+0x1e8>
 8009a74:	4638      	mov	r0, r7
 8009a76:	e7d2      	b.n	8009a1e <_strtod_l+0x1fe>
 8009a78:	2a08      	cmp	r2, #8
 8009a7a:	dc04      	bgt.n	8009a86 <_strtod_l+0x266>
 8009a7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009a7e:	434e      	muls	r6, r1
 8009a80:	9609      	str	r6, [sp, #36]	; 0x24
 8009a82:	3201      	adds	r2, #1
 8009a84:	e7e2      	b.n	8009a4c <_strtod_l+0x22c>
 8009a86:	f102 0c01 	add.w	ip, r2, #1
 8009a8a:	f1bc 0f10 	cmp.w	ip, #16
 8009a8e:	bfd8      	it	le
 8009a90:	fb01 f909 	mulle.w	r9, r1, r9
 8009a94:	e7f5      	b.n	8009a82 <_strtod_l+0x262>
 8009a96:	2d10      	cmp	r5, #16
 8009a98:	bfdc      	itt	le
 8009a9a:	220a      	movle	r2, #10
 8009a9c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009aa0:	e7e1      	b.n	8009a66 <_strtod_l+0x246>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9307      	str	r3, [sp, #28]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	e77c      	b.n	80099a4 <_strtod_l+0x184>
 8009aaa:	f04f 0c00 	mov.w	ip, #0
 8009aae:	f108 0302 	add.w	r3, r8, #2
 8009ab2:	931d      	str	r3, [sp, #116]	; 0x74
 8009ab4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009ab8:	e785      	b.n	80099c6 <_strtod_l+0x1a6>
 8009aba:	f04f 0c01 	mov.w	ip, #1
 8009abe:	e7f6      	b.n	8009aae <_strtod_l+0x28e>
 8009ac0:	0800d678 	.word	0x0800d678
 8009ac4:	0800d528 	.word	0x0800d528
 8009ac8:	7ff00000 	.word	0x7ff00000
 8009acc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ace:	1c59      	adds	r1, r3, #1
 8009ad0:	911d      	str	r1, [sp, #116]	; 0x74
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	2b30      	cmp	r3, #48	; 0x30
 8009ad6:	d0f9      	beq.n	8009acc <_strtod_l+0x2ac>
 8009ad8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009adc:	2908      	cmp	r1, #8
 8009ade:	f63f af79 	bhi.w	80099d4 <_strtod_l+0x1b4>
 8009ae2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009ae6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ae8:	9308      	str	r3, [sp, #32]
 8009aea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009aec:	1c59      	adds	r1, r3, #1
 8009aee:	911d      	str	r1, [sp, #116]	; 0x74
 8009af0:	785b      	ldrb	r3, [r3, #1]
 8009af2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009af6:	2e09      	cmp	r6, #9
 8009af8:	d937      	bls.n	8009b6a <_strtod_l+0x34a>
 8009afa:	9e08      	ldr	r6, [sp, #32]
 8009afc:	1b89      	subs	r1, r1, r6
 8009afe:	2908      	cmp	r1, #8
 8009b00:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009b04:	dc02      	bgt.n	8009b0c <_strtod_l+0x2ec>
 8009b06:	4576      	cmp	r6, lr
 8009b08:	bfa8      	it	ge
 8009b0a:	4676      	movge	r6, lr
 8009b0c:	f1bc 0f00 	cmp.w	ip, #0
 8009b10:	d000      	beq.n	8009b14 <_strtod_l+0x2f4>
 8009b12:	4276      	negs	r6, r6
 8009b14:	2d00      	cmp	r5, #0
 8009b16:	d14f      	bne.n	8009bb8 <_strtod_l+0x398>
 8009b18:	9904      	ldr	r1, [sp, #16]
 8009b1a:	4301      	orrs	r1, r0
 8009b1c:	f47f aec2 	bne.w	80098a4 <_strtod_l+0x84>
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	f47f aedb 	bne.w	80098dc <_strtod_l+0xbc>
 8009b26:	2b69      	cmp	r3, #105	; 0x69
 8009b28:	d027      	beq.n	8009b7a <_strtod_l+0x35a>
 8009b2a:	dc24      	bgt.n	8009b76 <_strtod_l+0x356>
 8009b2c:	2b49      	cmp	r3, #73	; 0x49
 8009b2e:	d024      	beq.n	8009b7a <_strtod_l+0x35a>
 8009b30:	2b4e      	cmp	r3, #78	; 0x4e
 8009b32:	f47f aed3 	bne.w	80098dc <_strtod_l+0xbc>
 8009b36:	499e      	ldr	r1, [pc, #632]	; (8009db0 <_strtod_l+0x590>)
 8009b38:	a81d      	add	r0, sp, #116	; 0x74
 8009b3a:	f001 fdc1 	bl	800b6c0 <__match>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f43f aecc 	beq.w	80098dc <_strtod_l+0xbc>
 8009b44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b28      	cmp	r3, #40	; 0x28
 8009b4a:	d12d      	bne.n	8009ba8 <_strtod_l+0x388>
 8009b4c:	4999      	ldr	r1, [pc, #612]	; (8009db4 <_strtod_l+0x594>)
 8009b4e:	aa20      	add	r2, sp, #128	; 0x80
 8009b50:	a81d      	add	r0, sp, #116	; 0x74
 8009b52:	f001 fdc9 	bl	800b6e8 <__hexnan>
 8009b56:	2805      	cmp	r0, #5
 8009b58:	d126      	bne.n	8009ba8 <_strtod_l+0x388>
 8009b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b5c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009b60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009b64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009b68:	e69c      	b.n	80098a4 <_strtod_l+0x84>
 8009b6a:	210a      	movs	r1, #10
 8009b6c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009b70:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009b74:	e7b9      	b.n	8009aea <_strtod_l+0x2ca>
 8009b76:	2b6e      	cmp	r3, #110	; 0x6e
 8009b78:	e7db      	b.n	8009b32 <_strtod_l+0x312>
 8009b7a:	498f      	ldr	r1, [pc, #572]	; (8009db8 <_strtod_l+0x598>)
 8009b7c:	a81d      	add	r0, sp, #116	; 0x74
 8009b7e:	f001 fd9f 	bl	800b6c0 <__match>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	f43f aeaa 	beq.w	80098dc <_strtod_l+0xbc>
 8009b88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b8a:	498c      	ldr	r1, [pc, #560]	; (8009dbc <_strtod_l+0x59c>)
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	a81d      	add	r0, sp, #116	; 0x74
 8009b90:	931d      	str	r3, [sp, #116]	; 0x74
 8009b92:	f001 fd95 	bl	800b6c0 <__match>
 8009b96:	b910      	cbnz	r0, 8009b9e <_strtod_l+0x37e>
 8009b98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	931d      	str	r3, [sp, #116]	; 0x74
 8009b9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009dcc <_strtod_l+0x5ac>
 8009ba2:	f04f 0a00 	mov.w	sl, #0
 8009ba6:	e67d      	b.n	80098a4 <_strtod_l+0x84>
 8009ba8:	4885      	ldr	r0, [pc, #532]	; (8009dc0 <_strtod_l+0x5a0>)
 8009baa:	f002 fd35 	bl	800c618 <nan>
 8009bae:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009bb2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009bb6:	e675      	b.n	80098a4 <_strtod_l+0x84>
 8009bb8:	9b07      	ldr	r3, [sp, #28]
 8009bba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bbc:	1af3      	subs	r3, r6, r3
 8009bbe:	2f00      	cmp	r7, #0
 8009bc0:	bf08      	it	eq
 8009bc2:	462f      	moveq	r7, r5
 8009bc4:	2d10      	cmp	r5, #16
 8009bc6:	9308      	str	r3, [sp, #32]
 8009bc8:	46a8      	mov	r8, r5
 8009bca:	bfa8      	it	ge
 8009bcc:	f04f 0810 	movge.w	r8, #16
 8009bd0:	f7f6 fcb8 	bl	8000544 <__aeabi_ui2d>
 8009bd4:	2d09      	cmp	r5, #9
 8009bd6:	4682      	mov	sl, r0
 8009bd8:	468b      	mov	fp, r1
 8009bda:	dd13      	ble.n	8009c04 <_strtod_l+0x3e4>
 8009bdc:	4b79      	ldr	r3, [pc, #484]	; (8009dc4 <_strtod_l+0x5a4>)
 8009bde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009be2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009be6:	f7f6 fd27 	bl	8000638 <__aeabi_dmul>
 8009bea:	4682      	mov	sl, r0
 8009bec:	4648      	mov	r0, r9
 8009bee:	468b      	mov	fp, r1
 8009bf0:	f7f6 fca8 	bl	8000544 <__aeabi_ui2d>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4650      	mov	r0, sl
 8009bfa:	4659      	mov	r1, fp
 8009bfc:	f7f6 fb66 	bl	80002cc <__adddf3>
 8009c00:	4682      	mov	sl, r0
 8009c02:	468b      	mov	fp, r1
 8009c04:	2d0f      	cmp	r5, #15
 8009c06:	dc38      	bgt.n	8009c7a <_strtod_l+0x45a>
 8009c08:	9b08      	ldr	r3, [sp, #32]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f43f ae4a 	beq.w	80098a4 <_strtod_l+0x84>
 8009c10:	dd24      	ble.n	8009c5c <_strtod_l+0x43c>
 8009c12:	2b16      	cmp	r3, #22
 8009c14:	dc0b      	bgt.n	8009c2e <_strtod_l+0x40e>
 8009c16:	4d6b      	ldr	r5, [pc, #428]	; (8009dc4 <_strtod_l+0x5a4>)
 8009c18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009c1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009c20:	4652      	mov	r2, sl
 8009c22:	465b      	mov	r3, fp
 8009c24:	f7f6 fd08 	bl	8000638 <__aeabi_dmul>
 8009c28:	4682      	mov	sl, r0
 8009c2a:	468b      	mov	fp, r1
 8009c2c:	e63a      	b.n	80098a4 <_strtod_l+0x84>
 8009c2e:	9a08      	ldr	r2, [sp, #32]
 8009c30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009c34:	4293      	cmp	r3, r2
 8009c36:	db20      	blt.n	8009c7a <_strtod_l+0x45a>
 8009c38:	4c62      	ldr	r4, [pc, #392]	; (8009dc4 <_strtod_l+0x5a4>)
 8009c3a:	f1c5 050f 	rsb	r5, r5, #15
 8009c3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009c42:	4652      	mov	r2, sl
 8009c44:	465b      	mov	r3, fp
 8009c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c4a:	f7f6 fcf5 	bl	8000638 <__aeabi_dmul>
 8009c4e:	9b08      	ldr	r3, [sp, #32]
 8009c50:	1b5d      	subs	r5, r3, r5
 8009c52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009c56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c5a:	e7e3      	b.n	8009c24 <_strtod_l+0x404>
 8009c5c:	9b08      	ldr	r3, [sp, #32]
 8009c5e:	3316      	adds	r3, #22
 8009c60:	db0b      	blt.n	8009c7a <_strtod_l+0x45a>
 8009c62:	9b07      	ldr	r3, [sp, #28]
 8009c64:	4a57      	ldr	r2, [pc, #348]	; (8009dc4 <_strtod_l+0x5a4>)
 8009c66:	1b9e      	subs	r6, r3, r6
 8009c68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009c6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c70:	4650      	mov	r0, sl
 8009c72:	4659      	mov	r1, fp
 8009c74:	f7f6 fe0a 	bl	800088c <__aeabi_ddiv>
 8009c78:	e7d6      	b.n	8009c28 <_strtod_l+0x408>
 8009c7a:	9b08      	ldr	r3, [sp, #32]
 8009c7c:	eba5 0808 	sub.w	r8, r5, r8
 8009c80:	4498      	add	r8, r3
 8009c82:	f1b8 0f00 	cmp.w	r8, #0
 8009c86:	dd71      	ble.n	8009d6c <_strtod_l+0x54c>
 8009c88:	f018 030f 	ands.w	r3, r8, #15
 8009c8c:	d00a      	beq.n	8009ca4 <_strtod_l+0x484>
 8009c8e:	494d      	ldr	r1, [pc, #308]	; (8009dc4 <_strtod_l+0x5a4>)
 8009c90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c94:	4652      	mov	r2, sl
 8009c96:	465b      	mov	r3, fp
 8009c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c9c:	f7f6 fccc 	bl	8000638 <__aeabi_dmul>
 8009ca0:	4682      	mov	sl, r0
 8009ca2:	468b      	mov	fp, r1
 8009ca4:	f038 080f 	bics.w	r8, r8, #15
 8009ca8:	d04d      	beq.n	8009d46 <_strtod_l+0x526>
 8009caa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009cae:	dd22      	ble.n	8009cf6 <_strtod_l+0x4d6>
 8009cb0:	2500      	movs	r5, #0
 8009cb2:	462e      	mov	r6, r5
 8009cb4:	9509      	str	r5, [sp, #36]	; 0x24
 8009cb6:	9507      	str	r5, [sp, #28]
 8009cb8:	2322      	movs	r3, #34	; 0x22
 8009cba:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009dcc <_strtod_l+0x5ac>
 8009cbe:	6023      	str	r3, [r4, #0]
 8009cc0:	f04f 0a00 	mov.w	sl, #0
 8009cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f43f adec 	beq.w	80098a4 <_strtod_l+0x84>
 8009ccc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f001 fe12 	bl	800b8f8 <_Bfree>
 8009cd4:	9907      	ldr	r1, [sp, #28]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f001 fe0e 	bl	800b8f8 <_Bfree>
 8009cdc:	4631      	mov	r1, r6
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f001 fe0a 	bl	800b8f8 <_Bfree>
 8009ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f001 fe06 	bl	800b8f8 <_Bfree>
 8009cec:	4629      	mov	r1, r5
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f001 fe02 	bl	800b8f8 <_Bfree>
 8009cf4:	e5d6      	b.n	80098a4 <_strtod_l+0x84>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009cfc:	4650      	mov	r0, sl
 8009cfe:	4659      	mov	r1, fp
 8009d00:	4699      	mov	r9, r3
 8009d02:	f1b8 0f01 	cmp.w	r8, #1
 8009d06:	dc21      	bgt.n	8009d4c <_strtod_l+0x52c>
 8009d08:	b10b      	cbz	r3, 8009d0e <_strtod_l+0x4ee>
 8009d0a:	4682      	mov	sl, r0
 8009d0c:	468b      	mov	fp, r1
 8009d0e:	4b2e      	ldr	r3, [pc, #184]	; (8009dc8 <_strtod_l+0x5a8>)
 8009d10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009d14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009d18:	4652      	mov	r2, sl
 8009d1a:	465b      	mov	r3, fp
 8009d1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009d20:	f7f6 fc8a 	bl	8000638 <__aeabi_dmul>
 8009d24:	4b29      	ldr	r3, [pc, #164]	; (8009dcc <_strtod_l+0x5ac>)
 8009d26:	460a      	mov	r2, r1
 8009d28:	400b      	ands	r3, r1
 8009d2a:	4929      	ldr	r1, [pc, #164]	; (8009dd0 <_strtod_l+0x5b0>)
 8009d2c:	428b      	cmp	r3, r1
 8009d2e:	4682      	mov	sl, r0
 8009d30:	d8be      	bhi.n	8009cb0 <_strtod_l+0x490>
 8009d32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009d36:	428b      	cmp	r3, r1
 8009d38:	bf86      	itte	hi
 8009d3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009dd4 <_strtod_l+0x5b4>
 8009d3e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009d42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009d46:	2300      	movs	r3, #0
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	e081      	b.n	8009e50 <_strtod_l+0x630>
 8009d4c:	f018 0f01 	tst.w	r8, #1
 8009d50:	d007      	beq.n	8009d62 <_strtod_l+0x542>
 8009d52:	4b1d      	ldr	r3, [pc, #116]	; (8009dc8 <_strtod_l+0x5a8>)
 8009d54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	f7f6 fc6c 	bl	8000638 <__aeabi_dmul>
 8009d60:	2301      	movs	r3, #1
 8009d62:	f109 0901 	add.w	r9, r9, #1
 8009d66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d6a:	e7ca      	b.n	8009d02 <_strtod_l+0x4e2>
 8009d6c:	d0eb      	beq.n	8009d46 <_strtod_l+0x526>
 8009d6e:	f1c8 0800 	rsb	r8, r8, #0
 8009d72:	f018 020f 	ands.w	r2, r8, #15
 8009d76:	d00a      	beq.n	8009d8e <_strtod_l+0x56e>
 8009d78:	4b12      	ldr	r3, [pc, #72]	; (8009dc4 <_strtod_l+0x5a4>)
 8009d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d7e:	4650      	mov	r0, sl
 8009d80:	4659      	mov	r1, fp
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	f7f6 fd81 	bl	800088c <__aeabi_ddiv>
 8009d8a:	4682      	mov	sl, r0
 8009d8c:	468b      	mov	fp, r1
 8009d8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009d92:	d0d8      	beq.n	8009d46 <_strtod_l+0x526>
 8009d94:	f1b8 0f1f 	cmp.w	r8, #31
 8009d98:	dd1e      	ble.n	8009dd8 <_strtod_l+0x5b8>
 8009d9a:	2500      	movs	r5, #0
 8009d9c:	462e      	mov	r6, r5
 8009d9e:	9509      	str	r5, [sp, #36]	; 0x24
 8009da0:	9507      	str	r5, [sp, #28]
 8009da2:	2322      	movs	r3, #34	; 0x22
 8009da4:	f04f 0a00 	mov.w	sl, #0
 8009da8:	f04f 0b00 	mov.w	fp, #0
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	e789      	b.n	8009cc4 <_strtod_l+0x4a4>
 8009db0:	0800d501 	.word	0x0800d501
 8009db4:	0800d53c 	.word	0x0800d53c
 8009db8:	0800d4f9 	.word	0x0800d4f9
 8009dbc:	0800d57b 	.word	0x0800d57b
 8009dc0:	0800d838 	.word	0x0800d838
 8009dc4:	0800d718 	.word	0x0800d718
 8009dc8:	0800d6f0 	.word	0x0800d6f0
 8009dcc:	7ff00000 	.word	0x7ff00000
 8009dd0:	7ca00000 	.word	0x7ca00000
 8009dd4:	7fefffff 	.word	0x7fefffff
 8009dd8:	f018 0310 	ands.w	r3, r8, #16
 8009ddc:	bf18      	it	ne
 8009dde:	236a      	movne	r3, #106	; 0x6a
 8009de0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a198 <_strtod_l+0x978>
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	4650      	mov	r0, sl
 8009de8:	4659      	mov	r1, fp
 8009dea:	2300      	movs	r3, #0
 8009dec:	f018 0f01 	tst.w	r8, #1
 8009df0:	d004      	beq.n	8009dfc <_strtod_l+0x5dc>
 8009df2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009df6:	f7f6 fc1f 	bl	8000638 <__aeabi_dmul>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009e00:	f109 0908 	add.w	r9, r9, #8
 8009e04:	d1f2      	bne.n	8009dec <_strtod_l+0x5cc>
 8009e06:	b10b      	cbz	r3, 8009e0c <_strtod_l+0x5ec>
 8009e08:	4682      	mov	sl, r0
 8009e0a:	468b      	mov	fp, r1
 8009e0c:	9b04      	ldr	r3, [sp, #16]
 8009e0e:	b1bb      	cbz	r3, 8009e40 <_strtod_l+0x620>
 8009e10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009e14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	4659      	mov	r1, fp
 8009e1c:	dd10      	ble.n	8009e40 <_strtod_l+0x620>
 8009e1e:	2b1f      	cmp	r3, #31
 8009e20:	f340 8128 	ble.w	800a074 <_strtod_l+0x854>
 8009e24:	2b34      	cmp	r3, #52	; 0x34
 8009e26:	bfde      	ittt	le
 8009e28:	3b20      	suble	r3, #32
 8009e2a:	f04f 32ff 	movle.w	r2, #4294967295
 8009e2e:	fa02 f303 	lslle.w	r3, r2, r3
 8009e32:	f04f 0a00 	mov.w	sl, #0
 8009e36:	bfcc      	ite	gt
 8009e38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009e3c:	ea03 0b01 	andle.w	fp, r3, r1
 8009e40:	2200      	movs	r2, #0
 8009e42:	2300      	movs	r3, #0
 8009e44:	4650      	mov	r0, sl
 8009e46:	4659      	mov	r1, fp
 8009e48:	f7f6 fe5e 	bl	8000b08 <__aeabi_dcmpeq>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d1a4      	bne.n	8009d9a <_strtod_l+0x57a>
 8009e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e56:	462b      	mov	r3, r5
 8009e58:	463a      	mov	r2, r7
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f001 fdb8 	bl	800b9d0 <__s2b>
 8009e60:	9009      	str	r0, [sp, #36]	; 0x24
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f af24 	beq.w	8009cb0 <_strtod_l+0x490>
 8009e68:	9b07      	ldr	r3, [sp, #28]
 8009e6a:	1b9e      	subs	r6, r3, r6
 8009e6c:	9b08      	ldr	r3, [sp, #32]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bfb4      	ite	lt
 8009e72:	4633      	movlt	r3, r6
 8009e74:	2300      	movge	r3, #0
 8009e76:	9310      	str	r3, [sp, #64]	; 0x40
 8009e78:	9b08      	ldr	r3, [sp, #32]
 8009e7a:	2500      	movs	r5, #0
 8009e7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e80:	9318      	str	r3, [sp, #96]	; 0x60
 8009e82:	462e      	mov	r6, r5
 8009e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e86:	4620      	mov	r0, r4
 8009e88:	6859      	ldr	r1, [r3, #4]
 8009e8a:	f001 fcf5 	bl	800b878 <_Balloc>
 8009e8e:	9007      	str	r0, [sp, #28]
 8009e90:	2800      	cmp	r0, #0
 8009e92:	f43f af11 	beq.w	8009cb8 <_strtod_l+0x498>
 8009e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e98:	691a      	ldr	r2, [r3, #16]
 8009e9a:	3202      	adds	r2, #2
 8009e9c:	f103 010c 	add.w	r1, r3, #12
 8009ea0:	0092      	lsls	r2, r2, #2
 8009ea2:	300c      	adds	r0, #12
 8009ea4:	f001 fcda 	bl	800b85c <memcpy>
 8009ea8:	ec4b ab10 	vmov	d0, sl, fp
 8009eac:	aa20      	add	r2, sp, #128	; 0x80
 8009eae:	a91f      	add	r1, sp, #124	; 0x7c
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009eb6:	f002 f8c7 	bl	800c048 <__d2b>
 8009eba:	901e      	str	r0, [sp, #120]	; 0x78
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f43f aefb 	beq.w	8009cb8 <_strtod_l+0x498>
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f001 fe1d 	bl	800bb04 <__i2b>
 8009eca:	4606      	mov	r6, r0
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	f43f aef3 	beq.w	8009cb8 <_strtod_l+0x498>
 8009ed2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ed4:	9904      	ldr	r1, [sp, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfab      	itete	ge
 8009eda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009edc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009ede:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009ee0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009ee4:	bfac      	ite	ge
 8009ee6:	eb03 0902 	addge.w	r9, r3, r2
 8009eea:	1ad7      	sublt	r7, r2, r3
 8009eec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009eee:	eba3 0801 	sub.w	r8, r3, r1
 8009ef2:	4490      	add	r8, r2
 8009ef4:	4ba3      	ldr	r3, [pc, #652]	; (800a184 <_strtod_l+0x964>)
 8009ef6:	f108 38ff 	add.w	r8, r8, #4294967295
 8009efa:	4598      	cmp	r8, r3
 8009efc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f00:	f280 80cc 	bge.w	800a09c <_strtod_l+0x87c>
 8009f04:	eba3 0308 	sub.w	r3, r3, r8
 8009f08:	2b1f      	cmp	r3, #31
 8009f0a:	eba2 0203 	sub.w	r2, r2, r3
 8009f0e:	f04f 0101 	mov.w	r1, #1
 8009f12:	f300 80b6 	bgt.w	800a082 <_strtod_l+0x862>
 8009f16:	fa01 f303 	lsl.w	r3, r1, r3
 8009f1a:	9311      	str	r3, [sp, #68]	; 0x44
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f20:	eb09 0802 	add.w	r8, r9, r2
 8009f24:	9b04      	ldr	r3, [sp, #16]
 8009f26:	45c1      	cmp	r9, r8
 8009f28:	4417      	add	r7, r2
 8009f2a:	441f      	add	r7, r3
 8009f2c:	464b      	mov	r3, r9
 8009f2e:	bfa8      	it	ge
 8009f30:	4643      	movge	r3, r8
 8009f32:	42bb      	cmp	r3, r7
 8009f34:	bfa8      	it	ge
 8009f36:	463b      	movge	r3, r7
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bfc2      	ittt	gt
 8009f3c:	eba8 0803 	subgt.w	r8, r8, r3
 8009f40:	1aff      	subgt	r7, r7, r3
 8009f42:	eba9 0903 	subgt.w	r9, r9, r3
 8009f46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	dd17      	ble.n	8009f7c <_strtod_l+0x75c>
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4620      	mov	r0, r4
 8009f52:	f001 fe93 	bl	800bc7c <__pow5mult>
 8009f56:	4606      	mov	r6, r0
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	f43f aead 	beq.w	8009cb8 <_strtod_l+0x498>
 8009f5e:	4601      	mov	r1, r0
 8009f60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009f62:	4620      	mov	r0, r4
 8009f64:	f001 fde4 	bl	800bb30 <__multiply>
 8009f68:	900f      	str	r0, [sp, #60]	; 0x3c
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	f43f aea4 	beq.w	8009cb8 <_strtod_l+0x498>
 8009f70:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f72:	4620      	mov	r0, r4
 8009f74:	f001 fcc0 	bl	800b8f8 <_Bfree>
 8009f78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f7a:	931e      	str	r3, [sp, #120]	; 0x78
 8009f7c:	f1b8 0f00 	cmp.w	r8, #0
 8009f80:	f300 8091 	bgt.w	800a0a6 <_strtod_l+0x886>
 8009f84:	9b08      	ldr	r3, [sp, #32]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dd08      	ble.n	8009f9c <_strtod_l+0x77c>
 8009f8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f8c:	9907      	ldr	r1, [sp, #28]
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f001 fe74 	bl	800bc7c <__pow5mult>
 8009f94:	9007      	str	r0, [sp, #28]
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f43f ae8e 	beq.w	8009cb8 <_strtod_l+0x498>
 8009f9c:	2f00      	cmp	r7, #0
 8009f9e:	dd08      	ble.n	8009fb2 <_strtod_l+0x792>
 8009fa0:	9907      	ldr	r1, [sp, #28]
 8009fa2:	463a      	mov	r2, r7
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f001 fec3 	bl	800bd30 <__lshift>
 8009faa:	9007      	str	r0, [sp, #28]
 8009fac:	2800      	cmp	r0, #0
 8009fae:	f43f ae83 	beq.w	8009cb8 <_strtod_l+0x498>
 8009fb2:	f1b9 0f00 	cmp.w	r9, #0
 8009fb6:	dd08      	ble.n	8009fca <_strtod_l+0x7aa>
 8009fb8:	4631      	mov	r1, r6
 8009fba:	464a      	mov	r2, r9
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f001 feb7 	bl	800bd30 <__lshift>
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	f43f ae77 	beq.w	8009cb8 <_strtod_l+0x498>
 8009fca:	9a07      	ldr	r2, [sp, #28]
 8009fcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f001 ff36 	bl	800be40 <__mdiff>
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	f43f ae6e 	beq.w	8009cb8 <_strtod_l+0x498>
 8009fdc:	68c3      	ldr	r3, [r0, #12]
 8009fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60c3      	str	r3, [r0, #12]
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	f001 ff0f 	bl	800be08 <__mcmp>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	da65      	bge.n	800a0ba <_strtod_l+0x89a>
 8009fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ff0:	ea53 030a 	orrs.w	r3, r3, sl
 8009ff4:	f040 8087 	bne.w	800a106 <_strtod_l+0x8e6>
 8009ff8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f040 8082 	bne.w	800a106 <_strtod_l+0x8e6>
 800a002:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a006:	0d1b      	lsrs	r3, r3, #20
 800a008:	051b      	lsls	r3, r3, #20
 800a00a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a00e:	d97a      	bls.n	800a106 <_strtod_l+0x8e6>
 800a010:	696b      	ldr	r3, [r5, #20]
 800a012:	b913      	cbnz	r3, 800a01a <_strtod_l+0x7fa>
 800a014:	692b      	ldr	r3, [r5, #16]
 800a016:	2b01      	cmp	r3, #1
 800a018:	dd75      	ble.n	800a106 <_strtod_l+0x8e6>
 800a01a:	4629      	mov	r1, r5
 800a01c:	2201      	movs	r2, #1
 800a01e:	4620      	mov	r0, r4
 800a020:	f001 fe86 	bl	800bd30 <__lshift>
 800a024:	4631      	mov	r1, r6
 800a026:	4605      	mov	r5, r0
 800a028:	f001 feee 	bl	800be08 <__mcmp>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	dd6a      	ble.n	800a106 <_strtod_l+0x8e6>
 800a030:	9904      	ldr	r1, [sp, #16]
 800a032:	4a55      	ldr	r2, [pc, #340]	; (800a188 <_strtod_l+0x968>)
 800a034:	465b      	mov	r3, fp
 800a036:	2900      	cmp	r1, #0
 800a038:	f000 8085 	beq.w	800a146 <_strtod_l+0x926>
 800a03c:	ea02 010b 	and.w	r1, r2, fp
 800a040:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a044:	dc7f      	bgt.n	800a146 <_strtod_l+0x926>
 800a046:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a04a:	f77f aeaa 	ble.w	8009da2 <_strtod_l+0x582>
 800a04e:	4a4f      	ldr	r2, [pc, #316]	; (800a18c <_strtod_l+0x96c>)
 800a050:	2300      	movs	r3, #0
 800a052:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a056:	4650      	mov	r0, sl
 800a058:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a05c:	4659      	mov	r1, fp
 800a05e:	f7f6 faeb 	bl	8000638 <__aeabi_dmul>
 800a062:	460b      	mov	r3, r1
 800a064:	4303      	orrs	r3, r0
 800a066:	bf08      	it	eq
 800a068:	2322      	moveq	r3, #34	; 0x22
 800a06a:	4682      	mov	sl, r0
 800a06c:	468b      	mov	fp, r1
 800a06e:	bf08      	it	eq
 800a070:	6023      	streq	r3, [r4, #0]
 800a072:	e62b      	b.n	8009ccc <_strtod_l+0x4ac>
 800a074:	f04f 32ff 	mov.w	r2, #4294967295
 800a078:	fa02 f303 	lsl.w	r3, r2, r3
 800a07c:	ea03 0a0a 	and.w	sl, r3, sl
 800a080:	e6de      	b.n	8009e40 <_strtod_l+0x620>
 800a082:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a086:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a08a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a08e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a092:	fa01 f308 	lsl.w	r3, r1, r8
 800a096:	930c      	str	r3, [sp, #48]	; 0x30
 800a098:	9111      	str	r1, [sp, #68]	; 0x44
 800a09a:	e741      	b.n	8009f20 <_strtod_l+0x700>
 800a09c:	2300      	movs	r3, #0
 800a09e:	930c      	str	r3, [sp, #48]	; 0x30
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	9311      	str	r3, [sp, #68]	; 0x44
 800a0a4:	e73c      	b.n	8009f20 <_strtod_l+0x700>
 800a0a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a0a8:	4642      	mov	r2, r8
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f001 fe40 	bl	800bd30 <__lshift>
 800a0b0:	901e      	str	r0, [sp, #120]	; 0x78
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	f47f af66 	bne.w	8009f84 <_strtod_l+0x764>
 800a0b8:	e5fe      	b.n	8009cb8 <_strtod_l+0x498>
 800a0ba:	465f      	mov	r7, fp
 800a0bc:	d16e      	bne.n	800a19c <_strtod_l+0x97c>
 800a0be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0c4:	b342      	cbz	r2, 800a118 <_strtod_l+0x8f8>
 800a0c6:	4a32      	ldr	r2, [pc, #200]	; (800a190 <_strtod_l+0x970>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d128      	bne.n	800a11e <_strtod_l+0x8fe>
 800a0cc:	9b04      	ldr	r3, [sp, #16]
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	b1eb      	cbz	r3, 800a10e <_strtod_l+0x8ee>
 800a0d2:	4a2d      	ldr	r2, [pc, #180]	; (800a188 <_strtod_l+0x968>)
 800a0d4:	403a      	ands	r2, r7
 800a0d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a0da:	f04f 31ff 	mov.w	r1, #4294967295
 800a0de:	d819      	bhi.n	800a114 <_strtod_l+0x8f4>
 800a0e0:	0d12      	lsrs	r2, r2, #20
 800a0e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a0e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ea:	4298      	cmp	r0, r3
 800a0ec:	d117      	bne.n	800a11e <_strtod_l+0x8fe>
 800a0ee:	4b29      	ldr	r3, [pc, #164]	; (800a194 <_strtod_l+0x974>)
 800a0f0:	429f      	cmp	r7, r3
 800a0f2:	d102      	bne.n	800a0fa <_strtod_l+0x8da>
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f43f addf 	beq.w	8009cb8 <_strtod_l+0x498>
 800a0fa:	4b23      	ldr	r3, [pc, #140]	; (800a188 <_strtod_l+0x968>)
 800a0fc:	403b      	ands	r3, r7
 800a0fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a102:	f04f 0a00 	mov.w	sl, #0
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1a0      	bne.n	800a04e <_strtod_l+0x82e>
 800a10c:	e5de      	b.n	8009ccc <_strtod_l+0x4ac>
 800a10e:	f04f 33ff 	mov.w	r3, #4294967295
 800a112:	e7ea      	b.n	800a0ea <_strtod_l+0x8ca>
 800a114:	460b      	mov	r3, r1
 800a116:	e7e8      	b.n	800a0ea <_strtod_l+0x8ca>
 800a118:	ea53 030a 	orrs.w	r3, r3, sl
 800a11c:	d088      	beq.n	800a030 <_strtod_l+0x810>
 800a11e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a120:	b1db      	cbz	r3, 800a15a <_strtod_l+0x93a>
 800a122:	423b      	tst	r3, r7
 800a124:	d0ef      	beq.n	800a106 <_strtod_l+0x8e6>
 800a126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a128:	9a04      	ldr	r2, [sp, #16]
 800a12a:	4650      	mov	r0, sl
 800a12c:	4659      	mov	r1, fp
 800a12e:	b1c3      	cbz	r3, 800a162 <_strtod_l+0x942>
 800a130:	f7ff fb58 	bl	80097e4 <sulp>
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a13c:	f7f6 f8c6 	bl	80002cc <__adddf3>
 800a140:	4682      	mov	sl, r0
 800a142:	468b      	mov	fp, r1
 800a144:	e7df      	b.n	800a106 <_strtod_l+0x8e6>
 800a146:	4013      	ands	r3, r2
 800a148:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a14c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a150:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a154:	f04f 3aff 	mov.w	sl, #4294967295
 800a158:	e7d5      	b.n	800a106 <_strtod_l+0x8e6>
 800a15a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a15c:	ea13 0f0a 	tst.w	r3, sl
 800a160:	e7e0      	b.n	800a124 <_strtod_l+0x904>
 800a162:	f7ff fb3f 	bl	80097e4 <sulp>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a16e:	f7f6 f8ab 	bl	80002c8 <__aeabi_dsub>
 800a172:	2200      	movs	r2, #0
 800a174:	2300      	movs	r3, #0
 800a176:	4682      	mov	sl, r0
 800a178:	468b      	mov	fp, r1
 800a17a:	f7f6 fcc5 	bl	8000b08 <__aeabi_dcmpeq>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d0c1      	beq.n	800a106 <_strtod_l+0x8e6>
 800a182:	e60e      	b.n	8009da2 <_strtod_l+0x582>
 800a184:	fffffc02 	.word	0xfffffc02
 800a188:	7ff00000 	.word	0x7ff00000
 800a18c:	39500000 	.word	0x39500000
 800a190:	000fffff 	.word	0x000fffff
 800a194:	7fefffff 	.word	0x7fefffff
 800a198:	0800d550 	.word	0x0800d550
 800a19c:	4631      	mov	r1, r6
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f001 ffae 	bl	800c100 <__ratio>
 800a1a4:	ec59 8b10 	vmov	r8, r9, d0
 800a1a8:	ee10 0a10 	vmov	r0, s0
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	f7f6 fcbc 	bl	8000b30 <__aeabi_dcmple>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d07c      	beq.n	800a2b6 <_strtod_l+0xa96>
 800a1bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d04c      	beq.n	800a25c <_strtod_l+0xa3c>
 800a1c2:	4b95      	ldr	r3, [pc, #596]	; (800a418 <_strtod_l+0xbf8>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a1ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a418 <_strtod_l+0xbf8>
 800a1ce:	f04f 0800 	mov.w	r8, #0
 800a1d2:	4b92      	ldr	r3, [pc, #584]	; (800a41c <_strtod_l+0xbfc>)
 800a1d4:	403b      	ands	r3, r7
 800a1d6:	9311      	str	r3, [sp, #68]	; 0x44
 800a1d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a1da:	4b91      	ldr	r3, [pc, #580]	; (800a420 <_strtod_l+0xc00>)
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	f040 80b2 	bne.w	800a346 <_strtod_l+0xb26>
 800a1e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a1e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a1ee:	ec4b ab10 	vmov	d0, sl, fp
 800a1f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a1f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a1fa:	f001 fea9 	bl	800bf50 <__ulp>
 800a1fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a202:	ec53 2b10 	vmov	r2, r3, d0
 800a206:	f7f6 fa17 	bl	8000638 <__aeabi_dmul>
 800a20a:	4652      	mov	r2, sl
 800a20c:	465b      	mov	r3, fp
 800a20e:	f7f6 f85d 	bl	80002cc <__adddf3>
 800a212:	460b      	mov	r3, r1
 800a214:	4981      	ldr	r1, [pc, #516]	; (800a41c <_strtod_l+0xbfc>)
 800a216:	4a83      	ldr	r2, [pc, #524]	; (800a424 <_strtod_l+0xc04>)
 800a218:	4019      	ands	r1, r3
 800a21a:	4291      	cmp	r1, r2
 800a21c:	4682      	mov	sl, r0
 800a21e:	d95e      	bls.n	800a2de <_strtod_l+0xabe>
 800a220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a222:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a226:	4293      	cmp	r3, r2
 800a228:	d103      	bne.n	800a232 <_strtod_l+0xa12>
 800a22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a22c:	3301      	adds	r3, #1
 800a22e:	f43f ad43 	beq.w	8009cb8 <_strtod_l+0x498>
 800a232:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a430 <_strtod_l+0xc10>
 800a236:	f04f 3aff 	mov.w	sl, #4294967295
 800a23a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a23c:	4620      	mov	r0, r4
 800a23e:	f001 fb5b 	bl	800b8f8 <_Bfree>
 800a242:	9907      	ldr	r1, [sp, #28]
 800a244:	4620      	mov	r0, r4
 800a246:	f001 fb57 	bl	800b8f8 <_Bfree>
 800a24a:	4631      	mov	r1, r6
 800a24c:	4620      	mov	r0, r4
 800a24e:	f001 fb53 	bl	800b8f8 <_Bfree>
 800a252:	4629      	mov	r1, r5
 800a254:	4620      	mov	r0, r4
 800a256:	f001 fb4f 	bl	800b8f8 <_Bfree>
 800a25a:	e613      	b.n	8009e84 <_strtod_l+0x664>
 800a25c:	f1ba 0f00 	cmp.w	sl, #0
 800a260:	d11b      	bne.n	800a29a <_strtod_l+0xa7a>
 800a262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a266:	b9f3      	cbnz	r3, 800a2a6 <_strtod_l+0xa86>
 800a268:	4b6b      	ldr	r3, [pc, #428]	; (800a418 <_strtod_l+0xbf8>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	f7f6 fc54 	bl	8000b1c <__aeabi_dcmplt>
 800a274:	b9d0      	cbnz	r0, 800a2ac <_strtod_l+0xa8c>
 800a276:	4640      	mov	r0, r8
 800a278:	4649      	mov	r1, r9
 800a27a:	4b6b      	ldr	r3, [pc, #428]	; (800a428 <_strtod_l+0xc08>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	f7f6 f9db 	bl	8000638 <__aeabi_dmul>
 800a282:	4680      	mov	r8, r0
 800a284:	4689      	mov	r9, r1
 800a286:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a28a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a28e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a290:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a294:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a298:	e79b      	b.n	800a1d2 <_strtod_l+0x9b2>
 800a29a:	f1ba 0f01 	cmp.w	sl, #1
 800a29e:	d102      	bne.n	800a2a6 <_strtod_l+0xa86>
 800a2a0:	2f00      	cmp	r7, #0
 800a2a2:	f43f ad7e 	beq.w	8009da2 <_strtod_l+0x582>
 800a2a6:	4b61      	ldr	r3, [pc, #388]	; (800a42c <_strtod_l+0xc0c>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	e78c      	b.n	800a1c6 <_strtod_l+0x9a6>
 800a2ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a428 <_strtod_l+0xc08>
 800a2b0:	f04f 0800 	mov.w	r8, #0
 800a2b4:	e7e7      	b.n	800a286 <_strtod_l+0xa66>
 800a2b6:	4b5c      	ldr	r3, [pc, #368]	; (800a428 <_strtod_l+0xc08>)
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f7f6 f9bb 	bl	8000638 <__aeabi_dmul>
 800a2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	4689      	mov	r9, r1
 800a2c8:	b933      	cbnz	r3, 800a2d8 <_strtod_l+0xab8>
 800a2ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2ce:	9012      	str	r0, [sp, #72]	; 0x48
 800a2d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a2d6:	e7dd      	b.n	800a294 <_strtod_l+0xa74>
 800a2d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a2dc:	e7f9      	b.n	800a2d2 <_strtod_l+0xab2>
 800a2de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a2e2:	9b04      	ldr	r3, [sp, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1a8      	bne.n	800a23a <_strtod_l+0xa1a>
 800a2e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2ee:	0d1b      	lsrs	r3, r3, #20
 800a2f0:	051b      	lsls	r3, r3, #20
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d1a1      	bne.n	800a23a <_strtod_l+0xa1a>
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	f7f6 fd4d 	bl	8000d98 <__aeabi_d2lz>
 800a2fe:	f7f6 f96d 	bl	80005dc <__aeabi_l2d>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4640      	mov	r0, r8
 800a308:	4649      	mov	r1, r9
 800a30a:	f7f5 ffdd 	bl	80002c8 <__aeabi_dsub>
 800a30e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a314:	ea43 030a 	orr.w	r3, r3, sl
 800a318:	4313      	orrs	r3, r2
 800a31a:	4680      	mov	r8, r0
 800a31c:	4689      	mov	r9, r1
 800a31e:	d053      	beq.n	800a3c8 <_strtod_l+0xba8>
 800a320:	a335      	add	r3, pc, #212	; (adr r3, 800a3f8 <_strtod_l+0xbd8>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	f7f6 fbf9 	bl	8000b1c <__aeabi_dcmplt>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f47f acce 	bne.w	8009ccc <_strtod_l+0x4ac>
 800a330:	a333      	add	r3, pc, #204	; (adr r3, 800a400 <_strtod_l+0xbe0>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	4640      	mov	r0, r8
 800a338:	4649      	mov	r1, r9
 800a33a:	f7f6 fc0d 	bl	8000b58 <__aeabi_dcmpgt>
 800a33e:	2800      	cmp	r0, #0
 800a340:	f43f af7b 	beq.w	800a23a <_strtod_l+0xa1a>
 800a344:	e4c2      	b.n	8009ccc <_strtod_l+0x4ac>
 800a346:	9b04      	ldr	r3, [sp, #16]
 800a348:	b333      	cbz	r3, 800a398 <_strtod_l+0xb78>
 800a34a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a34c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a350:	d822      	bhi.n	800a398 <_strtod_l+0xb78>
 800a352:	a32d      	add	r3, pc, #180	; (adr r3, 800a408 <_strtod_l+0xbe8>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	4640      	mov	r0, r8
 800a35a:	4649      	mov	r1, r9
 800a35c:	f7f6 fbe8 	bl	8000b30 <__aeabi_dcmple>
 800a360:	b1a0      	cbz	r0, 800a38c <_strtod_l+0xb6c>
 800a362:	4649      	mov	r1, r9
 800a364:	4640      	mov	r0, r8
 800a366:	f7f6 fc3f 	bl	8000be8 <__aeabi_d2uiz>
 800a36a:	2801      	cmp	r0, #1
 800a36c:	bf38      	it	cc
 800a36e:	2001      	movcc	r0, #1
 800a370:	f7f6 f8e8 	bl	8000544 <__aeabi_ui2d>
 800a374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a376:	4680      	mov	r8, r0
 800a378:	4689      	mov	r9, r1
 800a37a:	bb13      	cbnz	r3, 800a3c2 <_strtod_l+0xba2>
 800a37c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a380:	9014      	str	r0, [sp, #80]	; 0x50
 800a382:	9315      	str	r3, [sp, #84]	; 0x54
 800a384:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a388:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a38c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a38e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a390:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a394:	1a9b      	subs	r3, r3, r2
 800a396:	930d      	str	r3, [sp, #52]	; 0x34
 800a398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a39c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a3a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a3a4:	f001 fdd4 	bl	800bf50 <__ulp>
 800a3a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3ac:	ec53 2b10 	vmov	r2, r3, d0
 800a3b0:	f7f6 f942 	bl	8000638 <__aeabi_dmul>
 800a3b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3b8:	f7f5 ff88 	bl	80002cc <__adddf3>
 800a3bc:	4682      	mov	sl, r0
 800a3be:	468b      	mov	fp, r1
 800a3c0:	e78f      	b.n	800a2e2 <_strtod_l+0xac2>
 800a3c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a3c6:	e7dd      	b.n	800a384 <_strtod_l+0xb64>
 800a3c8:	a311      	add	r3, pc, #68	; (adr r3, 800a410 <_strtod_l+0xbf0>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f7f6 fba5 	bl	8000b1c <__aeabi_dcmplt>
 800a3d2:	e7b4      	b.n	800a33e <_strtod_l+0xb1e>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	930e      	str	r3, [sp, #56]	; 0x38
 800a3d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a3da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3dc:	6013      	str	r3, [r2, #0]
 800a3de:	f7ff ba65 	b.w	80098ac <_strtod_l+0x8c>
 800a3e2:	2b65      	cmp	r3, #101	; 0x65
 800a3e4:	f43f ab5d 	beq.w	8009aa2 <_strtod_l+0x282>
 800a3e8:	2b45      	cmp	r3, #69	; 0x45
 800a3ea:	f43f ab5a 	beq.w	8009aa2 <_strtod_l+0x282>
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f7ff bb92 	b.w	8009b18 <_strtod_l+0x2f8>
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	94a03595 	.word	0x94a03595
 800a3fc:	3fdfffff 	.word	0x3fdfffff
 800a400:	35afe535 	.word	0x35afe535
 800a404:	3fe00000 	.word	0x3fe00000
 800a408:	ffc00000 	.word	0xffc00000
 800a40c:	41dfffff 	.word	0x41dfffff
 800a410:	94a03595 	.word	0x94a03595
 800a414:	3fcfffff 	.word	0x3fcfffff
 800a418:	3ff00000 	.word	0x3ff00000
 800a41c:	7ff00000 	.word	0x7ff00000
 800a420:	7fe00000 	.word	0x7fe00000
 800a424:	7c9fffff 	.word	0x7c9fffff
 800a428:	3fe00000 	.word	0x3fe00000
 800a42c:	bff00000 	.word	0xbff00000
 800a430:	7fefffff 	.word	0x7fefffff

0800a434 <strtod>:
 800a434:	460a      	mov	r2, r1
 800a436:	4601      	mov	r1, r0
 800a438:	4802      	ldr	r0, [pc, #8]	; (800a444 <strtod+0x10>)
 800a43a:	4b03      	ldr	r3, [pc, #12]	; (800a448 <strtod+0x14>)
 800a43c:	6800      	ldr	r0, [r0, #0]
 800a43e:	f7ff b9ef 	b.w	8009820 <_strtod_l>
 800a442:	bf00      	nop
 800a444:	20000034 	.word	0x20000034
 800a448:	2000009c 	.word	0x2000009c

0800a44c <quorem>:
 800a44c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a450:	6903      	ldr	r3, [r0, #16]
 800a452:	690c      	ldr	r4, [r1, #16]
 800a454:	42a3      	cmp	r3, r4
 800a456:	4607      	mov	r7, r0
 800a458:	f2c0 8081 	blt.w	800a55e <quorem+0x112>
 800a45c:	3c01      	subs	r4, #1
 800a45e:	f101 0814 	add.w	r8, r1, #20
 800a462:	f100 0514 	add.w	r5, r0, #20
 800a466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a470:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a474:	3301      	adds	r3, #1
 800a476:	429a      	cmp	r2, r3
 800a478:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a47c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a480:	fbb2 f6f3 	udiv	r6, r2, r3
 800a484:	d331      	bcc.n	800a4ea <quorem+0x9e>
 800a486:	f04f 0e00 	mov.w	lr, #0
 800a48a:	4640      	mov	r0, r8
 800a48c:	46ac      	mov	ip, r5
 800a48e:	46f2      	mov	sl, lr
 800a490:	f850 2b04 	ldr.w	r2, [r0], #4
 800a494:	b293      	uxth	r3, r2
 800a496:	fb06 e303 	mla	r3, r6, r3, lr
 800a49a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	ebaa 0303 	sub.w	r3, sl, r3
 800a4a4:	0c12      	lsrs	r2, r2, #16
 800a4a6:	f8dc a000 	ldr.w	sl, [ip]
 800a4aa:	fb06 e202 	mla	r2, r6, r2, lr
 800a4ae:	fa13 f38a 	uxtah	r3, r3, sl
 800a4b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4b6:	fa1f fa82 	uxth.w	sl, r2
 800a4ba:	f8dc 2000 	ldr.w	r2, [ip]
 800a4be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a4c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4cc:	4581      	cmp	r9, r0
 800a4ce:	f84c 3b04 	str.w	r3, [ip], #4
 800a4d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4d6:	d2db      	bcs.n	800a490 <quorem+0x44>
 800a4d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4dc:	b92b      	cbnz	r3, 800a4ea <quorem+0x9e>
 800a4de:	9b01      	ldr	r3, [sp, #4]
 800a4e0:	3b04      	subs	r3, #4
 800a4e2:	429d      	cmp	r5, r3
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	d32e      	bcc.n	800a546 <quorem+0xfa>
 800a4e8:	613c      	str	r4, [r7, #16]
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	f001 fc8c 	bl	800be08 <__mcmp>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	db24      	blt.n	800a53e <quorem+0xf2>
 800a4f4:	3601      	adds	r6, #1
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f04f 0c00 	mov.w	ip, #0
 800a4fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a500:	f8d0 e000 	ldr.w	lr, [r0]
 800a504:	b293      	uxth	r3, r2
 800a506:	ebac 0303 	sub.w	r3, ip, r3
 800a50a:	0c12      	lsrs	r2, r2, #16
 800a50c:	fa13 f38e 	uxtah	r3, r3, lr
 800a510:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a518:	b29b      	uxth	r3, r3
 800a51a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a51e:	45c1      	cmp	r9, r8
 800a520:	f840 3b04 	str.w	r3, [r0], #4
 800a524:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a528:	d2e8      	bcs.n	800a4fc <quorem+0xb0>
 800a52a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a52e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a532:	b922      	cbnz	r2, 800a53e <quorem+0xf2>
 800a534:	3b04      	subs	r3, #4
 800a536:	429d      	cmp	r5, r3
 800a538:	461a      	mov	r2, r3
 800a53a:	d30a      	bcc.n	800a552 <quorem+0x106>
 800a53c:	613c      	str	r4, [r7, #16]
 800a53e:	4630      	mov	r0, r6
 800a540:	b003      	add	sp, #12
 800a542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a546:	6812      	ldr	r2, [r2, #0]
 800a548:	3b04      	subs	r3, #4
 800a54a:	2a00      	cmp	r2, #0
 800a54c:	d1cc      	bne.n	800a4e8 <quorem+0x9c>
 800a54e:	3c01      	subs	r4, #1
 800a550:	e7c7      	b.n	800a4e2 <quorem+0x96>
 800a552:	6812      	ldr	r2, [r2, #0]
 800a554:	3b04      	subs	r3, #4
 800a556:	2a00      	cmp	r2, #0
 800a558:	d1f0      	bne.n	800a53c <quorem+0xf0>
 800a55a:	3c01      	subs	r4, #1
 800a55c:	e7eb      	b.n	800a536 <quorem+0xea>
 800a55e:	2000      	movs	r0, #0
 800a560:	e7ee      	b.n	800a540 <quorem+0xf4>
 800a562:	0000      	movs	r0, r0
 800a564:	0000      	movs	r0, r0
	...

0800a568 <_dtoa_r>:
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	ed2d 8b02 	vpush	{d8}
 800a570:	ec57 6b10 	vmov	r6, r7, d0
 800a574:	b095      	sub	sp, #84	; 0x54
 800a576:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a578:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a57c:	9105      	str	r1, [sp, #20]
 800a57e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a582:	4604      	mov	r4, r0
 800a584:	9209      	str	r2, [sp, #36]	; 0x24
 800a586:	930f      	str	r3, [sp, #60]	; 0x3c
 800a588:	b975      	cbnz	r5, 800a5a8 <_dtoa_r+0x40>
 800a58a:	2010      	movs	r0, #16
 800a58c:	f001 f94c 	bl	800b828 <malloc>
 800a590:	4602      	mov	r2, r0
 800a592:	6260      	str	r0, [r4, #36]	; 0x24
 800a594:	b920      	cbnz	r0, 800a5a0 <_dtoa_r+0x38>
 800a596:	4bb2      	ldr	r3, [pc, #712]	; (800a860 <_dtoa_r+0x2f8>)
 800a598:	21ea      	movs	r1, #234	; 0xea
 800a59a:	48b2      	ldr	r0, [pc, #712]	; (800a864 <_dtoa_r+0x2fc>)
 800a59c:	f002 f874 	bl	800c688 <__assert_func>
 800a5a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5a4:	6005      	str	r5, [r0, #0]
 800a5a6:	60c5      	str	r5, [r0, #12]
 800a5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5aa:	6819      	ldr	r1, [r3, #0]
 800a5ac:	b151      	cbz	r1, 800a5c4 <_dtoa_r+0x5c>
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	604a      	str	r2, [r1, #4]
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4093      	lsls	r3, r2
 800a5b6:	608b      	str	r3, [r1, #8]
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f001 f99d 	bl	800b8f8 <_Bfree>
 800a5be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	1e3b      	subs	r3, r7, #0
 800a5c6:	bfb9      	ittee	lt
 800a5c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a5cc:	9303      	strlt	r3, [sp, #12]
 800a5ce:	2300      	movge	r3, #0
 800a5d0:	f8c8 3000 	strge.w	r3, [r8]
 800a5d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a5d8:	4ba3      	ldr	r3, [pc, #652]	; (800a868 <_dtoa_r+0x300>)
 800a5da:	bfbc      	itt	lt
 800a5dc:	2201      	movlt	r2, #1
 800a5de:	f8c8 2000 	strlt.w	r2, [r8]
 800a5e2:	ea33 0309 	bics.w	r3, r3, r9
 800a5e6:	d11b      	bne.n	800a620 <_dtoa_r+0xb8>
 800a5e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5f4:	4333      	orrs	r3, r6
 800a5f6:	f000 857a 	beq.w	800b0ee <_dtoa_r+0xb86>
 800a5fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5fc:	b963      	cbnz	r3, 800a618 <_dtoa_r+0xb0>
 800a5fe:	4b9b      	ldr	r3, [pc, #620]	; (800a86c <_dtoa_r+0x304>)
 800a600:	e024      	b.n	800a64c <_dtoa_r+0xe4>
 800a602:	4b9b      	ldr	r3, [pc, #620]	; (800a870 <_dtoa_r+0x308>)
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	3308      	adds	r3, #8
 800a608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	9800      	ldr	r0, [sp, #0]
 800a60e:	b015      	add	sp, #84	; 0x54
 800a610:	ecbd 8b02 	vpop	{d8}
 800a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	4b94      	ldr	r3, [pc, #592]	; (800a86c <_dtoa_r+0x304>)
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	3303      	adds	r3, #3
 800a61e:	e7f3      	b.n	800a608 <_dtoa_r+0xa0>
 800a620:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a624:	2200      	movs	r2, #0
 800a626:	ec51 0b17 	vmov	r0, r1, d7
 800a62a:	2300      	movs	r3, #0
 800a62c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a630:	f7f6 fa6a 	bl	8000b08 <__aeabi_dcmpeq>
 800a634:	4680      	mov	r8, r0
 800a636:	b158      	cbz	r0, 800a650 <_dtoa_r+0xe8>
 800a638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a63a:	2301      	movs	r3, #1
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 8551 	beq.w	800b0e8 <_dtoa_r+0xb80>
 800a646:	488b      	ldr	r0, [pc, #556]	; (800a874 <_dtoa_r+0x30c>)
 800a648:	6018      	str	r0, [r3, #0]
 800a64a:	1e43      	subs	r3, r0, #1
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	e7dd      	b.n	800a60c <_dtoa_r+0xa4>
 800a650:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a654:	aa12      	add	r2, sp, #72	; 0x48
 800a656:	a913      	add	r1, sp, #76	; 0x4c
 800a658:	4620      	mov	r0, r4
 800a65a:	f001 fcf5 	bl	800c048 <__d2b>
 800a65e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a662:	4683      	mov	fp, r0
 800a664:	2d00      	cmp	r5, #0
 800a666:	d07c      	beq.n	800a762 <_dtoa_r+0x1fa>
 800a668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a66a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a66e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a672:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a676:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a67a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a67e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a682:	4b7d      	ldr	r3, [pc, #500]	; (800a878 <_dtoa_r+0x310>)
 800a684:	2200      	movs	r2, #0
 800a686:	4630      	mov	r0, r6
 800a688:	4639      	mov	r1, r7
 800a68a:	f7f5 fe1d 	bl	80002c8 <__aeabi_dsub>
 800a68e:	a36e      	add	r3, pc, #440	; (adr r3, 800a848 <_dtoa_r+0x2e0>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f7f5 ffd0 	bl	8000638 <__aeabi_dmul>
 800a698:	a36d      	add	r3, pc, #436	; (adr r3, 800a850 <_dtoa_r+0x2e8>)
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	f7f5 fe15 	bl	80002cc <__adddf3>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	460f      	mov	r7, r1
 800a6a8:	f7f5 ff5c 	bl	8000564 <__aeabi_i2d>
 800a6ac:	a36a      	add	r3, pc, #424	; (adr r3, 800a858 <_dtoa_r+0x2f0>)
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	f7f5 ffc1 	bl	8000638 <__aeabi_dmul>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	4639      	mov	r1, r7
 800a6be:	f7f5 fe05 	bl	80002cc <__adddf3>
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	f7f6 fa67 	bl	8000b98 <__aeabi_d2iz>
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	4682      	mov	sl, r0
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f7f6 fa22 	bl	8000b1c <__aeabi_dcmplt>
 800a6d8:	b148      	cbz	r0, 800a6ee <_dtoa_r+0x186>
 800a6da:	4650      	mov	r0, sl
 800a6dc:	f7f5 ff42 	bl	8000564 <__aeabi_i2d>
 800a6e0:	4632      	mov	r2, r6
 800a6e2:	463b      	mov	r3, r7
 800a6e4:	f7f6 fa10 	bl	8000b08 <__aeabi_dcmpeq>
 800a6e8:	b908      	cbnz	r0, 800a6ee <_dtoa_r+0x186>
 800a6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6ee:	f1ba 0f16 	cmp.w	sl, #22
 800a6f2:	d854      	bhi.n	800a79e <_dtoa_r+0x236>
 800a6f4:	4b61      	ldr	r3, [pc, #388]	; (800a87c <_dtoa_r+0x314>)
 800a6f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a702:	f7f6 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 800a706:	2800      	cmp	r0, #0
 800a708:	d04b      	beq.n	800a7a2 <_dtoa_r+0x23a>
 800a70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a70e:	2300      	movs	r3, #0
 800a710:	930e      	str	r3, [sp, #56]	; 0x38
 800a712:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a714:	1b5d      	subs	r5, r3, r5
 800a716:	1e6b      	subs	r3, r5, #1
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	bf43      	ittte	mi
 800a71c:	2300      	movmi	r3, #0
 800a71e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a722:	9304      	strmi	r3, [sp, #16]
 800a724:	f04f 0800 	movpl.w	r8, #0
 800a728:	f1ba 0f00 	cmp.w	sl, #0
 800a72c:	db3b      	blt.n	800a7a6 <_dtoa_r+0x23e>
 800a72e:	9b04      	ldr	r3, [sp, #16]
 800a730:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a734:	4453      	add	r3, sl
 800a736:	9304      	str	r3, [sp, #16]
 800a738:	2300      	movs	r3, #0
 800a73a:	9306      	str	r3, [sp, #24]
 800a73c:	9b05      	ldr	r3, [sp, #20]
 800a73e:	2b09      	cmp	r3, #9
 800a740:	d869      	bhi.n	800a816 <_dtoa_r+0x2ae>
 800a742:	2b05      	cmp	r3, #5
 800a744:	bfc4      	itt	gt
 800a746:	3b04      	subgt	r3, #4
 800a748:	9305      	strgt	r3, [sp, #20]
 800a74a:	9b05      	ldr	r3, [sp, #20]
 800a74c:	f1a3 0302 	sub.w	r3, r3, #2
 800a750:	bfcc      	ite	gt
 800a752:	2500      	movgt	r5, #0
 800a754:	2501      	movle	r5, #1
 800a756:	2b03      	cmp	r3, #3
 800a758:	d869      	bhi.n	800a82e <_dtoa_r+0x2c6>
 800a75a:	e8df f003 	tbb	[pc, r3]
 800a75e:	4e2c      	.short	0x4e2c
 800a760:	5a4c      	.short	0x5a4c
 800a762:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a766:	441d      	add	r5, r3
 800a768:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a76c:	2b20      	cmp	r3, #32
 800a76e:	bfc1      	itttt	gt
 800a770:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a774:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a778:	fa09 f303 	lslgt.w	r3, r9, r3
 800a77c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a780:	bfda      	itte	le
 800a782:	f1c3 0320 	rsble	r3, r3, #32
 800a786:	fa06 f003 	lslle.w	r0, r6, r3
 800a78a:	4318      	orrgt	r0, r3
 800a78c:	f7f5 feda 	bl	8000544 <__aeabi_ui2d>
 800a790:	2301      	movs	r3, #1
 800a792:	4606      	mov	r6, r0
 800a794:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a798:	3d01      	subs	r5, #1
 800a79a:	9310      	str	r3, [sp, #64]	; 0x40
 800a79c:	e771      	b.n	800a682 <_dtoa_r+0x11a>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e7b6      	b.n	800a710 <_dtoa_r+0x1a8>
 800a7a2:	900e      	str	r0, [sp, #56]	; 0x38
 800a7a4:	e7b5      	b.n	800a712 <_dtoa_r+0x1aa>
 800a7a6:	f1ca 0300 	rsb	r3, sl, #0
 800a7aa:	9306      	str	r3, [sp, #24]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	eba8 080a 	sub.w	r8, r8, sl
 800a7b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a7b4:	e7c2      	b.n	800a73c <_dtoa_r+0x1d4>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9308      	str	r3, [sp, #32]
 800a7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	dc39      	bgt.n	800a834 <_dtoa_r+0x2cc>
 800a7c0:	f04f 0901 	mov.w	r9, #1
 800a7c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7c8:	464b      	mov	r3, r9
 800a7ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a7ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	6042      	str	r2, [r0, #4]
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	f102 0614 	add.w	r6, r2, #20
 800a7da:	429e      	cmp	r6, r3
 800a7dc:	6841      	ldr	r1, [r0, #4]
 800a7de:	d92f      	bls.n	800a840 <_dtoa_r+0x2d8>
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f001 f849 	bl	800b878 <_Balloc>
 800a7e6:	9000      	str	r0, [sp, #0]
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d14b      	bne.n	800a884 <_dtoa_r+0x31c>
 800a7ec:	4b24      	ldr	r3, [pc, #144]	; (800a880 <_dtoa_r+0x318>)
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a7f4:	e6d1      	b.n	800a59a <_dtoa_r+0x32>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e7de      	b.n	800a7b8 <_dtoa_r+0x250>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9308      	str	r3, [sp, #32]
 800a7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a800:	eb0a 0903 	add.w	r9, sl, r3
 800a804:	f109 0301 	add.w	r3, r9, #1
 800a808:	2b01      	cmp	r3, #1
 800a80a:	9301      	str	r3, [sp, #4]
 800a80c:	bfb8      	it	lt
 800a80e:	2301      	movlt	r3, #1
 800a810:	e7dd      	b.n	800a7ce <_dtoa_r+0x266>
 800a812:	2301      	movs	r3, #1
 800a814:	e7f2      	b.n	800a7fc <_dtoa_r+0x294>
 800a816:	2501      	movs	r5, #1
 800a818:	2300      	movs	r3, #0
 800a81a:	9305      	str	r3, [sp, #20]
 800a81c:	9508      	str	r5, [sp, #32]
 800a81e:	f04f 39ff 	mov.w	r9, #4294967295
 800a822:	2200      	movs	r2, #0
 800a824:	f8cd 9004 	str.w	r9, [sp, #4]
 800a828:	2312      	movs	r3, #18
 800a82a:	9209      	str	r2, [sp, #36]	; 0x24
 800a82c:	e7cf      	b.n	800a7ce <_dtoa_r+0x266>
 800a82e:	2301      	movs	r3, #1
 800a830:	9308      	str	r3, [sp, #32]
 800a832:	e7f4      	b.n	800a81e <_dtoa_r+0x2b6>
 800a834:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a838:	f8cd 9004 	str.w	r9, [sp, #4]
 800a83c:	464b      	mov	r3, r9
 800a83e:	e7c6      	b.n	800a7ce <_dtoa_r+0x266>
 800a840:	3101      	adds	r1, #1
 800a842:	6041      	str	r1, [r0, #4]
 800a844:	0052      	lsls	r2, r2, #1
 800a846:	e7c6      	b.n	800a7d6 <_dtoa_r+0x26e>
 800a848:	636f4361 	.word	0x636f4361
 800a84c:	3fd287a7 	.word	0x3fd287a7
 800a850:	8b60c8b3 	.word	0x8b60c8b3
 800a854:	3fc68a28 	.word	0x3fc68a28
 800a858:	509f79fb 	.word	0x509f79fb
 800a85c:	3fd34413 	.word	0x3fd34413
 800a860:	0800d585 	.word	0x0800d585
 800a864:	0800d59c 	.word	0x0800d59c
 800a868:	7ff00000 	.word	0x7ff00000
 800a86c:	0800d581 	.word	0x0800d581
 800a870:	0800d578 	.word	0x0800d578
 800a874:	0800d505 	.word	0x0800d505
 800a878:	3ff80000 	.word	0x3ff80000
 800a87c:	0800d718 	.word	0x0800d718
 800a880:	0800d5fb 	.word	0x0800d5fb
 800a884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a886:	9a00      	ldr	r2, [sp, #0]
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	9b01      	ldr	r3, [sp, #4]
 800a88c:	2b0e      	cmp	r3, #14
 800a88e:	f200 80ad 	bhi.w	800a9ec <_dtoa_r+0x484>
 800a892:	2d00      	cmp	r5, #0
 800a894:	f000 80aa 	beq.w	800a9ec <_dtoa_r+0x484>
 800a898:	f1ba 0f00 	cmp.w	sl, #0
 800a89c:	dd36      	ble.n	800a90c <_dtoa_r+0x3a4>
 800a89e:	4ac3      	ldr	r2, [pc, #780]	; (800abac <_dtoa_r+0x644>)
 800a8a0:	f00a 030f 	and.w	r3, sl, #15
 800a8a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8a8:	ed93 7b00 	vldr	d7, [r3]
 800a8ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a8b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a8b4:	eeb0 8a47 	vmov.f32	s16, s14
 800a8b8:	eef0 8a67 	vmov.f32	s17, s15
 800a8bc:	d016      	beq.n	800a8ec <_dtoa_r+0x384>
 800a8be:	4bbc      	ldr	r3, [pc, #752]	; (800abb0 <_dtoa_r+0x648>)
 800a8c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8c8:	f7f5 ffe0 	bl	800088c <__aeabi_ddiv>
 800a8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8d0:	f007 070f 	and.w	r7, r7, #15
 800a8d4:	2503      	movs	r5, #3
 800a8d6:	4eb6      	ldr	r6, [pc, #728]	; (800abb0 <_dtoa_r+0x648>)
 800a8d8:	b957      	cbnz	r7, 800a8f0 <_dtoa_r+0x388>
 800a8da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8de:	ec53 2b18 	vmov	r2, r3, d8
 800a8e2:	f7f5 ffd3 	bl	800088c <__aeabi_ddiv>
 800a8e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8ea:	e029      	b.n	800a940 <_dtoa_r+0x3d8>
 800a8ec:	2502      	movs	r5, #2
 800a8ee:	e7f2      	b.n	800a8d6 <_dtoa_r+0x36e>
 800a8f0:	07f9      	lsls	r1, r7, #31
 800a8f2:	d508      	bpl.n	800a906 <_dtoa_r+0x39e>
 800a8f4:	ec51 0b18 	vmov	r0, r1, d8
 800a8f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8fc:	f7f5 fe9c 	bl	8000638 <__aeabi_dmul>
 800a900:	ec41 0b18 	vmov	d8, r0, r1
 800a904:	3501      	adds	r5, #1
 800a906:	107f      	asrs	r7, r7, #1
 800a908:	3608      	adds	r6, #8
 800a90a:	e7e5      	b.n	800a8d8 <_dtoa_r+0x370>
 800a90c:	f000 80a6 	beq.w	800aa5c <_dtoa_r+0x4f4>
 800a910:	f1ca 0600 	rsb	r6, sl, #0
 800a914:	4ba5      	ldr	r3, [pc, #660]	; (800abac <_dtoa_r+0x644>)
 800a916:	4fa6      	ldr	r7, [pc, #664]	; (800abb0 <_dtoa_r+0x648>)
 800a918:	f006 020f 	and.w	r2, r6, #15
 800a91c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a928:	f7f5 fe86 	bl	8000638 <__aeabi_dmul>
 800a92c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a930:	1136      	asrs	r6, r6, #4
 800a932:	2300      	movs	r3, #0
 800a934:	2502      	movs	r5, #2
 800a936:	2e00      	cmp	r6, #0
 800a938:	f040 8085 	bne.w	800aa46 <_dtoa_r+0x4de>
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1d2      	bne.n	800a8e6 <_dtoa_r+0x37e>
 800a940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 808c 	beq.w	800aa60 <_dtoa_r+0x4f8>
 800a948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a94c:	4b99      	ldr	r3, [pc, #612]	; (800abb4 <_dtoa_r+0x64c>)
 800a94e:	2200      	movs	r2, #0
 800a950:	4630      	mov	r0, r6
 800a952:	4639      	mov	r1, r7
 800a954:	f7f6 f8e2 	bl	8000b1c <__aeabi_dcmplt>
 800a958:	2800      	cmp	r0, #0
 800a95a:	f000 8081 	beq.w	800aa60 <_dtoa_r+0x4f8>
 800a95e:	9b01      	ldr	r3, [sp, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d07d      	beq.n	800aa60 <_dtoa_r+0x4f8>
 800a964:	f1b9 0f00 	cmp.w	r9, #0
 800a968:	dd3c      	ble.n	800a9e4 <_dtoa_r+0x47c>
 800a96a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a96e:	9307      	str	r3, [sp, #28]
 800a970:	2200      	movs	r2, #0
 800a972:	4b91      	ldr	r3, [pc, #580]	; (800abb8 <_dtoa_r+0x650>)
 800a974:	4630      	mov	r0, r6
 800a976:	4639      	mov	r1, r7
 800a978:	f7f5 fe5e 	bl	8000638 <__aeabi_dmul>
 800a97c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a980:	3501      	adds	r5, #1
 800a982:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a986:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a98a:	4628      	mov	r0, r5
 800a98c:	f7f5 fdea 	bl	8000564 <__aeabi_i2d>
 800a990:	4632      	mov	r2, r6
 800a992:	463b      	mov	r3, r7
 800a994:	f7f5 fe50 	bl	8000638 <__aeabi_dmul>
 800a998:	4b88      	ldr	r3, [pc, #544]	; (800abbc <_dtoa_r+0x654>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	f7f5 fc96 	bl	80002cc <__adddf3>
 800a9a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a9a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9a8:	9303      	str	r3, [sp, #12]
 800a9aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d15c      	bne.n	800aa6a <_dtoa_r+0x502>
 800a9b0:	4b83      	ldr	r3, [pc, #524]	; (800abc0 <_dtoa_r+0x658>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	f7f5 fc86 	bl	80002c8 <__aeabi_dsub>
 800a9bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	460f      	mov	r7, r1
 800a9c4:	f7f6 f8c8 	bl	8000b58 <__aeabi_dcmpgt>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	f040 8296 	bne.w	800aefa <_dtoa_r+0x992>
 800a9ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9d8:	4639      	mov	r1, r7
 800a9da:	f7f6 f89f 	bl	8000b1c <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	f040 8288 	bne.w	800aef4 <_dtoa_r+0x98c>
 800a9e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f2c0 8158 	blt.w	800aca4 <_dtoa_r+0x73c>
 800a9f4:	f1ba 0f0e 	cmp.w	sl, #14
 800a9f8:	f300 8154 	bgt.w	800aca4 <_dtoa_r+0x73c>
 800a9fc:	4b6b      	ldr	r3, [pc, #428]	; (800abac <_dtoa_r+0x644>)
 800a9fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f280 80e3 	bge.w	800abd4 <_dtoa_r+0x66c>
 800aa0e:	9b01      	ldr	r3, [sp, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f300 80df 	bgt.w	800abd4 <_dtoa_r+0x66c>
 800aa16:	f040 826d 	bne.w	800aef4 <_dtoa_r+0x98c>
 800aa1a:	4b69      	ldr	r3, [pc, #420]	; (800abc0 <_dtoa_r+0x658>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4640      	mov	r0, r8
 800aa20:	4649      	mov	r1, r9
 800aa22:	f7f5 fe09 	bl	8000638 <__aeabi_dmul>
 800aa26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa2a:	f7f6 f88b 	bl	8000b44 <__aeabi_dcmpge>
 800aa2e:	9e01      	ldr	r6, [sp, #4]
 800aa30:	4637      	mov	r7, r6
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f040 8243 	bne.w	800aebe <_dtoa_r+0x956>
 800aa38:	9d00      	ldr	r5, [sp, #0]
 800aa3a:	2331      	movs	r3, #49	; 0x31
 800aa3c:	f805 3b01 	strb.w	r3, [r5], #1
 800aa40:	f10a 0a01 	add.w	sl, sl, #1
 800aa44:	e23f      	b.n	800aec6 <_dtoa_r+0x95e>
 800aa46:	07f2      	lsls	r2, r6, #31
 800aa48:	d505      	bpl.n	800aa56 <_dtoa_r+0x4ee>
 800aa4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa4e:	f7f5 fdf3 	bl	8000638 <__aeabi_dmul>
 800aa52:	3501      	adds	r5, #1
 800aa54:	2301      	movs	r3, #1
 800aa56:	1076      	asrs	r6, r6, #1
 800aa58:	3708      	adds	r7, #8
 800aa5a:	e76c      	b.n	800a936 <_dtoa_r+0x3ce>
 800aa5c:	2502      	movs	r5, #2
 800aa5e:	e76f      	b.n	800a940 <_dtoa_r+0x3d8>
 800aa60:	9b01      	ldr	r3, [sp, #4]
 800aa62:	f8cd a01c 	str.w	sl, [sp, #28]
 800aa66:	930c      	str	r3, [sp, #48]	; 0x30
 800aa68:	e78d      	b.n	800a986 <_dtoa_r+0x41e>
 800aa6a:	9900      	ldr	r1, [sp, #0]
 800aa6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aa6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa70:	4b4e      	ldr	r3, [pc, #312]	; (800abac <_dtoa_r+0x644>)
 800aa72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa76:	4401      	add	r1, r0
 800aa78:	9102      	str	r1, [sp, #8]
 800aa7a:	9908      	ldr	r1, [sp, #32]
 800aa7c:	eeb0 8a47 	vmov.f32	s16, s14
 800aa80:	eef0 8a67 	vmov.f32	s17, s15
 800aa84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa8c:	2900      	cmp	r1, #0
 800aa8e:	d045      	beq.n	800ab1c <_dtoa_r+0x5b4>
 800aa90:	494c      	ldr	r1, [pc, #304]	; (800abc4 <_dtoa_r+0x65c>)
 800aa92:	2000      	movs	r0, #0
 800aa94:	f7f5 fefa 	bl	800088c <__aeabi_ddiv>
 800aa98:	ec53 2b18 	vmov	r2, r3, d8
 800aa9c:	f7f5 fc14 	bl	80002c8 <__aeabi_dsub>
 800aaa0:	9d00      	ldr	r5, [sp, #0]
 800aaa2:	ec41 0b18 	vmov	d8, r0, r1
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7f6 f875 	bl	8000b98 <__aeabi_d2iz>
 800aaae:	900c      	str	r0, [sp, #48]	; 0x30
 800aab0:	f7f5 fd58 	bl	8000564 <__aeabi_i2d>
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	4630      	mov	r0, r6
 800aaba:	4639      	mov	r1, r7
 800aabc:	f7f5 fc04 	bl	80002c8 <__aeabi_dsub>
 800aac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aac2:	3330      	adds	r3, #48	; 0x30
 800aac4:	f805 3b01 	strb.w	r3, [r5], #1
 800aac8:	ec53 2b18 	vmov	r2, r3, d8
 800aacc:	4606      	mov	r6, r0
 800aace:	460f      	mov	r7, r1
 800aad0:	f7f6 f824 	bl	8000b1c <__aeabi_dcmplt>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d165      	bne.n	800aba4 <_dtoa_r+0x63c>
 800aad8:	4632      	mov	r2, r6
 800aada:	463b      	mov	r3, r7
 800aadc:	4935      	ldr	r1, [pc, #212]	; (800abb4 <_dtoa_r+0x64c>)
 800aade:	2000      	movs	r0, #0
 800aae0:	f7f5 fbf2 	bl	80002c8 <__aeabi_dsub>
 800aae4:	ec53 2b18 	vmov	r2, r3, d8
 800aae8:	f7f6 f818 	bl	8000b1c <__aeabi_dcmplt>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f040 80b9 	bne.w	800ac64 <_dtoa_r+0x6fc>
 800aaf2:	9b02      	ldr	r3, [sp, #8]
 800aaf4:	429d      	cmp	r5, r3
 800aaf6:	f43f af75 	beq.w	800a9e4 <_dtoa_r+0x47c>
 800aafa:	4b2f      	ldr	r3, [pc, #188]	; (800abb8 <_dtoa_r+0x650>)
 800aafc:	ec51 0b18 	vmov	r0, r1, d8
 800ab00:	2200      	movs	r2, #0
 800ab02:	f7f5 fd99 	bl	8000638 <__aeabi_dmul>
 800ab06:	4b2c      	ldr	r3, [pc, #176]	; (800abb8 <_dtoa_r+0x650>)
 800ab08:	ec41 0b18 	vmov	d8, r0, r1
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	4630      	mov	r0, r6
 800ab10:	4639      	mov	r1, r7
 800ab12:	f7f5 fd91 	bl	8000638 <__aeabi_dmul>
 800ab16:	4606      	mov	r6, r0
 800ab18:	460f      	mov	r7, r1
 800ab1a:	e7c4      	b.n	800aaa6 <_dtoa_r+0x53e>
 800ab1c:	ec51 0b17 	vmov	r0, r1, d7
 800ab20:	f7f5 fd8a 	bl	8000638 <__aeabi_dmul>
 800ab24:	9b02      	ldr	r3, [sp, #8]
 800ab26:	9d00      	ldr	r5, [sp, #0]
 800ab28:	930c      	str	r3, [sp, #48]	; 0x30
 800ab2a:	ec41 0b18 	vmov	d8, r0, r1
 800ab2e:	4639      	mov	r1, r7
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7f6 f831 	bl	8000b98 <__aeabi_d2iz>
 800ab36:	9011      	str	r0, [sp, #68]	; 0x44
 800ab38:	f7f5 fd14 	bl	8000564 <__aeabi_i2d>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4630      	mov	r0, r6
 800ab42:	4639      	mov	r1, r7
 800ab44:	f7f5 fbc0 	bl	80002c8 <__aeabi_dsub>
 800ab48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab4a:	3330      	adds	r3, #48	; 0x30
 800ab4c:	f805 3b01 	strb.w	r3, [r5], #1
 800ab50:	9b02      	ldr	r3, [sp, #8]
 800ab52:	429d      	cmp	r5, r3
 800ab54:	4606      	mov	r6, r0
 800ab56:	460f      	mov	r7, r1
 800ab58:	f04f 0200 	mov.w	r2, #0
 800ab5c:	d134      	bne.n	800abc8 <_dtoa_r+0x660>
 800ab5e:	4b19      	ldr	r3, [pc, #100]	; (800abc4 <_dtoa_r+0x65c>)
 800ab60:	ec51 0b18 	vmov	r0, r1, d8
 800ab64:	f7f5 fbb2 	bl	80002cc <__adddf3>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	4639      	mov	r1, r7
 800ab70:	f7f5 fff2 	bl	8000b58 <__aeabi_dcmpgt>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d175      	bne.n	800ac64 <_dtoa_r+0x6fc>
 800ab78:	ec53 2b18 	vmov	r2, r3, d8
 800ab7c:	4911      	ldr	r1, [pc, #68]	; (800abc4 <_dtoa_r+0x65c>)
 800ab7e:	2000      	movs	r0, #0
 800ab80:	f7f5 fba2 	bl	80002c8 <__aeabi_dsub>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4630      	mov	r0, r6
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	f7f5 ffc6 	bl	8000b1c <__aeabi_dcmplt>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	f43f af27 	beq.w	800a9e4 <_dtoa_r+0x47c>
 800ab96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab98:	1e6b      	subs	r3, r5, #1
 800ab9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aba0:	2b30      	cmp	r3, #48	; 0x30
 800aba2:	d0f8      	beq.n	800ab96 <_dtoa_r+0x62e>
 800aba4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aba8:	e04a      	b.n	800ac40 <_dtoa_r+0x6d8>
 800abaa:	bf00      	nop
 800abac:	0800d718 	.word	0x0800d718
 800abb0:	0800d6f0 	.word	0x0800d6f0
 800abb4:	3ff00000 	.word	0x3ff00000
 800abb8:	40240000 	.word	0x40240000
 800abbc:	401c0000 	.word	0x401c0000
 800abc0:	40140000 	.word	0x40140000
 800abc4:	3fe00000 	.word	0x3fe00000
 800abc8:	4baf      	ldr	r3, [pc, #700]	; (800ae88 <_dtoa_r+0x920>)
 800abca:	f7f5 fd35 	bl	8000638 <__aeabi_dmul>
 800abce:	4606      	mov	r6, r0
 800abd0:	460f      	mov	r7, r1
 800abd2:	e7ac      	b.n	800ab2e <_dtoa_r+0x5c6>
 800abd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800abd8:	9d00      	ldr	r5, [sp, #0]
 800abda:	4642      	mov	r2, r8
 800abdc:	464b      	mov	r3, r9
 800abde:	4630      	mov	r0, r6
 800abe0:	4639      	mov	r1, r7
 800abe2:	f7f5 fe53 	bl	800088c <__aeabi_ddiv>
 800abe6:	f7f5 ffd7 	bl	8000b98 <__aeabi_d2iz>
 800abea:	9002      	str	r0, [sp, #8]
 800abec:	f7f5 fcba 	bl	8000564 <__aeabi_i2d>
 800abf0:	4642      	mov	r2, r8
 800abf2:	464b      	mov	r3, r9
 800abf4:	f7f5 fd20 	bl	8000638 <__aeabi_dmul>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4630      	mov	r0, r6
 800abfe:	4639      	mov	r1, r7
 800ac00:	f7f5 fb62 	bl	80002c8 <__aeabi_dsub>
 800ac04:	9e02      	ldr	r6, [sp, #8]
 800ac06:	9f01      	ldr	r7, [sp, #4]
 800ac08:	3630      	adds	r6, #48	; 0x30
 800ac0a:	f805 6b01 	strb.w	r6, [r5], #1
 800ac0e:	9e00      	ldr	r6, [sp, #0]
 800ac10:	1bae      	subs	r6, r5, r6
 800ac12:	42b7      	cmp	r7, r6
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	d137      	bne.n	800ac8a <_dtoa_r+0x722>
 800ac1a:	f7f5 fb57 	bl	80002cc <__adddf3>
 800ac1e:	4642      	mov	r2, r8
 800ac20:	464b      	mov	r3, r9
 800ac22:	4606      	mov	r6, r0
 800ac24:	460f      	mov	r7, r1
 800ac26:	f7f5 ff97 	bl	8000b58 <__aeabi_dcmpgt>
 800ac2a:	b9c8      	cbnz	r0, 800ac60 <_dtoa_r+0x6f8>
 800ac2c:	4642      	mov	r2, r8
 800ac2e:	464b      	mov	r3, r9
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 ff68 	bl	8000b08 <__aeabi_dcmpeq>
 800ac38:	b110      	cbz	r0, 800ac40 <_dtoa_r+0x6d8>
 800ac3a:	9b02      	ldr	r3, [sp, #8]
 800ac3c:	07d9      	lsls	r1, r3, #31
 800ac3e:	d40f      	bmi.n	800ac60 <_dtoa_r+0x6f8>
 800ac40:	4620      	mov	r0, r4
 800ac42:	4659      	mov	r1, fp
 800ac44:	f000 fe58 	bl	800b8f8 <_Bfree>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	702b      	strb	r3, [r5, #0]
 800ac4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac4e:	f10a 0001 	add.w	r0, sl, #1
 800ac52:	6018      	str	r0, [r3, #0]
 800ac54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f43f acd8 	beq.w	800a60c <_dtoa_r+0xa4>
 800ac5c:	601d      	str	r5, [r3, #0]
 800ac5e:	e4d5      	b.n	800a60c <_dtoa_r+0xa4>
 800ac60:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac64:	462b      	mov	r3, r5
 800ac66:	461d      	mov	r5, r3
 800ac68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac6c:	2a39      	cmp	r2, #57	; 0x39
 800ac6e:	d108      	bne.n	800ac82 <_dtoa_r+0x71a>
 800ac70:	9a00      	ldr	r2, [sp, #0]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d1f7      	bne.n	800ac66 <_dtoa_r+0x6fe>
 800ac76:	9a07      	ldr	r2, [sp, #28]
 800ac78:	9900      	ldr	r1, [sp, #0]
 800ac7a:	3201      	adds	r2, #1
 800ac7c:	9207      	str	r2, [sp, #28]
 800ac7e:	2230      	movs	r2, #48	; 0x30
 800ac80:	700a      	strb	r2, [r1, #0]
 800ac82:	781a      	ldrb	r2, [r3, #0]
 800ac84:	3201      	adds	r2, #1
 800ac86:	701a      	strb	r2, [r3, #0]
 800ac88:	e78c      	b.n	800aba4 <_dtoa_r+0x63c>
 800ac8a:	4b7f      	ldr	r3, [pc, #508]	; (800ae88 <_dtoa_r+0x920>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f7f5 fcd3 	bl	8000638 <__aeabi_dmul>
 800ac92:	2200      	movs	r2, #0
 800ac94:	2300      	movs	r3, #0
 800ac96:	4606      	mov	r6, r0
 800ac98:	460f      	mov	r7, r1
 800ac9a:	f7f5 ff35 	bl	8000b08 <__aeabi_dcmpeq>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d09b      	beq.n	800abda <_dtoa_r+0x672>
 800aca2:	e7cd      	b.n	800ac40 <_dtoa_r+0x6d8>
 800aca4:	9a08      	ldr	r2, [sp, #32]
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	f000 80c4 	beq.w	800ae34 <_dtoa_r+0x8cc>
 800acac:	9a05      	ldr	r2, [sp, #20]
 800acae:	2a01      	cmp	r2, #1
 800acb0:	f300 80a8 	bgt.w	800ae04 <_dtoa_r+0x89c>
 800acb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acb6:	2a00      	cmp	r2, #0
 800acb8:	f000 80a0 	beq.w	800adfc <_dtoa_r+0x894>
 800acbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acc0:	9e06      	ldr	r6, [sp, #24]
 800acc2:	4645      	mov	r5, r8
 800acc4:	9a04      	ldr	r2, [sp, #16]
 800acc6:	2101      	movs	r1, #1
 800acc8:	441a      	add	r2, r3
 800acca:	4620      	mov	r0, r4
 800accc:	4498      	add	r8, r3
 800acce:	9204      	str	r2, [sp, #16]
 800acd0:	f000 ff18 	bl	800bb04 <__i2b>
 800acd4:	4607      	mov	r7, r0
 800acd6:	2d00      	cmp	r5, #0
 800acd8:	dd0b      	ble.n	800acf2 <_dtoa_r+0x78a>
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	dd08      	ble.n	800acf2 <_dtoa_r+0x78a>
 800ace0:	42ab      	cmp	r3, r5
 800ace2:	9a04      	ldr	r2, [sp, #16]
 800ace4:	bfa8      	it	ge
 800ace6:	462b      	movge	r3, r5
 800ace8:	eba8 0803 	sub.w	r8, r8, r3
 800acec:	1aed      	subs	r5, r5, r3
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	9304      	str	r3, [sp, #16]
 800acf2:	9b06      	ldr	r3, [sp, #24]
 800acf4:	b1fb      	cbz	r3, 800ad36 <_dtoa_r+0x7ce>
 800acf6:	9b08      	ldr	r3, [sp, #32]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 809f 	beq.w	800ae3c <_dtoa_r+0x8d4>
 800acfe:	2e00      	cmp	r6, #0
 800ad00:	dd11      	ble.n	800ad26 <_dtoa_r+0x7be>
 800ad02:	4639      	mov	r1, r7
 800ad04:	4632      	mov	r2, r6
 800ad06:	4620      	mov	r0, r4
 800ad08:	f000 ffb8 	bl	800bc7c <__pow5mult>
 800ad0c:	465a      	mov	r2, fp
 800ad0e:	4601      	mov	r1, r0
 800ad10:	4607      	mov	r7, r0
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 ff0c 	bl	800bb30 <__multiply>
 800ad18:	4659      	mov	r1, fp
 800ad1a:	9007      	str	r0, [sp, #28]
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 fdeb 	bl	800b8f8 <_Bfree>
 800ad22:	9b07      	ldr	r3, [sp, #28]
 800ad24:	469b      	mov	fp, r3
 800ad26:	9b06      	ldr	r3, [sp, #24]
 800ad28:	1b9a      	subs	r2, r3, r6
 800ad2a:	d004      	beq.n	800ad36 <_dtoa_r+0x7ce>
 800ad2c:	4659      	mov	r1, fp
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 ffa4 	bl	800bc7c <__pow5mult>
 800ad34:	4683      	mov	fp, r0
 800ad36:	2101      	movs	r1, #1
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 fee3 	bl	800bb04 <__i2b>
 800ad3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	4606      	mov	r6, r0
 800ad44:	dd7c      	ble.n	800ae40 <_dtoa_r+0x8d8>
 800ad46:	461a      	mov	r2, r3
 800ad48:	4601      	mov	r1, r0
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 ff96 	bl	800bc7c <__pow5mult>
 800ad50:	9b05      	ldr	r3, [sp, #20]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	4606      	mov	r6, r0
 800ad56:	dd76      	ble.n	800ae46 <_dtoa_r+0x8de>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	9306      	str	r3, [sp, #24]
 800ad5c:	6933      	ldr	r3, [r6, #16]
 800ad5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad62:	6918      	ldr	r0, [r3, #16]
 800ad64:	f000 fe7e 	bl	800ba64 <__hi0bits>
 800ad68:	f1c0 0020 	rsb	r0, r0, #32
 800ad6c:	9b04      	ldr	r3, [sp, #16]
 800ad6e:	4418      	add	r0, r3
 800ad70:	f010 001f 	ands.w	r0, r0, #31
 800ad74:	f000 8086 	beq.w	800ae84 <_dtoa_r+0x91c>
 800ad78:	f1c0 0320 	rsb	r3, r0, #32
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	dd7f      	ble.n	800ae80 <_dtoa_r+0x918>
 800ad80:	f1c0 001c 	rsb	r0, r0, #28
 800ad84:	9b04      	ldr	r3, [sp, #16]
 800ad86:	4403      	add	r3, r0
 800ad88:	4480      	add	r8, r0
 800ad8a:	4405      	add	r5, r0
 800ad8c:	9304      	str	r3, [sp, #16]
 800ad8e:	f1b8 0f00 	cmp.w	r8, #0
 800ad92:	dd05      	ble.n	800ada0 <_dtoa_r+0x838>
 800ad94:	4659      	mov	r1, fp
 800ad96:	4642      	mov	r2, r8
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 ffc9 	bl	800bd30 <__lshift>
 800ad9e:	4683      	mov	fp, r0
 800ada0:	9b04      	ldr	r3, [sp, #16]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dd05      	ble.n	800adb2 <_dtoa_r+0x84a>
 800ada6:	4631      	mov	r1, r6
 800ada8:	461a      	mov	r2, r3
 800adaa:	4620      	mov	r0, r4
 800adac:	f000 ffc0 	bl	800bd30 <__lshift>
 800adb0:	4606      	mov	r6, r0
 800adb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d069      	beq.n	800ae8c <_dtoa_r+0x924>
 800adb8:	4631      	mov	r1, r6
 800adba:	4658      	mov	r0, fp
 800adbc:	f001 f824 	bl	800be08 <__mcmp>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	da63      	bge.n	800ae8c <_dtoa_r+0x924>
 800adc4:	2300      	movs	r3, #0
 800adc6:	4659      	mov	r1, fp
 800adc8:	220a      	movs	r2, #10
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fdb6 	bl	800b93c <__multadd>
 800add0:	9b08      	ldr	r3, [sp, #32]
 800add2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800add6:	4683      	mov	fp, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 818f 	beq.w	800b0fc <_dtoa_r+0xb94>
 800adde:	4639      	mov	r1, r7
 800ade0:	2300      	movs	r3, #0
 800ade2:	220a      	movs	r2, #10
 800ade4:	4620      	mov	r0, r4
 800ade6:	f000 fda9 	bl	800b93c <__multadd>
 800adea:	f1b9 0f00 	cmp.w	r9, #0
 800adee:	4607      	mov	r7, r0
 800adf0:	f300 808e 	bgt.w	800af10 <_dtoa_r+0x9a8>
 800adf4:	9b05      	ldr	r3, [sp, #20]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	dc50      	bgt.n	800ae9c <_dtoa_r+0x934>
 800adfa:	e089      	b.n	800af10 <_dtoa_r+0x9a8>
 800adfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae02:	e75d      	b.n	800acc0 <_dtoa_r+0x758>
 800ae04:	9b01      	ldr	r3, [sp, #4]
 800ae06:	1e5e      	subs	r6, r3, #1
 800ae08:	9b06      	ldr	r3, [sp, #24]
 800ae0a:	42b3      	cmp	r3, r6
 800ae0c:	bfbf      	itttt	lt
 800ae0e:	9b06      	ldrlt	r3, [sp, #24]
 800ae10:	9606      	strlt	r6, [sp, #24]
 800ae12:	1af2      	sublt	r2, r6, r3
 800ae14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ae16:	bfb6      	itet	lt
 800ae18:	189b      	addlt	r3, r3, r2
 800ae1a:	1b9e      	subge	r6, r3, r6
 800ae1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ae1e:	9b01      	ldr	r3, [sp, #4]
 800ae20:	bfb8      	it	lt
 800ae22:	2600      	movlt	r6, #0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	bfb5      	itete	lt
 800ae28:	eba8 0503 	sublt.w	r5, r8, r3
 800ae2c:	9b01      	ldrge	r3, [sp, #4]
 800ae2e:	2300      	movlt	r3, #0
 800ae30:	4645      	movge	r5, r8
 800ae32:	e747      	b.n	800acc4 <_dtoa_r+0x75c>
 800ae34:	9e06      	ldr	r6, [sp, #24]
 800ae36:	9f08      	ldr	r7, [sp, #32]
 800ae38:	4645      	mov	r5, r8
 800ae3a:	e74c      	b.n	800acd6 <_dtoa_r+0x76e>
 800ae3c:	9a06      	ldr	r2, [sp, #24]
 800ae3e:	e775      	b.n	800ad2c <_dtoa_r+0x7c4>
 800ae40:	9b05      	ldr	r3, [sp, #20]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	dc18      	bgt.n	800ae78 <_dtoa_r+0x910>
 800ae46:	9b02      	ldr	r3, [sp, #8]
 800ae48:	b9b3      	cbnz	r3, 800ae78 <_dtoa_r+0x910>
 800ae4a:	9b03      	ldr	r3, [sp, #12]
 800ae4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae50:	b9a3      	cbnz	r3, 800ae7c <_dtoa_r+0x914>
 800ae52:	9b03      	ldr	r3, [sp, #12]
 800ae54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae58:	0d1b      	lsrs	r3, r3, #20
 800ae5a:	051b      	lsls	r3, r3, #20
 800ae5c:	b12b      	cbz	r3, 800ae6a <_dtoa_r+0x902>
 800ae5e:	9b04      	ldr	r3, [sp, #16]
 800ae60:	3301      	adds	r3, #1
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	f108 0801 	add.w	r8, r8, #1
 800ae68:	2301      	movs	r3, #1
 800ae6a:	9306      	str	r3, [sp, #24]
 800ae6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f47f af74 	bne.w	800ad5c <_dtoa_r+0x7f4>
 800ae74:	2001      	movs	r0, #1
 800ae76:	e779      	b.n	800ad6c <_dtoa_r+0x804>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e7f6      	b.n	800ae6a <_dtoa_r+0x902>
 800ae7c:	9b02      	ldr	r3, [sp, #8]
 800ae7e:	e7f4      	b.n	800ae6a <_dtoa_r+0x902>
 800ae80:	d085      	beq.n	800ad8e <_dtoa_r+0x826>
 800ae82:	4618      	mov	r0, r3
 800ae84:	301c      	adds	r0, #28
 800ae86:	e77d      	b.n	800ad84 <_dtoa_r+0x81c>
 800ae88:	40240000 	.word	0x40240000
 800ae8c:	9b01      	ldr	r3, [sp, #4]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dc38      	bgt.n	800af04 <_dtoa_r+0x99c>
 800ae92:	9b05      	ldr	r3, [sp, #20]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	dd35      	ble.n	800af04 <_dtoa_r+0x99c>
 800ae98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ae9c:	f1b9 0f00 	cmp.w	r9, #0
 800aea0:	d10d      	bne.n	800aebe <_dtoa_r+0x956>
 800aea2:	4631      	mov	r1, r6
 800aea4:	464b      	mov	r3, r9
 800aea6:	2205      	movs	r2, #5
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 fd47 	bl	800b93c <__multadd>
 800aeae:	4601      	mov	r1, r0
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	4658      	mov	r0, fp
 800aeb4:	f000 ffa8 	bl	800be08 <__mcmp>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	f73f adbd 	bgt.w	800aa38 <_dtoa_r+0x4d0>
 800aebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec0:	9d00      	ldr	r5, [sp, #0]
 800aec2:	ea6f 0a03 	mvn.w	sl, r3
 800aec6:	f04f 0800 	mov.w	r8, #0
 800aeca:	4631      	mov	r1, r6
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 fd13 	bl	800b8f8 <_Bfree>
 800aed2:	2f00      	cmp	r7, #0
 800aed4:	f43f aeb4 	beq.w	800ac40 <_dtoa_r+0x6d8>
 800aed8:	f1b8 0f00 	cmp.w	r8, #0
 800aedc:	d005      	beq.n	800aeea <_dtoa_r+0x982>
 800aede:	45b8      	cmp	r8, r7
 800aee0:	d003      	beq.n	800aeea <_dtoa_r+0x982>
 800aee2:	4641      	mov	r1, r8
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 fd07 	bl	800b8f8 <_Bfree>
 800aeea:	4639      	mov	r1, r7
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 fd03 	bl	800b8f8 <_Bfree>
 800aef2:	e6a5      	b.n	800ac40 <_dtoa_r+0x6d8>
 800aef4:	2600      	movs	r6, #0
 800aef6:	4637      	mov	r7, r6
 800aef8:	e7e1      	b.n	800aebe <_dtoa_r+0x956>
 800aefa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aefc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800af00:	4637      	mov	r7, r6
 800af02:	e599      	b.n	800aa38 <_dtoa_r+0x4d0>
 800af04:	9b08      	ldr	r3, [sp, #32]
 800af06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 80fd 	beq.w	800b10a <_dtoa_r+0xba2>
 800af10:	2d00      	cmp	r5, #0
 800af12:	dd05      	ble.n	800af20 <_dtoa_r+0x9b8>
 800af14:	4639      	mov	r1, r7
 800af16:	462a      	mov	r2, r5
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 ff09 	bl	800bd30 <__lshift>
 800af1e:	4607      	mov	r7, r0
 800af20:	9b06      	ldr	r3, [sp, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d05c      	beq.n	800afe0 <_dtoa_r+0xa78>
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 fca5 	bl	800b878 <_Balloc>
 800af2e:	4605      	mov	r5, r0
 800af30:	b928      	cbnz	r0, 800af3e <_dtoa_r+0x9d6>
 800af32:	4b80      	ldr	r3, [pc, #512]	; (800b134 <_dtoa_r+0xbcc>)
 800af34:	4602      	mov	r2, r0
 800af36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af3a:	f7ff bb2e 	b.w	800a59a <_dtoa_r+0x32>
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	3202      	adds	r2, #2
 800af42:	0092      	lsls	r2, r2, #2
 800af44:	f107 010c 	add.w	r1, r7, #12
 800af48:	300c      	adds	r0, #12
 800af4a:	f000 fc87 	bl	800b85c <memcpy>
 800af4e:	2201      	movs	r2, #1
 800af50:	4629      	mov	r1, r5
 800af52:	4620      	mov	r0, r4
 800af54:	f000 feec 	bl	800bd30 <__lshift>
 800af58:	9b00      	ldr	r3, [sp, #0]
 800af5a:	3301      	adds	r3, #1
 800af5c:	9301      	str	r3, [sp, #4]
 800af5e:	9b00      	ldr	r3, [sp, #0]
 800af60:	444b      	add	r3, r9
 800af62:	9307      	str	r3, [sp, #28]
 800af64:	9b02      	ldr	r3, [sp, #8]
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	46b8      	mov	r8, r7
 800af6c:	9306      	str	r3, [sp, #24]
 800af6e:	4607      	mov	r7, r0
 800af70:	9b01      	ldr	r3, [sp, #4]
 800af72:	4631      	mov	r1, r6
 800af74:	3b01      	subs	r3, #1
 800af76:	4658      	mov	r0, fp
 800af78:	9302      	str	r3, [sp, #8]
 800af7a:	f7ff fa67 	bl	800a44c <quorem>
 800af7e:	4603      	mov	r3, r0
 800af80:	3330      	adds	r3, #48	; 0x30
 800af82:	9004      	str	r0, [sp, #16]
 800af84:	4641      	mov	r1, r8
 800af86:	4658      	mov	r0, fp
 800af88:	9308      	str	r3, [sp, #32]
 800af8a:	f000 ff3d 	bl	800be08 <__mcmp>
 800af8e:	463a      	mov	r2, r7
 800af90:	4681      	mov	r9, r0
 800af92:	4631      	mov	r1, r6
 800af94:	4620      	mov	r0, r4
 800af96:	f000 ff53 	bl	800be40 <__mdiff>
 800af9a:	68c2      	ldr	r2, [r0, #12]
 800af9c:	9b08      	ldr	r3, [sp, #32]
 800af9e:	4605      	mov	r5, r0
 800afa0:	bb02      	cbnz	r2, 800afe4 <_dtoa_r+0xa7c>
 800afa2:	4601      	mov	r1, r0
 800afa4:	4658      	mov	r0, fp
 800afa6:	f000 ff2f 	bl	800be08 <__mcmp>
 800afaa:	9b08      	ldr	r3, [sp, #32]
 800afac:	4602      	mov	r2, r0
 800afae:	4629      	mov	r1, r5
 800afb0:	4620      	mov	r0, r4
 800afb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800afb6:	f000 fc9f 	bl	800b8f8 <_Bfree>
 800afba:	9b05      	ldr	r3, [sp, #20]
 800afbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afbe:	9d01      	ldr	r5, [sp, #4]
 800afc0:	ea43 0102 	orr.w	r1, r3, r2
 800afc4:	9b06      	ldr	r3, [sp, #24]
 800afc6:	430b      	orrs	r3, r1
 800afc8:	9b08      	ldr	r3, [sp, #32]
 800afca:	d10d      	bne.n	800afe8 <_dtoa_r+0xa80>
 800afcc:	2b39      	cmp	r3, #57	; 0x39
 800afce:	d029      	beq.n	800b024 <_dtoa_r+0xabc>
 800afd0:	f1b9 0f00 	cmp.w	r9, #0
 800afd4:	dd01      	ble.n	800afda <_dtoa_r+0xa72>
 800afd6:	9b04      	ldr	r3, [sp, #16]
 800afd8:	3331      	adds	r3, #49	; 0x31
 800afda:	9a02      	ldr	r2, [sp, #8]
 800afdc:	7013      	strb	r3, [r2, #0]
 800afde:	e774      	b.n	800aeca <_dtoa_r+0x962>
 800afe0:	4638      	mov	r0, r7
 800afe2:	e7b9      	b.n	800af58 <_dtoa_r+0x9f0>
 800afe4:	2201      	movs	r2, #1
 800afe6:	e7e2      	b.n	800afae <_dtoa_r+0xa46>
 800afe8:	f1b9 0f00 	cmp.w	r9, #0
 800afec:	db06      	blt.n	800affc <_dtoa_r+0xa94>
 800afee:	9905      	ldr	r1, [sp, #20]
 800aff0:	ea41 0909 	orr.w	r9, r1, r9
 800aff4:	9906      	ldr	r1, [sp, #24]
 800aff6:	ea59 0101 	orrs.w	r1, r9, r1
 800affa:	d120      	bne.n	800b03e <_dtoa_r+0xad6>
 800affc:	2a00      	cmp	r2, #0
 800affe:	ddec      	ble.n	800afda <_dtoa_r+0xa72>
 800b000:	4659      	mov	r1, fp
 800b002:	2201      	movs	r2, #1
 800b004:	4620      	mov	r0, r4
 800b006:	9301      	str	r3, [sp, #4]
 800b008:	f000 fe92 	bl	800bd30 <__lshift>
 800b00c:	4631      	mov	r1, r6
 800b00e:	4683      	mov	fp, r0
 800b010:	f000 fefa 	bl	800be08 <__mcmp>
 800b014:	2800      	cmp	r0, #0
 800b016:	9b01      	ldr	r3, [sp, #4]
 800b018:	dc02      	bgt.n	800b020 <_dtoa_r+0xab8>
 800b01a:	d1de      	bne.n	800afda <_dtoa_r+0xa72>
 800b01c:	07da      	lsls	r2, r3, #31
 800b01e:	d5dc      	bpl.n	800afda <_dtoa_r+0xa72>
 800b020:	2b39      	cmp	r3, #57	; 0x39
 800b022:	d1d8      	bne.n	800afd6 <_dtoa_r+0xa6e>
 800b024:	9a02      	ldr	r2, [sp, #8]
 800b026:	2339      	movs	r3, #57	; 0x39
 800b028:	7013      	strb	r3, [r2, #0]
 800b02a:	462b      	mov	r3, r5
 800b02c:	461d      	mov	r5, r3
 800b02e:	3b01      	subs	r3, #1
 800b030:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b034:	2a39      	cmp	r2, #57	; 0x39
 800b036:	d050      	beq.n	800b0da <_dtoa_r+0xb72>
 800b038:	3201      	adds	r2, #1
 800b03a:	701a      	strb	r2, [r3, #0]
 800b03c:	e745      	b.n	800aeca <_dtoa_r+0x962>
 800b03e:	2a00      	cmp	r2, #0
 800b040:	dd03      	ble.n	800b04a <_dtoa_r+0xae2>
 800b042:	2b39      	cmp	r3, #57	; 0x39
 800b044:	d0ee      	beq.n	800b024 <_dtoa_r+0xabc>
 800b046:	3301      	adds	r3, #1
 800b048:	e7c7      	b.n	800afda <_dtoa_r+0xa72>
 800b04a:	9a01      	ldr	r2, [sp, #4]
 800b04c:	9907      	ldr	r1, [sp, #28]
 800b04e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b052:	428a      	cmp	r2, r1
 800b054:	d02a      	beq.n	800b0ac <_dtoa_r+0xb44>
 800b056:	4659      	mov	r1, fp
 800b058:	2300      	movs	r3, #0
 800b05a:	220a      	movs	r2, #10
 800b05c:	4620      	mov	r0, r4
 800b05e:	f000 fc6d 	bl	800b93c <__multadd>
 800b062:	45b8      	cmp	r8, r7
 800b064:	4683      	mov	fp, r0
 800b066:	f04f 0300 	mov.w	r3, #0
 800b06a:	f04f 020a 	mov.w	r2, #10
 800b06e:	4641      	mov	r1, r8
 800b070:	4620      	mov	r0, r4
 800b072:	d107      	bne.n	800b084 <_dtoa_r+0xb1c>
 800b074:	f000 fc62 	bl	800b93c <__multadd>
 800b078:	4680      	mov	r8, r0
 800b07a:	4607      	mov	r7, r0
 800b07c:	9b01      	ldr	r3, [sp, #4]
 800b07e:	3301      	adds	r3, #1
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	e775      	b.n	800af70 <_dtoa_r+0xa08>
 800b084:	f000 fc5a 	bl	800b93c <__multadd>
 800b088:	4639      	mov	r1, r7
 800b08a:	4680      	mov	r8, r0
 800b08c:	2300      	movs	r3, #0
 800b08e:	220a      	movs	r2, #10
 800b090:	4620      	mov	r0, r4
 800b092:	f000 fc53 	bl	800b93c <__multadd>
 800b096:	4607      	mov	r7, r0
 800b098:	e7f0      	b.n	800b07c <_dtoa_r+0xb14>
 800b09a:	f1b9 0f00 	cmp.w	r9, #0
 800b09e:	9a00      	ldr	r2, [sp, #0]
 800b0a0:	bfcc      	ite	gt
 800b0a2:	464d      	movgt	r5, r9
 800b0a4:	2501      	movle	r5, #1
 800b0a6:	4415      	add	r5, r2
 800b0a8:	f04f 0800 	mov.w	r8, #0
 800b0ac:	4659      	mov	r1, fp
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	9301      	str	r3, [sp, #4]
 800b0b4:	f000 fe3c 	bl	800bd30 <__lshift>
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4683      	mov	fp, r0
 800b0bc:	f000 fea4 	bl	800be08 <__mcmp>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	dcb2      	bgt.n	800b02a <_dtoa_r+0xac2>
 800b0c4:	d102      	bne.n	800b0cc <_dtoa_r+0xb64>
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	07db      	lsls	r3, r3, #31
 800b0ca:	d4ae      	bmi.n	800b02a <_dtoa_r+0xac2>
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	461d      	mov	r5, r3
 800b0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0d4:	2a30      	cmp	r2, #48	; 0x30
 800b0d6:	d0fa      	beq.n	800b0ce <_dtoa_r+0xb66>
 800b0d8:	e6f7      	b.n	800aeca <_dtoa_r+0x962>
 800b0da:	9a00      	ldr	r2, [sp, #0]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d1a5      	bne.n	800b02c <_dtoa_r+0xac4>
 800b0e0:	f10a 0a01 	add.w	sl, sl, #1
 800b0e4:	2331      	movs	r3, #49	; 0x31
 800b0e6:	e779      	b.n	800afdc <_dtoa_r+0xa74>
 800b0e8:	4b13      	ldr	r3, [pc, #76]	; (800b138 <_dtoa_r+0xbd0>)
 800b0ea:	f7ff baaf 	b.w	800a64c <_dtoa_r+0xe4>
 800b0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f47f aa86 	bne.w	800a602 <_dtoa_r+0x9a>
 800b0f6:	4b11      	ldr	r3, [pc, #68]	; (800b13c <_dtoa_r+0xbd4>)
 800b0f8:	f7ff baa8 	b.w	800a64c <_dtoa_r+0xe4>
 800b0fc:	f1b9 0f00 	cmp.w	r9, #0
 800b100:	dc03      	bgt.n	800b10a <_dtoa_r+0xba2>
 800b102:	9b05      	ldr	r3, [sp, #20]
 800b104:	2b02      	cmp	r3, #2
 800b106:	f73f aec9 	bgt.w	800ae9c <_dtoa_r+0x934>
 800b10a:	9d00      	ldr	r5, [sp, #0]
 800b10c:	4631      	mov	r1, r6
 800b10e:	4658      	mov	r0, fp
 800b110:	f7ff f99c 	bl	800a44c <quorem>
 800b114:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b118:	f805 3b01 	strb.w	r3, [r5], #1
 800b11c:	9a00      	ldr	r2, [sp, #0]
 800b11e:	1aaa      	subs	r2, r5, r2
 800b120:	4591      	cmp	r9, r2
 800b122:	ddba      	ble.n	800b09a <_dtoa_r+0xb32>
 800b124:	4659      	mov	r1, fp
 800b126:	2300      	movs	r3, #0
 800b128:	220a      	movs	r2, #10
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 fc06 	bl	800b93c <__multadd>
 800b130:	4683      	mov	fp, r0
 800b132:	e7eb      	b.n	800b10c <_dtoa_r+0xba4>
 800b134:	0800d5fb 	.word	0x0800d5fb
 800b138:	0800d504 	.word	0x0800d504
 800b13c:	0800d578 	.word	0x0800d578

0800b140 <rshift>:
 800b140:	6903      	ldr	r3, [r0, #16]
 800b142:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b14a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b14e:	f100 0414 	add.w	r4, r0, #20
 800b152:	dd45      	ble.n	800b1e0 <rshift+0xa0>
 800b154:	f011 011f 	ands.w	r1, r1, #31
 800b158:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b15c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b160:	d10c      	bne.n	800b17c <rshift+0x3c>
 800b162:	f100 0710 	add.w	r7, r0, #16
 800b166:	4629      	mov	r1, r5
 800b168:	42b1      	cmp	r1, r6
 800b16a:	d334      	bcc.n	800b1d6 <rshift+0x96>
 800b16c:	1a9b      	subs	r3, r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	1eea      	subs	r2, r5, #3
 800b172:	4296      	cmp	r6, r2
 800b174:	bf38      	it	cc
 800b176:	2300      	movcc	r3, #0
 800b178:	4423      	add	r3, r4
 800b17a:	e015      	b.n	800b1a8 <rshift+0x68>
 800b17c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b180:	f1c1 0820 	rsb	r8, r1, #32
 800b184:	40cf      	lsrs	r7, r1
 800b186:	f105 0e04 	add.w	lr, r5, #4
 800b18a:	46a1      	mov	r9, r4
 800b18c:	4576      	cmp	r6, lr
 800b18e:	46f4      	mov	ip, lr
 800b190:	d815      	bhi.n	800b1be <rshift+0x7e>
 800b192:	1a9b      	subs	r3, r3, r2
 800b194:	009a      	lsls	r2, r3, #2
 800b196:	3a04      	subs	r2, #4
 800b198:	3501      	adds	r5, #1
 800b19a:	42ae      	cmp	r6, r5
 800b19c:	bf38      	it	cc
 800b19e:	2200      	movcc	r2, #0
 800b1a0:	18a3      	adds	r3, r4, r2
 800b1a2:	50a7      	str	r7, [r4, r2]
 800b1a4:	b107      	cbz	r7, 800b1a8 <rshift+0x68>
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	1b1a      	subs	r2, r3, r4
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1b0:	bf08      	it	eq
 800b1b2:	2300      	moveq	r3, #0
 800b1b4:	6102      	str	r2, [r0, #16]
 800b1b6:	bf08      	it	eq
 800b1b8:	6143      	streq	r3, [r0, #20]
 800b1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1be:	f8dc c000 	ldr.w	ip, [ip]
 800b1c2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1c6:	ea4c 0707 	orr.w	r7, ip, r7
 800b1ca:	f849 7b04 	str.w	r7, [r9], #4
 800b1ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1d2:	40cf      	lsrs	r7, r1
 800b1d4:	e7da      	b.n	800b18c <rshift+0x4c>
 800b1d6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1da:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1de:	e7c3      	b.n	800b168 <rshift+0x28>
 800b1e0:	4623      	mov	r3, r4
 800b1e2:	e7e1      	b.n	800b1a8 <rshift+0x68>

0800b1e4 <__hexdig_fun>:
 800b1e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b1e8:	2b09      	cmp	r3, #9
 800b1ea:	d802      	bhi.n	800b1f2 <__hexdig_fun+0xe>
 800b1ec:	3820      	subs	r0, #32
 800b1ee:	b2c0      	uxtb	r0, r0
 800b1f0:	4770      	bx	lr
 800b1f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1f6:	2b05      	cmp	r3, #5
 800b1f8:	d801      	bhi.n	800b1fe <__hexdig_fun+0x1a>
 800b1fa:	3847      	subs	r0, #71	; 0x47
 800b1fc:	e7f7      	b.n	800b1ee <__hexdig_fun+0xa>
 800b1fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b202:	2b05      	cmp	r3, #5
 800b204:	d801      	bhi.n	800b20a <__hexdig_fun+0x26>
 800b206:	3827      	subs	r0, #39	; 0x27
 800b208:	e7f1      	b.n	800b1ee <__hexdig_fun+0xa>
 800b20a:	2000      	movs	r0, #0
 800b20c:	4770      	bx	lr
	...

0800b210 <__gethex>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	ed2d 8b02 	vpush	{d8}
 800b218:	b089      	sub	sp, #36	; 0x24
 800b21a:	ee08 0a10 	vmov	s16, r0
 800b21e:	9304      	str	r3, [sp, #16]
 800b220:	4bbc      	ldr	r3, [pc, #752]	; (800b514 <__gethex+0x304>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	4618      	mov	r0, r3
 800b228:	468b      	mov	fp, r1
 800b22a:	4690      	mov	r8, r2
 800b22c:	f7f4 fff0 	bl	8000210 <strlen>
 800b230:	9b01      	ldr	r3, [sp, #4]
 800b232:	f8db 2000 	ldr.w	r2, [fp]
 800b236:	4403      	add	r3, r0
 800b238:	4682      	mov	sl, r0
 800b23a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b23e:	9305      	str	r3, [sp, #20]
 800b240:	1c93      	adds	r3, r2, #2
 800b242:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b246:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b24a:	32fe      	adds	r2, #254	; 0xfe
 800b24c:	18d1      	adds	r1, r2, r3
 800b24e:	461f      	mov	r7, r3
 800b250:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b254:	9100      	str	r1, [sp, #0]
 800b256:	2830      	cmp	r0, #48	; 0x30
 800b258:	d0f8      	beq.n	800b24c <__gethex+0x3c>
 800b25a:	f7ff ffc3 	bl	800b1e4 <__hexdig_fun>
 800b25e:	4604      	mov	r4, r0
 800b260:	2800      	cmp	r0, #0
 800b262:	d13a      	bne.n	800b2da <__gethex+0xca>
 800b264:	9901      	ldr	r1, [sp, #4]
 800b266:	4652      	mov	r2, sl
 800b268:	4638      	mov	r0, r7
 800b26a:	f001 f9ed 	bl	800c648 <strncmp>
 800b26e:	4605      	mov	r5, r0
 800b270:	2800      	cmp	r0, #0
 800b272:	d168      	bne.n	800b346 <__gethex+0x136>
 800b274:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b278:	eb07 060a 	add.w	r6, r7, sl
 800b27c:	f7ff ffb2 	bl	800b1e4 <__hexdig_fun>
 800b280:	2800      	cmp	r0, #0
 800b282:	d062      	beq.n	800b34a <__gethex+0x13a>
 800b284:	4633      	mov	r3, r6
 800b286:	7818      	ldrb	r0, [r3, #0]
 800b288:	2830      	cmp	r0, #48	; 0x30
 800b28a:	461f      	mov	r7, r3
 800b28c:	f103 0301 	add.w	r3, r3, #1
 800b290:	d0f9      	beq.n	800b286 <__gethex+0x76>
 800b292:	f7ff ffa7 	bl	800b1e4 <__hexdig_fun>
 800b296:	2301      	movs	r3, #1
 800b298:	fab0 f480 	clz	r4, r0
 800b29c:	0964      	lsrs	r4, r4, #5
 800b29e:	4635      	mov	r5, r6
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	463a      	mov	r2, r7
 800b2a4:	4616      	mov	r6, r2
 800b2a6:	3201      	adds	r2, #1
 800b2a8:	7830      	ldrb	r0, [r6, #0]
 800b2aa:	f7ff ff9b 	bl	800b1e4 <__hexdig_fun>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d1f8      	bne.n	800b2a4 <__gethex+0x94>
 800b2b2:	9901      	ldr	r1, [sp, #4]
 800b2b4:	4652      	mov	r2, sl
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f001 f9c6 	bl	800c648 <strncmp>
 800b2bc:	b980      	cbnz	r0, 800b2e0 <__gethex+0xd0>
 800b2be:	b94d      	cbnz	r5, 800b2d4 <__gethex+0xc4>
 800b2c0:	eb06 050a 	add.w	r5, r6, sl
 800b2c4:	462a      	mov	r2, r5
 800b2c6:	4616      	mov	r6, r2
 800b2c8:	3201      	adds	r2, #1
 800b2ca:	7830      	ldrb	r0, [r6, #0]
 800b2cc:	f7ff ff8a 	bl	800b1e4 <__hexdig_fun>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d1f8      	bne.n	800b2c6 <__gethex+0xb6>
 800b2d4:	1bad      	subs	r5, r5, r6
 800b2d6:	00ad      	lsls	r5, r5, #2
 800b2d8:	e004      	b.n	800b2e4 <__gethex+0xd4>
 800b2da:	2400      	movs	r4, #0
 800b2dc:	4625      	mov	r5, r4
 800b2de:	e7e0      	b.n	800b2a2 <__gethex+0x92>
 800b2e0:	2d00      	cmp	r5, #0
 800b2e2:	d1f7      	bne.n	800b2d4 <__gethex+0xc4>
 800b2e4:	7833      	ldrb	r3, [r6, #0]
 800b2e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2ea:	2b50      	cmp	r3, #80	; 0x50
 800b2ec:	d13b      	bne.n	800b366 <__gethex+0x156>
 800b2ee:	7873      	ldrb	r3, [r6, #1]
 800b2f0:	2b2b      	cmp	r3, #43	; 0x2b
 800b2f2:	d02c      	beq.n	800b34e <__gethex+0x13e>
 800b2f4:	2b2d      	cmp	r3, #45	; 0x2d
 800b2f6:	d02e      	beq.n	800b356 <__gethex+0x146>
 800b2f8:	1c71      	adds	r1, r6, #1
 800b2fa:	f04f 0900 	mov.w	r9, #0
 800b2fe:	7808      	ldrb	r0, [r1, #0]
 800b300:	f7ff ff70 	bl	800b1e4 <__hexdig_fun>
 800b304:	1e43      	subs	r3, r0, #1
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b18      	cmp	r3, #24
 800b30a:	d82c      	bhi.n	800b366 <__gethex+0x156>
 800b30c:	f1a0 0210 	sub.w	r2, r0, #16
 800b310:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b314:	f7ff ff66 	bl	800b1e4 <__hexdig_fun>
 800b318:	1e43      	subs	r3, r0, #1
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b18      	cmp	r3, #24
 800b31e:	d91d      	bls.n	800b35c <__gethex+0x14c>
 800b320:	f1b9 0f00 	cmp.w	r9, #0
 800b324:	d000      	beq.n	800b328 <__gethex+0x118>
 800b326:	4252      	negs	r2, r2
 800b328:	4415      	add	r5, r2
 800b32a:	f8cb 1000 	str.w	r1, [fp]
 800b32e:	b1e4      	cbz	r4, 800b36a <__gethex+0x15a>
 800b330:	9b00      	ldr	r3, [sp, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	bf14      	ite	ne
 800b336:	2700      	movne	r7, #0
 800b338:	2706      	moveq	r7, #6
 800b33a:	4638      	mov	r0, r7
 800b33c:	b009      	add	sp, #36	; 0x24
 800b33e:	ecbd 8b02 	vpop	{d8}
 800b342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b346:	463e      	mov	r6, r7
 800b348:	4625      	mov	r5, r4
 800b34a:	2401      	movs	r4, #1
 800b34c:	e7ca      	b.n	800b2e4 <__gethex+0xd4>
 800b34e:	f04f 0900 	mov.w	r9, #0
 800b352:	1cb1      	adds	r1, r6, #2
 800b354:	e7d3      	b.n	800b2fe <__gethex+0xee>
 800b356:	f04f 0901 	mov.w	r9, #1
 800b35a:	e7fa      	b.n	800b352 <__gethex+0x142>
 800b35c:	230a      	movs	r3, #10
 800b35e:	fb03 0202 	mla	r2, r3, r2, r0
 800b362:	3a10      	subs	r2, #16
 800b364:	e7d4      	b.n	800b310 <__gethex+0x100>
 800b366:	4631      	mov	r1, r6
 800b368:	e7df      	b.n	800b32a <__gethex+0x11a>
 800b36a:	1bf3      	subs	r3, r6, r7
 800b36c:	3b01      	subs	r3, #1
 800b36e:	4621      	mov	r1, r4
 800b370:	2b07      	cmp	r3, #7
 800b372:	dc0b      	bgt.n	800b38c <__gethex+0x17c>
 800b374:	ee18 0a10 	vmov	r0, s16
 800b378:	f000 fa7e 	bl	800b878 <_Balloc>
 800b37c:	4604      	mov	r4, r0
 800b37e:	b940      	cbnz	r0, 800b392 <__gethex+0x182>
 800b380:	4b65      	ldr	r3, [pc, #404]	; (800b518 <__gethex+0x308>)
 800b382:	4602      	mov	r2, r0
 800b384:	21de      	movs	r1, #222	; 0xde
 800b386:	4865      	ldr	r0, [pc, #404]	; (800b51c <__gethex+0x30c>)
 800b388:	f001 f97e 	bl	800c688 <__assert_func>
 800b38c:	3101      	adds	r1, #1
 800b38e:	105b      	asrs	r3, r3, #1
 800b390:	e7ee      	b.n	800b370 <__gethex+0x160>
 800b392:	f100 0914 	add.w	r9, r0, #20
 800b396:	f04f 0b00 	mov.w	fp, #0
 800b39a:	f1ca 0301 	rsb	r3, sl, #1
 800b39e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b3a2:	f8cd b000 	str.w	fp, [sp]
 800b3a6:	9306      	str	r3, [sp, #24]
 800b3a8:	42b7      	cmp	r7, r6
 800b3aa:	d340      	bcc.n	800b42e <__gethex+0x21e>
 800b3ac:	9802      	ldr	r0, [sp, #8]
 800b3ae:	9b00      	ldr	r3, [sp, #0]
 800b3b0:	f840 3b04 	str.w	r3, [r0], #4
 800b3b4:	eba0 0009 	sub.w	r0, r0, r9
 800b3b8:	1080      	asrs	r0, r0, #2
 800b3ba:	0146      	lsls	r6, r0, #5
 800b3bc:	6120      	str	r0, [r4, #16]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fb50 	bl	800ba64 <__hi0bits>
 800b3c4:	1a30      	subs	r0, r6, r0
 800b3c6:	f8d8 6000 	ldr.w	r6, [r8]
 800b3ca:	42b0      	cmp	r0, r6
 800b3cc:	dd63      	ble.n	800b496 <__gethex+0x286>
 800b3ce:	1b87      	subs	r7, r0, r6
 800b3d0:	4639      	mov	r1, r7
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 feea 	bl	800c1ac <__any_on>
 800b3d8:	4682      	mov	sl, r0
 800b3da:	b1a8      	cbz	r0, 800b408 <__gethex+0x1f8>
 800b3dc:	1e7b      	subs	r3, r7, #1
 800b3de:	1159      	asrs	r1, r3, #5
 800b3e0:	f003 021f 	and.w	r2, r3, #31
 800b3e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3e8:	f04f 0a01 	mov.w	sl, #1
 800b3ec:	fa0a f202 	lsl.w	r2, sl, r2
 800b3f0:	420a      	tst	r2, r1
 800b3f2:	d009      	beq.n	800b408 <__gethex+0x1f8>
 800b3f4:	4553      	cmp	r3, sl
 800b3f6:	dd05      	ble.n	800b404 <__gethex+0x1f4>
 800b3f8:	1eb9      	subs	r1, r7, #2
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fed6 	bl	800c1ac <__any_on>
 800b400:	2800      	cmp	r0, #0
 800b402:	d145      	bne.n	800b490 <__gethex+0x280>
 800b404:	f04f 0a02 	mov.w	sl, #2
 800b408:	4639      	mov	r1, r7
 800b40a:	4620      	mov	r0, r4
 800b40c:	f7ff fe98 	bl	800b140 <rshift>
 800b410:	443d      	add	r5, r7
 800b412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b416:	42ab      	cmp	r3, r5
 800b418:	da4c      	bge.n	800b4b4 <__gethex+0x2a4>
 800b41a:	ee18 0a10 	vmov	r0, s16
 800b41e:	4621      	mov	r1, r4
 800b420:	f000 fa6a 	bl	800b8f8 <_Bfree>
 800b424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b426:	2300      	movs	r3, #0
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	27a3      	movs	r7, #163	; 0xa3
 800b42c:	e785      	b.n	800b33a <__gethex+0x12a>
 800b42e:	1e73      	subs	r3, r6, #1
 800b430:	9a05      	ldr	r2, [sp, #20]
 800b432:	9303      	str	r3, [sp, #12]
 800b434:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b438:	4293      	cmp	r3, r2
 800b43a:	d019      	beq.n	800b470 <__gethex+0x260>
 800b43c:	f1bb 0f20 	cmp.w	fp, #32
 800b440:	d107      	bne.n	800b452 <__gethex+0x242>
 800b442:	9b02      	ldr	r3, [sp, #8]
 800b444:	9a00      	ldr	r2, [sp, #0]
 800b446:	f843 2b04 	str.w	r2, [r3], #4
 800b44a:	9302      	str	r3, [sp, #8]
 800b44c:	2300      	movs	r3, #0
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	469b      	mov	fp, r3
 800b452:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b456:	f7ff fec5 	bl	800b1e4 <__hexdig_fun>
 800b45a:	9b00      	ldr	r3, [sp, #0]
 800b45c:	f000 000f 	and.w	r0, r0, #15
 800b460:	fa00 f00b 	lsl.w	r0, r0, fp
 800b464:	4303      	orrs	r3, r0
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	f10b 0b04 	add.w	fp, fp, #4
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	e00d      	b.n	800b48c <__gethex+0x27c>
 800b470:	9b03      	ldr	r3, [sp, #12]
 800b472:	9a06      	ldr	r2, [sp, #24]
 800b474:	4413      	add	r3, r2
 800b476:	42bb      	cmp	r3, r7
 800b478:	d3e0      	bcc.n	800b43c <__gethex+0x22c>
 800b47a:	4618      	mov	r0, r3
 800b47c:	9901      	ldr	r1, [sp, #4]
 800b47e:	9307      	str	r3, [sp, #28]
 800b480:	4652      	mov	r2, sl
 800b482:	f001 f8e1 	bl	800c648 <strncmp>
 800b486:	9b07      	ldr	r3, [sp, #28]
 800b488:	2800      	cmp	r0, #0
 800b48a:	d1d7      	bne.n	800b43c <__gethex+0x22c>
 800b48c:	461e      	mov	r6, r3
 800b48e:	e78b      	b.n	800b3a8 <__gethex+0x198>
 800b490:	f04f 0a03 	mov.w	sl, #3
 800b494:	e7b8      	b.n	800b408 <__gethex+0x1f8>
 800b496:	da0a      	bge.n	800b4ae <__gethex+0x29e>
 800b498:	1a37      	subs	r7, r6, r0
 800b49a:	4621      	mov	r1, r4
 800b49c:	ee18 0a10 	vmov	r0, s16
 800b4a0:	463a      	mov	r2, r7
 800b4a2:	f000 fc45 	bl	800bd30 <__lshift>
 800b4a6:	1bed      	subs	r5, r5, r7
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	f100 0914 	add.w	r9, r0, #20
 800b4ae:	f04f 0a00 	mov.w	sl, #0
 800b4b2:	e7ae      	b.n	800b412 <__gethex+0x202>
 800b4b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4b8:	42a8      	cmp	r0, r5
 800b4ba:	dd72      	ble.n	800b5a2 <__gethex+0x392>
 800b4bc:	1b45      	subs	r5, r0, r5
 800b4be:	42ae      	cmp	r6, r5
 800b4c0:	dc36      	bgt.n	800b530 <__gethex+0x320>
 800b4c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d02a      	beq.n	800b520 <__gethex+0x310>
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	d02c      	beq.n	800b528 <__gethex+0x318>
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d115      	bne.n	800b4fe <__gethex+0x2ee>
 800b4d2:	42ae      	cmp	r6, r5
 800b4d4:	d113      	bne.n	800b4fe <__gethex+0x2ee>
 800b4d6:	2e01      	cmp	r6, #1
 800b4d8:	d10b      	bne.n	800b4f2 <__gethex+0x2e2>
 800b4da:	9a04      	ldr	r2, [sp, #16]
 800b4dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4e0:	6013      	str	r3, [r2, #0]
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	6123      	str	r3, [r4, #16]
 800b4e6:	f8c9 3000 	str.w	r3, [r9]
 800b4ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4ec:	2762      	movs	r7, #98	; 0x62
 800b4ee:	601c      	str	r4, [r3, #0]
 800b4f0:	e723      	b.n	800b33a <__gethex+0x12a>
 800b4f2:	1e71      	subs	r1, r6, #1
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 fe59 	bl	800c1ac <__any_on>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d1ed      	bne.n	800b4da <__gethex+0x2ca>
 800b4fe:	ee18 0a10 	vmov	r0, s16
 800b502:	4621      	mov	r1, r4
 800b504:	f000 f9f8 	bl	800b8f8 <_Bfree>
 800b508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b50a:	2300      	movs	r3, #0
 800b50c:	6013      	str	r3, [r2, #0]
 800b50e:	2750      	movs	r7, #80	; 0x50
 800b510:	e713      	b.n	800b33a <__gethex+0x12a>
 800b512:	bf00      	nop
 800b514:	0800d678 	.word	0x0800d678
 800b518:	0800d5fb 	.word	0x0800d5fb
 800b51c:	0800d60c 	.word	0x0800d60c
 800b520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1eb      	bne.n	800b4fe <__gethex+0x2ee>
 800b526:	e7d8      	b.n	800b4da <__gethex+0x2ca>
 800b528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1d5      	bne.n	800b4da <__gethex+0x2ca>
 800b52e:	e7e6      	b.n	800b4fe <__gethex+0x2ee>
 800b530:	1e6f      	subs	r7, r5, #1
 800b532:	f1ba 0f00 	cmp.w	sl, #0
 800b536:	d131      	bne.n	800b59c <__gethex+0x38c>
 800b538:	b127      	cbz	r7, 800b544 <__gethex+0x334>
 800b53a:	4639      	mov	r1, r7
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fe35 	bl	800c1ac <__any_on>
 800b542:	4682      	mov	sl, r0
 800b544:	117b      	asrs	r3, r7, #5
 800b546:	2101      	movs	r1, #1
 800b548:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b54c:	f007 071f 	and.w	r7, r7, #31
 800b550:	fa01 f707 	lsl.w	r7, r1, r7
 800b554:	421f      	tst	r7, r3
 800b556:	4629      	mov	r1, r5
 800b558:	4620      	mov	r0, r4
 800b55a:	bf18      	it	ne
 800b55c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b560:	1b76      	subs	r6, r6, r5
 800b562:	f7ff fded 	bl	800b140 <rshift>
 800b566:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b56a:	2702      	movs	r7, #2
 800b56c:	f1ba 0f00 	cmp.w	sl, #0
 800b570:	d048      	beq.n	800b604 <__gethex+0x3f4>
 800b572:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b576:	2b02      	cmp	r3, #2
 800b578:	d015      	beq.n	800b5a6 <__gethex+0x396>
 800b57a:	2b03      	cmp	r3, #3
 800b57c:	d017      	beq.n	800b5ae <__gethex+0x39e>
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d109      	bne.n	800b596 <__gethex+0x386>
 800b582:	f01a 0f02 	tst.w	sl, #2
 800b586:	d006      	beq.n	800b596 <__gethex+0x386>
 800b588:	f8d9 0000 	ldr.w	r0, [r9]
 800b58c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b590:	f01a 0f01 	tst.w	sl, #1
 800b594:	d10e      	bne.n	800b5b4 <__gethex+0x3a4>
 800b596:	f047 0710 	orr.w	r7, r7, #16
 800b59a:	e033      	b.n	800b604 <__gethex+0x3f4>
 800b59c:	f04f 0a01 	mov.w	sl, #1
 800b5a0:	e7d0      	b.n	800b544 <__gethex+0x334>
 800b5a2:	2701      	movs	r7, #1
 800b5a4:	e7e2      	b.n	800b56c <__gethex+0x35c>
 800b5a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5a8:	f1c3 0301 	rsb	r3, r3, #1
 800b5ac:	9315      	str	r3, [sp, #84]	; 0x54
 800b5ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0f0      	beq.n	800b596 <__gethex+0x386>
 800b5b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5b8:	f104 0314 	add.w	r3, r4, #20
 800b5bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5c4:	f04f 0c00 	mov.w	ip, #0
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b5d2:	d01c      	beq.n	800b60e <__gethex+0x3fe>
 800b5d4:	3201      	adds	r2, #1
 800b5d6:	6002      	str	r2, [r0, #0]
 800b5d8:	2f02      	cmp	r7, #2
 800b5da:	f104 0314 	add.w	r3, r4, #20
 800b5de:	d13f      	bne.n	800b660 <__gethex+0x450>
 800b5e0:	f8d8 2000 	ldr.w	r2, [r8]
 800b5e4:	3a01      	subs	r2, #1
 800b5e6:	42b2      	cmp	r2, r6
 800b5e8:	d10a      	bne.n	800b600 <__gethex+0x3f0>
 800b5ea:	1171      	asrs	r1, r6, #5
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5f2:	f006 061f 	and.w	r6, r6, #31
 800b5f6:	fa02 f606 	lsl.w	r6, r2, r6
 800b5fa:	421e      	tst	r6, r3
 800b5fc:	bf18      	it	ne
 800b5fe:	4617      	movne	r7, r2
 800b600:	f047 0720 	orr.w	r7, r7, #32
 800b604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b606:	601c      	str	r4, [r3, #0]
 800b608:	9b04      	ldr	r3, [sp, #16]
 800b60a:	601d      	str	r5, [r3, #0]
 800b60c:	e695      	b.n	800b33a <__gethex+0x12a>
 800b60e:	4299      	cmp	r1, r3
 800b610:	f843 cc04 	str.w	ip, [r3, #-4]
 800b614:	d8d8      	bhi.n	800b5c8 <__gethex+0x3b8>
 800b616:	68a3      	ldr	r3, [r4, #8]
 800b618:	459b      	cmp	fp, r3
 800b61a:	db19      	blt.n	800b650 <__gethex+0x440>
 800b61c:	6861      	ldr	r1, [r4, #4]
 800b61e:	ee18 0a10 	vmov	r0, s16
 800b622:	3101      	adds	r1, #1
 800b624:	f000 f928 	bl	800b878 <_Balloc>
 800b628:	4681      	mov	r9, r0
 800b62a:	b918      	cbnz	r0, 800b634 <__gethex+0x424>
 800b62c:	4b1a      	ldr	r3, [pc, #104]	; (800b698 <__gethex+0x488>)
 800b62e:	4602      	mov	r2, r0
 800b630:	2184      	movs	r1, #132	; 0x84
 800b632:	e6a8      	b.n	800b386 <__gethex+0x176>
 800b634:	6922      	ldr	r2, [r4, #16]
 800b636:	3202      	adds	r2, #2
 800b638:	f104 010c 	add.w	r1, r4, #12
 800b63c:	0092      	lsls	r2, r2, #2
 800b63e:	300c      	adds	r0, #12
 800b640:	f000 f90c 	bl	800b85c <memcpy>
 800b644:	4621      	mov	r1, r4
 800b646:	ee18 0a10 	vmov	r0, s16
 800b64a:	f000 f955 	bl	800b8f8 <_Bfree>
 800b64e:	464c      	mov	r4, r9
 800b650:	6923      	ldr	r3, [r4, #16]
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b658:	6122      	str	r2, [r4, #16]
 800b65a:	2201      	movs	r2, #1
 800b65c:	615a      	str	r2, [r3, #20]
 800b65e:	e7bb      	b.n	800b5d8 <__gethex+0x3c8>
 800b660:	6922      	ldr	r2, [r4, #16]
 800b662:	455a      	cmp	r2, fp
 800b664:	dd0b      	ble.n	800b67e <__gethex+0x46e>
 800b666:	2101      	movs	r1, #1
 800b668:	4620      	mov	r0, r4
 800b66a:	f7ff fd69 	bl	800b140 <rshift>
 800b66e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b672:	3501      	adds	r5, #1
 800b674:	42ab      	cmp	r3, r5
 800b676:	f6ff aed0 	blt.w	800b41a <__gethex+0x20a>
 800b67a:	2701      	movs	r7, #1
 800b67c:	e7c0      	b.n	800b600 <__gethex+0x3f0>
 800b67e:	f016 061f 	ands.w	r6, r6, #31
 800b682:	d0fa      	beq.n	800b67a <__gethex+0x46a>
 800b684:	449a      	add	sl, r3
 800b686:	f1c6 0620 	rsb	r6, r6, #32
 800b68a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b68e:	f000 f9e9 	bl	800ba64 <__hi0bits>
 800b692:	42b0      	cmp	r0, r6
 800b694:	dbe7      	blt.n	800b666 <__gethex+0x456>
 800b696:	e7f0      	b.n	800b67a <__gethex+0x46a>
 800b698:	0800d5fb 	.word	0x0800d5fb

0800b69c <L_shift>:
 800b69c:	f1c2 0208 	rsb	r2, r2, #8
 800b6a0:	0092      	lsls	r2, r2, #2
 800b6a2:	b570      	push	{r4, r5, r6, lr}
 800b6a4:	f1c2 0620 	rsb	r6, r2, #32
 800b6a8:	6843      	ldr	r3, [r0, #4]
 800b6aa:	6804      	ldr	r4, [r0, #0]
 800b6ac:	fa03 f506 	lsl.w	r5, r3, r6
 800b6b0:	432c      	orrs	r4, r5
 800b6b2:	40d3      	lsrs	r3, r2
 800b6b4:	6004      	str	r4, [r0, #0]
 800b6b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6ba:	4288      	cmp	r0, r1
 800b6bc:	d3f4      	bcc.n	800b6a8 <L_shift+0xc>
 800b6be:	bd70      	pop	{r4, r5, r6, pc}

0800b6c0 <__match>:
 800b6c0:	b530      	push	{r4, r5, lr}
 800b6c2:	6803      	ldr	r3, [r0, #0]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6ca:	b914      	cbnz	r4, 800b6d2 <__match+0x12>
 800b6cc:	6003      	str	r3, [r0, #0]
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	bd30      	pop	{r4, r5, pc}
 800b6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6da:	2d19      	cmp	r5, #25
 800b6dc:	bf98      	it	ls
 800b6de:	3220      	addls	r2, #32
 800b6e0:	42a2      	cmp	r2, r4
 800b6e2:	d0f0      	beq.n	800b6c6 <__match+0x6>
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	e7f3      	b.n	800b6d0 <__match+0x10>

0800b6e8 <__hexnan>:
 800b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	680b      	ldr	r3, [r1, #0]
 800b6ee:	6801      	ldr	r1, [r0, #0]
 800b6f0:	115e      	asrs	r6, r3, #5
 800b6f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6f6:	f013 031f 	ands.w	r3, r3, #31
 800b6fa:	b087      	sub	sp, #28
 800b6fc:	bf18      	it	ne
 800b6fe:	3604      	addne	r6, #4
 800b700:	2500      	movs	r5, #0
 800b702:	1f37      	subs	r7, r6, #4
 800b704:	4682      	mov	sl, r0
 800b706:	4690      	mov	r8, r2
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b70e:	46b9      	mov	r9, r7
 800b710:	463c      	mov	r4, r7
 800b712:	9502      	str	r5, [sp, #8]
 800b714:	46ab      	mov	fp, r5
 800b716:	784a      	ldrb	r2, [r1, #1]
 800b718:	1c4b      	adds	r3, r1, #1
 800b71a:	9303      	str	r3, [sp, #12]
 800b71c:	b342      	cbz	r2, 800b770 <__hexnan+0x88>
 800b71e:	4610      	mov	r0, r2
 800b720:	9105      	str	r1, [sp, #20]
 800b722:	9204      	str	r2, [sp, #16]
 800b724:	f7ff fd5e 	bl	800b1e4 <__hexdig_fun>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d14f      	bne.n	800b7cc <__hexnan+0xe4>
 800b72c:	9a04      	ldr	r2, [sp, #16]
 800b72e:	9905      	ldr	r1, [sp, #20]
 800b730:	2a20      	cmp	r2, #32
 800b732:	d818      	bhi.n	800b766 <__hexnan+0x7e>
 800b734:	9b02      	ldr	r3, [sp, #8]
 800b736:	459b      	cmp	fp, r3
 800b738:	dd13      	ble.n	800b762 <__hexnan+0x7a>
 800b73a:	454c      	cmp	r4, r9
 800b73c:	d206      	bcs.n	800b74c <__hexnan+0x64>
 800b73e:	2d07      	cmp	r5, #7
 800b740:	dc04      	bgt.n	800b74c <__hexnan+0x64>
 800b742:	462a      	mov	r2, r5
 800b744:	4649      	mov	r1, r9
 800b746:	4620      	mov	r0, r4
 800b748:	f7ff ffa8 	bl	800b69c <L_shift>
 800b74c:	4544      	cmp	r4, r8
 800b74e:	d950      	bls.n	800b7f2 <__hexnan+0x10a>
 800b750:	2300      	movs	r3, #0
 800b752:	f1a4 0904 	sub.w	r9, r4, #4
 800b756:	f844 3c04 	str.w	r3, [r4, #-4]
 800b75a:	f8cd b008 	str.w	fp, [sp, #8]
 800b75e:	464c      	mov	r4, r9
 800b760:	461d      	mov	r5, r3
 800b762:	9903      	ldr	r1, [sp, #12]
 800b764:	e7d7      	b.n	800b716 <__hexnan+0x2e>
 800b766:	2a29      	cmp	r2, #41	; 0x29
 800b768:	d156      	bne.n	800b818 <__hexnan+0x130>
 800b76a:	3102      	adds	r1, #2
 800b76c:	f8ca 1000 	str.w	r1, [sl]
 800b770:	f1bb 0f00 	cmp.w	fp, #0
 800b774:	d050      	beq.n	800b818 <__hexnan+0x130>
 800b776:	454c      	cmp	r4, r9
 800b778:	d206      	bcs.n	800b788 <__hexnan+0xa0>
 800b77a:	2d07      	cmp	r5, #7
 800b77c:	dc04      	bgt.n	800b788 <__hexnan+0xa0>
 800b77e:	462a      	mov	r2, r5
 800b780:	4649      	mov	r1, r9
 800b782:	4620      	mov	r0, r4
 800b784:	f7ff ff8a 	bl	800b69c <L_shift>
 800b788:	4544      	cmp	r4, r8
 800b78a:	d934      	bls.n	800b7f6 <__hexnan+0x10e>
 800b78c:	f1a8 0204 	sub.w	r2, r8, #4
 800b790:	4623      	mov	r3, r4
 800b792:	f853 1b04 	ldr.w	r1, [r3], #4
 800b796:	f842 1f04 	str.w	r1, [r2, #4]!
 800b79a:	429f      	cmp	r7, r3
 800b79c:	d2f9      	bcs.n	800b792 <__hexnan+0xaa>
 800b79e:	1b3b      	subs	r3, r7, r4
 800b7a0:	f023 0303 	bic.w	r3, r3, #3
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	3401      	adds	r4, #1
 800b7a8:	3e03      	subs	r6, #3
 800b7aa:	42b4      	cmp	r4, r6
 800b7ac:	bf88      	it	hi
 800b7ae:	2304      	movhi	r3, #4
 800b7b0:	4443      	add	r3, r8
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f843 2b04 	str.w	r2, [r3], #4
 800b7b8:	429f      	cmp	r7, r3
 800b7ba:	d2fb      	bcs.n	800b7b4 <__hexnan+0xcc>
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	b91b      	cbnz	r3, 800b7c8 <__hexnan+0xe0>
 800b7c0:	4547      	cmp	r7, r8
 800b7c2:	d127      	bne.n	800b814 <__hexnan+0x12c>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	603b      	str	r3, [r7, #0]
 800b7c8:	2005      	movs	r0, #5
 800b7ca:	e026      	b.n	800b81a <__hexnan+0x132>
 800b7cc:	3501      	adds	r5, #1
 800b7ce:	2d08      	cmp	r5, #8
 800b7d0:	f10b 0b01 	add.w	fp, fp, #1
 800b7d4:	dd06      	ble.n	800b7e4 <__hexnan+0xfc>
 800b7d6:	4544      	cmp	r4, r8
 800b7d8:	d9c3      	bls.n	800b762 <__hexnan+0x7a>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7e0:	2501      	movs	r5, #1
 800b7e2:	3c04      	subs	r4, #4
 800b7e4:	6822      	ldr	r2, [r4, #0]
 800b7e6:	f000 000f 	and.w	r0, r0, #15
 800b7ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b7ee:	6022      	str	r2, [r4, #0]
 800b7f0:	e7b7      	b.n	800b762 <__hexnan+0x7a>
 800b7f2:	2508      	movs	r5, #8
 800b7f4:	e7b5      	b.n	800b762 <__hexnan+0x7a>
 800b7f6:	9b01      	ldr	r3, [sp, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d0df      	beq.n	800b7bc <__hexnan+0xd4>
 800b7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b800:	f1c3 0320 	rsb	r3, r3, #32
 800b804:	fa22 f303 	lsr.w	r3, r2, r3
 800b808:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b80c:	401a      	ands	r2, r3
 800b80e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b812:	e7d3      	b.n	800b7bc <__hexnan+0xd4>
 800b814:	3f04      	subs	r7, #4
 800b816:	e7d1      	b.n	800b7bc <__hexnan+0xd4>
 800b818:	2004      	movs	r0, #4
 800b81a:	b007      	add	sp, #28
 800b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b820 <_localeconv_r>:
 800b820:	4800      	ldr	r0, [pc, #0]	; (800b824 <_localeconv_r+0x4>)
 800b822:	4770      	bx	lr
 800b824:	2000018c 	.word	0x2000018c

0800b828 <malloc>:
 800b828:	4b02      	ldr	r3, [pc, #8]	; (800b834 <malloc+0xc>)
 800b82a:	4601      	mov	r1, r0
 800b82c:	6818      	ldr	r0, [r3, #0]
 800b82e:	f000 bd3d 	b.w	800c2ac <_malloc_r>
 800b832:	bf00      	nop
 800b834:	20000034 	.word	0x20000034

0800b838 <__ascii_mbtowc>:
 800b838:	b082      	sub	sp, #8
 800b83a:	b901      	cbnz	r1, 800b83e <__ascii_mbtowc+0x6>
 800b83c:	a901      	add	r1, sp, #4
 800b83e:	b142      	cbz	r2, 800b852 <__ascii_mbtowc+0x1a>
 800b840:	b14b      	cbz	r3, 800b856 <__ascii_mbtowc+0x1e>
 800b842:	7813      	ldrb	r3, [r2, #0]
 800b844:	600b      	str	r3, [r1, #0]
 800b846:	7812      	ldrb	r2, [r2, #0]
 800b848:	1e10      	subs	r0, r2, #0
 800b84a:	bf18      	it	ne
 800b84c:	2001      	movne	r0, #1
 800b84e:	b002      	add	sp, #8
 800b850:	4770      	bx	lr
 800b852:	4610      	mov	r0, r2
 800b854:	e7fb      	b.n	800b84e <__ascii_mbtowc+0x16>
 800b856:	f06f 0001 	mvn.w	r0, #1
 800b85a:	e7f8      	b.n	800b84e <__ascii_mbtowc+0x16>

0800b85c <memcpy>:
 800b85c:	440a      	add	r2, r1
 800b85e:	4291      	cmp	r1, r2
 800b860:	f100 33ff 	add.w	r3, r0, #4294967295
 800b864:	d100      	bne.n	800b868 <memcpy+0xc>
 800b866:	4770      	bx	lr
 800b868:	b510      	push	{r4, lr}
 800b86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b86e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b872:	4291      	cmp	r1, r2
 800b874:	d1f9      	bne.n	800b86a <memcpy+0xe>
 800b876:	bd10      	pop	{r4, pc}

0800b878 <_Balloc>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b87c:	4604      	mov	r4, r0
 800b87e:	460d      	mov	r5, r1
 800b880:	b976      	cbnz	r6, 800b8a0 <_Balloc+0x28>
 800b882:	2010      	movs	r0, #16
 800b884:	f7ff ffd0 	bl	800b828 <malloc>
 800b888:	4602      	mov	r2, r0
 800b88a:	6260      	str	r0, [r4, #36]	; 0x24
 800b88c:	b920      	cbnz	r0, 800b898 <_Balloc+0x20>
 800b88e:	4b18      	ldr	r3, [pc, #96]	; (800b8f0 <_Balloc+0x78>)
 800b890:	4818      	ldr	r0, [pc, #96]	; (800b8f4 <_Balloc+0x7c>)
 800b892:	2166      	movs	r1, #102	; 0x66
 800b894:	f000 fef8 	bl	800c688 <__assert_func>
 800b898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b89c:	6006      	str	r6, [r0, #0]
 800b89e:	60c6      	str	r6, [r0, #12]
 800b8a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b8a2:	68f3      	ldr	r3, [r6, #12]
 800b8a4:	b183      	cbz	r3, 800b8c8 <_Balloc+0x50>
 800b8a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8ae:	b9b8      	cbnz	r0, 800b8e0 <_Balloc+0x68>
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8b6:	1d72      	adds	r2, r6, #5
 800b8b8:	0092      	lsls	r2, r2, #2
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f000 fc97 	bl	800c1ee <_calloc_r>
 800b8c0:	b160      	cbz	r0, 800b8dc <_Balloc+0x64>
 800b8c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8c6:	e00e      	b.n	800b8e6 <_Balloc+0x6e>
 800b8c8:	2221      	movs	r2, #33	; 0x21
 800b8ca:	2104      	movs	r1, #4
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f000 fc8e 	bl	800c1ee <_calloc_r>
 800b8d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8d4:	60f0      	str	r0, [r6, #12]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1e4      	bne.n	800b8a6 <_Balloc+0x2e>
 800b8dc:	2000      	movs	r0, #0
 800b8de:	bd70      	pop	{r4, r5, r6, pc}
 800b8e0:	6802      	ldr	r2, [r0, #0]
 800b8e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8ec:	e7f7      	b.n	800b8de <_Balloc+0x66>
 800b8ee:	bf00      	nop
 800b8f0:	0800d585 	.word	0x0800d585
 800b8f4:	0800d68c 	.word	0x0800d68c

0800b8f8 <_Bfree>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	b976      	cbnz	r6, 800b920 <_Bfree+0x28>
 800b902:	2010      	movs	r0, #16
 800b904:	f7ff ff90 	bl	800b828 <malloc>
 800b908:	4602      	mov	r2, r0
 800b90a:	6268      	str	r0, [r5, #36]	; 0x24
 800b90c:	b920      	cbnz	r0, 800b918 <_Bfree+0x20>
 800b90e:	4b09      	ldr	r3, [pc, #36]	; (800b934 <_Bfree+0x3c>)
 800b910:	4809      	ldr	r0, [pc, #36]	; (800b938 <_Bfree+0x40>)
 800b912:	218a      	movs	r1, #138	; 0x8a
 800b914:	f000 feb8 	bl	800c688 <__assert_func>
 800b918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b91c:	6006      	str	r6, [r0, #0]
 800b91e:	60c6      	str	r6, [r0, #12]
 800b920:	b13c      	cbz	r4, 800b932 <_Bfree+0x3a>
 800b922:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b924:	6862      	ldr	r2, [r4, #4]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b92c:	6021      	str	r1, [r4, #0]
 800b92e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b932:	bd70      	pop	{r4, r5, r6, pc}
 800b934:	0800d585 	.word	0x0800d585
 800b938:	0800d68c 	.word	0x0800d68c

0800b93c <__multadd>:
 800b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b940:	690e      	ldr	r6, [r1, #16]
 800b942:	4607      	mov	r7, r0
 800b944:	4698      	mov	r8, r3
 800b946:	460c      	mov	r4, r1
 800b948:	f101 0014 	add.w	r0, r1, #20
 800b94c:	2300      	movs	r3, #0
 800b94e:	6805      	ldr	r5, [r0, #0]
 800b950:	b2a9      	uxth	r1, r5
 800b952:	fb02 8101 	mla	r1, r2, r1, r8
 800b956:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b95a:	0c2d      	lsrs	r5, r5, #16
 800b95c:	fb02 c505 	mla	r5, r2, r5, ip
 800b960:	b289      	uxth	r1, r1
 800b962:	3301      	adds	r3, #1
 800b964:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b968:	429e      	cmp	r6, r3
 800b96a:	f840 1b04 	str.w	r1, [r0], #4
 800b96e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b972:	dcec      	bgt.n	800b94e <__multadd+0x12>
 800b974:	f1b8 0f00 	cmp.w	r8, #0
 800b978:	d022      	beq.n	800b9c0 <__multadd+0x84>
 800b97a:	68a3      	ldr	r3, [r4, #8]
 800b97c:	42b3      	cmp	r3, r6
 800b97e:	dc19      	bgt.n	800b9b4 <__multadd+0x78>
 800b980:	6861      	ldr	r1, [r4, #4]
 800b982:	4638      	mov	r0, r7
 800b984:	3101      	adds	r1, #1
 800b986:	f7ff ff77 	bl	800b878 <_Balloc>
 800b98a:	4605      	mov	r5, r0
 800b98c:	b928      	cbnz	r0, 800b99a <__multadd+0x5e>
 800b98e:	4602      	mov	r2, r0
 800b990:	4b0d      	ldr	r3, [pc, #52]	; (800b9c8 <__multadd+0x8c>)
 800b992:	480e      	ldr	r0, [pc, #56]	; (800b9cc <__multadd+0x90>)
 800b994:	21b5      	movs	r1, #181	; 0xb5
 800b996:	f000 fe77 	bl	800c688 <__assert_func>
 800b99a:	6922      	ldr	r2, [r4, #16]
 800b99c:	3202      	adds	r2, #2
 800b99e:	f104 010c 	add.w	r1, r4, #12
 800b9a2:	0092      	lsls	r2, r2, #2
 800b9a4:	300c      	adds	r0, #12
 800b9a6:	f7ff ff59 	bl	800b85c <memcpy>
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f7ff ffa3 	bl	800b8f8 <_Bfree>
 800b9b2:	462c      	mov	r4, r5
 800b9b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b9b8:	3601      	adds	r6, #1
 800b9ba:	f8c3 8014 	str.w	r8, [r3, #20]
 800b9be:	6126      	str	r6, [r4, #16]
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c6:	bf00      	nop
 800b9c8:	0800d5fb 	.word	0x0800d5fb
 800b9cc:	0800d68c 	.word	0x0800d68c

0800b9d0 <__s2b>:
 800b9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	4615      	mov	r5, r2
 800b9d8:	461f      	mov	r7, r3
 800b9da:	2209      	movs	r2, #9
 800b9dc:	3308      	adds	r3, #8
 800b9de:	4606      	mov	r6, r0
 800b9e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	db09      	blt.n	800ba00 <__s2b+0x30>
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff ff43 	bl	800b878 <_Balloc>
 800b9f2:	b940      	cbnz	r0, 800ba06 <__s2b+0x36>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	4b19      	ldr	r3, [pc, #100]	; (800ba5c <__s2b+0x8c>)
 800b9f8:	4819      	ldr	r0, [pc, #100]	; (800ba60 <__s2b+0x90>)
 800b9fa:	21ce      	movs	r1, #206	; 0xce
 800b9fc:	f000 fe44 	bl	800c688 <__assert_func>
 800ba00:	0052      	lsls	r2, r2, #1
 800ba02:	3101      	adds	r1, #1
 800ba04:	e7f0      	b.n	800b9e8 <__s2b+0x18>
 800ba06:	9b08      	ldr	r3, [sp, #32]
 800ba08:	6143      	str	r3, [r0, #20]
 800ba0a:	2d09      	cmp	r5, #9
 800ba0c:	f04f 0301 	mov.w	r3, #1
 800ba10:	6103      	str	r3, [r0, #16]
 800ba12:	dd16      	ble.n	800ba42 <__s2b+0x72>
 800ba14:	f104 0909 	add.w	r9, r4, #9
 800ba18:	46c8      	mov	r8, r9
 800ba1a:	442c      	add	r4, r5
 800ba1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba20:	4601      	mov	r1, r0
 800ba22:	3b30      	subs	r3, #48	; 0x30
 800ba24:	220a      	movs	r2, #10
 800ba26:	4630      	mov	r0, r6
 800ba28:	f7ff ff88 	bl	800b93c <__multadd>
 800ba2c:	45a0      	cmp	r8, r4
 800ba2e:	d1f5      	bne.n	800ba1c <__s2b+0x4c>
 800ba30:	f1a5 0408 	sub.w	r4, r5, #8
 800ba34:	444c      	add	r4, r9
 800ba36:	1b2d      	subs	r5, r5, r4
 800ba38:	1963      	adds	r3, r4, r5
 800ba3a:	42bb      	cmp	r3, r7
 800ba3c:	db04      	blt.n	800ba48 <__s2b+0x78>
 800ba3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba42:	340a      	adds	r4, #10
 800ba44:	2509      	movs	r5, #9
 800ba46:	e7f6      	b.n	800ba36 <__s2b+0x66>
 800ba48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba4c:	4601      	mov	r1, r0
 800ba4e:	3b30      	subs	r3, #48	; 0x30
 800ba50:	220a      	movs	r2, #10
 800ba52:	4630      	mov	r0, r6
 800ba54:	f7ff ff72 	bl	800b93c <__multadd>
 800ba58:	e7ee      	b.n	800ba38 <__s2b+0x68>
 800ba5a:	bf00      	nop
 800ba5c:	0800d5fb 	.word	0x0800d5fb
 800ba60:	0800d68c 	.word	0x0800d68c

0800ba64 <__hi0bits>:
 800ba64:	0c03      	lsrs	r3, r0, #16
 800ba66:	041b      	lsls	r3, r3, #16
 800ba68:	b9d3      	cbnz	r3, 800baa0 <__hi0bits+0x3c>
 800ba6a:	0400      	lsls	r0, r0, #16
 800ba6c:	2310      	movs	r3, #16
 800ba6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba72:	bf04      	itt	eq
 800ba74:	0200      	lsleq	r0, r0, #8
 800ba76:	3308      	addeq	r3, #8
 800ba78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba7c:	bf04      	itt	eq
 800ba7e:	0100      	lsleq	r0, r0, #4
 800ba80:	3304      	addeq	r3, #4
 800ba82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba86:	bf04      	itt	eq
 800ba88:	0080      	lsleq	r0, r0, #2
 800ba8a:	3302      	addeq	r3, #2
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	db05      	blt.n	800ba9c <__hi0bits+0x38>
 800ba90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba94:	f103 0301 	add.w	r3, r3, #1
 800ba98:	bf08      	it	eq
 800ba9a:	2320      	moveq	r3, #32
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	4770      	bx	lr
 800baa0:	2300      	movs	r3, #0
 800baa2:	e7e4      	b.n	800ba6e <__hi0bits+0xa>

0800baa4 <__lo0bits>:
 800baa4:	6803      	ldr	r3, [r0, #0]
 800baa6:	f013 0207 	ands.w	r2, r3, #7
 800baaa:	4601      	mov	r1, r0
 800baac:	d00b      	beq.n	800bac6 <__lo0bits+0x22>
 800baae:	07da      	lsls	r2, r3, #31
 800bab0:	d424      	bmi.n	800bafc <__lo0bits+0x58>
 800bab2:	0798      	lsls	r0, r3, #30
 800bab4:	bf49      	itett	mi
 800bab6:	085b      	lsrmi	r3, r3, #1
 800bab8:	089b      	lsrpl	r3, r3, #2
 800baba:	2001      	movmi	r0, #1
 800babc:	600b      	strmi	r3, [r1, #0]
 800babe:	bf5c      	itt	pl
 800bac0:	600b      	strpl	r3, [r1, #0]
 800bac2:	2002      	movpl	r0, #2
 800bac4:	4770      	bx	lr
 800bac6:	b298      	uxth	r0, r3
 800bac8:	b9b0      	cbnz	r0, 800baf8 <__lo0bits+0x54>
 800baca:	0c1b      	lsrs	r3, r3, #16
 800bacc:	2010      	movs	r0, #16
 800bace:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bad2:	bf04      	itt	eq
 800bad4:	0a1b      	lsreq	r3, r3, #8
 800bad6:	3008      	addeq	r0, #8
 800bad8:	071a      	lsls	r2, r3, #28
 800bada:	bf04      	itt	eq
 800badc:	091b      	lsreq	r3, r3, #4
 800bade:	3004      	addeq	r0, #4
 800bae0:	079a      	lsls	r2, r3, #30
 800bae2:	bf04      	itt	eq
 800bae4:	089b      	lsreq	r3, r3, #2
 800bae6:	3002      	addeq	r0, #2
 800bae8:	07da      	lsls	r2, r3, #31
 800baea:	d403      	bmi.n	800baf4 <__lo0bits+0x50>
 800baec:	085b      	lsrs	r3, r3, #1
 800baee:	f100 0001 	add.w	r0, r0, #1
 800baf2:	d005      	beq.n	800bb00 <__lo0bits+0x5c>
 800baf4:	600b      	str	r3, [r1, #0]
 800baf6:	4770      	bx	lr
 800baf8:	4610      	mov	r0, r2
 800bafa:	e7e8      	b.n	800bace <__lo0bits+0x2a>
 800bafc:	2000      	movs	r0, #0
 800bafe:	4770      	bx	lr
 800bb00:	2020      	movs	r0, #32
 800bb02:	4770      	bx	lr

0800bb04 <__i2b>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	460c      	mov	r4, r1
 800bb08:	2101      	movs	r1, #1
 800bb0a:	f7ff feb5 	bl	800b878 <_Balloc>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	b928      	cbnz	r0, 800bb1e <__i2b+0x1a>
 800bb12:	4b05      	ldr	r3, [pc, #20]	; (800bb28 <__i2b+0x24>)
 800bb14:	4805      	ldr	r0, [pc, #20]	; (800bb2c <__i2b+0x28>)
 800bb16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb1a:	f000 fdb5 	bl	800c688 <__assert_func>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	6144      	str	r4, [r0, #20]
 800bb22:	6103      	str	r3, [r0, #16]
 800bb24:	bd10      	pop	{r4, pc}
 800bb26:	bf00      	nop
 800bb28:	0800d5fb 	.word	0x0800d5fb
 800bb2c:	0800d68c 	.word	0x0800d68c

0800bb30 <__multiply>:
 800bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	4614      	mov	r4, r2
 800bb36:	690a      	ldr	r2, [r1, #16]
 800bb38:	6923      	ldr	r3, [r4, #16]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	bfb8      	it	lt
 800bb3e:	460b      	movlt	r3, r1
 800bb40:	460d      	mov	r5, r1
 800bb42:	bfbc      	itt	lt
 800bb44:	4625      	movlt	r5, r4
 800bb46:	461c      	movlt	r4, r3
 800bb48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bb4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bb50:	68ab      	ldr	r3, [r5, #8]
 800bb52:	6869      	ldr	r1, [r5, #4]
 800bb54:	eb0a 0709 	add.w	r7, sl, r9
 800bb58:	42bb      	cmp	r3, r7
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	bfb8      	it	lt
 800bb5e:	3101      	addlt	r1, #1
 800bb60:	f7ff fe8a 	bl	800b878 <_Balloc>
 800bb64:	b930      	cbnz	r0, 800bb74 <__multiply+0x44>
 800bb66:	4602      	mov	r2, r0
 800bb68:	4b42      	ldr	r3, [pc, #264]	; (800bc74 <__multiply+0x144>)
 800bb6a:	4843      	ldr	r0, [pc, #268]	; (800bc78 <__multiply+0x148>)
 800bb6c:	f240 115d 	movw	r1, #349	; 0x15d
 800bb70:	f000 fd8a 	bl	800c688 <__assert_func>
 800bb74:	f100 0614 	add.w	r6, r0, #20
 800bb78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bb7c:	4633      	mov	r3, r6
 800bb7e:	2200      	movs	r2, #0
 800bb80:	4543      	cmp	r3, r8
 800bb82:	d31e      	bcc.n	800bbc2 <__multiply+0x92>
 800bb84:	f105 0c14 	add.w	ip, r5, #20
 800bb88:	f104 0314 	add.w	r3, r4, #20
 800bb8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bb90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bb94:	9202      	str	r2, [sp, #8]
 800bb96:	ebac 0205 	sub.w	r2, ip, r5
 800bb9a:	3a15      	subs	r2, #21
 800bb9c:	f022 0203 	bic.w	r2, r2, #3
 800bba0:	3204      	adds	r2, #4
 800bba2:	f105 0115 	add.w	r1, r5, #21
 800bba6:	458c      	cmp	ip, r1
 800bba8:	bf38      	it	cc
 800bbaa:	2204      	movcc	r2, #4
 800bbac:	9201      	str	r2, [sp, #4]
 800bbae:	9a02      	ldr	r2, [sp, #8]
 800bbb0:	9303      	str	r3, [sp, #12]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d808      	bhi.n	800bbc8 <__multiply+0x98>
 800bbb6:	2f00      	cmp	r7, #0
 800bbb8:	dc55      	bgt.n	800bc66 <__multiply+0x136>
 800bbba:	6107      	str	r7, [r0, #16]
 800bbbc:	b005      	add	sp, #20
 800bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc2:	f843 2b04 	str.w	r2, [r3], #4
 800bbc6:	e7db      	b.n	800bb80 <__multiply+0x50>
 800bbc8:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbcc:	f1ba 0f00 	cmp.w	sl, #0
 800bbd0:	d020      	beq.n	800bc14 <__multiply+0xe4>
 800bbd2:	f105 0e14 	add.w	lr, r5, #20
 800bbd6:	46b1      	mov	r9, r6
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bbde:	f8d9 b000 	ldr.w	fp, [r9]
 800bbe2:	b2a1      	uxth	r1, r4
 800bbe4:	fa1f fb8b 	uxth.w	fp, fp
 800bbe8:	fb0a b101 	mla	r1, sl, r1, fp
 800bbec:	4411      	add	r1, r2
 800bbee:	f8d9 2000 	ldr.w	r2, [r9]
 800bbf2:	0c24      	lsrs	r4, r4, #16
 800bbf4:	0c12      	lsrs	r2, r2, #16
 800bbf6:	fb0a 2404 	mla	r4, sl, r4, r2
 800bbfa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bbfe:	b289      	uxth	r1, r1
 800bc00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc04:	45f4      	cmp	ip, lr
 800bc06:	f849 1b04 	str.w	r1, [r9], #4
 800bc0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bc0e:	d8e4      	bhi.n	800bbda <__multiply+0xaa>
 800bc10:	9901      	ldr	r1, [sp, #4]
 800bc12:	5072      	str	r2, [r6, r1]
 800bc14:	9a03      	ldr	r2, [sp, #12]
 800bc16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	f1b9 0f00 	cmp.w	r9, #0
 800bc20:	d01f      	beq.n	800bc62 <__multiply+0x132>
 800bc22:	6834      	ldr	r4, [r6, #0]
 800bc24:	f105 0114 	add.w	r1, r5, #20
 800bc28:	46b6      	mov	lr, r6
 800bc2a:	f04f 0a00 	mov.w	sl, #0
 800bc2e:	880a      	ldrh	r2, [r1, #0]
 800bc30:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bc34:	fb09 b202 	mla	r2, r9, r2, fp
 800bc38:	4492      	add	sl, r2
 800bc3a:	b2a4      	uxth	r4, r4
 800bc3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bc40:	f84e 4b04 	str.w	r4, [lr], #4
 800bc44:	f851 4b04 	ldr.w	r4, [r1], #4
 800bc48:	f8be 2000 	ldrh.w	r2, [lr]
 800bc4c:	0c24      	lsrs	r4, r4, #16
 800bc4e:	fb09 2404 	mla	r4, r9, r4, r2
 800bc52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bc56:	458c      	cmp	ip, r1
 800bc58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bc5c:	d8e7      	bhi.n	800bc2e <__multiply+0xfe>
 800bc5e:	9a01      	ldr	r2, [sp, #4]
 800bc60:	50b4      	str	r4, [r6, r2]
 800bc62:	3604      	adds	r6, #4
 800bc64:	e7a3      	b.n	800bbae <__multiply+0x7e>
 800bc66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1a5      	bne.n	800bbba <__multiply+0x8a>
 800bc6e:	3f01      	subs	r7, #1
 800bc70:	e7a1      	b.n	800bbb6 <__multiply+0x86>
 800bc72:	bf00      	nop
 800bc74:	0800d5fb 	.word	0x0800d5fb
 800bc78:	0800d68c 	.word	0x0800d68c

0800bc7c <__pow5mult>:
 800bc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc80:	4615      	mov	r5, r2
 800bc82:	f012 0203 	ands.w	r2, r2, #3
 800bc86:	4606      	mov	r6, r0
 800bc88:	460f      	mov	r7, r1
 800bc8a:	d007      	beq.n	800bc9c <__pow5mult+0x20>
 800bc8c:	4c25      	ldr	r4, [pc, #148]	; (800bd24 <__pow5mult+0xa8>)
 800bc8e:	3a01      	subs	r2, #1
 800bc90:	2300      	movs	r3, #0
 800bc92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc96:	f7ff fe51 	bl	800b93c <__multadd>
 800bc9a:	4607      	mov	r7, r0
 800bc9c:	10ad      	asrs	r5, r5, #2
 800bc9e:	d03d      	beq.n	800bd1c <__pow5mult+0xa0>
 800bca0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bca2:	b97c      	cbnz	r4, 800bcc4 <__pow5mult+0x48>
 800bca4:	2010      	movs	r0, #16
 800bca6:	f7ff fdbf 	bl	800b828 <malloc>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	6270      	str	r0, [r6, #36]	; 0x24
 800bcae:	b928      	cbnz	r0, 800bcbc <__pow5mult+0x40>
 800bcb0:	4b1d      	ldr	r3, [pc, #116]	; (800bd28 <__pow5mult+0xac>)
 800bcb2:	481e      	ldr	r0, [pc, #120]	; (800bd2c <__pow5mult+0xb0>)
 800bcb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bcb8:	f000 fce6 	bl	800c688 <__assert_func>
 800bcbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcc0:	6004      	str	r4, [r0, #0]
 800bcc2:	60c4      	str	r4, [r0, #12]
 800bcc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bcc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bccc:	b94c      	cbnz	r4, 800bce2 <__pow5mult+0x66>
 800bcce:	f240 2171 	movw	r1, #625	; 0x271
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f7ff ff16 	bl	800bb04 <__i2b>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcde:	4604      	mov	r4, r0
 800bce0:	6003      	str	r3, [r0, #0]
 800bce2:	f04f 0900 	mov.w	r9, #0
 800bce6:	07eb      	lsls	r3, r5, #31
 800bce8:	d50a      	bpl.n	800bd00 <__pow5mult+0x84>
 800bcea:	4639      	mov	r1, r7
 800bcec:	4622      	mov	r2, r4
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f7ff ff1e 	bl	800bb30 <__multiply>
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	4680      	mov	r8, r0
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f7ff fdfd 	bl	800b8f8 <_Bfree>
 800bcfe:	4647      	mov	r7, r8
 800bd00:	106d      	asrs	r5, r5, #1
 800bd02:	d00b      	beq.n	800bd1c <__pow5mult+0xa0>
 800bd04:	6820      	ldr	r0, [r4, #0]
 800bd06:	b938      	cbnz	r0, 800bd18 <__pow5mult+0x9c>
 800bd08:	4622      	mov	r2, r4
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f7ff ff0f 	bl	800bb30 <__multiply>
 800bd12:	6020      	str	r0, [r4, #0]
 800bd14:	f8c0 9000 	str.w	r9, [r0]
 800bd18:	4604      	mov	r4, r0
 800bd1a:	e7e4      	b.n	800bce6 <__pow5mult+0x6a>
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd22:	bf00      	nop
 800bd24:	0800d7e0 	.word	0x0800d7e0
 800bd28:	0800d585 	.word	0x0800d585
 800bd2c:	0800d68c 	.word	0x0800d68c

0800bd30 <__lshift>:
 800bd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd34:	460c      	mov	r4, r1
 800bd36:	6849      	ldr	r1, [r1, #4]
 800bd38:	6923      	ldr	r3, [r4, #16]
 800bd3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd3e:	68a3      	ldr	r3, [r4, #8]
 800bd40:	4607      	mov	r7, r0
 800bd42:	4691      	mov	r9, r2
 800bd44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd48:	f108 0601 	add.w	r6, r8, #1
 800bd4c:	42b3      	cmp	r3, r6
 800bd4e:	db0b      	blt.n	800bd68 <__lshift+0x38>
 800bd50:	4638      	mov	r0, r7
 800bd52:	f7ff fd91 	bl	800b878 <_Balloc>
 800bd56:	4605      	mov	r5, r0
 800bd58:	b948      	cbnz	r0, 800bd6e <__lshift+0x3e>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	4b28      	ldr	r3, [pc, #160]	; (800be00 <__lshift+0xd0>)
 800bd5e:	4829      	ldr	r0, [pc, #164]	; (800be04 <__lshift+0xd4>)
 800bd60:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd64:	f000 fc90 	bl	800c688 <__assert_func>
 800bd68:	3101      	adds	r1, #1
 800bd6a:	005b      	lsls	r3, r3, #1
 800bd6c:	e7ee      	b.n	800bd4c <__lshift+0x1c>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f100 0114 	add.w	r1, r0, #20
 800bd74:	f100 0210 	add.w	r2, r0, #16
 800bd78:	4618      	mov	r0, r3
 800bd7a:	4553      	cmp	r3, sl
 800bd7c:	db33      	blt.n	800bde6 <__lshift+0xb6>
 800bd7e:	6920      	ldr	r0, [r4, #16]
 800bd80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd84:	f104 0314 	add.w	r3, r4, #20
 800bd88:	f019 091f 	ands.w	r9, r9, #31
 800bd8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd94:	d02b      	beq.n	800bdee <__lshift+0xbe>
 800bd96:	f1c9 0e20 	rsb	lr, r9, #32
 800bd9a:	468a      	mov	sl, r1
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	6818      	ldr	r0, [r3, #0]
 800bda0:	fa00 f009 	lsl.w	r0, r0, r9
 800bda4:	4302      	orrs	r2, r0
 800bda6:	f84a 2b04 	str.w	r2, [sl], #4
 800bdaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdae:	459c      	cmp	ip, r3
 800bdb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdb4:	d8f3      	bhi.n	800bd9e <__lshift+0x6e>
 800bdb6:	ebac 0304 	sub.w	r3, ip, r4
 800bdba:	3b15      	subs	r3, #21
 800bdbc:	f023 0303 	bic.w	r3, r3, #3
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	f104 0015 	add.w	r0, r4, #21
 800bdc6:	4584      	cmp	ip, r0
 800bdc8:	bf38      	it	cc
 800bdca:	2304      	movcc	r3, #4
 800bdcc:	50ca      	str	r2, [r1, r3]
 800bdce:	b10a      	cbz	r2, 800bdd4 <__lshift+0xa4>
 800bdd0:	f108 0602 	add.w	r6, r8, #2
 800bdd4:	3e01      	subs	r6, #1
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	612e      	str	r6, [r5, #16]
 800bdda:	4621      	mov	r1, r4
 800bddc:	f7ff fd8c 	bl	800b8f8 <_Bfree>
 800bde0:	4628      	mov	r0, r5
 800bde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdea:	3301      	adds	r3, #1
 800bdec:	e7c5      	b.n	800bd7a <__lshift+0x4a>
 800bdee:	3904      	subs	r1, #4
 800bdf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdf8:	459c      	cmp	ip, r3
 800bdfa:	d8f9      	bhi.n	800bdf0 <__lshift+0xc0>
 800bdfc:	e7ea      	b.n	800bdd4 <__lshift+0xa4>
 800bdfe:	bf00      	nop
 800be00:	0800d5fb 	.word	0x0800d5fb
 800be04:	0800d68c 	.word	0x0800d68c

0800be08 <__mcmp>:
 800be08:	b530      	push	{r4, r5, lr}
 800be0a:	6902      	ldr	r2, [r0, #16]
 800be0c:	690c      	ldr	r4, [r1, #16]
 800be0e:	1b12      	subs	r2, r2, r4
 800be10:	d10e      	bne.n	800be30 <__mcmp+0x28>
 800be12:	f100 0314 	add.w	r3, r0, #20
 800be16:	3114      	adds	r1, #20
 800be18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be28:	42a5      	cmp	r5, r4
 800be2a:	d003      	beq.n	800be34 <__mcmp+0x2c>
 800be2c:	d305      	bcc.n	800be3a <__mcmp+0x32>
 800be2e:	2201      	movs	r2, #1
 800be30:	4610      	mov	r0, r2
 800be32:	bd30      	pop	{r4, r5, pc}
 800be34:	4283      	cmp	r3, r0
 800be36:	d3f3      	bcc.n	800be20 <__mcmp+0x18>
 800be38:	e7fa      	b.n	800be30 <__mcmp+0x28>
 800be3a:	f04f 32ff 	mov.w	r2, #4294967295
 800be3e:	e7f7      	b.n	800be30 <__mcmp+0x28>

0800be40 <__mdiff>:
 800be40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	460c      	mov	r4, r1
 800be46:	4606      	mov	r6, r0
 800be48:	4611      	mov	r1, r2
 800be4a:	4620      	mov	r0, r4
 800be4c:	4617      	mov	r7, r2
 800be4e:	f7ff ffdb 	bl	800be08 <__mcmp>
 800be52:	1e05      	subs	r5, r0, #0
 800be54:	d110      	bne.n	800be78 <__mdiff+0x38>
 800be56:	4629      	mov	r1, r5
 800be58:	4630      	mov	r0, r6
 800be5a:	f7ff fd0d 	bl	800b878 <_Balloc>
 800be5e:	b930      	cbnz	r0, 800be6e <__mdiff+0x2e>
 800be60:	4b39      	ldr	r3, [pc, #228]	; (800bf48 <__mdiff+0x108>)
 800be62:	4602      	mov	r2, r0
 800be64:	f240 2132 	movw	r1, #562	; 0x232
 800be68:	4838      	ldr	r0, [pc, #224]	; (800bf4c <__mdiff+0x10c>)
 800be6a:	f000 fc0d 	bl	800c688 <__assert_func>
 800be6e:	2301      	movs	r3, #1
 800be70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be78:	bfa4      	itt	ge
 800be7a:	463b      	movge	r3, r7
 800be7c:	4627      	movge	r7, r4
 800be7e:	4630      	mov	r0, r6
 800be80:	6879      	ldr	r1, [r7, #4]
 800be82:	bfa6      	itte	ge
 800be84:	461c      	movge	r4, r3
 800be86:	2500      	movge	r5, #0
 800be88:	2501      	movlt	r5, #1
 800be8a:	f7ff fcf5 	bl	800b878 <_Balloc>
 800be8e:	b920      	cbnz	r0, 800be9a <__mdiff+0x5a>
 800be90:	4b2d      	ldr	r3, [pc, #180]	; (800bf48 <__mdiff+0x108>)
 800be92:	4602      	mov	r2, r0
 800be94:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be98:	e7e6      	b.n	800be68 <__mdiff+0x28>
 800be9a:	693e      	ldr	r6, [r7, #16]
 800be9c:	60c5      	str	r5, [r0, #12]
 800be9e:	6925      	ldr	r5, [r4, #16]
 800bea0:	f107 0114 	add.w	r1, r7, #20
 800bea4:	f104 0914 	add.w	r9, r4, #20
 800bea8:	f100 0e14 	add.w	lr, r0, #20
 800beac:	f107 0210 	add.w	r2, r7, #16
 800beb0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800beb4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800beb8:	46f2      	mov	sl, lr
 800beba:	2700      	movs	r7, #0
 800bebc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bec0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bec4:	fa1f f883 	uxth.w	r8, r3
 800bec8:	fa17 f78b 	uxtah	r7, r7, fp
 800becc:	0c1b      	lsrs	r3, r3, #16
 800bece:	eba7 0808 	sub.w	r8, r7, r8
 800bed2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bed6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800beda:	fa1f f888 	uxth.w	r8, r8
 800bede:	141f      	asrs	r7, r3, #16
 800bee0:	454d      	cmp	r5, r9
 800bee2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bee6:	f84a 3b04 	str.w	r3, [sl], #4
 800beea:	d8e7      	bhi.n	800bebc <__mdiff+0x7c>
 800beec:	1b2b      	subs	r3, r5, r4
 800beee:	3b15      	subs	r3, #21
 800bef0:	f023 0303 	bic.w	r3, r3, #3
 800bef4:	3304      	adds	r3, #4
 800bef6:	3415      	adds	r4, #21
 800bef8:	42a5      	cmp	r5, r4
 800befa:	bf38      	it	cc
 800befc:	2304      	movcc	r3, #4
 800befe:	4419      	add	r1, r3
 800bf00:	4473      	add	r3, lr
 800bf02:	469e      	mov	lr, r3
 800bf04:	460d      	mov	r5, r1
 800bf06:	4565      	cmp	r5, ip
 800bf08:	d30e      	bcc.n	800bf28 <__mdiff+0xe8>
 800bf0a:	f10c 0203 	add.w	r2, ip, #3
 800bf0e:	1a52      	subs	r2, r2, r1
 800bf10:	f022 0203 	bic.w	r2, r2, #3
 800bf14:	3903      	subs	r1, #3
 800bf16:	458c      	cmp	ip, r1
 800bf18:	bf38      	it	cc
 800bf1a:	2200      	movcc	r2, #0
 800bf1c:	441a      	add	r2, r3
 800bf1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf22:	b17b      	cbz	r3, 800bf44 <__mdiff+0x104>
 800bf24:	6106      	str	r6, [r0, #16]
 800bf26:	e7a5      	b.n	800be74 <__mdiff+0x34>
 800bf28:	f855 8b04 	ldr.w	r8, [r5], #4
 800bf2c:	fa17 f488 	uxtah	r4, r7, r8
 800bf30:	1422      	asrs	r2, r4, #16
 800bf32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bf36:	b2a4      	uxth	r4, r4
 800bf38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bf3c:	f84e 4b04 	str.w	r4, [lr], #4
 800bf40:	1417      	asrs	r7, r2, #16
 800bf42:	e7e0      	b.n	800bf06 <__mdiff+0xc6>
 800bf44:	3e01      	subs	r6, #1
 800bf46:	e7ea      	b.n	800bf1e <__mdiff+0xde>
 800bf48:	0800d5fb 	.word	0x0800d5fb
 800bf4c:	0800d68c 	.word	0x0800d68c

0800bf50 <__ulp>:
 800bf50:	b082      	sub	sp, #8
 800bf52:	ed8d 0b00 	vstr	d0, [sp]
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	4912      	ldr	r1, [pc, #72]	; (800bfa4 <__ulp+0x54>)
 800bf5a:	4019      	ands	r1, r3
 800bf5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bf60:	2900      	cmp	r1, #0
 800bf62:	dd05      	ble.n	800bf70 <__ulp+0x20>
 800bf64:	2200      	movs	r2, #0
 800bf66:	460b      	mov	r3, r1
 800bf68:	ec43 2b10 	vmov	d0, r2, r3
 800bf6c:	b002      	add	sp, #8
 800bf6e:	4770      	bx	lr
 800bf70:	4249      	negs	r1, r1
 800bf72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bf76:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bf7a:	f04f 0200 	mov.w	r2, #0
 800bf7e:	f04f 0300 	mov.w	r3, #0
 800bf82:	da04      	bge.n	800bf8e <__ulp+0x3e>
 800bf84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bf88:	fa41 f300 	asr.w	r3, r1, r0
 800bf8c:	e7ec      	b.n	800bf68 <__ulp+0x18>
 800bf8e:	f1a0 0114 	sub.w	r1, r0, #20
 800bf92:	291e      	cmp	r1, #30
 800bf94:	bfda      	itte	le
 800bf96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bf9a:	fa20 f101 	lsrle.w	r1, r0, r1
 800bf9e:	2101      	movgt	r1, #1
 800bfa0:	460a      	mov	r2, r1
 800bfa2:	e7e1      	b.n	800bf68 <__ulp+0x18>
 800bfa4:	7ff00000 	.word	0x7ff00000

0800bfa8 <__b2d>:
 800bfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfaa:	6905      	ldr	r5, [r0, #16]
 800bfac:	f100 0714 	add.w	r7, r0, #20
 800bfb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bfb4:	1f2e      	subs	r6, r5, #4
 800bfb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f7ff fd52 	bl	800ba64 <__hi0bits>
 800bfc0:	f1c0 0320 	rsb	r3, r0, #32
 800bfc4:	280a      	cmp	r0, #10
 800bfc6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c044 <__b2d+0x9c>
 800bfca:	600b      	str	r3, [r1, #0]
 800bfcc:	dc14      	bgt.n	800bff8 <__b2d+0x50>
 800bfce:	f1c0 0e0b 	rsb	lr, r0, #11
 800bfd2:	fa24 f10e 	lsr.w	r1, r4, lr
 800bfd6:	42b7      	cmp	r7, r6
 800bfd8:	ea41 030c 	orr.w	r3, r1, ip
 800bfdc:	bf34      	ite	cc
 800bfde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bfe2:	2100      	movcs	r1, #0
 800bfe4:	3015      	adds	r0, #21
 800bfe6:	fa04 f000 	lsl.w	r0, r4, r0
 800bfea:	fa21 f10e 	lsr.w	r1, r1, lr
 800bfee:	ea40 0201 	orr.w	r2, r0, r1
 800bff2:	ec43 2b10 	vmov	d0, r2, r3
 800bff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bff8:	42b7      	cmp	r7, r6
 800bffa:	bf3a      	itte	cc
 800bffc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c000:	f1a5 0608 	subcc.w	r6, r5, #8
 800c004:	2100      	movcs	r1, #0
 800c006:	380b      	subs	r0, #11
 800c008:	d017      	beq.n	800c03a <__b2d+0x92>
 800c00a:	f1c0 0c20 	rsb	ip, r0, #32
 800c00e:	fa04 f500 	lsl.w	r5, r4, r0
 800c012:	42be      	cmp	r6, r7
 800c014:	fa21 f40c 	lsr.w	r4, r1, ip
 800c018:	ea45 0504 	orr.w	r5, r5, r4
 800c01c:	bf8c      	ite	hi
 800c01e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c022:	2400      	movls	r4, #0
 800c024:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c028:	fa01 f000 	lsl.w	r0, r1, r0
 800c02c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c030:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c034:	ea40 0204 	orr.w	r2, r0, r4
 800c038:	e7db      	b.n	800bff2 <__b2d+0x4a>
 800c03a:	ea44 030c 	orr.w	r3, r4, ip
 800c03e:	460a      	mov	r2, r1
 800c040:	e7d7      	b.n	800bff2 <__b2d+0x4a>
 800c042:	bf00      	nop
 800c044:	3ff00000 	.word	0x3ff00000

0800c048 <__d2b>:
 800c048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c04c:	4689      	mov	r9, r1
 800c04e:	2101      	movs	r1, #1
 800c050:	ec57 6b10 	vmov	r6, r7, d0
 800c054:	4690      	mov	r8, r2
 800c056:	f7ff fc0f 	bl	800b878 <_Balloc>
 800c05a:	4604      	mov	r4, r0
 800c05c:	b930      	cbnz	r0, 800c06c <__d2b+0x24>
 800c05e:	4602      	mov	r2, r0
 800c060:	4b25      	ldr	r3, [pc, #148]	; (800c0f8 <__d2b+0xb0>)
 800c062:	4826      	ldr	r0, [pc, #152]	; (800c0fc <__d2b+0xb4>)
 800c064:	f240 310a 	movw	r1, #778	; 0x30a
 800c068:	f000 fb0e 	bl	800c688 <__assert_func>
 800c06c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c070:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c074:	bb35      	cbnz	r5, 800c0c4 <__d2b+0x7c>
 800c076:	2e00      	cmp	r6, #0
 800c078:	9301      	str	r3, [sp, #4]
 800c07a:	d028      	beq.n	800c0ce <__d2b+0x86>
 800c07c:	4668      	mov	r0, sp
 800c07e:	9600      	str	r6, [sp, #0]
 800c080:	f7ff fd10 	bl	800baa4 <__lo0bits>
 800c084:	9900      	ldr	r1, [sp, #0]
 800c086:	b300      	cbz	r0, 800c0ca <__d2b+0x82>
 800c088:	9a01      	ldr	r2, [sp, #4]
 800c08a:	f1c0 0320 	rsb	r3, r0, #32
 800c08e:	fa02 f303 	lsl.w	r3, r2, r3
 800c092:	430b      	orrs	r3, r1
 800c094:	40c2      	lsrs	r2, r0
 800c096:	6163      	str	r3, [r4, #20]
 800c098:	9201      	str	r2, [sp, #4]
 800c09a:	9b01      	ldr	r3, [sp, #4]
 800c09c:	61a3      	str	r3, [r4, #24]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	bf14      	ite	ne
 800c0a2:	2202      	movne	r2, #2
 800c0a4:	2201      	moveq	r2, #1
 800c0a6:	6122      	str	r2, [r4, #16]
 800c0a8:	b1d5      	cbz	r5, 800c0e0 <__d2b+0x98>
 800c0aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0ae:	4405      	add	r5, r0
 800c0b0:	f8c9 5000 	str.w	r5, [r9]
 800c0b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0b8:	f8c8 0000 	str.w	r0, [r8]
 800c0bc:	4620      	mov	r0, r4
 800c0be:	b003      	add	sp, #12
 800c0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0c8:	e7d5      	b.n	800c076 <__d2b+0x2e>
 800c0ca:	6161      	str	r1, [r4, #20]
 800c0cc:	e7e5      	b.n	800c09a <__d2b+0x52>
 800c0ce:	a801      	add	r0, sp, #4
 800c0d0:	f7ff fce8 	bl	800baa4 <__lo0bits>
 800c0d4:	9b01      	ldr	r3, [sp, #4]
 800c0d6:	6163      	str	r3, [r4, #20]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	6122      	str	r2, [r4, #16]
 800c0dc:	3020      	adds	r0, #32
 800c0de:	e7e3      	b.n	800c0a8 <__d2b+0x60>
 800c0e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0e8:	f8c9 0000 	str.w	r0, [r9]
 800c0ec:	6918      	ldr	r0, [r3, #16]
 800c0ee:	f7ff fcb9 	bl	800ba64 <__hi0bits>
 800c0f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0f6:	e7df      	b.n	800c0b8 <__d2b+0x70>
 800c0f8:	0800d5fb 	.word	0x0800d5fb
 800c0fc:	0800d68c 	.word	0x0800d68c

0800c100 <__ratio>:
 800c100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	4688      	mov	r8, r1
 800c106:	4669      	mov	r1, sp
 800c108:	4681      	mov	r9, r0
 800c10a:	f7ff ff4d 	bl	800bfa8 <__b2d>
 800c10e:	a901      	add	r1, sp, #4
 800c110:	4640      	mov	r0, r8
 800c112:	ec55 4b10 	vmov	r4, r5, d0
 800c116:	f7ff ff47 	bl	800bfa8 <__b2d>
 800c11a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c11e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c122:	eba3 0c02 	sub.w	ip, r3, r2
 800c126:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c12a:	1a9b      	subs	r3, r3, r2
 800c12c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c130:	ec51 0b10 	vmov	r0, r1, d0
 800c134:	2b00      	cmp	r3, #0
 800c136:	bfd6      	itet	le
 800c138:	460a      	movle	r2, r1
 800c13a:	462a      	movgt	r2, r5
 800c13c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c140:	468b      	mov	fp, r1
 800c142:	462f      	mov	r7, r5
 800c144:	bfd4      	ite	le
 800c146:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c14a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c14e:	4620      	mov	r0, r4
 800c150:	ee10 2a10 	vmov	r2, s0
 800c154:	465b      	mov	r3, fp
 800c156:	4639      	mov	r1, r7
 800c158:	f7f4 fb98 	bl	800088c <__aeabi_ddiv>
 800c15c:	ec41 0b10 	vmov	d0, r0, r1
 800c160:	b003      	add	sp, #12
 800c162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c166 <__copybits>:
 800c166:	3901      	subs	r1, #1
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	1149      	asrs	r1, r1, #5
 800c16c:	6914      	ldr	r4, [r2, #16]
 800c16e:	3101      	adds	r1, #1
 800c170:	f102 0314 	add.w	r3, r2, #20
 800c174:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c178:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c17c:	1f05      	subs	r5, r0, #4
 800c17e:	42a3      	cmp	r3, r4
 800c180:	d30c      	bcc.n	800c19c <__copybits+0x36>
 800c182:	1aa3      	subs	r3, r4, r2
 800c184:	3b11      	subs	r3, #17
 800c186:	f023 0303 	bic.w	r3, r3, #3
 800c18a:	3211      	adds	r2, #17
 800c18c:	42a2      	cmp	r2, r4
 800c18e:	bf88      	it	hi
 800c190:	2300      	movhi	r3, #0
 800c192:	4418      	add	r0, r3
 800c194:	2300      	movs	r3, #0
 800c196:	4288      	cmp	r0, r1
 800c198:	d305      	bcc.n	800c1a6 <__copybits+0x40>
 800c19a:	bd70      	pop	{r4, r5, r6, pc}
 800c19c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c1a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1a4:	e7eb      	b.n	800c17e <__copybits+0x18>
 800c1a6:	f840 3b04 	str.w	r3, [r0], #4
 800c1aa:	e7f4      	b.n	800c196 <__copybits+0x30>

0800c1ac <__any_on>:
 800c1ac:	f100 0214 	add.w	r2, r0, #20
 800c1b0:	6900      	ldr	r0, [r0, #16]
 800c1b2:	114b      	asrs	r3, r1, #5
 800c1b4:	4298      	cmp	r0, r3
 800c1b6:	b510      	push	{r4, lr}
 800c1b8:	db11      	blt.n	800c1de <__any_on+0x32>
 800c1ba:	dd0a      	ble.n	800c1d2 <__any_on+0x26>
 800c1bc:	f011 011f 	ands.w	r1, r1, #31
 800c1c0:	d007      	beq.n	800c1d2 <__any_on+0x26>
 800c1c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1c6:	fa24 f001 	lsr.w	r0, r4, r1
 800c1ca:	fa00 f101 	lsl.w	r1, r0, r1
 800c1ce:	428c      	cmp	r4, r1
 800c1d0:	d10b      	bne.n	800c1ea <__any_on+0x3e>
 800c1d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d803      	bhi.n	800c1e2 <__any_on+0x36>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	bd10      	pop	{r4, pc}
 800c1de:	4603      	mov	r3, r0
 800c1e0:	e7f7      	b.n	800c1d2 <__any_on+0x26>
 800c1e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1e6:	2900      	cmp	r1, #0
 800c1e8:	d0f5      	beq.n	800c1d6 <__any_on+0x2a>
 800c1ea:	2001      	movs	r0, #1
 800c1ec:	e7f6      	b.n	800c1dc <__any_on+0x30>

0800c1ee <_calloc_r>:
 800c1ee:	b513      	push	{r0, r1, r4, lr}
 800c1f0:	434a      	muls	r2, r1
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	9201      	str	r2, [sp, #4]
 800c1f6:	f000 f859 	bl	800c2ac <_malloc_r>
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	b118      	cbz	r0, 800c206 <_calloc_r+0x18>
 800c1fe:	9a01      	ldr	r2, [sp, #4]
 800c200:	2100      	movs	r1, #0
 800c202:	f7fc fe5d 	bl	8008ec0 <memset>
 800c206:	4620      	mov	r0, r4
 800c208:	b002      	add	sp, #8
 800c20a:	bd10      	pop	{r4, pc}

0800c20c <_free_r>:
 800c20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c20e:	2900      	cmp	r1, #0
 800c210:	d048      	beq.n	800c2a4 <_free_r+0x98>
 800c212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c216:	9001      	str	r0, [sp, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f1a1 0404 	sub.w	r4, r1, #4
 800c21e:	bfb8      	it	lt
 800c220:	18e4      	addlt	r4, r4, r3
 800c222:	f000 fa7b 	bl	800c71c <__malloc_lock>
 800c226:	4a20      	ldr	r2, [pc, #128]	; (800c2a8 <_free_r+0x9c>)
 800c228:	9801      	ldr	r0, [sp, #4]
 800c22a:	6813      	ldr	r3, [r2, #0]
 800c22c:	4615      	mov	r5, r2
 800c22e:	b933      	cbnz	r3, 800c23e <_free_r+0x32>
 800c230:	6063      	str	r3, [r4, #4]
 800c232:	6014      	str	r4, [r2, #0]
 800c234:	b003      	add	sp, #12
 800c236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c23a:	f000 ba75 	b.w	800c728 <__malloc_unlock>
 800c23e:	42a3      	cmp	r3, r4
 800c240:	d90b      	bls.n	800c25a <_free_r+0x4e>
 800c242:	6821      	ldr	r1, [r4, #0]
 800c244:	1862      	adds	r2, r4, r1
 800c246:	4293      	cmp	r3, r2
 800c248:	bf04      	itt	eq
 800c24a:	681a      	ldreq	r2, [r3, #0]
 800c24c:	685b      	ldreq	r3, [r3, #4]
 800c24e:	6063      	str	r3, [r4, #4]
 800c250:	bf04      	itt	eq
 800c252:	1852      	addeq	r2, r2, r1
 800c254:	6022      	streq	r2, [r4, #0]
 800c256:	602c      	str	r4, [r5, #0]
 800c258:	e7ec      	b.n	800c234 <_free_r+0x28>
 800c25a:	461a      	mov	r2, r3
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	b10b      	cbz	r3, 800c264 <_free_r+0x58>
 800c260:	42a3      	cmp	r3, r4
 800c262:	d9fa      	bls.n	800c25a <_free_r+0x4e>
 800c264:	6811      	ldr	r1, [r2, #0]
 800c266:	1855      	adds	r5, r2, r1
 800c268:	42a5      	cmp	r5, r4
 800c26a:	d10b      	bne.n	800c284 <_free_r+0x78>
 800c26c:	6824      	ldr	r4, [r4, #0]
 800c26e:	4421      	add	r1, r4
 800c270:	1854      	adds	r4, r2, r1
 800c272:	42a3      	cmp	r3, r4
 800c274:	6011      	str	r1, [r2, #0]
 800c276:	d1dd      	bne.n	800c234 <_free_r+0x28>
 800c278:	681c      	ldr	r4, [r3, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	6053      	str	r3, [r2, #4]
 800c27e:	4421      	add	r1, r4
 800c280:	6011      	str	r1, [r2, #0]
 800c282:	e7d7      	b.n	800c234 <_free_r+0x28>
 800c284:	d902      	bls.n	800c28c <_free_r+0x80>
 800c286:	230c      	movs	r3, #12
 800c288:	6003      	str	r3, [r0, #0]
 800c28a:	e7d3      	b.n	800c234 <_free_r+0x28>
 800c28c:	6825      	ldr	r5, [r4, #0]
 800c28e:	1961      	adds	r1, r4, r5
 800c290:	428b      	cmp	r3, r1
 800c292:	bf04      	itt	eq
 800c294:	6819      	ldreq	r1, [r3, #0]
 800c296:	685b      	ldreq	r3, [r3, #4]
 800c298:	6063      	str	r3, [r4, #4]
 800c29a:	bf04      	itt	eq
 800c29c:	1949      	addeq	r1, r1, r5
 800c29e:	6021      	streq	r1, [r4, #0]
 800c2a0:	6054      	str	r4, [r2, #4]
 800c2a2:	e7c7      	b.n	800c234 <_free_r+0x28>
 800c2a4:	b003      	add	sp, #12
 800c2a6:	bd30      	pop	{r4, r5, pc}
 800c2a8:	20000634 	.word	0x20000634

0800c2ac <_malloc_r>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	1ccd      	adds	r5, r1, #3
 800c2b0:	f025 0503 	bic.w	r5, r5, #3
 800c2b4:	3508      	adds	r5, #8
 800c2b6:	2d0c      	cmp	r5, #12
 800c2b8:	bf38      	it	cc
 800c2ba:	250c      	movcc	r5, #12
 800c2bc:	2d00      	cmp	r5, #0
 800c2be:	4606      	mov	r6, r0
 800c2c0:	db01      	blt.n	800c2c6 <_malloc_r+0x1a>
 800c2c2:	42a9      	cmp	r1, r5
 800c2c4:	d903      	bls.n	800c2ce <_malloc_r+0x22>
 800c2c6:	230c      	movs	r3, #12
 800c2c8:	6033      	str	r3, [r6, #0]
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ce:	f000 fa25 	bl	800c71c <__malloc_lock>
 800c2d2:	4921      	ldr	r1, [pc, #132]	; (800c358 <_malloc_r+0xac>)
 800c2d4:	680a      	ldr	r2, [r1, #0]
 800c2d6:	4614      	mov	r4, r2
 800c2d8:	b99c      	cbnz	r4, 800c302 <_malloc_r+0x56>
 800c2da:	4f20      	ldr	r7, [pc, #128]	; (800c35c <_malloc_r+0xb0>)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	b923      	cbnz	r3, 800c2ea <_malloc_r+0x3e>
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f000 f9a0 	bl	800c628 <_sbrk_r>
 800c2e8:	6038      	str	r0, [r7, #0]
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	f000 f99b 	bl	800c628 <_sbrk_r>
 800c2f2:	1c43      	adds	r3, r0, #1
 800c2f4:	d123      	bne.n	800c33e <_malloc_r+0x92>
 800c2f6:	230c      	movs	r3, #12
 800c2f8:	6033      	str	r3, [r6, #0]
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f000 fa14 	bl	800c728 <__malloc_unlock>
 800c300:	e7e3      	b.n	800c2ca <_malloc_r+0x1e>
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	1b5b      	subs	r3, r3, r5
 800c306:	d417      	bmi.n	800c338 <_malloc_r+0x8c>
 800c308:	2b0b      	cmp	r3, #11
 800c30a:	d903      	bls.n	800c314 <_malloc_r+0x68>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	441c      	add	r4, r3
 800c310:	6025      	str	r5, [r4, #0]
 800c312:	e004      	b.n	800c31e <_malloc_r+0x72>
 800c314:	6863      	ldr	r3, [r4, #4]
 800c316:	42a2      	cmp	r2, r4
 800c318:	bf0c      	ite	eq
 800c31a:	600b      	streq	r3, [r1, #0]
 800c31c:	6053      	strne	r3, [r2, #4]
 800c31e:	4630      	mov	r0, r6
 800c320:	f000 fa02 	bl	800c728 <__malloc_unlock>
 800c324:	f104 000b 	add.w	r0, r4, #11
 800c328:	1d23      	adds	r3, r4, #4
 800c32a:	f020 0007 	bic.w	r0, r0, #7
 800c32e:	1ac2      	subs	r2, r0, r3
 800c330:	d0cc      	beq.n	800c2cc <_malloc_r+0x20>
 800c332:	1a1b      	subs	r3, r3, r0
 800c334:	50a3      	str	r3, [r4, r2]
 800c336:	e7c9      	b.n	800c2cc <_malloc_r+0x20>
 800c338:	4622      	mov	r2, r4
 800c33a:	6864      	ldr	r4, [r4, #4]
 800c33c:	e7cc      	b.n	800c2d8 <_malloc_r+0x2c>
 800c33e:	1cc4      	adds	r4, r0, #3
 800c340:	f024 0403 	bic.w	r4, r4, #3
 800c344:	42a0      	cmp	r0, r4
 800c346:	d0e3      	beq.n	800c310 <_malloc_r+0x64>
 800c348:	1a21      	subs	r1, r4, r0
 800c34a:	4630      	mov	r0, r6
 800c34c:	f000 f96c 	bl	800c628 <_sbrk_r>
 800c350:	3001      	adds	r0, #1
 800c352:	d1dd      	bne.n	800c310 <_malloc_r+0x64>
 800c354:	e7cf      	b.n	800c2f6 <_malloc_r+0x4a>
 800c356:	bf00      	nop
 800c358:	20000634 	.word	0x20000634
 800c35c:	20000638 	.word	0x20000638

0800c360 <__ssputs_r>:
 800c360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	688e      	ldr	r6, [r1, #8]
 800c366:	429e      	cmp	r6, r3
 800c368:	4682      	mov	sl, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	4690      	mov	r8, r2
 800c36e:	461f      	mov	r7, r3
 800c370:	d838      	bhi.n	800c3e4 <__ssputs_r+0x84>
 800c372:	898a      	ldrh	r2, [r1, #12]
 800c374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c378:	d032      	beq.n	800c3e0 <__ssputs_r+0x80>
 800c37a:	6825      	ldr	r5, [r4, #0]
 800c37c:	6909      	ldr	r1, [r1, #16]
 800c37e:	eba5 0901 	sub.w	r9, r5, r1
 800c382:	6965      	ldr	r5, [r4, #20]
 800c384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c38c:	3301      	adds	r3, #1
 800c38e:	444b      	add	r3, r9
 800c390:	106d      	asrs	r5, r5, #1
 800c392:	429d      	cmp	r5, r3
 800c394:	bf38      	it	cc
 800c396:	461d      	movcc	r5, r3
 800c398:	0553      	lsls	r3, r2, #21
 800c39a:	d531      	bpl.n	800c400 <__ssputs_r+0xa0>
 800c39c:	4629      	mov	r1, r5
 800c39e:	f7ff ff85 	bl	800c2ac <_malloc_r>
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	b950      	cbnz	r0, 800c3bc <__ssputs_r+0x5c>
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	f8ca 3000 	str.w	r3, [sl]
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3bc:	6921      	ldr	r1, [r4, #16]
 800c3be:	464a      	mov	r2, r9
 800c3c0:	f7ff fa4c 	bl	800b85c <memcpy>
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ce:	81a3      	strh	r3, [r4, #12]
 800c3d0:	6126      	str	r6, [r4, #16]
 800c3d2:	6165      	str	r5, [r4, #20]
 800c3d4:	444e      	add	r6, r9
 800c3d6:	eba5 0509 	sub.w	r5, r5, r9
 800c3da:	6026      	str	r6, [r4, #0]
 800c3dc:	60a5      	str	r5, [r4, #8]
 800c3de:	463e      	mov	r6, r7
 800c3e0:	42be      	cmp	r6, r7
 800c3e2:	d900      	bls.n	800c3e6 <__ssputs_r+0x86>
 800c3e4:	463e      	mov	r6, r7
 800c3e6:	4632      	mov	r2, r6
 800c3e8:	6820      	ldr	r0, [r4, #0]
 800c3ea:	4641      	mov	r1, r8
 800c3ec:	f000 f97c 	bl	800c6e8 <memmove>
 800c3f0:	68a3      	ldr	r3, [r4, #8]
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	1b9b      	subs	r3, r3, r6
 800c3f6:	4432      	add	r2, r6
 800c3f8:	60a3      	str	r3, [r4, #8]
 800c3fa:	6022      	str	r2, [r4, #0]
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e7db      	b.n	800c3b8 <__ssputs_r+0x58>
 800c400:	462a      	mov	r2, r5
 800c402:	f000 f997 	bl	800c734 <_realloc_r>
 800c406:	4606      	mov	r6, r0
 800c408:	2800      	cmp	r0, #0
 800c40a:	d1e1      	bne.n	800c3d0 <__ssputs_r+0x70>
 800c40c:	6921      	ldr	r1, [r4, #16]
 800c40e:	4650      	mov	r0, sl
 800c410:	f7ff fefc 	bl	800c20c <_free_r>
 800c414:	e7c7      	b.n	800c3a6 <__ssputs_r+0x46>
	...

0800c418 <_svfiprintf_r>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	4698      	mov	r8, r3
 800c41e:	898b      	ldrh	r3, [r1, #12]
 800c420:	061b      	lsls	r3, r3, #24
 800c422:	b09d      	sub	sp, #116	; 0x74
 800c424:	4607      	mov	r7, r0
 800c426:	460d      	mov	r5, r1
 800c428:	4614      	mov	r4, r2
 800c42a:	d50e      	bpl.n	800c44a <_svfiprintf_r+0x32>
 800c42c:	690b      	ldr	r3, [r1, #16]
 800c42e:	b963      	cbnz	r3, 800c44a <_svfiprintf_r+0x32>
 800c430:	2140      	movs	r1, #64	; 0x40
 800c432:	f7ff ff3b 	bl	800c2ac <_malloc_r>
 800c436:	6028      	str	r0, [r5, #0]
 800c438:	6128      	str	r0, [r5, #16]
 800c43a:	b920      	cbnz	r0, 800c446 <_svfiprintf_r+0x2e>
 800c43c:	230c      	movs	r3, #12
 800c43e:	603b      	str	r3, [r7, #0]
 800c440:	f04f 30ff 	mov.w	r0, #4294967295
 800c444:	e0d1      	b.n	800c5ea <_svfiprintf_r+0x1d2>
 800c446:	2340      	movs	r3, #64	; 0x40
 800c448:	616b      	str	r3, [r5, #20]
 800c44a:	2300      	movs	r3, #0
 800c44c:	9309      	str	r3, [sp, #36]	; 0x24
 800c44e:	2320      	movs	r3, #32
 800c450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c454:	f8cd 800c 	str.w	r8, [sp, #12]
 800c458:	2330      	movs	r3, #48	; 0x30
 800c45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c604 <_svfiprintf_r+0x1ec>
 800c45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c462:	f04f 0901 	mov.w	r9, #1
 800c466:	4623      	mov	r3, r4
 800c468:	469a      	mov	sl, r3
 800c46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c46e:	b10a      	cbz	r2, 800c474 <_svfiprintf_r+0x5c>
 800c470:	2a25      	cmp	r2, #37	; 0x25
 800c472:	d1f9      	bne.n	800c468 <_svfiprintf_r+0x50>
 800c474:	ebba 0b04 	subs.w	fp, sl, r4
 800c478:	d00b      	beq.n	800c492 <_svfiprintf_r+0x7a>
 800c47a:	465b      	mov	r3, fp
 800c47c:	4622      	mov	r2, r4
 800c47e:	4629      	mov	r1, r5
 800c480:	4638      	mov	r0, r7
 800c482:	f7ff ff6d 	bl	800c360 <__ssputs_r>
 800c486:	3001      	adds	r0, #1
 800c488:	f000 80aa 	beq.w	800c5e0 <_svfiprintf_r+0x1c8>
 800c48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c48e:	445a      	add	r2, fp
 800c490:	9209      	str	r2, [sp, #36]	; 0x24
 800c492:	f89a 3000 	ldrb.w	r3, [sl]
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 80a2 	beq.w	800c5e0 <_svfiprintf_r+0x1c8>
 800c49c:	2300      	movs	r3, #0
 800c49e:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4a6:	f10a 0a01 	add.w	sl, sl, #1
 800c4aa:	9304      	str	r3, [sp, #16]
 800c4ac:	9307      	str	r3, [sp, #28]
 800c4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4b4:	4654      	mov	r4, sl
 800c4b6:	2205      	movs	r2, #5
 800c4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4bc:	4851      	ldr	r0, [pc, #324]	; (800c604 <_svfiprintf_r+0x1ec>)
 800c4be:	f7f3 feaf 	bl	8000220 <memchr>
 800c4c2:	9a04      	ldr	r2, [sp, #16]
 800c4c4:	b9d8      	cbnz	r0, 800c4fe <_svfiprintf_r+0xe6>
 800c4c6:	06d0      	lsls	r0, r2, #27
 800c4c8:	bf44      	itt	mi
 800c4ca:	2320      	movmi	r3, #32
 800c4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d0:	0711      	lsls	r1, r2, #28
 800c4d2:	bf44      	itt	mi
 800c4d4:	232b      	movmi	r3, #43	; 0x2b
 800c4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4da:	f89a 3000 	ldrb.w	r3, [sl]
 800c4de:	2b2a      	cmp	r3, #42	; 0x2a
 800c4e0:	d015      	beq.n	800c50e <_svfiprintf_r+0xf6>
 800c4e2:	9a07      	ldr	r2, [sp, #28]
 800c4e4:	4654      	mov	r4, sl
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	f04f 0c0a 	mov.w	ip, #10
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4f2:	3b30      	subs	r3, #48	; 0x30
 800c4f4:	2b09      	cmp	r3, #9
 800c4f6:	d94e      	bls.n	800c596 <_svfiprintf_r+0x17e>
 800c4f8:	b1b0      	cbz	r0, 800c528 <_svfiprintf_r+0x110>
 800c4fa:	9207      	str	r2, [sp, #28]
 800c4fc:	e014      	b.n	800c528 <_svfiprintf_r+0x110>
 800c4fe:	eba0 0308 	sub.w	r3, r0, r8
 800c502:	fa09 f303 	lsl.w	r3, r9, r3
 800c506:	4313      	orrs	r3, r2
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	46a2      	mov	sl, r4
 800c50c:	e7d2      	b.n	800c4b4 <_svfiprintf_r+0x9c>
 800c50e:	9b03      	ldr	r3, [sp, #12]
 800c510:	1d19      	adds	r1, r3, #4
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	9103      	str	r1, [sp, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	bfbb      	ittet	lt
 800c51a:	425b      	neglt	r3, r3
 800c51c:	f042 0202 	orrlt.w	r2, r2, #2
 800c520:	9307      	strge	r3, [sp, #28]
 800c522:	9307      	strlt	r3, [sp, #28]
 800c524:	bfb8      	it	lt
 800c526:	9204      	strlt	r2, [sp, #16]
 800c528:	7823      	ldrb	r3, [r4, #0]
 800c52a:	2b2e      	cmp	r3, #46	; 0x2e
 800c52c:	d10c      	bne.n	800c548 <_svfiprintf_r+0x130>
 800c52e:	7863      	ldrb	r3, [r4, #1]
 800c530:	2b2a      	cmp	r3, #42	; 0x2a
 800c532:	d135      	bne.n	800c5a0 <_svfiprintf_r+0x188>
 800c534:	9b03      	ldr	r3, [sp, #12]
 800c536:	1d1a      	adds	r2, r3, #4
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	9203      	str	r2, [sp, #12]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	bfb8      	it	lt
 800c540:	f04f 33ff 	movlt.w	r3, #4294967295
 800c544:	3402      	adds	r4, #2
 800c546:	9305      	str	r3, [sp, #20]
 800c548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c614 <_svfiprintf_r+0x1fc>
 800c54c:	7821      	ldrb	r1, [r4, #0]
 800c54e:	2203      	movs	r2, #3
 800c550:	4650      	mov	r0, sl
 800c552:	f7f3 fe65 	bl	8000220 <memchr>
 800c556:	b140      	cbz	r0, 800c56a <_svfiprintf_r+0x152>
 800c558:	2340      	movs	r3, #64	; 0x40
 800c55a:	eba0 000a 	sub.w	r0, r0, sl
 800c55e:	fa03 f000 	lsl.w	r0, r3, r0
 800c562:	9b04      	ldr	r3, [sp, #16]
 800c564:	4303      	orrs	r3, r0
 800c566:	3401      	adds	r4, #1
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56e:	4826      	ldr	r0, [pc, #152]	; (800c608 <_svfiprintf_r+0x1f0>)
 800c570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c574:	2206      	movs	r2, #6
 800c576:	f7f3 fe53 	bl	8000220 <memchr>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d038      	beq.n	800c5f0 <_svfiprintf_r+0x1d8>
 800c57e:	4b23      	ldr	r3, [pc, #140]	; (800c60c <_svfiprintf_r+0x1f4>)
 800c580:	bb1b      	cbnz	r3, 800c5ca <_svfiprintf_r+0x1b2>
 800c582:	9b03      	ldr	r3, [sp, #12]
 800c584:	3307      	adds	r3, #7
 800c586:	f023 0307 	bic.w	r3, r3, #7
 800c58a:	3308      	adds	r3, #8
 800c58c:	9303      	str	r3, [sp, #12]
 800c58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c590:	4433      	add	r3, r6
 800c592:	9309      	str	r3, [sp, #36]	; 0x24
 800c594:	e767      	b.n	800c466 <_svfiprintf_r+0x4e>
 800c596:	fb0c 3202 	mla	r2, ip, r2, r3
 800c59a:	460c      	mov	r4, r1
 800c59c:	2001      	movs	r0, #1
 800c59e:	e7a5      	b.n	800c4ec <_svfiprintf_r+0xd4>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	3401      	adds	r4, #1
 800c5a4:	9305      	str	r3, [sp, #20]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	f04f 0c0a 	mov.w	ip, #10
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5b2:	3a30      	subs	r2, #48	; 0x30
 800c5b4:	2a09      	cmp	r2, #9
 800c5b6:	d903      	bls.n	800c5c0 <_svfiprintf_r+0x1a8>
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d0c5      	beq.n	800c548 <_svfiprintf_r+0x130>
 800c5bc:	9105      	str	r1, [sp, #20]
 800c5be:	e7c3      	b.n	800c548 <_svfiprintf_r+0x130>
 800c5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e7f0      	b.n	800c5ac <_svfiprintf_r+0x194>
 800c5ca:	ab03      	add	r3, sp, #12
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <_svfiprintf_r+0x1f8>)
 800c5d2:	a904      	add	r1, sp, #16
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	f7fc fd1b 	bl	8009010 <_printf_float>
 800c5da:	1c42      	adds	r2, r0, #1
 800c5dc:	4606      	mov	r6, r0
 800c5de:	d1d6      	bne.n	800c58e <_svfiprintf_r+0x176>
 800c5e0:	89ab      	ldrh	r3, [r5, #12]
 800c5e2:	065b      	lsls	r3, r3, #25
 800c5e4:	f53f af2c 	bmi.w	800c440 <_svfiprintf_r+0x28>
 800c5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5ea:	b01d      	add	sp, #116	; 0x74
 800c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f0:	ab03      	add	r3, sp, #12
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	462a      	mov	r2, r5
 800c5f6:	4b06      	ldr	r3, [pc, #24]	; (800c610 <_svfiprintf_r+0x1f8>)
 800c5f8:	a904      	add	r1, sp, #16
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	f7fc ffac 	bl	8009558 <_printf_i>
 800c600:	e7eb      	b.n	800c5da <_svfiprintf_r+0x1c2>
 800c602:	bf00      	nop
 800c604:	0800d7ec 	.word	0x0800d7ec
 800c608:	0800d7f6 	.word	0x0800d7f6
 800c60c:	08009011 	.word	0x08009011
 800c610:	0800c361 	.word	0x0800c361
 800c614:	0800d7f2 	.word	0x0800d7f2

0800c618 <nan>:
 800c618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c620 <nan+0x8>
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	00000000 	.word	0x00000000
 800c624:	7ff80000 	.word	0x7ff80000

0800c628 <_sbrk_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	4d06      	ldr	r5, [pc, #24]	; (800c644 <_sbrk_r+0x1c>)
 800c62c:	2300      	movs	r3, #0
 800c62e:	4604      	mov	r4, r0
 800c630:	4608      	mov	r0, r1
 800c632:	602b      	str	r3, [r5, #0]
 800c634:	f7f6 fadc 	bl	8002bf0 <_sbrk>
 800c638:	1c43      	adds	r3, r0, #1
 800c63a:	d102      	bne.n	800c642 <_sbrk_r+0x1a>
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	b103      	cbz	r3, 800c642 <_sbrk_r+0x1a>
 800c640:	6023      	str	r3, [r4, #0]
 800c642:	bd38      	pop	{r3, r4, r5, pc}
 800c644:	20000cf8 	.word	0x20000cf8

0800c648 <strncmp>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	b16a      	cbz	r2, 800c668 <strncmp+0x20>
 800c64c:	3901      	subs	r1, #1
 800c64e:	1884      	adds	r4, r0, r2
 800c650:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c654:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c658:	4293      	cmp	r3, r2
 800c65a:	d103      	bne.n	800c664 <strncmp+0x1c>
 800c65c:	42a0      	cmp	r0, r4
 800c65e:	d001      	beq.n	800c664 <strncmp+0x1c>
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1f5      	bne.n	800c650 <strncmp+0x8>
 800c664:	1a98      	subs	r0, r3, r2
 800c666:	bd10      	pop	{r4, pc}
 800c668:	4610      	mov	r0, r2
 800c66a:	e7fc      	b.n	800c666 <strncmp+0x1e>

0800c66c <__ascii_wctomb>:
 800c66c:	b149      	cbz	r1, 800c682 <__ascii_wctomb+0x16>
 800c66e:	2aff      	cmp	r2, #255	; 0xff
 800c670:	bf85      	ittet	hi
 800c672:	238a      	movhi	r3, #138	; 0x8a
 800c674:	6003      	strhi	r3, [r0, #0]
 800c676:	700a      	strbls	r2, [r1, #0]
 800c678:	f04f 30ff 	movhi.w	r0, #4294967295
 800c67c:	bf98      	it	ls
 800c67e:	2001      	movls	r0, #1
 800c680:	4770      	bx	lr
 800c682:	4608      	mov	r0, r1
 800c684:	4770      	bx	lr
	...

0800c688 <__assert_func>:
 800c688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c68a:	4614      	mov	r4, r2
 800c68c:	461a      	mov	r2, r3
 800c68e:	4b09      	ldr	r3, [pc, #36]	; (800c6b4 <__assert_func+0x2c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4605      	mov	r5, r0
 800c694:	68d8      	ldr	r0, [r3, #12]
 800c696:	b14c      	cbz	r4, 800c6ac <__assert_func+0x24>
 800c698:	4b07      	ldr	r3, [pc, #28]	; (800c6b8 <__assert_func+0x30>)
 800c69a:	9100      	str	r1, [sp, #0]
 800c69c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6a0:	4906      	ldr	r1, [pc, #24]	; (800c6bc <__assert_func+0x34>)
 800c6a2:	462b      	mov	r3, r5
 800c6a4:	f000 f80e 	bl	800c6c4 <fiprintf>
 800c6a8:	f000 fa84 	bl	800cbb4 <abort>
 800c6ac:	4b04      	ldr	r3, [pc, #16]	; (800c6c0 <__assert_func+0x38>)
 800c6ae:	461c      	mov	r4, r3
 800c6b0:	e7f3      	b.n	800c69a <__assert_func+0x12>
 800c6b2:	bf00      	nop
 800c6b4:	20000034 	.word	0x20000034
 800c6b8:	0800d7fd 	.word	0x0800d7fd
 800c6bc:	0800d80a 	.word	0x0800d80a
 800c6c0:	0800d838 	.word	0x0800d838

0800c6c4 <fiprintf>:
 800c6c4:	b40e      	push	{r1, r2, r3}
 800c6c6:	b503      	push	{r0, r1, lr}
 800c6c8:	4601      	mov	r1, r0
 800c6ca:	ab03      	add	r3, sp, #12
 800c6cc:	4805      	ldr	r0, [pc, #20]	; (800c6e4 <fiprintf+0x20>)
 800c6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6d2:	6800      	ldr	r0, [r0, #0]
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	f000 f87d 	bl	800c7d4 <_vfiprintf_r>
 800c6da:	b002      	add	sp, #8
 800c6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6e0:	b003      	add	sp, #12
 800c6e2:	4770      	bx	lr
 800c6e4:	20000034 	.word	0x20000034

0800c6e8 <memmove>:
 800c6e8:	4288      	cmp	r0, r1
 800c6ea:	b510      	push	{r4, lr}
 800c6ec:	eb01 0402 	add.w	r4, r1, r2
 800c6f0:	d902      	bls.n	800c6f8 <memmove+0x10>
 800c6f2:	4284      	cmp	r4, r0
 800c6f4:	4623      	mov	r3, r4
 800c6f6:	d807      	bhi.n	800c708 <memmove+0x20>
 800c6f8:	1e43      	subs	r3, r0, #1
 800c6fa:	42a1      	cmp	r1, r4
 800c6fc:	d008      	beq.n	800c710 <memmove+0x28>
 800c6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c706:	e7f8      	b.n	800c6fa <memmove+0x12>
 800c708:	4402      	add	r2, r0
 800c70a:	4601      	mov	r1, r0
 800c70c:	428a      	cmp	r2, r1
 800c70e:	d100      	bne.n	800c712 <memmove+0x2a>
 800c710:	bd10      	pop	{r4, pc}
 800c712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c71a:	e7f7      	b.n	800c70c <memmove+0x24>

0800c71c <__malloc_lock>:
 800c71c:	4801      	ldr	r0, [pc, #4]	; (800c724 <__malloc_lock+0x8>)
 800c71e:	f000 bc09 	b.w	800cf34 <__retarget_lock_acquire_recursive>
 800c722:	bf00      	nop
 800c724:	20000d00 	.word	0x20000d00

0800c728 <__malloc_unlock>:
 800c728:	4801      	ldr	r0, [pc, #4]	; (800c730 <__malloc_unlock+0x8>)
 800c72a:	f000 bc04 	b.w	800cf36 <__retarget_lock_release_recursive>
 800c72e:	bf00      	nop
 800c730:	20000d00 	.word	0x20000d00

0800c734 <_realloc_r>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	4607      	mov	r7, r0
 800c738:	4614      	mov	r4, r2
 800c73a:	460e      	mov	r6, r1
 800c73c:	b921      	cbnz	r1, 800c748 <_realloc_r+0x14>
 800c73e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c742:	4611      	mov	r1, r2
 800c744:	f7ff bdb2 	b.w	800c2ac <_malloc_r>
 800c748:	b922      	cbnz	r2, 800c754 <_realloc_r+0x20>
 800c74a:	f7ff fd5f 	bl	800c20c <_free_r>
 800c74e:	4625      	mov	r5, r4
 800c750:	4628      	mov	r0, r5
 800c752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c754:	f000 fc54 	bl	800d000 <_malloc_usable_size_r>
 800c758:	42a0      	cmp	r0, r4
 800c75a:	d20f      	bcs.n	800c77c <_realloc_r+0x48>
 800c75c:	4621      	mov	r1, r4
 800c75e:	4638      	mov	r0, r7
 800c760:	f7ff fda4 	bl	800c2ac <_malloc_r>
 800c764:	4605      	mov	r5, r0
 800c766:	2800      	cmp	r0, #0
 800c768:	d0f2      	beq.n	800c750 <_realloc_r+0x1c>
 800c76a:	4631      	mov	r1, r6
 800c76c:	4622      	mov	r2, r4
 800c76e:	f7ff f875 	bl	800b85c <memcpy>
 800c772:	4631      	mov	r1, r6
 800c774:	4638      	mov	r0, r7
 800c776:	f7ff fd49 	bl	800c20c <_free_r>
 800c77a:	e7e9      	b.n	800c750 <_realloc_r+0x1c>
 800c77c:	4635      	mov	r5, r6
 800c77e:	e7e7      	b.n	800c750 <_realloc_r+0x1c>

0800c780 <__sfputc_r>:
 800c780:	6893      	ldr	r3, [r2, #8]
 800c782:	3b01      	subs	r3, #1
 800c784:	2b00      	cmp	r3, #0
 800c786:	b410      	push	{r4}
 800c788:	6093      	str	r3, [r2, #8]
 800c78a:	da08      	bge.n	800c79e <__sfputc_r+0x1e>
 800c78c:	6994      	ldr	r4, [r2, #24]
 800c78e:	42a3      	cmp	r3, r4
 800c790:	db01      	blt.n	800c796 <__sfputc_r+0x16>
 800c792:	290a      	cmp	r1, #10
 800c794:	d103      	bne.n	800c79e <__sfputc_r+0x1e>
 800c796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c79a:	f000 b94b 	b.w	800ca34 <__swbuf_r>
 800c79e:	6813      	ldr	r3, [r2, #0]
 800c7a0:	1c58      	adds	r0, r3, #1
 800c7a2:	6010      	str	r0, [r2, #0]
 800c7a4:	7019      	strb	r1, [r3, #0]
 800c7a6:	4608      	mov	r0, r1
 800c7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <__sfputs_r>:
 800c7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	460f      	mov	r7, r1
 800c7b4:	4614      	mov	r4, r2
 800c7b6:	18d5      	adds	r5, r2, r3
 800c7b8:	42ac      	cmp	r4, r5
 800c7ba:	d101      	bne.n	800c7c0 <__sfputs_r+0x12>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	e007      	b.n	800c7d0 <__sfputs_r+0x22>
 800c7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c4:	463a      	mov	r2, r7
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7ff ffda 	bl	800c780 <__sfputc_r>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	d1f3      	bne.n	800c7b8 <__sfputs_r+0xa>
 800c7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7d4 <_vfiprintf_r>:
 800c7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d8:	460d      	mov	r5, r1
 800c7da:	b09d      	sub	sp, #116	; 0x74
 800c7dc:	4614      	mov	r4, r2
 800c7de:	4698      	mov	r8, r3
 800c7e0:	4606      	mov	r6, r0
 800c7e2:	b118      	cbz	r0, 800c7ec <_vfiprintf_r+0x18>
 800c7e4:	6983      	ldr	r3, [r0, #24]
 800c7e6:	b90b      	cbnz	r3, 800c7ec <_vfiprintf_r+0x18>
 800c7e8:	f000 fb06 	bl	800cdf8 <__sinit>
 800c7ec:	4b89      	ldr	r3, [pc, #548]	; (800ca14 <_vfiprintf_r+0x240>)
 800c7ee:	429d      	cmp	r5, r3
 800c7f0:	d11b      	bne.n	800c82a <_vfiprintf_r+0x56>
 800c7f2:	6875      	ldr	r5, [r6, #4]
 800c7f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7f6:	07d9      	lsls	r1, r3, #31
 800c7f8:	d405      	bmi.n	800c806 <_vfiprintf_r+0x32>
 800c7fa:	89ab      	ldrh	r3, [r5, #12]
 800c7fc:	059a      	lsls	r2, r3, #22
 800c7fe:	d402      	bmi.n	800c806 <_vfiprintf_r+0x32>
 800c800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c802:	f000 fb97 	bl	800cf34 <__retarget_lock_acquire_recursive>
 800c806:	89ab      	ldrh	r3, [r5, #12]
 800c808:	071b      	lsls	r3, r3, #28
 800c80a:	d501      	bpl.n	800c810 <_vfiprintf_r+0x3c>
 800c80c:	692b      	ldr	r3, [r5, #16]
 800c80e:	b9eb      	cbnz	r3, 800c84c <_vfiprintf_r+0x78>
 800c810:	4629      	mov	r1, r5
 800c812:	4630      	mov	r0, r6
 800c814:	f000 f960 	bl	800cad8 <__swsetup_r>
 800c818:	b1c0      	cbz	r0, 800c84c <_vfiprintf_r+0x78>
 800c81a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c81c:	07dc      	lsls	r4, r3, #31
 800c81e:	d50e      	bpl.n	800c83e <_vfiprintf_r+0x6a>
 800c820:	f04f 30ff 	mov.w	r0, #4294967295
 800c824:	b01d      	add	sp, #116	; 0x74
 800c826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c82a:	4b7b      	ldr	r3, [pc, #492]	; (800ca18 <_vfiprintf_r+0x244>)
 800c82c:	429d      	cmp	r5, r3
 800c82e:	d101      	bne.n	800c834 <_vfiprintf_r+0x60>
 800c830:	68b5      	ldr	r5, [r6, #8]
 800c832:	e7df      	b.n	800c7f4 <_vfiprintf_r+0x20>
 800c834:	4b79      	ldr	r3, [pc, #484]	; (800ca1c <_vfiprintf_r+0x248>)
 800c836:	429d      	cmp	r5, r3
 800c838:	bf08      	it	eq
 800c83a:	68f5      	ldreq	r5, [r6, #12]
 800c83c:	e7da      	b.n	800c7f4 <_vfiprintf_r+0x20>
 800c83e:	89ab      	ldrh	r3, [r5, #12]
 800c840:	0598      	lsls	r0, r3, #22
 800c842:	d4ed      	bmi.n	800c820 <_vfiprintf_r+0x4c>
 800c844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c846:	f000 fb76 	bl	800cf36 <__retarget_lock_release_recursive>
 800c84a:	e7e9      	b.n	800c820 <_vfiprintf_r+0x4c>
 800c84c:	2300      	movs	r3, #0
 800c84e:	9309      	str	r3, [sp, #36]	; 0x24
 800c850:	2320      	movs	r3, #32
 800c852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c856:	f8cd 800c 	str.w	r8, [sp, #12]
 800c85a:	2330      	movs	r3, #48	; 0x30
 800c85c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca20 <_vfiprintf_r+0x24c>
 800c860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c864:	f04f 0901 	mov.w	r9, #1
 800c868:	4623      	mov	r3, r4
 800c86a:	469a      	mov	sl, r3
 800c86c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c870:	b10a      	cbz	r2, 800c876 <_vfiprintf_r+0xa2>
 800c872:	2a25      	cmp	r2, #37	; 0x25
 800c874:	d1f9      	bne.n	800c86a <_vfiprintf_r+0x96>
 800c876:	ebba 0b04 	subs.w	fp, sl, r4
 800c87a:	d00b      	beq.n	800c894 <_vfiprintf_r+0xc0>
 800c87c:	465b      	mov	r3, fp
 800c87e:	4622      	mov	r2, r4
 800c880:	4629      	mov	r1, r5
 800c882:	4630      	mov	r0, r6
 800c884:	f7ff ff93 	bl	800c7ae <__sfputs_r>
 800c888:	3001      	adds	r0, #1
 800c88a:	f000 80aa 	beq.w	800c9e2 <_vfiprintf_r+0x20e>
 800c88e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c890:	445a      	add	r2, fp
 800c892:	9209      	str	r2, [sp, #36]	; 0x24
 800c894:	f89a 3000 	ldrb.w	r3, [sl]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 80a2 	beq.w	800c9e2 <_vfiprintf_r+0x20e>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8a8:	f10a 0a01 	add.w	sl, sl, #1
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	9307      	str	r3, [sp, #28]
 800c8b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8b4:	931a      	str	r3, [sp, #104]	; 0x68
 800c8b6:	4654      	mov	r4, sl
 800c8b8:	2205      	movs	r2, #5
 800c8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8be:	4858      	ldr	r0, [pc, #352]	; (800ca20 <_vfiprintf_r+0x24c>)
 800c8c0:	f7f3 fcae 	bl	8000220 <memchr>
 800c8c4:	9a04      	ldr	r2, [sp, #16]
 800c8c6:	b9d8      	cbnz	r0, 800c900 <_vfiprintf_r+0x12c>
 800c8c8:	06d1      	lsls	r1, r2, #27
 800c8ca:	bf44      	itt	mi
 800c8cc:	2320      	movmi	r3, #32
 800c8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8d2:	0713      	lsls	r3, r2, #28
 800c8d4:	bf44      	itt	mi
 800c8d6:	232b      	movmi	r3, #43	; 0x2b
 800c8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8e2:	d015      	beq.n	800c910 <_vfiprintf_r+0x13c>
 800c8e4:	9a07      	ldr	r2, [sp, #28]
 800c8e6:	4654      	mov	r4, sl
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	f04f 0c0a 	mov.w	ip, #10
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8f4:	3b30      	subs	r3, #48	; 0x30
 800c8f6:	2b09      	cmp	r3, #9
 800c8f8:	d94e      	bls.n	800c998 <_vfiprintf_r+0x1c4>
 800c8fa:	b1b0      	cbz	r0, 800c92a <_vfiprintf_r+0x156>
 800c8fc:	9207      	str	r2, [sp, #28]
 800c8fe:	e014      	b.n	800c92a <_vfiprintf_r+0x156>
 800c900:	eba0 0308 	sub.w	r3, r0, r8
 800c904:	fa09 f303 	lsl.w	r3, r9, r3
 800c908:	4313      	orrs	r3, r2
 800c90a:	9304      	str	r3, [sp, #16]
 800c90c:	46a2      	mov	sl, r4
 800c90e:	e7d2      	b.n	800c8b6 <_vfiprintf_r+0xe2>
 800c910:	9b03      	ldr	r3, [sp, #12]
 800c912:	1d19      	adds	r1, r3, #4
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	9103      	str	r1, [sp, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	bfbb      	ittet	lt
 800c91c:	425b      	neglt	r3, r3
 800c91e:	f042 0202 	orrlt.w	r2, r2, #2
 800c922:	9307      	strge	r3, [sp, #28]
 800c924:	9307      	strlt	r3, [sp, #28]
 800c926:	bfb8      	it	lt
 800c928:	9204      	strlt	r2, [sp, #16]
 800c92a:	7823      	ldrb	r3, [r4, #0]
 800c92c:	2b2e      	cmp	r3, #46	; 0x2e
 800c92e:	d10c      	bne.n	800c94a <_vfiprintf_r+0x176>
 800c930:	7863      	ldrb	r3, [r4, #1]
 800c932:	2b2a      	cmp	r3, #42	; 0x2a
 800c934:	d135      	bne.n	800c9a2 <_vfiprintf_r+0x1ce>
 800c936:	9b03      	ldr	r3, [sp, #12]
 800c938:	1d1a      	adds	r2, r3, #4
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	9203      	str	r2, [sp, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	bfb8      	it	lt
 800c942:	f04f 33ff 	movlt.w	r3, #4294967295
 800c946:	3402      	adds	r4, #2
 800c948:	9305      	str	r3, [sp, #20]
 800c94a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca30 <_vfiprintf_r+0x25c>
 800c94e:	7821      	ldrb	r1, [r4, #0]
 800c950:	2203      	movs	r2, #3
 800c952:	4650      	mov	r0, sl
 800c954:	f7f3 fc64 	bl	8000220 <memchr>
 800c958:	b140      	cbz	r0, 800c96c <_vfiprintf_r+0x198>
 800c95a:	2340      	movs	r3, #64	; 0x40
 800c95c:	eba0 000a 	sub.w	r0, r0, sl
 800c960:	fa03 f000 	lsl.w	r0, r3, r0
 800c964:	9b04      	ldr	r3, [sp, #16]
 800c966:	4303      	orrs	r3, r0
 800c968:	3401      	adds	r4, #1
 800c96a:	9304      	str	r3, [sp, #16]
 800c96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c970:	482c      	ldr	r0, [pc, #176]	; (800ca24 <_vfiprintf_r+0x250>)
 800c972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c976:	2206      	movs	r2, #6
 800c978:	f7f3 fc52 	bl	8000220 <memchr>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d03f      	beq.n	800ca00 <_vfiprintf_r+0x22c>
 800c980:	4b29      	ldr	r3, [pc, #164]	; (800ca28 <_vfiprintf_r+0x254>)
 800c982:	bb1b      	cbnz	r3, 800c9cc <_vfiprintf_r+0x1f8>
 800c984:	9b03      	ldr	r3, [sp, #12]
 800c986:	3307      	adds	r3, #7
 800c988:	f023 0307 	bic.w	r3, r3, #7
 800c98c:	3308      	adds	r3, #8
 800c98e:	9303      	str	r3, [sp, #12]
 800c990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c992:	443b      	add	r3, r7
 800c994:	9309      	str	r3, [sp, #36]	; 0x24
 800c996:	e767      	b.n	800c868 <_vfiprintf_r+0x94>
 800c998:	fb0c 3202 	mla	r2, ip, r2, r3
 800c99c:	460c      	mov	r4, r1
 800c99e:	2001      	movs	r0, #1
 800c9a0:	e7a5      	b.n	800c8ee <_vfiprintf_r+0x11a>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	3401      	adds	r4, #1
 800c9a6:	9305      	str	r3, [sp, #20]
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	f04f 0c0a 	mov.w	ip, #10
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9b4:	3a30      	subs	r2, #48	; 0x30
 800c9b6:	2a09      	cmp	r2, #9
 800c9b8:	d903      	bls.n	800c9c2 <_vfiprintf_r+0x1ee>
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d0c5      	beq.n	800c94a <_vfiprintf_r+0x176>
 800c9be:	9105      	str	r1, [sp, #20]
 800c9c0:	e7c3      	b.n	800c94a <_vfiprintf_r+0x176>
 800c9c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e7f0      	b.n	800c9ae <_vfiprintf_r+0x1da>
 800c9cc:	ab03      	add	r3, sp, #12
 800c9ce:	9300      	str	r3, [sp, #0]
 800c9d0:	462a      	mov	r2, r5
 800c9d2:	4b16      	ldr	r3, [pc, #88]	; (800ca2c <_vfiprintf_r+0x258>)
 800c9d4:	a904      	add	r1, sp, #16
 800c9d6:	4630      	mov	r0, r6
 800c9d8:	f7fc fb1a 	bl	8009010 <_printf_float>
 800c9dc:	4607      	mov	r7, r0
 800c9de:	1c78      	adds	r0, r7, #1
 800c9e0:	d1d6      	bne.n	800c990 <_vfiprintf_r+0x1bc>
 800c9e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9e4:	07d9      	lsls	r1, r3, #31
 800c9e6:	d405      	bmi.n	800c9f4 <_vfiprintf_r+0x220>
 800c9e8:	89ab      	ldrh	r3, [r5, #12]
 800c9ea:	059a      	lsls	r2, r3, #22
 800c9ec:	d402      	bmi.n	800c9f4 <_vfiprintf_r+0x220>
 800c9ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9f0:	f000 faa1 	bl	800cf36 <__retarget_lock_release_recursive>
 800c9f4:	89ab      	ldrh	r3, [r5, #12]
 800c9f6:	065b      	lsls	r3, r3, #25
 800c9f8:	f53f af12 	bmi.w	800c820 <_vfiprintf_r+0x4c>
 800c9fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9fe:	e711      	b.n	800c824 <_vfiprintf_r+0x50>
 800ca00:	ab03      	add	r3, sp, #12
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	462a      	mov	r2, r5
 800ca06:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <_vfiprintf_r+0x258>)
 800ca08:	a904      	add	r1, sp, #16
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7fc fda4 	bl	8009558 <_printf_i>
 800ca10:	e7e4      	b.n	800c9dc <_vfiprintf_r+0x208>
 800ca12:	bf00      	nop
 800ca14:	0800d95c 	.word	0x0800d95c
 800ca18:	0800d97c 	.word	0x0800d97c
 800ca1c:	0800d93c 	.word	0x0800d93c
 800ca20:	0800d7ec 	.word	0x0800d7ec
 800ca24:	0800d7f6 	.word	0x0800d7f6
 800ca28:	08009011 	.word	0x08009011
 800ca2c:	0800c7af 	.word	0x0800c7af
 800ca30:	0800d7f2 	.word	0x0800d7f2

0800ca34 <__swbuf_r>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	460e      	mov	r6, r1
 800ca38:	4614      	mov	r4, r2
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	b118      	cbz	r0, 800ca46 <__swbuf_r+0x12>
 800ca3e:	6983      	ldr	r3, [r0, #24]
 800ca40:	b90b      	cbnz	r3, 800ca46 <__swbuf_r+0x12>
 800ca42:	f000 f9d9 	bl	800cdf8 <__sinit>
 800ca46:	4b21      	ldr	r3, [pc, #132]	; (800cacc <__swbuf_r+0x98>)
 800ca48:	429c      	cmp	r4, r3
 800ca4a:	d12b      	bne.n	800caa4 <__swbuf_r+0x70>
 800ca4c:	686c      	ldr	r4, [r5, #4]
 800ca4e:	69a3      	ldr	r3, [r4, #24]
 800ca50:	60a3      	str	r3, [r4, #8]
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	071a      	lsls	r2, r3, #28
 800ca56:	d52f      	bpl.n	800cab8 <__swbuf_r+0x84>
 800ca58:	6923      	ldr	r3, [r4, #16]
 800ca5a:	b36b      	cbz	r3, 800cab8 <__swbuf_r+0x84>
 800ca5c:	6923      	ldr	r3, [r4, #16]
 800ca5e:	6820      	ldr	r0, [r4, #0]
 800ca60:	1ac0      	subs	r0, r0, r3
 800ca62:	6963      	ldr	r3, [r4, #20]
 800ca64:	b2f6      	uxtb	r6, r6
 800ca66:	4283      	cmp	r3, r0
 800ca68:	4637      	mov	r7, r6
 800ca6a:	dc04      	bgt.n	800ca76 <__swbuf_r+0x42>
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f000 f92e 	bl	800ccd0 <_fflush_r>
 800ca74:	bb30      	cbnz	r0, 800cac4 <__swbuf_r+0x90>
 800ca76:	68a3      	ldr	r3, [r4, #8]
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	60a3      	str	r3, [r4, #8]
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	1c5a      	adds	r2, r3, #1
 800ca80:	6022      	str	r2, [r4, #0]
 800ca82:	701e      	strb	r6, [r3, #0]
 800ca84:	6963      	ldr	r3, [r4, #20]
 800ca86:	3001      	adds	r0, #1
 800ca88:	4283      	cmp	r3, r0
 800ca8a:	d004      	beq.n	800ca96 <__swbuf_r+0x62>
 800ca8c:	89a3      	ldrh	r3, [r4, #12]
 800ca8e:	07db      	lsls	r3, r3, #31
 800ca90:	d506      	bpl.n	800caa0 <__swbuf_r+0x6c>
 800ca92:	2e0a      	cmp	r6, #10
 800ca94:	d104      	bne.n	800caa0 <__swbuf_r+0x6c>
 800ca96:	4621      	mov	r1, r4
 800ca98:	4628      	mov	r0, r5
 800ca9a:	f000 f919 	bl	800ccd0 <_fflush_r>
 800ca9e:	b988      	cbnz	r0, 800cac4 <__swbuf_r+0x90>
 800caa0:	4638      	mov	r0, r7
 800caa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caa4:	4b0a      	ldr	r3, [pc, #40]	; (800cad0 <__swbuf_r+0x9c>)
 800caa6:	429c      	cmp	r4, r3
 800caa8:	d101      	bne.n	800caae <__swbuf_r+0x7a>
 800caaa:	68ac      	ldr	r4, [r5, #8]
 800caac:	e7cf      	b.n	800ca4e <__swbuf_r+0x1a>
 800caae:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <__swbuf_r+0xa0>)
 800cab0:	429c      	cmp	r4, r3
 800cab2:	bf08      	it	eq
 800cab4:	68ec      	ldreq	r4, [r5, #12]
 800cab6:	e7ca      	b.n	800ca4e <__swbuf_r+0x1a>
 800cab8:	4621      	mov	r1, r4
 800caba:	4628      	mov	r0, r5
 800cabc:	f000 f80c 	bl	800cad8 <__swsetup_r>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d0cb      	beq.n	800ca5c <__swbuf_r+0x28>
 800cac4:	f04f 37ff 	mov.w	r7, #4294967295
 800cac8:	e7ea      	b.n	800caa0 <__swbuf_r+0x6c>
 800caca:	bf00      	nop
 800cacc:	0800d95c 	.word	0x0800d95c
 800cad0:	0800d97c 	.word	0x0800d97c
 800cad4:	0800d93c 	.word	0x0800d93c

0800cad8 <__swsetup_r>:
 800cad8:	4b32      	ldr	r3, [pc, #200]	; (800cba4 <__swsetup_r+0xcc>)
 800cada:	b570      	push	{r4, r5, r6, lr}
 800cadc:	681d      	ldr	r5, [r3, #0]
 800cade:	4606      	mov	r6, r0
 800cae0:	460c      	mov	r4, r1
 800cae2:	b125      	cbz	r5, 800caee <__swsetup_r+0x16>
 800cae4:	69ab      	ldr	r3, [r5, #24]
 800cae6:	b913      	cbnz	r3, 800caee <__swsetup_r+0x16>
 800cae8:	4628      	mov	r0, r5
 800caea:	f000 f985 	bl	800cdf8 <__sinit>
 800caee:	4b2e      	ldr	r3, [pc, #184]	; (800cba8 <__swsetup_r+0xd0>)
 800caf0:	429c      	cmp	r4, r3
 800caf2:	d10f      	bne.n	800cb14 <__swsetup_r+0x3c>
 800caf4:	686c      	ldr	r4, [r5, #4]
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cafc:	0719      	lsls	r1, r3, #28
 800cafe:	d42c      	bmi.n	800cb5a <__swsetup_r+0x82>
 800cb00:	06dd      	lsls	r5, r3, #27
 800cb02:	d411      	bmi.n	800cb28 <__swsetup_r+0x50>
 800cb04:	2309      	movs	r3, #9
 800cb06:	6033      	str	r3, [r6, #0]
 800cb08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb0c:	81a3      	strh	r3, [r4, #12]
 800cb0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb12:	e03e      	b.n	800cb92 <__swsetup_r+0xba>
 800cb14:	4b25      	ldr	r3, [pc, #148]	; (800cbac <__swsetup_r+0xd4>)
 800cb16:	429c      	cmp	r4, r3
 800cb18:	d101      	bne.n	800cb1e <__swsetup_r+0x46>
 800cb1a:	68ac      	ldr	r4, [r5, #8]
 800cb1c:	e7eb      	b.n	800caf6 <__swsetup_r+0x1e>
 800cb1e:	4b24      	ldr	r3, [pc, #144]	; (800cbb0 <__swsetup_r+0xd8>)
 800cb20:	429c      	cmp	r4, r3
 800cb22:	bf08      	it	eq
 800cb24:	68ec      	ldreq	r4, [r5, #12]
 800cb26:	e7e6      	b.n	800caf6 <__swsetup_r+0x1e>
 800cb28:	0758      	lsls	r0, r3, #29
 800cb2a:	d512      	bpl.n	800cb52 <__swsetup_r+0x7a>
 800cb2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb2e:	b141      	cbz	r1, 800cb42 <__swsetup_r+0x6a>
 800cb30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb34:	4299      	cmp	r1, r3
 800cb36:	d002      	beq.n	800cb3e <__swsetup_r+0x66>
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff fb67 	bl	800c20c <_free_r>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	6363      	str	r3, [r4, #52]	; 0x34
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb48:	81a3      	strh	r3, [r4, #12]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	6063      	str	r3, [r4, #4]
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f043 0308 	orr.w	r3, r3, #8
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	6923      	ldr	r3, [r4, #16]
 800cb5c:	b94b      	cbnz	r3, 800cb72 <__swsetup_r+0x9a>
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb68:	d003      	beq.n	800cb72 <__swsetup_r+0x9a>
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f000 fa07 	bl	800cf80 <__smakebuf_r>
 800cb72:	89a0      	ldrh	r0, [r4, #12]
 800cb74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb78:	f010 0301 	ands.w	r3, r0, #1
 800cb7c:	d00a      	beq.n	800cb94 <__swsetup_r+0xbc>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	60a3      	str	r3, [r4, #8]
 800cb82:	6963      	ldr	r3, [r4, #20]
 800cb84:	425b      	negs	r3, r3
 800cb86:	61a3      	str	r3, [r4, #24]
 800cb88:	6923      	ldr	r3, [r4, #16]
 800cb8a:	b943      	cbnz	r3, 800cb9e <__swsetup_r+0xc6>
 800cb8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb90:	d1ba      	bne.n	800cb08 <__swsetup_r+0x30>
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	0781      	lsls	r1, r0, #30
 800cb96:	bf58      	it	pl
 800cb98:	6963      	ldrpl	r3, [r4, #20]
 800cb9a:	60a3      	str	r3, [r4, #8]
 800cb9c:	e7f4      	b.n	800cb88 <__swsetup_r+0xb0>
 800cb9e:	2000      	movs	r0, #0
 800cba0:	e7f7      	b.n	800cb92 <__swsetup_r+0xba>
 800cba2:	bf00      	nop
 800cba4:	20000034 	.word	0x20000034
 800cba8:	0800d95c 	.word	0x0800d95c
 800cbac:	0800d97c 	.word	0x0800d97c
 800cbb0:	0800d93c 	.word	0x0800d93c

0800cbb4 <abort>:
 800cbb4:	b508      	push	{r3, lr}
 800cbb6:	2006      	movs	r0, #6
 800cbb8:	f000 fa52 	bl	800d060 <raise>
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	f7f5 ff9f 	bl	8002b00 <_exit>
	...

0800cbc4 <__sflush_r>:
 800cbc4:	898a      	ldrh	r2, [r1, #12]
 800cbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbca:	4605      	mov	r5, r0
 800cbcc:	0710      	lsls	r0, r2, #28
 800cbce:	460c      	mov	r4, r1
 800cbd0:	d458      	bmi.n	800cc84 <__sflush_r+0xc0>
 800cbd2:	684b      	ldr	r3, [r1, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	dc05      	bgt.n	800cbe4 <__sflush_r+0x20>
 800cbd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	dc02      	bgt.n	800cbe4 <__sflush_r+0x20>
 800cbde:	2000      	movs	r0, #0
 800cbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbe6:	2e00      	cmp	r6, #0
 800cbe8:	d0f9      	beq.n	800cbde <__sflush_r+0x1a>
 800cbea:	2300      	movs	r3, #0
 800cbec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbf0:	682f      	ldr	r7, [r5, #0]
 800cbf2:	602b      	str	r3, [r5, #0]
 800cbf4:	d032      	beq.n	800cc5c <__sflush_r+0x98>
 800cbf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	075a      	lsls	r2, r3, #29
 800cbfc:	d505      	bpl.n	800cc0a <__sflush_r+0x46>
 800cbfe:	6863      	ldr	r3, [r4, #4]
 800cc00:	1ac0      	subs	r0, r0, r3
 800cc02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc04:	b10b      	cbz	r3, 800cc0a <__sflush_r+0x46>
 800cc06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc08:	1ac0      	subs	r0, r0, r3
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc10:	6a21      	ldr	r1, [r4, #32]
 800cc12:	4628      	mov	r0, r5
 800cc14:	47b0      	blx	r6
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	d106      	bne.n	800cc2a <__sflush_r+0x66>
 800cc1c:	6829      	ldr	r1, [r5, #0]
 800cc1e:	291d      	cmp	r1, #29
 800cc20:	d82c      	bhi.n	800cc7c <__sflush_r+0xb8>
 800cc22:	4a2a      	ldr	r2, [pc, #168]	; (800cccc <__sflush_r+0x108>)
 800cc24:	40ca      	lsrs	r2, r1
 800cc26:	07d6      	lsls	r6, r2, #31
 800cc28:	d528      	bpl.n	800cc7c <__sflush_r+0xb8>
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	6062      	str	r2, [r4, #4]
 800cc2e:	04d9      	lsls	r1, r3, #19
 800cc30:	6922      	ldr	r2, [r4, #16]
 800cc32:	6022      	str	r2, [r4, #0]
 800cc34:	d504      	bpl.n	800cc40 <__sflush_r+0x7c>
 800cc36:	1c42      	adds	r2, r0, #1
 800cc38:	d101      	bne.n	800cc3e <__sflush_r+0x7a>
 800cc3a:	682b      	ldr	r3, [r5, #0]
 800cc3c:	b903      	cbnz	r3, 800cc40 <__sflush_r+0x7c>
 800cc3e:	6560      	str	r0, [r4, #84]	; 0x54
 800cc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc42:	602f      	str	r7, [r5, #0]
 800cc44:	2900      	cmp	r1, #0
 800cc46:	d0ca      	beq.n	800cbde <__sflush_r+0x1a>
 800cc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc4c:	4299      	cmp	r1, r3
 800cc4e:	d002      	beq.n	800cc56 <__sflush_r+0x92>
 800cc50:	4628      	mov	r0, r5
 800cc52:	f7ff fadb 	bl	800c20c <_free_r>
 800cc56:	2000      	movs	r0, #0
 800cc58:	6360      	str	r0, [r4, #52]	; 0x34
 800cc5a:	e7c1      	b.n	800cbe0 <__sflush_r+0x1c>
 800cc5c:	6a21      	ldr	r1, [r4, #32]
 800cc5e:	2301      	movs	r3, #1
 800cc60:	4628      	mov	r0, r5
 800cc62:	47b0      	blx	r6
 800cc64:	1c41      	adds	r1, r0, #1
 800cc66:	d1c7      	bne.n	800cbf8 <__sflush_r+0x34>
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0c4      	beq.n	800cbf8 <__sflush_r+0x34>
 800cc6e:	2b1d      	cmp	r3, #29
 800cc70:	d001      	beq.n	800cc76 <__sflush_r+0xb2>
 800cc72:	2b16      	cmp	r3, #22
 800cc74:	d101      	bne.n	800cc7a <__sflush_r+0xb6>
 800cc76:	602f      	str	r7, [r5, #0]
 800cc78:	e7b1      	b.n	800cbde <__sflush_r+0x1a>
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc80:	81a3      	strh	r3, [r4, #12]
 800cc82:	e7ad      	b.n	800cbe0 <__sflush_r+0x1c>
 800cc84:	690f      	ldr	r7, [r1, #16]
 800cc86:	2f00      	cmp	r7, #0
 800cc88:	d0a9      	beq.n	800cbde <__sflush_r+0x1a>
 800cc8a:	0793      	lsls	r3, r2, #30
 800cc8c:	680e      	ldr	r6, [r1, #0]
 800cc8e:	bf08      	it	eq
 800cc90:	694b      	ldreq	r3, [r1, #20]
 800cc92:	600f      	str	r7, [r1, #0]
 800cc94:	bf18      	it	ne
 800cc96:	2300      	movne	r3, #0
 800cc98:	eba6 0807 	sub.w	r8, r6, r7
 800cc9c:	608b      	str	r3, [r1, #8]
 800cc9e:	f1b8 0f00 	cmp.w	r8, #0
 800cca2:	dd9c      	ble.n	800cbde <__sflush_r+0x1a>
 800cca4:	6a21      	ldr	r1, [r4, #32]
 800cca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cca8:	4643      	mov	r3, r8
 800ccaa:	463a      	mov	r2, r7
 800ccac:	4628      	mov	r0, r5
 800ccae:	47b0      	blx	r6
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	dc06      	bgt.n	800ccc2 <__sflush_r+0xfe>
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccba:	81a3      	strh	r3, [r4, #12]
 800ccbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc0:	e78e      	b.n	800cbe0 <__sflush_r+0x1c>
 800ccc2:	4407      	add	r7, r0
 800ccc4:	eba8 0800 	sub.w	r8, r8, r0
 800ccc8:	e7e9      	b.n	800cc9e <__sflush_r+0xda>
 800ccca:	bf00      	nop
 800cccc:	20400001 	.word	0x20400001

0800ccd0 <_fflush_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	690b      	ldr	r3, [r1, #16]
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	b913      	cbnz	r3, 800cce0 <_fflush_r+0x10>
 800ccda:	2500      	movs	r5, #0
 800ccdc:	4628      	mov	r0, r5
 800ccde:	bd38      	pop	{r3, r4, r5, pc}
 800cce0:	b118      	cbz	r0, 800ccea <_fflush_r+0x1a>
 800cce2:	6983      	ldr	r3, [r0, #24]
 800cce4:	b90b      	cbnz	r3, 800ccea <_fflush_r+0x1a>
 800cce6:	f000 f887 	bl	800cdf8 <__sinit>
 800ccea:	4b14      	ldr	r3, [pc, #80]	; (800cd3c <_fflush_r+0x6c>)
 800ccec:	429c      	cmp	r4, r3
 800ccee:	d11b      	bne.n	800cd28 <_fflush_r+0x58>
 800ccf0:	686c      	ldr	r4, [r5, #4]
 800ccf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0ef      	beq.n	800ccda <_fflush_r+0xa>
 800ccfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ccfc:	07d0      	lsls	r0, r2, #31
 800ccfe:	d404      	bmi.n	800cd0a <_fflush_r+0x3a>
 800cd00:	0599      	lsls	r1, r3, #22
 800cd02:	d402      	bmi.n	800cd0a <_fflush_r+0x3a>
 800cd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd06:	f000 f915 	bl	800cf34 <__retarget_lock_acquire_recursive>
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	f7ff ff59 	bl	800cbc4 <__sflush_r>
 800cd12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd14:	07da      	lsls	r2, r3, #31
 800cd16:	4605      	mov	r5, r0
 800cd18:	d4e0      	bmi.n	800ccdc <_fflush_r+0xc>
 800cd1a:	89a3      	ldrh	r3, [r4, #12]
 800cd1c:	059b      	lsls	r3, r3, #22
 800cd1e:	d4dd      	bmi.n	800ccdc <_fflush_r+0xc>
 800cd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd22:	f000 f908 	bl	800cf36 <__retarget_lock_release_recursive>
 800cd26:	e7d9      	b.n	800ccdc <_fflush_r+0xc>
 800cd28:	4b05      	ldr	r3, [pc, #20]	; (800cd40 <_fflush_r+0x70>)
 800cd2a:	429c      	cmp	r4, r3
 800cd2c:	d101      	bne.n	800cd32 <_fflush_r+0x62>
 800cd2e:	68ac      	ldr	r4, [r5, #8]
 800cd30:	e7df      	b.n	800ccf2 <_fflush_r+0x22>
 800cd32:	4b04      	ldr	r3, [pc, #16]	; (800cd44 <_fflush_r+0x74>)
 800cd34:	429c      	cmp	r4, r3
 800cd36:	bf08      	it	eq
 800cd38:	68ec      	ldreq	r4, [r5, #12]
 800cd3a:	e7da      	b.n	800ccf2 <_fflush_r+0x22>
 800cd3c:	0800d95c 	.word	0x0800d95c
 800cd40:	0800d97c 	.word	0x0800d97c
 800cd44:	0800d93c 	.word	0x0800d93c

0800cd48 <std>:
 800cd48:	2300      	movs	r3, #0
 800cd4a:	b510      	push	{r4, lr}
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	e9c0 3300 	strd	r3, r3, [r0]
 800cd52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd56:	6083      	str	r3, [r0, #8]
 800cd58:	8181      	strh	r1, [r0, #12]
 800cd5a:	6643      	str	r3, [r0, #100]	; 0x64
 800cd5c:	81c2      	strh	r2, [r0, #14]
 800cd5e:	6183      	str	r3, [r0, #24]
 800cd60:	4619      	mov	r1, r3
 800cd62:	2208      	movs	r2, #8
 800cd64:	305c      	adds	r0, #92	; 0x5c
 800cd66:	f7fc f8ab 	bl	8008ec0 <memset>
 800cd6a:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <std+0x38>)
 800cd6c:	6263      	str	r3, [r4, #36]	; 0x24
 800cd6e:	4b05      	ldr	r3, [pc, #20]	; (800cd84 <std+0x3c>)
 800cd70:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd72:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <std+0x40>)
 800cd74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd76:	4b05      	ldr	r3, [pc, #20]	; (800cd8c <std+0x44>)
 800cd78:	6224      	str	r4, [r4, #32]
 800cd7a:	6323      	str	r3, [r4, #48]	; 0x30
 800cd7c:	bd10      	pop	{r4, pc}
 800cd7e:	bf00      	nop
 800cd80:	0800d099 	.word	0x0800d099
 800cd84:	0800d0bb 	.word	0x0800d0bb
 800cd88:	0800d0f3 	.word	0x0800d0f3
 800cd8c:	0800d117 	.word	0x0800d117

0800cd90 <_cleanup_r>:
 800cd90:	4901      	ldr	r1, [pc, #4]	; (800cd98 <_cleanup_r+0x8>)
 800cd92:	f000 b8af 	b.w	800cef4 <_fwalk_reent>
 800cd96:	bf00      	nop
 800cd98:	0800ccd1 	.word	0x0800ccd1

0800cd9c <__sfmoreglue>:
 800cd9c:	b570      	push	{r4, r5, r6, lr}
 800cd9e:	1e4a      	subs	r2, r1, #1
 800cda0:	2568      	movs	r5, #104	; 0x68
 800cda2:	4355      	muls	r5, r2
 800cda4:	460e      	mov	r6, r1
 800cda6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdaa:	f7ff fa7f 	bl	800c2ac <_malloc_r>
 800cdae:	4604      	mov	r4, r0
 800cdb0:	b140      	cbz	r0, 800cdc4 <__sfmoreglue+0x28>
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	e9c0 1600 	strd	r1, r6, [r0]
 800cdb8:	300c      	adds	r0, #12
 800cdba:	60a0      	str	r0, [r4, #8]
 800cdbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdc0:	f7fc f87e 	bl	8008ec0 <memset>
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}

0800cdc8 <__sfp_lock_acquire>:
 800cdc8:	4801      	ldr	r0, [pc, #4]	; (800cdd0 <__sfp_lock_acquire+0x8>)
 800cdca:	f000 b8b3 	b.w	800cf34 <__retarget_lock_acquire_recursive>
 800cdce:	bf00      	nop
 800cdd0:	20000d04 	.word	0x20000d04

0800cdd4 <__sfp_lock_release>:
 800cdd4:	4801      	ldr	r0, [pc, #4]	; (800cddc <__sfp_lock_release+0x8>)
 800cdd6:	f000 b8ae 	b.w	800cf36 <__retarget_lock_release_recursive>
 800cdda:	bf00      	nop
 800cddc:	20000d04 	.word	0x20000d04

0800cde0 <__sinit_lock_acquire>:
 800cde0:	4801      	ldr	r0, [pc, #4]	; (800cde8 <__sinit_lock_acquire+0x8>)
 800cde2:	f000 b8a7 	b.w	800cf34 <__retarget_lock_acquire_recursive>
 800cde6:	bf00      	nop
 800cde8:	20000cff 	.word	0x20000cff

0800cdec <__sinit_lock_release>:
 800cdec:	4801      	ldr	r0, [pc, #4]	; (800cdf4 <__sinit_lock_release+0x8>)
 800cdee:	f000 b8a2 	b.w	800cf36 <__retarget_lock_release_recursive>
 800cdf2:	bf00      	nop
 800cdf4:	20000cff 	.word	0x20000cff

0800cdf8 <__sinit>:
 800cdf8:	b510      	push	{r4, lr}
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	f7ff fff0 	bl	800cde0 <__sinit_lock_acquire>
 800ce00:	69a3      	ldr	r3, [r4, #24]
 800ce02:	b11b      	cbz	r3, 800ce0c <__sinit+0x14>
 800ce04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce08:	f7ff bff0 	b.w	800cdec <__sinit_lock_release>
 800ce0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce10:	6523      	str	r3, [r4, #80]	; 0x50
 800ce12:	4b13      	ldr	r3, [pc, #76]	; (800ce60 <__sinit+0x68>)
 800ce14:	4a13      	ldr	r2, [pc, #76]	; (800ce64 <__sinit+0x6c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce1a:	42a3      	cmp	r3, r4
 800ce1c:	bf04      	itt	eq
 800ce1e:	2301      	moveq	r3, #1
 800ce20:	61a3      	streq	r3, [r4, #24]
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 f820 	bl	800ce68 <__sfp>
 800ce28:	6060      	str	r0, [r4, #4]
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 f81c 	bl	800ce68 <__sfp>
 800ce30:	60a0      	str	r0, [r4, #8]
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 f818 	bl	800ce68 <__sfp>
 800ce38:	2200      	movs	r2, #0
 800ce3a:	60e0      	str	r0, [r4, #12]
 800ce3c:	2104      	movs	r1, #4
 800ce3e:	6860      	ldr	r0, [r4, #4]
 800ce40:	f7ff ff82 	bl	800cd48 <std>
 800ce44:	68a0      	ldr	r0, [r4, #8]
 800ce46:	2201      	movs	r2, #1
 800ce48:	2109      	movs	r1, #9
 800ce4a:	f7ff ff7d 	bl	800cd48 <std>
 800ce4e:	68e0      	ldr	r0, [r4, #12]
 800ce50:	2202      	movs	r2, #2
 800ce52:	2112      	movs	r1, #18
 800ce54:	f7ff ff78 	bl	800cd48 <std>
 800ce58:	2301      	movs	r3, #1
 800ce5a:	61a3      	str	r3, [r4, #24]
 800ce5c:	e7d2      	b.n	800ce04 <__sinit+0xc>
 800ce5e:	bf00      	nop
 800ce60:	0800d4f0 	.word	0x0800d4f0
 800ce64:	0800cd91 	.word	0x0800cd91

0800ce68 <__sfp>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	4607      	mov	r7, r0
 800ce6c:	f7ff ffac 	bl	800cdc8 <__sfp_lock_acquire>
 800ce70:	4b1e      	ldr	r3, [pc, #120]	; (800ceec <__sfp+0x84>)
 800ce72:	681e      	ldr	r6, [r3, #0]
 800ce74:	69b3      	ldr	r3, [r6, #24]
 800ce76:	b913      	cbnz	r3, 800ce7e <__sfp+0x16>
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f7ff ffbd 	bl	800cdf8 <__sinit>
 800ce7e:	3648      	adds	r6, #72	; 0x48
 800ce80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce84:	3b01      	subs	r3, #1
 800ce86:	d503      	bpl.n	800ce90 <__sfp+0x28>
 800ce88:	6833      	ldr	r3, [r6, #0]
 800ce8a:	b30b      	cbz	r3, 800ced0 <__sfp+0x68>
 800ce8c:	6836      	ldr	r6, [r6, #0]
 800ce8e:	e7f7      	b.n	800ce80 <__sfp+0x18>
 800ce90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce94:	b9d5      	cbnz	r5, 800cecc <__sfp+0x64>
 800ce96:	4b16      	ldr	r3, [pc, #88]	; (800cef0 <__sfp+0x88>)
 800ce98:	60e3      	str	r3, [r4, #12]
 800ce9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce9e:	6665      	str	r5, [r4, #100]	; 0x64
 800cea0:	f000 f847 	bl	800cf32 <__retarget_lock_init_recursive>
 800cea4:	f7ff ff96 	bl	800cdd4 <__sfp_lock_release>
 800cea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ceac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ceb0:	6025      	str	r5, [r4, #0]
 800ceb2:	61a5      	str	r5, [r4, #24]
 800ceb4:	2208      	movs	r2, #8
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cebc:	f7fc f800 	bl	8008ec0 <memset>
 800cec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cec8:	4620      	mov	r0, r4
 800ceca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cecc:	3468      	adds	r4, #104	; 0x68
 800cece:	e7d9      	b.n	800ce84 <__sfp+0x1c>
 800ced0:	2104      	movs	r1, #4
 800ced2:	4638      	mov	r0, r7
 800ced4:	f7ff ff62 	bl	800cd9c <__sfmoreglue>
 800ced8:	4604      	mov	r4, r0
 800ceda:	6030      	str	r0, [r6, #0]
 800cedc:	2800      	cmp	r0, #0
 800cede:	d1d5      	bne.n	800ce8c <__sfp+0x24>
 800cee0:	f7ff ff78 	bl	800cdd4 <__sfp_lock_release>
 800cee4:	230c      	movs	r3, #12
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	e7ee      	b.n	800cec8 <__sfp+0x60>
 800ceea:	bf00      	nop
 800ceec:	0800d4f0 	.word	0x0800d4f0
 800cef0:	ffff0001 	.word	0xffff0001

0800cef4 <_fwalk_reent>:
 800cef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef8:	4606      	mov	r6, r0
 800cefa:	4688      	mov	r8, r1
 800cefc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf00:	2700      	movs	r7, #0
 800cf02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf06:	f1b9 0901 	subs.w	r9, r9, #1
 800cf0a:	d505      	bpl.n	800cf18 <_fwalk_reent+0x24>
 800cf0c:	6824      	ldr	r4, [r4, #0]
 800cf0e:	2c00      	cmp	r4, #0
 800cf10:	d1f7      	bne.n	800cf02 <_fwalk_reent+0xe>
 800cf12:	4638      	mov	r0, r7
 800cf14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf18:	89ab      	ldrh	r3, [r5, #12]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d907      	bls.n	800cf2e <_fwalk_reent+0x3a>
 800cf1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf22:	3301      	adds	r3, #1
 800cf24:	d003      	beq.n	800cf2e <_fwalk_reent+0x3a>
 800cf26:	4629      	mov	r1, r5
 800cf28:	4630      	mov	r0, r6
 800cf2a:	47c0      	blx	r8
 800cf2c:	4307      	orrs	r7, r0
 800cf2e:	3568      	adds	r5, #104	; 0x68
 800cf30:	e7e9      	b.n	800cf06 <_fwalk_reent+0x12>

0800cf32 <__retarget_lock_init_recursive>:
 800cf32:	4770      	bx	lr

0800cf34 <__retarget_lock_acquire_recursive>:
 800cf34:	4770      	bx	lr

0800cf36 <__retarget_lock_release_recursive>:
 800cf36:	4770      	bx	lr

0800cf38 <__swhatbuf_r>:
 800cf38:	b570      	push	{r4, r5, r6, lr}
 800cf3a:	460e      	mov	r6, r1
 800cf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf40:	2900      	cmp	r1, #0
 800cf42:	b096      	sub	sp, #88	; 0x58
 800cf44:	4614      	mov	r4, r2
 800cf46:	461d      	mov	r5, r3
 800cf48:	da07      	bge.n	800cf5a <__swhatbuf_r+0x22>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	602b      	str	r3, [r5, #0]
 800cf4e:	89b3      	ldrh	r3, [r6, #12]
 800cf50:	061a      	lsls	r2, r3, #24
 800cf52:	d410      	bmi.n	800cf76 <__swhatbuf_r+0x3e>
 800cf54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf58:	e00e      	b.n	800cf78 <__swhatbuf_r+0x40>
 800cf5a:	466a      	mov	r2, sp
 800cf5c:	f000 f902 	bl	800d164 <_fstat_r>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	dbf2      	blt.n	800cf4a <__swhatbuf_r+0x12>
 800cf64:	9a01      	ldr	r2, [sp, #4]
 800cf66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf6e:	425a      	negs	r2, r3
 800cf70:	415a      	adcs	r2, r3
 800cf72:	602a      	str	r2, [r5, #0]
 800cf74:	e7ee      	b.n	800cf54 <__swhatbuf_r+0x1c>
 800cf76:	2340      	movs	r3, #64	; 0x40
 800cf78:	2000      	movs	r0, #0
 800cf7a:	6023      	str	r3, [r4, #0]
 800cf7c:	b016      	add	sp, #88	; 0x58
 800cf7e:	bd70      	pop	{r4, r5, r6, pc}

0800cf80 <__smakebuf_r>:
 800cf80:	898b      	ldrh	r3, [r1, #12]
 800cf82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf84:	079d      	lsls	r5, r3, #30
 800cf86:	4606      	mov	r6, r0
 800cf88:	460c      	mov	r4, r1
 800cf8a:	d507      	bpl.n	800cf9c <__smakebuf_r+0x1c>
 800cf8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	6123      	str	r3, [r4, #16]
 800cf94:	2301      	movs	r3, #1
 800cf96:	6163      	str	r3, [r4, #20]
 800cf98:	b002      	add	sp, #8
 800cf9a:	bd70      	pop	{r4, r5, r6, pc}
 800cf9c:	ab01      	add	r3, sp, #4
 800cf9e:	466a      	mov	r2, sp
 800cfa0:	f7ff ffca 	bl	800cf38 <__swhatbuf_r>
 800cfa4:	9900      	ldr	r1, [sp, #0]
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f7ff f97f 	bl	800c2ac <_malloc_r>
 800cfae:	b948      	cbnz	r0, 800cfc4 <__smakebuf_r+0x44>
 800cfb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfb4:	059a      	lsls	r2, r3, #22
 800cfb6:	d4ef      	bmi.n	800cf98 <__smakebuf_r+0x18>
 800cfb8:	f023 0303 	bic.w	r3, r3, #3
 800cfbc:	f043 0302 	orr.w	r3, r3, #2
 800cfc0:	81a3      	strh	r3, [r4, #12]
 800cfc2:	e7e3      	b.n	800cf8c <__smakebuf_r+0xc>
 800cfc4:	4b0d      	ldr	r3, [pc, #52]	; (800cffc <__smakebuf_r+0x7c>)
 800cfc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	6020      	str	r0, [r4, #0]
 800cfcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfd0:	81a3      	strh	r3, [r4, #12]
 800cfd2:	9b00      	ldr	r3, [sp, #0]
 800cfd4:	6163      	str	r3, [r4, #20]
 800cfd6:	9b01      	ldr	r3, [sp, #4]
 800cfd8:	6120      	str	r0, [r4, #16]
 800cfda:	b15b      	cbz	r3, 800cff4 <__smakebuf_r+0x74>
 800cfdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f000 f8d1 	bl	800d188 <_isatty_r>
 800cfe6:	b128      	cbz	r0, 800cff4 <__smakebuf_r+0x74>
 800cfe8:	89a3      	ldrh	r3, [r4, #12]
 800cfea:	f023 0303 	bic.w	r3, r3, #3
 800cfee:	f043 0301 	orr.w	r3, r3, #1
 800cff2:	81a3      	strh	r3, [r4, #12]
 800cff4:	89a0      	ldrh	r0, [r4, #12]
 800cff6:	4305      	orrs	r5, r0
 800cff8:	81a5      	strh	r5, [r4, #12]
 800cffa:	e7cd      	b.n	800cf98 <__smakebuf_r+0x18>
 800cffc:	0800cd91 	.word	0x0800cd91

0800d000 <_malloc_usable_size_r>:
 800d000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d004:	1f18      	subs	r0, r3, #4
 800d006:	2b00      	cmp	r3, #0
 800d008:	bfbc      	itt	lt
 800d00a:	580b      	ldrlt	r3, [r1, r0]
 800d00c:	18c0      	addlt	r0, r0, r3
 800d00e:	4770      	bx	lr

0800d010 <_raise_r>:
 800d010:	291f      	cmp	r1, #31
 800d012:	b538      	push	{r3, r4, r5, lr}
 800d014:	4604      	mov	r4, r0
 800d016:	460d      	mov	r5, r1
 800d018:	d904      	bls.n	800d024 <_raise_r+0x14>
 800d01a:	2316      	movs	r3, #22
 800d01c:	6003      	str	r3, [r0, #0]
 800d01e:	f04f 30ff 	mov.w	r0, #4294967295
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d026:	b112      	cbz	r2, 800d02e <_raise_r+0x1e>
 800d028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d02c:	b94b      	cbnz	r3, 800d042 <_raise_r+0x32>
 800d02e:	4620      	mov	r0, r4
 800d030:	f000 f830 	bl	800d094 <_getpid_r>
 800d034:	462a      	mov	r2, r5
 800d036:	4601      	mov	r1, r0
 800d038:	4620      	mov	r0, r4
 800d03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d03e:	f000 b817 	b.w	800d070 <_kill_r>
 800d042:	2b01      	cmp	r3, #1
 800d044:	d00a      	beq.n	800d05c <_raise_r+0x4c>
 800d046:	1c59      	adds	r1, r3, #1
 800d048:	d103      	bne.n	800d052 <_raise_r+0x42>
 800d04a:	2316      	movs	r3, #22
 800d04c:	6003      	str	r3, [r0, #0]
 800d04e:	2001      	movs	r0, #1
 800d050:	e7e7      	b.n	800d022 <_raise_r+0x12>
 800d052:	2400      	movs	r4, #0
 800d054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d058:	4628      	mov	r0, r5
 800d05a:	4798      	blx	r3
 800d05c:	2000      	movs	r0, #0
 800d05e:	e7e0      	b.n	800d022 <_raise_r+0x12>

0800d060 <raise>:
 800d060:	4b02      	ldr	r3, [pc, #8]	; (800d06c <raise+0xc>)
 800d062:	4601      	mov	r1, r0
 800d064:	6818      	ldr	r0, [r3, #0]
 800d066:	f7ff bfd3 	b.w	800d010 <_raise_r>
 800d06a:	bf00      	nop
 800d06c:	20000034 	.word	0x20000034

0800d070 <_kill_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4d07      	ldr	r5, [pc, #28]	; (800d090 <_kill_r+0x20>)
 800d074:	2300      	movs	r3, #0
 800d076:	4604      	mov	r4, r0
 800d078:	4608      	mov	r0, r1
 800d07a:	4611      	mov	r1, r2
 800d07c:	602b      	str	r3, [r5, #0]
 800d07e:	f7f5 fd2f 	bl	8002ae0 <_kill>
 800d082:	1c43      	adds	r3, r0, #1
 800d084:	d102      	bne.n	800d08c <_kill_r+0x1c>
 800d086:	682b      	ldr	r3, [r5, #0]
 800d088:	b103      	cbz	r3, 800d08c <_kill_r+0x1c>
 800d08a:	6023      	str	r3, [r4, #0]
 800d08c:	bd38      	pop	{r3, r4, r5, pc}
 800d08e:	bf00      	nop
 800d090:	20000cf8 	.word	0x20000cf8

0800d094 <_getpid_r>:
 800d094:	f7f5 bd1c 	b.w	8002ad0 <_getpid>

0800d098 <__sread>:
 800d098:	b510      	push	{r4, lr}
 800d09a:	460c      	mov	r4, r1
 800d09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a0:	f000 f894 	bl	800d1cc <_read_r>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	bfab      	itete	ge
 800d0a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d0ac:	181b      	addge	r3, r3, r0
 800d0ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0b2:	bfac      	ite	ge
 800d0b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0b6:	81a3      	strhlt	r3, [r4, #12]
 800d0b8:	bd10      	pop	{r4, pc}

0800d0ba <__swrite>:
 800d0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0be:	461f      	mov	r7, r3
 800d0c0:	898b      	ldrh	r3, [r1, #12]
 800d0c2:	05db      	lsls	r3, r3, #23
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	4616      	mov	r6, r2
 800d0ca:	d505      	bpl.n	800d0d8 <__swrite+0x1e>
 800d0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f000 f868 	bl	800d1a8 <_lseek_r>
 800d0d8:	89a3      	ldrh	r3, [r4, #12]
 800d0da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0e2:	81a3      	strh	r3, [r4, #12]
 800d0e4:	4632      	mov	r2, r6
 800d0e6:	463b      	mov	r3, r7
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ee:	f000 b817 	b.w	800d120 <_write_r>

0800d0f2 <__sseek>:
 800d0f2:	b510      	push	{r4, lr}
 800d0f4:	460c      	mov	r4, r1
 800d0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0fa:	f000 f855 	bl	800d1a8 <_lseek_r>
 800d0fe:	1c43      	adds	r3, r0, #1
 800d100:	89a3      	ldrh	r3, [r4, #12]
 800d102:	bf15      	itete	ne
 800d104:	6560      	strne	r0, [r4, #84]	; 0x54
 800d106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d10a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d10e:	81a3      	strheq	r3, [r4, #12]
 800d110:	bf18      	it	ne
 800d112:	81a3      	strhne	r3, [r4, #12]
 800d114:	bd10      	pop	{r4, pc}

0800d116 <__sclose>:
 800d116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d11a:	f000 b813 	b.w	800d144 <_close_r>
	...

0800d120 <_write_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4d07      	ldr	r5, [pc, #28]	; (800d140 <_write_r+0x20>)
 800d124:	4604      	mov	r4, r0
 800d126:	4608      	mov	r0, r1
 800d128:	4611      	mov	r1, r2
 800d12a:	2200      	movs	r2, #0
 800d12c:	602a      	str	r2, [r5, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	f7f5 fd0d 	bl	8002b4e <_write>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_write_r+0x1e>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_write_r+0x1e>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	20000cf8 	.word	0x20000cf8

0800d144 <_close_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	4d06      	ldr	r5, [pc, #24]	; (800d160 <_close_r+0x1c>)
 800d148:	2300      	movs	r3, #0
 800d14a:	4604      	mov	r4, r0
 800d14c:	4608      	mov	r0, r1
 800d14e:	602b      	str	r3, [r5, #0]
 800d150:	f7f5 fd19 	bl	8002b86 <_close>
 800d154:	1c43      	adds	r3, r0, #1
 800d156:	d102      	bne.n	800d15e <_close_r+0x1a>
 800d158:	682b      	ldr	r3, [r5, #0]
 800d15a:	b103      	cbz	r3, 800d15e <_close_r+0x1a>
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	bd38      	pop	{r3, r4, r5, pc}
 800d160:	20000cf8 	.word	0x20000cf8

0800d164 <_fstat_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4d07      	ldr	r5, [pc, #28]	; (800d184 <_fstat_r+0x20>)
 800d168:	2300      	movs	r3, #0
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	4611      	mov	r1, r2
 800d170:	602b      	str	r3, [r5, #0]
 800d172:	f7f5 fd14 	bl	8002b9e <_fstat>
 800d176:	1c43      	adds	r3, r0, #1
 800d178:	d102      	bne.n	800d180 <_fstat_r+0x1c>
 800d17a:	682b      	ldr	r3, [r5, #0]
 800d17c:	b103      	cbz	r3, 800d180 <_fstat_r+0x1c>
 800d17e:	6023      	str	r3, [r4, #0]
 800d180:	bd38      	pop	{r3, r4, r5, pc}
 800d182:	bf00      	nop
 800d184:	20000cf8 	.word	0x20000cf8

0800d188 <_isatty_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4d06      	ldr	r5, [pc, #24]	; (800d1a4 <_isatty_r+0x1c>)
 800d18c:	2300      	movs	r3, #0
 800d18e:	4604      	mov	r4, r0
 800d190:	4608      	mov	r0, r1
 800d192:	602b      	str	r3, [r5, #0]
 800d194:	f7f5 fd13 	bl	8002bbe <_isatty>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d102      	bne.n	800d1a2 <_isatty_r+0x1a>
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	b103      	cbz	r3, 800d1a2 <_isatty_r+0x1a>
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	20000cf8 	.word	0x20000cf8

0800d1a8 <_lseek_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4d07      	ldr	r5, [pc, #28]	; (800d1c8 <_lseek_r+0x20>)
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	602a      	str	r2, [r5, #0]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	f7f5 fd0c 	bl	8002bd4 <_lseek>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	d102      	bne.n	800d1c6 <_lseek_r+0x1e>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	b103      	cbz	r3, 800d1c6 <_lseek_r+0x1e>
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	20000cf8 	.word	0x20000cf8

0800d1cc <_read_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d07      	ldr	r5, [pc, #28]	; (800d1ec <_read_r+0x20>)
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	4608      	mov	r0, r1
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	602a      	str	r2, [r5, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	f7f5 fc9a 	bl	8002b14 <_read>
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	d102      	bne.n	800d1ea <_read_r+0x1e>
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	b103      	cbz	r3, 800d1ea <_read_r+0x1e>
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	20000cf8 	.word	0x20000cf8

0800d1f0 <_init>:
 800d1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f2:	bf00      	nop
 800d1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1f6:	bc08      	pop	{r3}
 800d1f8:	469e      	mov	lr, r3
 800d1fa:	4770      	bx	lr

0800d1fc <_fini>:
 800d1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fe:	bf00      	nop
 800d200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d202:	bc08      	pop	{r3}
 800d204:	469e      	mov	lr, r3
 800d206:	4770      	bx	lr
