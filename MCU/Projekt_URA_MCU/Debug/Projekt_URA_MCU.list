
Projekt_URA_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800ae68  0800ae68  0001ae68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b52c  0800b52c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800b52c  0800b52c  0001b52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b534  0800b534  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b534  0800b534  0001b534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b538  0800b538  0001b538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  20000204  0800b740  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cf0  0800b740  00020cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d6e  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041ab  00000000  00000000  00041fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00046150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  00047918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6a3  00000000  00000000  00048f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f6c5  00000000  00000000  000735bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f884a  00000000  00000000  00092c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018b4ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075a8  00000000  00000000  0018b520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ae4c 	.word	0x0800ae4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	0800ae4c 	.word	0x0800ae4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9b9 	b.w	800101c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b96e 	b.w	800101c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468c      	mov	ip, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8083 	bne.w	8000e6e <__udivmoddi4+0x116>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4617      	mov	r7, r2
 8000d6c:	d947      	bls.n	8000dfe <__udivmoddi4+0xa6>
 8000d6e:	fab2 f282 	clz	r2, r2
 8000d72:	b142      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	f1c2 0020 	rsb	r0, r2, #32
 8000d78:	fa24 f000 	lsr.w	r0, r4, r0
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	4097      	lsls	r7, r2
 8000d80:	ea40 0c01 	orr.w	ip, r0, r1
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d90:	fa1f fe87 	uxth.w	lr, r7
 8000d94:	fb08 c116 	mls	r1, r8, r6, ip
 8000d98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 8119 	bcs.w	8000fe0 <__udivmoddi4+0x288>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8116 	bls.w	8000fe0 <__udivmoddi4+0x288>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8105 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f240 8102 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000de0:	3802      	subs	r0, #2
 8000de2:	443c      	add	r4, r7
 8000de4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	b902      	cbnz	r2, 8000e02 <__udivmoddi4+0xaa>
 8000e00:	deff      	udf	#255	; 0xff
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	d150      	bne.n	8000eac <__udivmoddi4+0x154>
 8000e0a:	1bcb      	subs	r3, r1, r7
 8000e0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e10:	fa1f f887 	uxth.w	r8, r7
 8000e14:	2601      	movs	r6, #1
 8000e16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb08 f30c 	mul.w	r3, r8, ip
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0xe2>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	f200 80e9 	bhi.w	800100c <__udivmoddi4+0x2b4>
 8000e3a:	4684      	mov	ip, r0
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	b2a3      	uxth	r3, r4
 8000e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e4c:	fb08 f800 	mul.w	r8, r8, r0
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	d907      	bls.n	8000e64 <__udivmoddi4+0x10c>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5a:	d202      	bcs.n	8000e62 <__udivmoddi4+0x10a>
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	f200 80d9 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e62:	4618      	mov	r0, r3
 8000e64:	eba4 0408 	sub.w	r4, r4, r8
 8000e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e6c:	e7bf      	b.n	8000dee <__udivmoddi4+0x96>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0x12e>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80b1 	beq.w	8000fda <__udivmoddi4+0x282>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x1cc>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0x140>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80b8 	bhi.w	8001008 <__udivmoddi4+0x2b0>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0a8      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000ea6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eaa:	e7a5      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb4:	4097      	lsls	r7, r2
 8000eb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebe:	40d9      	lsrs	r1, r3
 8000ec0:	4330      	orrs	r0, r6
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec8:	fa1f f887 	uxth.w	r8, r7
 8000ecc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed4:	fb06 f108 	mul.w	r1, r6, r8
 8000ed8:	4299      	cmp	r1, r3
 8000eda:	fa04 f402 	lsl.w	r4, r4, r2
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x19c>
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee6:	f080 808d 	bcs.w	8001004 <__udivmoddi4+0x2ac>
 8000eea:	4299      	cmp	r1, r3
 8000eec:	f240 808a 	bls.w	8001004 <__udivmoddi4+0x2ac>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	443b      	add	r3, r7
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b281      	uxth	r1, r0
 8000ef8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000efc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f04:	fb00 f308 	mul.w	r3, r0, r8
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x1c4>
 8000f0c:	1879      	adds	r1, r7, r1
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d273      	bcs.n	8000ffc <__udivmoddi4+0x2a4>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d971      	bls.n	8000ffc <__udivmoddi4+0x2a4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	4439      	add	r1, r7
 8000f1c:	1acb      	subs	r3, r1, r3
 8000f1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f22:	e778      	b.n	8000e16 <__udivmoddi4+0xbe>
 8000f24:	f1c6 0c20 	rsb	ip, r6, #32
 8000f28:	fa03 f406 	lsl.w	r4, r3, r6
 8000f2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f30:	431c      	orrs	r4, r3
 8000f32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f42:	431f      	orrs	r7, r3
 8000f44:	0c3b      	lsrs	r3, r7, #16
 8000f46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4a:	fa1f f884 	uxth.w	r8, r4
 8000f4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f56:	fb09 fa08 	mul.w	sl, r9, r8
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f60:	fa00 f306 	lsl.w	r3, r0, r6
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x220>
 8000f66:	1861      	adds	r1, r4, r1
 8000f68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f6c:	d248      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000f6e:	458a      	cmp	sl, r1
 8000f70:	d946      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000f72:	f1a9 0902 	sub.w	r9, r9, #2
 8000f76:	4421      	add	r1, r4
 8000f78:	eba1 010a 	sub.w	r1, r1, sl
 8000f7c:	b2bf      	uxth	r7, r7
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f8a:	fb00 f808 	mul.w	r8, r0, r8
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x24a>
 8000f92:	19e7      	adds	r7, r4, r7
 8000f94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f98:	d22e      	bcs.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d92c      	bls.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4427      	add	r7, r4
 8000fa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa6:	eba7 0708 	sub.w	r7, r7, r8
 8000faa:	fba0 8902 	umull	r8, r9, r0, r2
 8000fae:	454f      	cmp	r7, r9
 8000fb0:	46c6      	mov	lr, r8
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	d31a      	bcc.n	8000fec <__udivmoddi4+0x294>
 8000fb6:	d017      	beq.n	8000fe8 <__udivmoddi4+0x290>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x27a>
 8000fba:	ebb3 020e 	subs.w	r2, r3, lr
 8000fbe:	eb67 0701 	sbc.w	r7, r7, r1
 8000fc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc6:	40f2      	lsrs	r2, r6
 8000fc8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fcc:	40f7      	lsrs	r7, r6
 8000fce:	e9c5 2700 	strd	r2, r7, [r5]
 8000fd2:	2600      	movs	r6, #0
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	462e      	mov	r6, r5
 8000fdc:	4628      	mov	r0, r5
 8000fde:	e70b      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	e6e9      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	e6fd      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fe8:	4543      	cmp	r3, r8
 8000fea:	d2e5      	bcs.n	8000fb8 <__udivmoddi4+0x260>
 8000fec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ff0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	e7df      	b.n	8000fb8 <__udivmoddi4+0x260>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e7d2      	b.n	8000fa2 <__udivmoddi4+0x24a>
 8000ffc:	4660      	mov	r0, ip
 8000ffe:	e78d      	b.n	8000f1c <__udivmoddi4+0x1c4>
 8001000:	4681      	mov	r9, r0
 8001002:	e7b9      	b.n	8000f78 <__udivmoddi4+0x220>
 8001004:	4666      	mov	r6, ip
 8001006:	e775      	b.n	8000ef4 <__udivmoddi4+0x19c>
 8001008:	4630      	mov	r0, r6
 800100a:	e74a      	b.n	8000ea2 <__udivmoddi4+0x14a>
 800100c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001010:	4439      	add	r1, r7
 8001012:	e713      	b.n	8000e3c <__udivmoddi4+0xe4>
 8001014:	3802      	subs	r0, #2
 8001016:	443c      	add	r4, r7
 8001018:	e724      	b.n	8000e64 <__udivmoddi4+0x10c>
 800101a:	bf00      	nop

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af02      	add	r7, sp, #8
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001034:	b2db      	uxtb	r3, r3
 8001036:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <BMP280_Read8+0x50>)
 8001040:	f002 fbd8 	bl	80037f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <BMP280_Read8+0x54>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	f107 010c 	add.w	r1, r7, #12
 8001050:	230a      	movs	r3, #10
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2302      	movs	r3, #2
 8001056:	f004 fb0e 	bl	8005676 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <BMP280_Read8+0x50>)
 8001062:	f002 fbc7 	bl	80037f4 <HAL_GPIO_WritePin>
	return tmp[1];
 8001066:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020400 	.word	0x40020400
 8001074:	20000648 	.word	0x20000648

08001078 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001086:	7b3b      	ldrb	r3, [r7, #12]
 8001088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800108c:	b2db      	uxtb	r3, r3
 800108e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <BMP280_Read16+0x60>)
 8001098:	f002 fbac 	bl	80037f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <BMP280_Read16+0x64>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	f107 020c 	add.w	r2, r7, #12
 80010a4:	f107 010c 	add.w	r1, r7, #12
 80010a8:	230a      	movs	r3, #10
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2303      	movs	r3, #3
 80010ae:	f004 fae2 	bl	8005676 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <BMP280_Read16+0x60>)
 80010ba:	f002 fb9b 	bl	80037f4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29b      	uxth	r3, r3
#endif
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40020400 	.word	0x40020400
 80010dc:	20000648 	.word	0x20000648

080010e0 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffc3 	bl	8001078 <BMP280_Read16>
 80010f2:	4603      	mov	r3, r0
 80010f4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21b      	sxth	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b21b      	sxth	r3, r3
 8001108:	b29b      	uxth	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af02      	add	r7, sp, #8
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	4613      	mov	r3, r2
 8001122:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800112e:	b2db      	uxtb	r3, r3
 8001130:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <BMP280_Write8+0x58>)
 800113e:	f002 fb59 	bl	80037f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <BMP280_Write8+0x5c>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	f107 010c 	add.w	r1, r7, #12
 800114e:	230a      	movs	r3, #10
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2302      	movs	r3, #2
 8001154:	f004 fa8f 	bl	8005676 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <BMP280_Write8+0x58>)
 8001160:	f002 fb48 	bl	80037f4 <HAL_GPIO_WritePin>
#endif
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40020400 	.word	0x40020400
 8001170:	20000648 	.word	0x20000648

08001174 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af02      	add	r7, sp, #8
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001188:	b2db      	uxtb	r3, r3
 800118a:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001192:	480f      	ldr	r0, [pc, #60]	; (80011d0 <BMP280_Read24+0x5c>)
 8001194:	f002 fb2e 	bl	80037f4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <BMP280_Read24+0x60>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 020c 	add.w	r2, r7, #12
 80011a0:	f107 010c 	add.w	r1, r7, #12
 80011a4:	230a      	movs	r3, #10
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2303      	movs	r3, #3
 80011aa:	f004 fa64 	bl	8005676 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b4:	4806      	ldr	r0, [pc, #24]	; (80011d0 <BMP280_Read24+0x5c>)
 80011b6:	f002 fb1d 	bl	80037f4 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	4313      	orrs	r3, r2
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	4313      	orrs	r3, r2
#endif
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020400 	.word	0x40020400
 80011d4:	20000648 	.word	0x20000648

080011d8 <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	4608      	mov	r0, r1
 80011e2:	4611      	mov	r1, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	70fb      	strb	r3, [r7, #3]
 80011ea:	460b      	mov	r3, r1
 80011ec:	70bb      	strb	r3, [r7, #2]
 80011ee:	4613      	mov	r3, r2
 80011f0:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 80011f2:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <BMP280_Init+0x158>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fe:	484d      	ldr	r0, [pc, #308]	; (8001334 <BMP280_Init+0x15c>)
 8001200:	f002 faf8 	bl	80037f4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001204:	2005      	movs	r0, #5
 8001206:	f002 f813 	bl	8003230 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001210:	4848      	ldr	r0, [pc, #288]	; (8001334 <BMP280_Init+0x15c>)
 8001212:	f002 faef 	bl	80037f4 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 8001216:	787b      	ldrb	r3, [r7, #1]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d901      	bls.n	8001220 <BMP280_Init+0x48>
	    mode = BMP280_NORMALMODE;
 800121c:	2303      	movs	r3, #3
 800121e:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001220:	4a45      	ldr	r2, [pc, #276]	; (8001338 <BMP280_Init+0x160>)
 8001222:	787b      	ldrb	r3, [r7, #1]
 8001224:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001226:	787b      	ldrb	r3, [r7, #1]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <BMP280_Init+0x58>
		mode = BMP280_SLEEPMODE;
 800122c:	2300      	movs	r3, #0
 800122e:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d901      	bls.n	800123a <BMP280_Init+0x62>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001236:	2305      	movs	r3, #5
 8001238:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 800123a:	4a40      	ldr	r2, [pc, #256]	; (800133c <BMP280_Init+0x164>)
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8001240:	78bb      	ldrb	r3, [r7, #2]
 8001242:	2b05      	cmp	r3, #5
 8001244:	d901      	bls.n	800124a <BMP280_Init+0x72>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001246:	2305      	movs	r3, #5
 8001248:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 800124a:	4a3d      	ldr	r2, [pc, #244]	; (8001340 <BMP280_Init+0x168>)
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001250:	bf00      	nop
 8001252:	20d0      	movs	r0, #208	; 0xd0
 8001254:	f7ff fee4 	bl	8001020 <BMP280_Read8>
 8001258:	4603      	mov	r3, r0
 800125a:	2b58      	cmp	r3, #88	; 0x58
 800125c:	d1f9      	bne.n	8001252 <BMP280_Init+0x7a>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800125e:	2088      	movs	r0, #136	; 0x88
 8001260:	f7ff ff3e 	bl	80010e0 <BMP280_Read16LE>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <BMP280_Init+0x16c>)
 800126a:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800126c:	208a      	movs	r0, #138	; 0x8a
 800126e:	f7ff ff37 	bl	80010e0 <BMP280_Read16LE>
 8001272:	4603      	mov	r3, r0
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <BMP280_Init+0x170>)
 8001278:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800127a:	208c      	movs	r0, #140	; 0x8c
 800127c:	f7ff ff30 	bl	80010e0 <BMP280_Read16LE>
 8001280:	4603      	mov	r3, r0
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <BMP280_Init+0x174>)
 8001286:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001288:	208e      	movs	r0, #142	; 0x8e
 800128a:	f7ff ff29 	bl	80010e0 <BMP280_Read16LE>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <BMP280_Init+0x178>)
 8001294:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001296:	2090      	movs	r0, #144	; 0x90
 8001298:	f7ff ff22 	bl	80010e0 <BMP280_Read16LE>
 800129c:	4603      	mov	r3, r0
 800129e:	b21a      	sxth	r2, r3
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <BMP280_Init+0x17c>)
 80012a2:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80012a4:	2092      	movs	r0, #146	; 0x92
 80012a6:	f7ff ff1b 	bl	80010e0 <BMP280_Read16LE>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <BMP280_Init+0x180>)
 80012b0:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80012b2:	2094      	movs	r0, #148	; 0x94
 80012b4:	f7ff ff14 	bl	80010e0 <BMP280_Read16LE>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <BMP280_Init+0x184>)
 80012be:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80012c0:	2096      	movs	r0, #150	; 0x96
 80012c2:	f7ff ff0d 	bl	80010e0 <BMP280_Read16LE>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <BMP280_Init+0x188>)
 80012cc:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80012ce:	2098      	movs	r0, #152	; 0x98
 80012d0:	f7ff ff06 	bl	80010e0 <BMP280_Read16LE>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <BMP280_Init+0x18c>)
 80012da:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80012dc:	209a      	movs	r0, #154	; 0x9a
 80012de:	f7ff feff 	bl	80010e0 <BMP280_Read16LE>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <BMP280_Init+0x190>)
 80012e8:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80012ea:	209c      	movs	r0, #156	; 0x9c
 80012ec:	f7ff fef8 	bl	80010e0 <BMP280_Read16LE>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <BMP280_Init+0x194>)
 80012f6:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80012f8:	209e      	movs	r0, #158	; 0x9e
 80012fa:	f7ff fef1 	bl	80010e0 <BMP280_Read16LE>
 80012fe:	4603      	mov	r3, r0
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <BMP280_Init+0x198>)
 8001304:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	b25a      	sxtb	r2, r3
 800130c:	78bb      	ldrb	r3, [r7, #2]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b25a      	sxtb	r2, r3
 8001316:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800131a:	4313      	orrs	r3, r2
 800131c:	b25b      	sxtb	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4619      	mov	r1, r3
 8001322:	20f4      	movs	r0, #244	; 0xf4
 8001324:	f7ff fef6 	bl	8001114 <BMP280_Write8>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000648 	.word	0x20000648
 8001334:	40020400 	.word	0x40020400
 8001338:	2000064f 	.word	0x2000064f
 800133c:	2000064e 	.word	0x2000064e
 8001340:	2000063a 	.word	0x2000063a
 8001344:	2000064c 	.word	0x2000064c
 8001348:	2000063c 	.word	0x2000063c
 800134c:	20000634 	.word	0x20000634
 8001350:	20000640 	.word	0x20000640
 8001354:	20000636 	.word	0x20000636
 8001358:	20000650 	.word	0x20000650
 800135c:	20000654 	.word	0x20000654
 8001360:	2000063e 	.word	0x2000063e
 8001364:	20000644 	.word	0x20000644
 8001368:	20000638 	.word	0x20000638
 800136c:	20000642 	.word	0x20000642
 8001370:	20000652 	.word	0x20000652

08001374 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <BMP280_ReadTemperature+0xfc>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d16d      	bne.n	800145e <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001382:	20f4      	movs	r0, #244	; 0xf4
 8001384:	f7ff fe4c 	bl	8001020 <BMP280_Read8>
 8001388:	4603      	mov	r3, r0
 800138a:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	f023 0303 	bic.w	r3, r3, #3
 8001392:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	4619      	mov	r1, r3
 80013a0:	20f4      	movs	r0, #244	; 0xf4
 80013a2:	f7ff feb7 	bl	8001114 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80013a6:	20f4      	movs	r0, #244	; 0xf4
 80013a8:	f7ff fe3a 	bl	8001020 <BMP280_Read8>
 80013ac:	4603      	mov	r3, r0
 80013ae:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80013b0:	7dbb      	ldrb	r3, [r7, #22]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80013b8:	7dbb      	ldrb	r3, [r7, #22]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d14f      	bne.n	800145e <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013be:	20f4      	movs	r0, #244	; 0xf4
 80013c0:	f7ff fe2e 	bl	8001020 <BMP280_Read8>
 80013c4:	4603      	mov	r3, r0
 80013c6:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80013c8:	7dbb      	ldrb	r3, [r7, #22]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80013d0:	7dbb      	ldrb	r3, [r7, #22]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d000      	beq.n	80013d8 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013d6:	e7f2      	b.n	80013be <BMP280_ReadTemperature+0x4a>
				  break;
 80013d8:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80013da:	20fa      	movs	r0, #250	; 0xfa
 80013dc:	f7ff feca 	bl	8001174 <BMP280_Read24>
 80013e0:	4603      	mov	r3, r0
 80013e2:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	111b      	asrs	r3, r3, #4
 80013e8:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	10da      	asrs	r2, r3, #3
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <BMP280_ReadTemperature+0x100>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80013f6:	4a20      	ldr	r2, [pc, #128]	; (8001478 <BMP280_ReadTemperature+0x104>)
 80013f8:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	12db      	asrs	r3, r3, #11
 8001402:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	111b      	asrs	r3, r3, #4
 8001408:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <BMP280_ReadTemperature+0x100>)
 800140a:	8812      	ldrh	r2, [r2, #0]
 800140c:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	1112      	asrs	r2, r2, #4
 8001412:	4918      	ldr	r1, [pc, #96]	; (8001474 <BMP280_ReadTemperature+0x100>)
 8001414:	8809      	ldrh	r1, [r1, #0]
 8001416:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001418:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800141c:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800141e:	4a17      	ldr	r2, [pc, #92]	; (800147c <BMP280_ReadTemperature+0x108>)
 8001420:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001424:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001428:	139b      	asrs	r3, r3, #14
 800142a:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <BMP280_ReadTemperature+0x10c>)
 8001434:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <BMP280_ReadTemperature+0x10c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3380      	adds	r3, #128	; 0x80
 8001442:	121b      	asrs	r3, r3, #8
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001450:	edd7 7a01 	vldr	s15, [r7, #4]
 8001454:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001484 <BMP280_ReadTemperature+0x110>
 8001458:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800145c:	e001      	b.n	8001462 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 800145e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001488 <BMP280_ReadTemperature+0x114>
 8001462:	eef0 7a47 	vmov.f32	s15, s14
}
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000064f 	.word	0x2000064f
 8001474:	2000064c 	.word	0x2000064c
 8001478:	2000063c 	.word	0x2000063c
 800147c:	20000634 	.word	0x20000634
 8001480:	20000658 	.word	0x20000658
 8001484:	42c80000 	.word	0x42c80000
 8001488:	c2c60000 	.word	0xc2c60000

0800148c <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 800148c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001490:	b09c      	sub	sp, #112	; 0x70
 8001492:	af00      	add	r7, sp, #0
 8001494:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001496:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001498:	f7ff ff6c 	bl	8001374 <BMP280_ReadTemperature>
 800149c:	eef0 7a40 	vmov.f32	s15, s0
 80014a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a2:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80014a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800167c <BMP280_ReadTemperatureAndPressure+0x1f0>
 80014b0:	eef4 7a47 	vcmp.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d101      	bne.n	80014be <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 80014ba:	23ff      	movs	r3, #255	; 0xff
 80014bc:	e1d8      	b.n	8001870 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80014be:	20f7      	movs	r0, #247	; 0xf7
 80014c0:	f7ff fe58 	bl	8001174 <BMP280_Read24>
 80014c4:	4603      	mov	r3, r0
 80014c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 80014c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ca:	111b      	asrs	r3, r3, #4
 80014cc:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 80014ce:	4b6c      	ldr	r3, [pc, #432]	; (8001680 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014d8:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80014dc:	f143 35ff 	adc.w	r5, r3, #4294967295
 80014e0:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 80014e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014e8:	fb03 f102 	mul.w	r1, r3, r2
 80014ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f0:	fb03 f302 	mul.w	r3, r3, r2
 80014f4:	18ca      	adds	r2, r1, r3
 80014f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f8:	fba3 4503 	umull	r4, r5, r3, r3
 80014fc:	1953      	adds	r3, r2, r5
 80014fe:	461d      	mov	r5, r3
 8001500:	4b60      	ldr	r3, [pc, #384]	; (8001684 <BMP280_ReadTemperatureAndPressure+0x1f8>)
 8001502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001506:	b21a      	sxth	r2, r3
 8001508:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800150c:	fb02 f005 	mul.w	r0, r2, r5
 8001510:	fb04 f103 	mul.w	r1, r4, r3
 8001514:	4401      	add	r1, r0
 8001516:	fba4 2302 	umull	r2, r3, r4, r2
 800151a:	4419      	add	r1, r3
 800151c:	460b      	mov	r3, r1
 800151e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001522:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001526:	4b58      	ldr	r3, [pc, #352]	; (8001688 <BMP280_ReadTemperatureAndPressure+0x1fc>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	b21a      	sxth	r2, r3
 800152e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001532:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001534:	fb03 f001 	mul.w	r0, r3, r1
 8001538:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800153a:	fb02 f101 	mul.w	r1, r2, r1
 800153e:	4408      	add	r0, r1
 8001540:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001542:	fba1 2302 	umull	r2, r3, r1, r2
 8001546:	18c1      	adds	r1, r0, r3
 8001548:	460b      	mov	r3, r1
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	0459      	lsls	r1, r3, #17
 8001554:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001558:	0450      	lsls	r0, r2, #17
 800155a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800155e:	eb12 0800 	adds.w	r8, r2, r0
 8001562:	eb43 0901 	adc.w	r9, r3, r1
 8001566:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 800156a:	4b48      	ldr	r3, [pc, #288]	; (800168c <BMP280_ReadTemperatureAndPressure+0x200>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	b21a      	sxth	r2, r3
 8001572:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001576:	f04f 0000 	mov.w	r0, #0
 800157a:	f04f 0100 	mov.w	r1, #0
 800157e:	00d1      	lsls	r1, r2, #3
 8001580:	2000      	movs	r0, #0
 8001582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001586:	1814      	adds	r4, r2, r0
 8001588:	61bc      	str	r4, [r7, #24]
 800158a:	414b      	adcs	r3, r1
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001592:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001596:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800159a:	fb03 f102 	mul.w	r1, r3, r2
 800159e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015a2:	fb03 f302 	mul.w	r3, r3, r2
 80015a6:	18ca      	adds	r2, r1, r3
 80015a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015aa:	fba3 4503 	umull	r4, r5, r3, r3
 80015ae:	1953      	adds	r3, r2, r5
 80015b0:	461d      	mov	r5, r3
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <BMP280_ReadTemperatureAndPressure+0x204>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015be:	fb02 f005 	mul.w	r0, r2, r5
 80015c2:	fb04 f103 	mul.w	r1, r4, r3
 80015c6:	4401      	add	r1, r0
 80015c8:	fba4 2302 	umull	r2, r3, r4, r2
 80015cc:	4419      	add	r1, r3
 80015ce:	460b      	mov	r3, r1
 80015d0:	f04f 0800 	mov.w	r8, #0
 80015d4:	f04f 0900 	mov.w	r9, #0
 80015d8:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80015dc:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80015e0:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <BMP280_ReadTemperatureAndPressure+0x208>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015f2:	fb03 f001 	mul.w	r0, r3, r1
 80015f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80015f8:	fb02 f101 	mul.w	r1, r2, r1
 80015fc:	1844      	adds	r4, r0, r1
 80015fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001600:	fba1 0102 	umull	r0, r1, r1, r2
 8001604:	1863      	adds	r3, r4, r1
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	030b      	lsls	r3, r1, #12
 8001612:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001616:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001618:	eb18 0102 	adds.w	r1, r8, r2
 800161c:	6139      	str	r1, [r7, #16]
 800161e:	eb49 0303 	adc.w	r3, r9, r3
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001628:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800162c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001630:	1c11      	adds	r1, r2, #0
 8001632:	6439      	str	r1, [r7, #64]	; 0x40
 8001634:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001638:	647b      	str	r3, [r7, #68]	; 0x44
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <BMP280_ReadTemperatureAndPressure+0x20c>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	b29a      	uxth	r2, r3
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001648:	4629      	mov	r1, r5
 800164a:	fb02 f001 	mul.w	r0, r2, r1
 800164e:	4621      	mov	r1, r4
 8001650:	fb01 f103 	mul.w	r1, r1, r3
 8001654:	4401      	add	r1, r0
 8001656:	4620      	mov	r0, r4
 8001658:	fba0 2302 	umull	r2, r3, r0, r2
 800165c:	4419      	add	r1, r3
 800165e:	460b      	mov	r3, r1
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	1058      	asrs	r0, r3, #1
 800166a:	17d9      	asrs	r1, r3, #31
 800166c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 8001670:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001674:	4313      	orrs	r3, r2
 8001676:	d111      	bne.n	800169c <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 8001678:	2300      	movs	r3, #0
 800167a:	e0f9      	b.n	8001870 <BMP280_ReadTemperatureAndPressure+0x3e4>
 800167c:	c2c60000 	.word	0xc2c60000
 8001680:	20000658 	.word	0x20000658
 8001684:	20000644 	.word	0x20000644
 8001688:	2000063e 	.word	0x2000063e
 800168c:	20000654 	.word	0x20000654
 8001690:	20000650 	.word	0x20000650
 8001694:	20000636 	.word	0x20000636
 8001698:	20000640 	.word	0x20000640
	  }
	  p = 1048576 - adc_P;
 800169c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800169e:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80016a2:	461a      	mov	r2, r3
 80016a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016a8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 80016ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ae:	105b      	asrs	r3, r3, #1
 80016b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016b4:	07db      	lsls	r3, r3, #31
 80016b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80016b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016bc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80016c0:	4621      	mov	r1, r4
 80016c2:	ebb1 0a02 	subs.w	sl, r1, r2
 80016c6:	4629      	mov	r1, r5
 80016c8:	eb61 0b03 	sbc.w	fp, r1, r3
 80016cc:	4652      	mov	r2, sl
 80016ce:	465b      	mov	r3, fp
 80016d0:	1891      	adds	r1, r2, r2
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	415b      	adcs	r3, r3
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016dc:	eb12 020a 	adds.w	r2, r2, sl
 80016e0:	eb43 030b 	adc.w	r3, r3, fp
 80016e4:	f04f 0000 	mov.w	r0, #0
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	0199      	lsls	r1, r3, #6
 80016ee:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80016f2:	0190      	lsls	r0, r2, #6
 80016f4:	1812      	adds	r2, r2, r0
 80016f6:	eb41 0303 	adc.w	r3, r1, r3
 80016fa:	f04f 0000 	mov.w	r0, #0
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	0099      	lsls	r1, r3, #2
 8001704:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001708:	0090      	lsls	r0, r2, #2
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	eb12 020a 	adds.w	r2, r2, sl
 8001712:	eb43 030b 	adc.w	r3, r3, fp
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0099      	lsls	r1, r3, #2
 8001720:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001724:	0090      	lsls	r0, r2, #2
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	eb12 010a 	adds.w	r1, r2, sl
 800172e:	6339      	str	r1, [r7, #48]	; 0x30
 8001730:	eb43 030b 	adc.w	r3, r3, fp
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
 8001736:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800173a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800173e:	f7ff faa3 	bl	8000c88 <__aeabi_ldivmod>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 800174a:	4b4c      	ldr	r3, [pc, #304]	; (800187c <BMP280_ReadTemperatureAndPressure+0x3f0>)
 800174c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001750:	b218      	sxth	r0, r3
 8001752:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001756:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	0b62      	lsrs	r2, r4, #13
 8001764:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001768:	136b      	asrs	r3, r5, #13
 800176a:	fb02 f501 	mul.w	r5, r2, r1
 800176e:	fb00 f403 	mul.w	r4, r0, r3
 8001772:	442c      	add	r4, r5
 8001774:	fba0 0102 	umull	r0, r1, r0, r2
 8001778:	1863      	adds	r3, r4, r1
 800177a:	4619      	mov	r1, r3
 800177c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	0b62      	lsrs	r2, r4, #13
 800178a:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800178e:	136b      	asrs	r3, r5, #13
 8001790:	fb02 f501 	mul.w	r5, r2, r1
 8001794:	fb00 f403 	mul.w	r4, r0, r3
 8001798:	442c      	add	r4, r5
 800179a:	fba0 0102 	umull	r0, r1, r0, r2
 800179e:	1863      	adds	r3, r4, r1
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	0e42      	lsrs	r2, r0, #25
 80017ac:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80017b0:	164b      	asrs	r3, r1, #25
 80017b2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 80017b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017bc:	b21a      	sxth	r2, r3
 80017be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80017c4:	fb03 f001 	mul.w	r0, r3, r1
 80017c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017ca:	fb02 f101 	mul.w	r1, r2, r1
 80017ce:	1844      	adds	r4, r0, r1
 80017d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80017d2:	fba1 0102 	umull	r0, r1, r1, r2
 80017d6:	1863      	adds	r3, r4, r1
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	0cc2      	lsrs	r2, r0, #19
 80017e4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80017e8:	14cb      	asrs	r3, r1, #19
 80017ea:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80017ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017f6:	1884      	adds	r4, r0, r2
 80017f8:	62bc      	str	r4, [r7, #40]	; 0x28
 80017fa:	eb41 0303 	adc.w	r3, r1, r3
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001800:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001804:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001808:	4621      	mov	r1, r4
 800180a:	1889      	adds	r1, r1, r2
 800180c:	6239      	str	r1, [r7, #32]
 800180e:	4629      	mov	r1, r5
 8001810:	eb43 0101 	adc.w	r1, r3, r1
 8001814:	6279      	str	r1, [r7, #36]	; 0x24
 8001816:	f04f 0000 	mov.w	r0, #0
 800181a:	f04f 0100 	mov.w	r1, #0
 800181e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001822:	4623      	mov	r3, r4
 8001824:	0a18      	lsrs	r0, r3, #8
 8001826:	462b      	mov	r3, r5
 8001828:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800182c:	462b      	mov	r3, r5
 800182e:	1219      	asrs	r1, r3, #8
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <BMP280_ReadTemperatureAndPressure+0x3f8>)
 8001832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001836:	b21c      	sxth	r4, r3
 8001838:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	012b      	lsls	r3, r5, #4
 8001846:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800184a:	0122      	lsls	r2, r4, #4
 800184c:	1884      	adds	r4, r0, r2
 800184e:	603c      	str	r4, [r7, #0]
 8001850:	eb41 0303 	adc.w	r3, r1, r3
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	e9d7 3400 	ldrd	r3, r4, [r7]
 800185a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 800185e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001860:	2b00      	cmp	r3, #0
 8001862:	da00      	bge.n	8001866 <BMP280_ReadTemperatureAndPressure+0x3da>
 8001864:	33ff      	adds	r3, #255	; 0xff
 8001866:	121b      	asrs	r3, r3, #8
 8001868:	461a      	mov	r2, r3
 800186a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800186c:	601a      	str	r2, [r3, #0]

	  return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3770      	adds	r7, #112	; 0x70
 8001874:	46bd      	mov	sp, r7
 8001876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800187a:	bf00      	nop
 800187c:	20000652 	.word	0x20000652
 8001880:	20000642 	.word	0x20000642
 8001884:	20000638 	.word	0x20000638

08001888 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	font = font_t;
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <GFX_SetFont+0x1c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	2000065c 	.word	0x2000065c

080018a8 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <GFX_SetFontSize+0x16>
		size = size_t;
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <GFX_SetFontSize+0x24>)
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	7013      	strb	r3, [r2, #0]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000

080018d0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	460b      	mov	r3, r1
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	4613      	mov	r3, r2
 80018e4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b7e      	cmp	r3, #126	; 0x7e
 80018ea:	f200 80a3 	bhi.w	8001a34 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]
 80018f2:	e096      	b.n	8001a22 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80018f4:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <GFX_DrawChar+0x16c>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	3b20      	subs	r3, #32
 80018fc:	494f      	ldr	r1, [pc, #316]	; (8001a3c <GFX_DrawChar+0x16c>)
 80018fe:	6809      	ldr	r1, [r1, #0]
 8001900:	3101      	adds	r1, #1
 8001902:	7809      	ldrb	r1, [r1, #0]
 8001904:	fb01 f103 	mul.w	r1, r1, r3
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	440b      	add	r3, r1
 800190c:	3302      	adds	r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001914:	2300      	movs	r3, #0
 8001916:	757b      	strb	r3, [r7, #21]
 8001918:	e078      	b.n	8001a0c <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d032      	beq.n	800198a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001924:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <GFX_DrawChar+0x170>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d113      	bne.n	8001954 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	b29b      	uxth	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	b218      	sxth	r0, r3
 800193a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800193e:	b29a      	uxth	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	b21b      	sxth	r3, r3
 800194a:	79ba      	ldrb	r2, [r7, #6]
 800194c:	4619      	mov	r1, r3
 800194e:	f000 fb1d 	bl	8001f8c <SSD1306_DrawPixel>
 8001952:	e052      	b.n	80019fa <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <GFX_DrawChar+0x170>)
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	fb02 f203 	mul.w	r2, r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	18d0      	adds	r0, r2, r3
 8001962:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001966:	4a36      	ldr	r2, [pc, #216]	; (8001a40 <GFX_DrawChar+0x170>)
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	fb02 f203 	mul.w	r2, r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	18d1      	adds	r1, r2, r3
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <GFX_DrawChar+0x170>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <GFX_DrawChar+0x170>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b29c      	uxth	r4, r3
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4623      	mov	r3, r4
 8001984:	f000 f9ea 	bl	8001d5c <GFX_DrawFillRectangle>
 8001988:	e037      	b.n	80019fa <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800198a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800198e:	2b00      	cmp	r3, #0
 8001990:	d133      	bne.n	80019fa <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <GFX_DrawChar+0x170>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d114      	bne.n	80019c4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b218      	sxth	r0, r3
 80019a8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80019bc:	4619      	mov	r1, r3
 80019be:	f000 fae5 	bl	8001f8c <SSD1306_DrawPixel>
 80019c2:	e01a      	b.n	80019fa <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <GFX_DrawChar+0x170>)
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	fb02 f203 	mul.w	r2, r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	18d0      	adds	r0, r2, r3
 80019d2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80019d6:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <GFX_DrawChar+0x170>)
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	fb02 f203 	mul.w	r2, r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	18d1      	adds	r1, r2, r3
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <GFX_DrawChar+0x170>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <GFX_DrawChar+0x170>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b29c      	uxth	r4, r3
 80019ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	4623      	mov	r3, r4
 80019f6:	f000 f9b1 	bl	8001d5c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80019fa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	3301      	adds	r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	757b      	strb	r3, [r7, #21]
 8001a06:	7dbb      	ldrb	r3, [r7, #22]
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	75bb      	strb	r3, [r7, #22]
 8001a0c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <GFX_DrawChar+0x16c>)
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	4293      	cmp	r3, r2
 8001a18:	f6ff af7f 	blt.w	800191a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <GFX_DrawChar+0x16c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	7dfa      	ldrb	r2, [r7, #23]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f4ff af61 	bcc.w	80018f4 <GFX_DrawChar+0x24>
 8001a32:	e000      	b.n	8001a36 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001a34:	bf00      	nop
            }
        }
    }
}
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	2000065c 	.word	0x2000065c
 8001a40:	20000000 	.word	0x20000000

08001a44 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001a5c:	e03e      	b.n	8001adc <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001a5e:	78f9      	ldrb	r1, [r7, #3]
 8001a60:	7cfa      	ldrb	r2, [r7, #19]
 8001a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	6978      	ldr	r0, [r7, #20]
 8001a6e:	f7ff ff2f 	bl	80018d0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <GFX_DrawString+0xb0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <GFX_DrawString+0xb4>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	fb03 f302 	mul.w	r3, r3, r2
 8001a84:	3301      	adds	r3, #1
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4413      	add	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001a8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d120      	bne.n	8001ad6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	74bb      	strb	r3, [r7, #18]
 8001a98:	e012      	b.n	8001ac0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b218      	sxth	r0, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f000 fa69 	bl	8001f8c <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001aba:	7cbb      	ldrb	r3, [r7, #18]
 8001abc:	3301      	adds	r3, #1
 8001abe:	74bb      	strb	r3, [r7, #18]
 8001ac0:	7cba      	ldrb	r2, [r7, #18]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <GFX_DrawString+0xb0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <GFX_DrawString+0xb4>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	fb03 f301 	mul.w	r3, r3, r1
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbe1      	blt.n	8001a9a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1ba      	bne.n	8001a5e <GFX_DrawString+0x1a>
	}
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000065c 	.word	0x2000065c
 8001af8:	20000000 	.word	0x20000000

08001afc <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	; 0x30
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b14:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1acb      	subs	r3, r1, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bfb8      	it	lt
 8001b22:	425b      	neglt	r3, r3
 8001b24:	429a      	cmp	r2, r3
 8001b26:	bfcc      	ite	gt
 8001b28:	2301      	movgt	r3, #1
 8001b2a:	2300      	movle	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001b30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00b      	beq.n	8001b50 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dd0b      	ble.n	8001b70 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bfb8      	it	lt
 8001b88:	425b      	neglt	r3, r3
 8001b8a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001b8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da00      	bge.n	8001b96 <GFX_WriteLine+0x9a>
 8001b94:	3301      	adds	r3, #1
 8001b96:	105b      	asrs	r3, r3, #1
 8001b98:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	da02      	bge.n	8001ba8 <GFX_WriteLine+0xac>
	        ystep = 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001ba6:	e030      	b.n	8001c0a <GFX_WriteLine+0x10e>
	    } else {
	        ystep = -1;
 8001ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bac:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001bae:	e02c      	b.n	8001c0a <GFX_WriteLine+0x10e>
	        if (steep) {
 8001bb0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <GFX_WriteLine+0xd0>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	b211      	sxth	r1, r2
 8001bc0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f9e1 	bl	8001f8c <SSD1306_DrawPixel>
 8001bca:	e008      	b.n	8001bde <GFX_WriteLine+0xe2>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	b211      	sxth	r1, r2
 8001bd4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f9d7 	bl	8001f8c <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8001bde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001be0:	8abb      	ldrh	r3, [r7, #20]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001be8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	da09      	bge.n	8001c04 <GFX_WriteLine+0x108>
	            y_start += ystep;
 8001bf0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001bfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	ddce      	ble.n	8001bb0 <GFX_WriteLine+0xb4>
	        }
	    }
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	3730      	adds	r7, #48	; 0x30
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	1e5a      	subs	r2, r3, #1
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4613      	mov	r3, r2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f7ff ff5d 	bl	8001afc <GFX_WriteLine>
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af02      	add	r7, sp, #8
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	1e5a      	subs	r2, r3, #1
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff ff47 	bl	8001afc <GFX_WriteLine>
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b088      	sub	sp, #32
 8001c7a:	af02      	add	r7, sp, #8
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d114      	bne.n	8001cb6 <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dd05      	ble.n	8001ca0 <GFX_DrawLine+0x2a>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff ffb4 	bl	8001c1c <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8001cb4:	e021      	b.n	8001cfa <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d114      	bne.n	8001ce8 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dd05      	ble.n	8001cd2 <GFX_DrawLine+0x5c>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7ff ffb2 	bl	8001c4a <GFX_DrawFastHLine>
}
 8001ce6:	e008      	b.n	8001cfa <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 8001ce8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7ff ff01 	bl	8001afc <GFX_WriteLine>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <GFX_DrawRectangle>:
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	461a      	mov	r2, r3
 8001d10:	460b      	mov	r3, r1
 8001d12:	80fb      	strh	r3, [r7, #6]
 8001d14:	4613      	mov	r3, r2
 8001d16:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8001d18:	88fa      	ldrh	r2, [r7, #6]
 8001d1a:	7e3b      	ldrb	r3, [r7, #24]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff ff93 	bl	8001c4a <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8001d24:	88ba      	ldrh	r2, [r7, #4]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	4413      	add	r3, r2
 8001d2a:	1e59      	subs	r1, r3, #1
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	7e3b      	ldrb	r3, [r7, #24]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff ff8a 	bl	8001c4a <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8001d36:	88ba      	ldrh	r2, [r7, #4]
 8001d38:	7e3b      	ldrb	r3, [r7, #24]
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff ff6d 	bl	8001c1c <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	1e58      	subs	r0, r3, #1
 8001d4a:	88ba      	ldrh	r2, [r7, #4]
 8001d4c:	7e3b      	ldrb	r3, [r7, #24]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	f7ff ff64 	bl	8001c1c <GFX_DrawFastVLine>

}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	4611      	mov	r1, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	80fb      	strh	r3, [r7, #6]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	e009      	b.n	8001d8c <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001d78:	88ba      	ldrh	r2, [r7, #4]
 8001d7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	6978      	ldr	r0, [r7, #20]
 8001d82:	f7ff ff4b 	bl	8001c1c <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4413      	add	r3, r2
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbef      	blt.n	8001d78 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <u_pid_calculate>:
 */

#include "PID_Controller.h"
#include "main.h"

float u_pid_calculate(pid_controller_t* pid, float temp_zadana, float temp_aktualna){
 8001da2:	b5b0      	push	{r4, r5, r7, lr}
 8001da4:	b08a      	sub	sp, #40	; 0x28
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dae:	edc7 0a01 	vstr	s1, [r7, #4]
	float u = 0, P, I, D, integral, derivative;
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
	pid->uchyb_aktualny = temp_zadana - temp_aktualna;
 8001db8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	edc3 7a06 	vstr	s15, [r3, #24]
	//
	//Część proporcjonalna
	//
	P = pid->Kp*pid->uchyb_aktualny;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	ed93 7a00 	vldr	s14, [r3]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	//Część całkująca
	//
	integral = pid->calka_poprzedni + pid->uchyb_aktualny + pid->uchyb_aktualny;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	edd3 7a06 	vldr	s15, [r3, #24]
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->calka_poprzedni = integral;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	615a      	str	r2, [r3, #20]
	I = pid->Ki*integral*(pid->dt/2.0);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e10:	ee17 0a90 	vmov	r0, s15
 8001e14:	f7fe fbb8 	bl	8000588 <__aeabi_f2d>
 8001e18:	4604      	mov	r4, r0
 8001e1a:	460d      	mov	r5, r1
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fbb1 	bl	8000588 <__aeabi_f2d>
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e2e:	f7fe fd2d 	bl	800088c <__aeabi_ddiv>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4620      	mov	r0, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7fe fbfd 	bl	8000638 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fecf 	bl	8000be8 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	61bb      	str	r3, [r7, #24]
	//
	//Część różniczkująca
	//
	derivative = (pid->uchyb_aktualny - pid->uchyb_poprzedni)/pid->dt;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e5a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->uchyb_poprzedni = pid->uchyb_aktualny;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	611a      	str	r2, [r3, #16]
	D = pid->Kd*derivative;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e82:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	//Obliczenie sterowania
	//
	u = P + I + D;
 8001e86:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	return u;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	ee07 3a90 	vmov	s15, r3
}
 8001ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea8:	3728      	adds	r7, #40	; 0x28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001eb0 <saturation_pwm>:

uint16_t saturation_pwm(float u){
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	ed87 0a01 	vstr	s0, [r7, #4]
	float counter_period = 999.0; //ZMIENIC!!!!!!
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <saturation_pwm+0x70>)
 8001ebc:	613b      	str	r3, [r7, #16]
	float pwm_duty = (counter_period*u);
 8001ebe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eca:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t sat_pwm;
	if(pwm_duty < 0){
 8001ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	d502      	bpl.n	8001ee2 <saturation_pwm+0x32>
		sat_pwm = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	82fb      	strh	r3, [r7, #22]
 8001ee0:	e017      	b.n	8001f12 <saturation_pwm+0x62>
	}
	else if(pwm_duty > counter_period){
 8001ee2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ee6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	dd07      	ble.n	8001f04 <saturation_pwm+0x54>
		sat_pwm = counter_period;
 8001ef4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001efc:	ee17 3a90 	vmov	r3, s15
 8001f00:	82fb      	strh	r3, [r7, #22]
 8001f02:	e006      	b.n	8001f12 <saturation_pwm+0x62>
	}else{
		sat_pwm = pwm_duty;
 8001f04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f0c:	ee17 3a90 	vmov	r3, s15
 8001f10:	82fb      	strh	r3, [r7, #22]
	}
	return sat_pwm;
 8001f12:	8afb      	ldrh	r3, [r7, #22]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	4479c000 	.word	0x4479c000

08001f24 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af04      	add	r7, sp, #16
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <SSD1306_Command+0x30>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	9302      	str	r3, [sp, #8]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	1dfb      	adds	r3, r7, #7
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2301      	movs	r3, #1
 8001f42:	2200      	movs	r2, #0
 8001f44:	2178      	movs	r1, #120	; 0x78
 8001f46:	f001 fcff 	bl	8003948 <HAL_I2C_Mem_Write>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000660 	.word	0x20000660

08001f58 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af04      	add	r7, sp, #16
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <SSD1306_Data+0x30>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6c:	9302      	str	r3, [sp, #8]
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2301      	movs	r3, #1
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	2178      	movs	r1, #120	; 0x78
 8001f7c:	f001 fce4 	bl	8003948 <HAL_I2C_Mem_Write>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000660 	.word	0x20000660

08001f8c <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
 8001f96:	460b      	mov	r3, r1
 8001f98:	80bb      	strh	r3, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db79      	blt.n	800209a <SSD1306_DrawPixel+0x10e>
 8001fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001faa:	2b7f      	cmp	r3, #127	; 0x7f
 8001fac:	dc75      	bgt.n	800209a <SSD1306_DrawPixel+0x10e>
 8001fae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db71      	blt.n	800209a <SSD1306_DrawPixel+0x10e>
 8001fb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fba:	2b3f      	cmp	r3, #63	; 0x3f
 8001fbc:	dc6d      	bgt.n	800209a <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d049      	beq.n	8002058 <SSD1306_DrawPixel+0xcc>
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	dc69      	bgt.n	800209c <SSD1306_DrawPixel+0x110>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d022      	beq.n	8002012 <SSD1306_DrawPixel+0x86>
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d165      	bne.n	800209c <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001fd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da00      	bge.n	8001fde <SSD1306_DrawPixel+0x52>
 8001fdc:	3307      	adds	r3, #7
 8001fde:	10db      	asrs	r3, r3, #3
 8001fe0:	b218      	sxth	r0, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	01db      	lsls	r3, r3, #7
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a2f      	ldr	r2, [pc, #188]	; (80020a8 <SSD1306_DrawPixel+0x11c>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	b25a      	sxtb	r2, r3
 8001fee:	88bb      	ldrh	r3, [r7, #4]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	b259      	sxtb	r1, r3
 8002000:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002004:	4603      	mov	r3, r0
 8002006:	01db      	lsls	r3, r3, #7
 8002008:	4413      	add	r3, r2
 800200a:	b2c9      	uxtb	r1, r1
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <SSD1306_DrawPixel+0x11c>)
 800200e:	54d1      	strb	r1, [r2, r3]
      break;
 8002010:	e044      	b.n	800209c <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8002012:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002016:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da00      	bge.n	8002020 <SSD1306_DrawPixel+0x94>
 800201e:	3307      	adds	r3, #7
 8002020:	10db      	asrs	r3, r3, #3
 8002022:	b218      	sxth	r0, r3
 8002024:	4603      	mov	r3, r0
 8002026:	01db      	lsls	r3, r3, #7
 8002028:	4413      	add	r3, r2
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <SSD1306_DrawPixel+0x11c>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	b25a      	sxtb	r2, r3
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	b25b      	sxtb	r3, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	b25b      	sxtb	r3, r3
 8002042:	4013      	ands	r3, r2
 8002044:	b259      	sxtb	r1, r3
 8002046:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800204a:	4603      	mov	r3, r0
 800204c:	01db      	lsls	r3, r3, #7
 800204e:	4413      	add	r3, r2
 8002050:	b2c9      	uxtb	r1, r1
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <SSD1306_DrawPixel+0x11c>)
 8002054:	54d1      	strb	r1, [r2, r3]
      break;
 8002056:	e021      	b.n	800209c <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8002058:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800205c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da00      	bge.n	8002066 <SSD1306_DrawPixel+0xda>
 8002064:	3307      	adds	r3, #7
 8002066:	10db      	asrs	r3, r3, #3
 8002068:	b218      	sxth	r0, r3
 800206a:	4603      	mov	r3, r0
 800206c:	01db      	lsls	r3, r3, #7
 800206e:	4413      	add	r3, r2
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <SSD1306_DrawPixel+0x11c>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	b25a      	sxtb	r2, r3
 8002076:	88bb      	ldrh	r3, [r7, #4]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	b25b      	sxtb	r3, r3
 8002084:	4053      	eors	r3, r2
 8002086:	b259      	sxtb	r1, r3
 8002088:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800208c:	4603      	mov	r3, r0
 800208e:	01db      	lsls	r3, r3, #7
 8002090:	4413      	add	r3, r2
 8002092:	b2c9      	uxtb	r1, r1
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <SSD1306_DrawPixel+0x11c>)
 8002096:	54d1      	strb	r1, [r2, r3]
      break;
 8002098:	e000      	b.n	800209c <SSD1306_DrawPixel+0x110>
	  return;
 800209a:	bf00      	nop
    }
}
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000220 	.word	0x20000220

080020ac <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <SSD1306_Clear+0x22>
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10d      	bne.n	80020dc <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80020c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c4:	21ff      	movs	r1, #255	; 0xff
 80020c6:	4807      	ldr	r0, [pc, #28]	; (80020e4 <SSD1306_Clear+0x38>)
 80020c8:	f006 f822 	bl	8008110 <memset>
		break;
 80020cc:	e006      	b.n	80020dc <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80020ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d2:	2100      	movs	r1, #0
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <SSD1306_Clear+0x38>)
 80020d6:	f006 f81b 	bl	8008110 <memset>
		break;
 80020da:	bf00      	nop
	}
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000220 	.word	0x20000220

080020e8 <SSD1306_Display>:

void SSD1306_Display(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 80020ec:	2022      	movs	r0, #34	; 0x22
 80020ee:	f7ff ff19 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff ff16 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 80020f8:	20ff      	movs	r0, #255	; 0xff
 80020fa:	f7ff ff13 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 80020fe:	2021      	movs	r0, #33	; 0x21
 8002100:	f7ff ff10 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff ff0d 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 800210a:	207f      	movs	r0, #127	; 0x7f
 800210c:	f7ff ff0a 	bl	8001f24 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8002110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <SSD1306_Display+0x38>)
 8002116:	f7ff ff1f 	bl	8001f58 <SSD1306_Data>
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000220 	.word	0x20000220

08002124 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 800212c:	4a28      	ldr	r2, [pc, #160]	; (80021d0 <SSD1306_Init+0xac>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8002132:	20ae      	movs	r0, #174	; 0xae
 8002134:	f7ff fef6 	bl	8001f24 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8002138:	20d5      	movs	r0, #213	; 0xd5
 800213a:	f7ff fef3 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0x80);
 800213e:	2080      	movs	r0, #128	; 0x80
 8002140:	f7ff fef0 	bl	8001f24 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8002144:	203f      	movs	r0, #63	; 0x3f
 8002146:	f7ff feed 	bl	8001f24 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 800214a:	20d3      	movs	r0, #211	; 0xd3
 800214c:	f7ff feea 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0x00);
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff fee7 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8002156:	2040      	movs	r0, #64	; 0x40
 8002158:	f7ff fee4 	bl	8001f24 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 800215c:	208d      	movs	r0, #141	; 0x8d
 800215e:	f7ff fee1 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0x14);
 8002162:	2014      	movs	r0, #20
 8002164:	f7ff fede 	bl	8001f24 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8002168:	2020      	movs	r0, #32
 800216a:	f7ff fedb 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff fed8 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8002174:	20a1      	movs	r0, #161	; 0xa1
 8002176:	f7ff fed5 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 800217a:	20c8      	movs	r0, #200	; 0xc8
 800217c:	f7ff fed2 	bl	8001f24 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8002180:	20da      	movs	r0, #218	; 0xda
 8002182:	f7ff fecf 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0x12);
 8002186:	2012      	movs	r0, #18
 8002188:	f7ff fecc 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 800218c:	2081      	movs	r0, #129	; 0x81
 800218e:	f7ff fec9 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8002192:	20ff      	movs	r0, #255	; 0xff
 8002194:	f7ff fec6 	bl	8001f24 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8002198:	20d9      	movs	r0, #217	; 0xd9
 800219a:	f7ff fec3 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800219e:	20f1      	movs	r0, #241	; 0xf1
 80021a0:	f7ff fec0 	bl	8001f24 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80021a4:	20db      	movs	r0, #219	; 0xdb
 80021a6:	f7ff febd 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(0x40);
 80021aa:	2040      	movs	r0, #64	; 0x40
 80021ac:	f7ff feba 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80021b0:	20a4      	movs	r0, #164	; 0xa4
 80021b2:	f7ff feb7 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80021b6:	20a6      	movs	r0, #166	; 0xa6
 80021b8:	f7ff feb4 	bl	8001f24 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80021bc:	202e      	movs	r0, #46	; 0x2e
 80021be:	f7ff feb1 	bl	8001f24 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80021c2:	20af      	movs	r0, #175	; 0xaf
 80021c4:	f7ff feae 	bl	8001f24 <SSD1306_Command>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000660 	.word	0x20000660

080021d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	; 0x30
 80021d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ea:	4b51      	ldr	r3, [pc, #324]	; (8002330 <MX_GPIO_Init+0x15c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a50      	ldr	r2, [pc, #320]	; (8002330 <MX_GPIO_Init+0x15c>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b4e      	ldr	r3, [pc, #312]	; (8002330 <MX_GPIO_Init+0x15c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002202:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a4a      	ldr	r2, [pc, #296]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b48      	ldr	r3, [pc, #288]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	4b45      	ldr	r3, [pc, #276]	; (8002330 <MX_GPIO_Init+0x15c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a44      	ldr	r2, [pc, #272]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a3e      	ldr	r2, [pc, #248]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <MX_GPIO_Init+0x15c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a38      	ldr	r2, [pc, #224]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b36      	ldr	r3, [pc, #216]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002262:	4b33      	ldr	r3, [pc, #204]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a32      	ldr	r2, [pc, #200]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <MX_GPIO_Init+0x15c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002280:	482c      	ldr	r0, [pc, #176]	; (8002334 <MX_GPIO_Init+0x160>)
 8002282:	f001 fab7 	bl	80037f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	2140      	movs	r1, #64	; 0x40
 800228a:	482b      	ldr	r0, [pc, #172]	; (8002338 <MX_GPIO_Init+0x164>)
 800228c:	f001 fab2 	bl	80037f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002290:	2201      	movs	r2, #1
 8002292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002296:	4827      	ldr	r0, [pc, #156]	; (8002334 <MX_GPIO_Init+0x160>)
 8002298:	f001 faac 	bl	80037f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800229c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	4619      	mov	r1, r3
 80022b2:	4822      	ldr	r0, [pc, #136]	; (800233c <MX_GPIO_Init+0x168>)
 80022b4:	f001 f8f2 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80022b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80022bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 031c 	add.w	r3, r7, #28
 80022ce:	4619      	mov	r1, r3
 80022d0:	4818      	ldr	r0, [pc, #96]	; (8002334 <MX_GPIO_Init+0x160>)
 80022d2:	f001 f8e3 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80022d6:	2340      	movs	r3, #64	; 0x40
 80022d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022da:	2301      	movs	r3, #1
 80022dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	4812      	ldr	r0, [pc, #72]	; (8002338 <MX_GPIO_Init+0x164>)
 80022ee:	f001 f8d5 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f6:	2300      	movs	r3, #0
 80022f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	480c      	ldr	r0, [pc, #48]	; (8002338 <MX_GPIO_Init+0x164>)
 8002306:	f001 f8c9 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800230a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002318:	2301      	movs	r3, #1
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4804      	ldr	r0, [pc, #16]	; (8002334 <MX_GPIO_Init+0x160>)
 8002324:	f001 f8ba 	bl	800349c <HAL_GPIO_Init>

}
 8002328:	bf00      	nop
 800232a:	3730      	adds	r7, #48	; 0x30
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	40020400 	.word	0x40020400
 8002338:	40021800 	.word	0x40021800
 800233c:	40020800 	.word	0x40020800

08002340 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <MX_I2C1_Init+0x74>)
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <MX_I2C1_Init+0x78>)
 8002348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <MX_I2C1_Init+0x74>)
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <MX_I2C1_Init+0x7c>)
 800234e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002350:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <MX_I2C1_Init+0x74>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <MX_I2C1_Init+0x74>)
 8002358:	2201      	movs	r2, #1
 800235a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <MX_I2C1_Init+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_I2C1_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <MX_I2C1_Init+0x74>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <MX_I2C1_Init+0x74>)
 8002370:	2200      	movs	r2, #0
 8002372:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MX_I2C1_Init+0x74>)
 8002376:	2200      	movs	r2, #0
 8002378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800237a:	480e      	ldr	r0, [pc, #56]	; (80023b4 <MX_I2C1_Init+0x74>)
 800237c:	f001 fa54 	bl	8003828 <HAL_I2C_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002386:	f000 faa5 	bl	80028d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800238a:	2100      	movs	r1, #0
 800238c:	4809      	ldr	r0, [pc, #36]	; (80023b4 <MX_I2C1_Init+0x74>)
 800238e:	f001 fe41 	bl	8004014 <HAL_I2CEx_ConfigAnalogFilter>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002398:	f000 fa9c 	bl	80028d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800239c:	2100      	movs	r1, #0
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_I2C1_Init+0x74>)
 80023a0:	f001 fe83 	bl	80040aa <HAL_I2CEx_ConfigDigitalFilter>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023aa:	f000 fa93 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000664 	.word	0x20000664
 80023b8:	40005400 	.word	0x40005400
 80023bc:	00301739 	.word	0x00301739

080023c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b0aa      	sub	sp, #168	; 0xa8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	2284      	movs	r2, #132	; 0x84
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f005 fe95 	bl	8008110 <memset>
  if(i2cHandle->Instance==I2C1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a22      	ldr	r2, [pc, #136]	; (8002474 <HAL_I2C_MspInit+0xb4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d13c      	bne.n	800246a <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fc9e 	bl	8004d40 <HAL_RCCEx_PeriphCLKConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800240a:	f000 fa63 	bl	80028d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_I2C_MspInit+0xb8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_I2C_MspInit+0xb8>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_I2C_MspInit+0xb8>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002426:	f44f 7310 	mov.w	r3, #576	; 0x240
 800242a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800242e:	2312      	movs	r3, #18
 8002430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002440:	2304      	movs	r3, #4
 8002442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800244a:	4619      	mov	r1, r3
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <HAL_I2C_MspInit+0xbc>)
 800244e:	f001 f825 	bl	800349c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_I2C_MspInit+0xb8>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_I2C_MspInit+0xb8>)
 8002458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_I2C_MspInit+0xb8>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800246a:	bf00      	nop
 800246c:	37a8      	adds	r7, #168	; 0xa8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40005400 	.word	0x40005400
 8002478:	40023800 	.word	0x40023800
 800247c:	40020400 	.word	0x40020400

08002480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002484:	b08e      	sub	sp, #56	; 0x38
 8002486:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002488:	f000 fe75 	bl	8003176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800248c:	f000 f980 	bl	8002790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002490:	f7ff fea0 	bl	80021d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002494:	f000 fd0e 	bl	8002eb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002498:	f000 fd9c 	bl	8002fd4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800249c:	f7ff ff50 	bl	8002340 <MX_I2C1_Init>
  MX_TIM2_Init();
 80024a0:	f000 fbd0 	bl	8002c44 <MX_TIM2_Init>
  MX_TIM3_Init();
 80024a4:	f000 fc1e 	bl	8002ce4 <MX_TIM3_Init>
  MX_SPI1_Init();
 80024a8:	f000 fa1a 	bl	80028e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//
	//Włączenie TIM
	//
	HAL_TIM_Base_Start_IT(&htim2); //Podstawowy do dt = 1s
 80024ac:	489d      	ldr	r0, [pc, #628]	; (8002724 <main+0x2a4>)
 80024ae:	f003 fcd5 	bl	8005e5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //Sterowanie transytorem 1kHz
 80024b2:	2108      	movs	r1, #8
 80024b4:	489c      	ldr	r0, [pc, #624]	; (8002728 <main+0x2a8>)
 80024b6:	f003 fdab 	bl	8006010 <HAL_TIM_PWM_Start>

	//
	//Ustawienie czujnika Temperatury
	//
	BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80024ba:	2301      	movs	r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	2101      	movs	r1, #1
 80024c0:	489a      	ldr	r0, [pc, #616]	; (800272c <main+0x2ac>)
 80024c2:	f7fe fe89 	bl	80011d8 <BMP280_Init>

	//
	// Ustawienie Wyświetlacza OLED
	//
	SSD1306_Init(&hi2c1);
 80024c6:	489a      	ldr	r0, [pc, #616]	; (8002730 <main+0x2b0>)
 80024c8:	f7ff fe2c 	bl	8002124 <SSD1306_Init>
	GFX_SetFont(font_8x5);
 80024cc:	4899      	ldr	r0, [pc, #612]	; (8002734 <main+0x2b4>)
 80024ce:	f7ff f9db 	bl	8001888 <GFX_SetFont>
	GFX_SetFontSize(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff f9e8 	bl	80018a8 <GFX_SetFontSize>
	SSD1306_Clear(BLACK);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7ff fde7 	bl	80020ac <SSD1306_Clear>
	SSD1306_Display();
 80024de:	f7ff fe03 	bl	80020e8 <SSD1306_Display>
	while (1)
	{
		//
		//Wyświetlanie danych na wyświetlaczu OLED
		//
		if((HAL_GetTick() - SoftTimerOled) > 100){
 80024e2:	f000 fe99 	bl	8003218 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	4b93      	ldr	r3, [pc, #588]	; (8002738 <main+0x2b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	f240 80c6 	bls.w	8002680 <main+0x200>
			SoftTimerOled = HAL_GetTick();
 80024f4:	f000 fe90 	bl	8003218 <HAL_GetTick>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4a8f      	ldr	r2, [pc, #572]	; (8002738 <main+0x2b8>)
 80024fc:	6013      	str	r3, [r2, #0]
			SSD1306_Clear(BLACK);
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fdd4 	bl	80020ac <SSD1306_Clear>
			sprintf(Message, "Regulacja Temperatury");
 8002504:	498d      	ldr	r1, [pc, #564]	; (800273c <main+0x2bc>)
 8002506:	488e      	ldr	r0, [pc, #568]	; (8002740 <main+0x2c0>)
 8002508:	f006 fa74 	bl	80089f4 <siprintf>
			GFX_DrawString(0, 0, Message, WHITE, 0);
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2301      	movs	r3, #1
 8002512:	4a8b      	ldr	r2, [pc, #556]	; (8002740 <main+0x2c0>)
 8002514:	2100      	movs	r1, #0
 8002516:	2000      	movs	r0, #0
 8002518:	f7ff fa94 	bl	8001a44 <GFX_DrawString>
			GFX_DrawLine(0, 9, 128, 9, WHITE);
 800251c:	2301      	movs	r3, #1
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2309      	movs	r3, #9
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	2109      	movs	r1, #9
 8002526:	2000      	movs	r0, #0
 8002528:	f7ff fba5 	bl	8001c76 <GFX_DrawLine>
			sprintf(Message, "Aktualna temp: %.2fC", temperature);
 800252c:	4b85      	ldr	r3, [pc, #532]	; (8002744 <main+0x2c4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe f829 	bl	8000588 <__aeabi_f2d>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4983      	ldr	r1, [pc, #524]	; (8002748 <main+0x2c8>)
 800253c:	4880      	ldr	r0, [pc, #512]	; (8002740 <main+0x2c0>)
 800253e:	f006 fa59 	bl	80089f4 <siprintf>
			GFX_DrawString(0, 12, Message, WHITE, 0);
 8002542:	2300      	movs	r3, #0
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2301      	movs	r3, #1
 8002548:	4a7d      	ldr	r2, [pc, #500]	; (8002740 <main+0x2c0>)
 800254a:	210c      	movs	r1, #12
 800254c:	2000      	movs	r0, #0
 800254e:	f7ff fa79 	bl	8001a44 <GFX_DrawString>
			sprintf(Message, "Zadana temp: %.1f C", temperature_set);
 8002552:	4b7e      	ldr	r3, [pc, #504]	; (800274c <main+0x2cc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe f816 	bl	8000588 <__aeabi_f2d>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	497b      	ldr	r1, [pc, #492]	; (8002750 <main+0x2d0>)
 8002562:	4877      	ldr	r0, [pc, #476]	; (8002740 <main+0x2c0>)
 8002564:	f006 fa46 	bl	80089f4 <siprintf>
			GFX_DrawString(0, 22, Message, WHITE, 0);
 8002568:	2300      	movs	r3, #0
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2301      	movs	r3, #1
 800256e:	4a74      	ldr	r2, [pc, #464]	; (8002740 <main+0x2c0>)
 8002570:	2116      	movs	r1, #22
 8002572:	2000      	movs	r0, #0
 8002574:	f7ff fa66 	bl	8001a44 <GFX_DrawString>
			sprintf(Message, "Cisnienie: %.1f HPa", ((float)pressure/100.0));
 8002578:	4b76      	ldr	r3, [pc, #472]	; (8002754 <main+0x2d4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002584:	ee17 0a90 	vmov	r0, s15
 8002588:	f7fd fffe 	bl	8000588 <__aeabi_f2d>
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4b71      	ldr	r3, [pc, #452]	; (8002758 <main+0x2d8>)
 8002592:	f7fe f97b 	bl	800088c <__aeabi_ddiv>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4970      	ldr	r1, [pc, #448]	; (800275c <main+0x2dc>)
 800259c:	4868      	ldr	r0, [pc, #416]	; (8002740 <main+0x2c0>)
 800259e:	f006 fa29 	bl	80089f4 <siprintf>
			GFX_DrawString(0, 32, Message, WHITE, 0);
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2301      	movs	r3, #1
 80025a8:	4a65      	ldr	r2, [pc, #404]	; (8002740 <main+0x2c0>)
 80025aa:	2120      	movs	r1, #32
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7ff fa49 	bl	8001a44 <GFX_DrawString>
			switch (status){
 80025b2:	4b6b      	ldr	r3, [pc, #428]	; (8002760 <main+0x2e0>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d83f      	bhi.n	800263c <main+0x1bc>
 80025bc:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <main+0x144>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025ef 	.word	0x080025ef
 80025cc:	08002609 	.word	0x08002609
 80025d0:	08002623 	.word	0x08002623
			case 1:
				sprintf(Message, "Status: Grzanie");
 80025d4:	4963      	ldr	r1, [pc, #396]	; (8002764 <main+0x2e4>)
 80025d6:	485a      	ldr	r0, [pc, #360]	; (8002740 <main+0x2c0>)
 80025d8:	f006 fa0c 	bl	80089f4 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 80025dc:	2300      	movs	r3, #0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2301      	movs	r3, #1
 80025e2:	4a57      	ldr	r2, [pc, #348]	; (8002740 <main+0x2c0>)
 80025e4:	212a      	movs	r1, #42	; 0x2a
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7ff fa2c 	bl	8001a44 <GFX_DrawString>
				break;
 80025ec:	e026      	b.n	800263c <main+0x1bc>
			case 2:
				sprintf(Message, "Status: Chlodzenie");
 80025ee:	495e      	ldr	r1, [pc, #376]	; (8002768 <main+0x2e8>)
 80025f0:	4853      	ldr	r0, [pc, #332]	; (8002740 <main+0x2c0>)
 80025f2:	f006 f9ff 	bl	80089f4 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 80025f6:	2300      	movs	r3, #0
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2301      	movs	r3, #1
 80025fc:	4a50      	ldr	r2, [pc, #320]	; (8002740 <main+0x2c0>)
 80025fe:	212a      	movs	r1, #42	; 0x2a
 8002600:	2000      	movs	r0, #0
 8002602:	f7ff fa1f 	bl	8001a44 <GFX_DrawString>
				break;
 8002606:	e019      	b.n	800263c <main+0x1bc>
			case 3:
				sprintf(Message, "Status: ERROR!!!");
 8002608:	4958      	ldr	r1, [pc, #352]	; (800276c <main+0x2ec>)
 800260a:	484d      	ldr	r0, [pc, #308]	; (8002740 <main+0x2c0>)
 800260c:	f006 f9f2 	bl	80089f4 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 8002610:	2300      	movs	r3, #0
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2301      	movs	r3, #1
 8002616:	4a4a      	ldr	r2, [pc, #296]	; (8002740 <main+0x2c0>)
 8002618:	212a      	movs	r1, #42	; 0x2a
 800261a:	2000      	movs	r0, #0
 800261c:	f7ff fa12 	bl	8001a44 <GFX_DrawString>
				break;
 8002620:	e00c      	b.n	800263c <main+0x1bc>
			case 4:
				sprintf(Message, "Status: STOP");
 8002622:	4953      	ldr	r1, [pc, #332]	; (8002770 <main+0x2f0>)
 8002624:	4846      	ldr	r0, [pc, #280]	; (8002740 <main+0x2c0>)
 8002626:	f006 f9e5 	bl	80089f4 <siprintf>
				GFX_DrawString(0, 42, Message, WHITE, 0);
 800262a:	2300      	movs	r3, #0
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2301      	movs	r3, #1
 8002630:	4a43      	ldr	r2, [pc, #268]	; (8002740 <main+0x2c0>)
 8002632:	212a      	movs	r1, #42	; 0x2a
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff fa05 	bl	8001a44 <GFX_DrawString>
				break;
 800263a:	bf00      	nop
			}
			GFX_DrawLine(127, 53, 127, 64, WHITE);
 800263c:	2301      	movs	r3, #1
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2340      	movs	r3, #64	; 0x40
 8002642:	227f      	movs	r2, #127	; 0x7f
 8002644:	2135      	movs	r1, #53	; 0x35
 8002646:	207f      	movs	r0, #127	; 0x7f
 8002648:	f7ff fb15 	bl	8001c76 <GFX_DrawLine>
			GFX_DrawRectangle(0, 53, (uint16_t)(128*temperature/temperature_set), 11, WHITE);
 800264c:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <main+0x2c4>)
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002774 <main+0x2f4>
 8002656:	ee67 6a87 	vmul.f32	s13, s15, s14
 800265a:	4b3c      	ldr	r3, [pc, #240]	; (800274c <main+0x2cc>)
 800265c:	ed93 7a00 	vldr	s14, [r3]
 8002660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002668:	ee17 3a90 	vmov	r3, s15
 800266c:	b29a      	uxth	r2, r3
 800266e:	2301      	movs	r3, #1
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	230b      	movs	r3, #11
 8002674:	2135      	movs	r1, #53	; 0x35
 8002676:	2000      	movs	r0, #0
 8002678:	f7ff fb43 	bl	8001d02 <GFX_DrawRectangle>
			SSD1306_Display();
 800267c:	f7ff fd34 	bl	80020e8 <SSD1306_Display>
		}
		if(zezwolenie){
 8002680:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <main+0x2f8>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f43f af2c 	beq.w	80024e2 <main+0x62>
			length = sprintf((char*)Buffor, "{\"Temp\":%.2f,\"t\":%.1f,\"Temp_set\":%.2f,\"Kp\":%.4f,\"Ki\":%.4f,\"Kd\":%.4f}\r\n",temperature,pid.dt,temperature_set,pid.Kp,pid.Ki,pid.Kd);
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <main+0x2c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd ff7a 	bl	8000588 <__aeabi_f2d>
 8002694:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002698:	4b38      	ldr	r3, [pc, #224]	; (800277c <main+0x2fc>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd ff73 	bl	8000588 <__aeabi_f2d>
 80026a2:	4604      	mov	r4, r0
 80026a4:	460d      	mov	r5, r1
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <main+0x2cc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff6c 	bl	8000588 <__aeabi_f2d>
 80026b0:	4680      	mov	r8, r0
 80026b2:	4689      	mov	r9, r1
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <main+0x2fc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd ff65 	bl	8000588 <__aeabi_f2d>
 80026be:	4682      	mov	sl, r0
 80026c0:	468b      	mov	fp, r1
 80026c2:	4b2e      	ldr	r3, [pc, #184]	; (800277c <main+0x2fc>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd ff5e 	bl	8000588 <__aeabi_f2d>
 80026cc:	e9c7 0100 	strd	r0, r1, [r7]
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <main+0x2fc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd ff57 	bl	8000588 <__aeabi_f2d>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80026e2:	ed97 7b00 	vldr	d7, [r7]
 80026e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80026ea:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80026ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80026f2:	e9cd 4500 	strd	r4, r5, [sp]
 80026f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026fa:	4921      	ldr	r1, [pc, #132]	; (8002780 <main+0x300>)
 80026fc:	4821      	ldr	r0, [pc, #132]	; (8002784 <main+0x304>)
 80026fe:	f006 f979 	bl	80089f4 <siprintf>
 8002702:	4603      	mov	r3, r0
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <main+0x308>)
 8002708:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, Buffor, length, 1000);
 800270a:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <main+0x308>)
 800270c:	881a      	ldrh	r2, [r3, #0]
 800270e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002712:	491c      	ldr	r1, [pc, #112]	; (8002784 <main+0x304>)
 8002714:	481d      	ldr	r0, [pc, #116]	; (800278c <main+0x30c>)
 8002716:	f004 fd53 	bl	80071c0 <HAL_UART_Transmit>
			zezwolenie = 0;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <main+0x2f8>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
		if((HAL_GetTick() - SoftTimerOled) > 100){
 8002720:	e6df      	b.n	80024e2 <main+0x62>
 8002722:	bf00      	nop
 8002724:	20000808 	.word	0x20000808
 8002728:	200007bc 	.word	0x200007bc
 800272c:	20000758 	.word	0x20000758
 8002730:	20000664 	.word	0x20000664
 8002734:	0800af50 	.word	0x0800af50
 8002738:	200006d4 	.word	0x200006d4
 800273c:	0800ae68 	.word	0x0800ae68
 8002740:	200006b4 	.word	0x200006b4
 8002744:	20000624 	.word	0x20000624
 8002748:	0800ae80 	.word	0x0800ae80
 800274c:	20000004 	.word	0x20000004
 8002750:	0800ae98 	.word	0x0800ae98
 8002754:	20000620 	.word	0x20000620
 8002758:	40590000 	.word	0x40590000
 800275c:	0800aeac 	.word	0x0800aeac
 8002760:	20000008 	.word	0x20000008
 8002764:	0800aec0 	.word	0x0800aec0
 8002768:	0800aed0 	.word	0x0800aed0
 800276c:	0800aee4 	.word	0x0800aee4
 8002770:	0800aef8 	.word	0x0800aef8
 8002774:	43000000 	.word	0x43000000
 8002778:	200006b0 	.word	0x200006b0
 800277c:	2000000c 	.word	0x2000000c
 8002780:	0800af08 	.word	0x0800af08
 8002784:	200006d8 	.word	0x200006d8
 8002788:	200006b2 	.word	0x200006b2
 800278c:	20000854 	.word	0x20000854

08002790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b094      	sub	sp, #80	; 0x50
 8002794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002796:	f107 0320 	add.w	r3, r7, #32
 800279a:	2230      	movs	r2, #48	; 0x30
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f005 fcb6 	bl	8008110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80027b4:	f001 fe0e 	bl	80043d4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <SystemClock_Config+0xc8>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	4a26      	ldr	r2, [pc, #152]	; (8002858 <SystemClock_Config+0xc8>)
 80027be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c2:	6413      	str	r3, [r2, #64]	; 0x40
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <SystemClock_Config+0xc8>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <SystemClock_Config+0xcc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <SystemClock_Config+0xcc>)
 80027da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b1e      	ldr	r3, [pc, #120]	; (800285c <SystemClock_Config+0xcc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80027f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027f6:	2302      	movs	r3, #2
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002800:	2304      	movs	r3, #4
 8002802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002804:	2348      	movs	r3, #72	; 0x48
 8002806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002808:	2302      	movs	r3, #2
 800280a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800280c:	2303      	movs	r3, #3
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	4618      	mov	r0, r3
 8002816:	f001 fded 	bl	80043f4 <HAL_RCC_OscConfig>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002820:	f000 f858 	bl	80028d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002824:	230f      	movs	r3, #15
 8002826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002828:	2302      	movs	r3, #2
 800282a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f002 f87b 	bl	800493c <HAL_RCC_ClockConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800284c:	f000 f842 	bl	80028d4 <Error_Handler>
  }
}
 8002850:	bf00      	nop
 8002852:	3750      	adds	r7, #80	; 0x50
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	40007000 	.word	0x40007000

08002860 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002870:	d11f      	bne.n	80028b2 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		//
		//Pobranie danych z czujnika - aktualna temp i press
		//
		BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8002872:	4912      	ldr	r1, [pc, #72]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002874:	4812      	ldr	r0, [pc, #72]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002876:	f7fe fe09 	bl	800148c <BMP280_ReadTemperatureAndPressure>
		//
		//Regulator
		//
		float u = u_pid_calculate(&pid, temperature_set, temperature);
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	eef0 0a47 	vmov.f32	s1, s14
 800288a:	eeb0 0a67 	vmov.f32	s0, s15
 800288e:	480e      	ldr	r0, [pc, #56]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002890:	f7ff fa87 	bl	8001da2 <u_pid_calculate>
 8002894:	ed87 0a03 	vstr	s0, [r7, #12]
		uint16_t sterowanie = saturation_pwm(u);
 8002898:	ed97 0a03 	vldr	s0, [r7, #12]
 800289c:	f7ff fb08 	bl	8001eb0 <saturation_pwm>
 80028a0:	4603      	mov	r3, r0
 80028a2:	817b      	strh	r3, [r7, #10]
		//
		//Wytworzenie sygnału
		//
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,sterowanie);
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	897a      	ldrh	r2, [r7, #10]
 80028aa:	63da      	str	r2, [r3, #60]	; 0x3c
		//
		//Wysłanie danych
		//
		zezwolenie = 1;
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
	}
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000620 	.word	0x20000620
 80028c0:	20000624 	.word	0x20000624
 80028c4:	20000004 	.word	0x20000004
 80028c8:	2000000c 	.word	0x2000000c
 80028cc:	200007bc 	.word	0x200007bc
 80028d0:	200006b0 	.word	0x200006b0

080028d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d8:	b672      	cpsid	i
}
 80028da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80028dc:	e7fe      	b.n	80028dc <Error_Handler+0x8>
	...

080028e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <MX_SPI1_Init+0x74>)
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <MX_SPI1_Init+0x78>)
 80028e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028ea:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <MX_SPI1_Init+0x74>)
 80028ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <MX_SPI1_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <MX_SPI1_Init+0x74>)
 80028fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <MX_SPI1_Init+0x74>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <MX_SPI1_Init+0x74>)
 8002908:	2200      	movs	r2, #0
 800290a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <MX_SPI1_Init+0x74>)
 800290e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002912:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <MX_SPI1_Init+0x74>)
 8002916:	2210      	movs	r2, #16
 8002918:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <MX_SPI1_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <MX_SPI1_Init+0x74>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <MX_SPI1_Init+0x74>)
 8002928:	2200      	movs	r2, #0
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <MX_SPI1_Init+0x74>)
 800292e:	2207      	movs	r2, #7
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <MX_SPI1_Init+0x74>)
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <MX_SPI1_Init+0x74>)
 800293a:	2208      	movs	r2, #8
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <MX_SPI1_Init+0x74>)
 8002940:	f002 fdee 	bl	8005520 <HAL_SPI_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800294a:	f7ff ffc3 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000758 	.word	0x20000758
 8002958:	40013000 	.word	0x40013000

0800295c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <HAL_SPI_MspInit+0x7c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d127      	bne.n	80029ce <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_SPI_MspInit+0x80>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <HAL_SPI_MspInit+0x80>)
 8002984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_SPI_MspInit+0x80>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_SPI_MspInit+0x80>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_SPI_MspInit+0x80>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_SPI_MspInit+0x80>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029ae:	23e0      	movs	r3, #224	; 0xe0
 80029b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029be:	2305      	movs	r3, #5
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <HAL_SPI_MspInit+0x84>)
 80029ca:	f000 fd67 	bl	800349c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80029ce:	bf00      	nop
 80029d0:	3728      	adds	r7, #40	; 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40013000 	.word	0x40013000
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020000 	.word	0x40020000

080029e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_MspInit+0x44>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <HAL_MspInit+0x44>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_MspInit+0x44>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_MspInit+0x44>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <HAL_MspInit+0x44>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_MspInit+0x44>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <NMI_Handler+0x4>

08002a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <MemManage_Handler+0x4>

08002a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <BusFault_Handler+0x4>

08002a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <UsageFault_Handler+0x4>

08002a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a78:	f000 fbba 	bl	80031f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <TIM2_IRQHandler+0x10>)
 8002a86:	f003 fbbd 	bl	8006204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000808 	.word	0x20000808

08002a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
	return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_kill>:

int _kill(int pid, int sig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aae:	f005 fb05 	bl	80080bc <__errno>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2216      	movs	r2, #22
 8002ab6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_exit>:

void _exit (int status)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ffe7 	bl	8002aa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ad6:	e7fe      	b.n	8002ad6 <_exit+0x12>

08002ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e00a      	b.n	8002b00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aea:	f3af 8000 	nop.w
 8002aee:	4601      	mov	r1, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	60ba      	str	r2, [r7, #8]
 8002af6:	b2ca      	uxtb	r2, r1
 8002af8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbf0      	blt.n	8002aea <_read+0x12>
	}

return len;
 8002b08:	687b      	ldr	r3, [r7, #4]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e009      	b.n	8002b38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	60ba      	str	r2, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dbf1      	blt.n	8002b24 <_write+0x12>
	}
	return len;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_close>:

int _close(int file)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
	return -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b72:	605a      	str	r2, [r3, #4]
	return 0;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <_isatty>:

int _isatty(int file)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
	return 1;
 8002b8a:	2301      	movs	r3, #1
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bbc:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <_sbrk+0x5c>)
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <_sbrk+0x60>)
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <_sbrk+0x64>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <_sbrk+0x64>)
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <_sbrk+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d207      	bcs.n	8002bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be4:	f005 fa6a 	bl	80080bc <__errno>
 8002be8:	4603      	mov	r3, r0
 8002bea:	220c      	movs	r2, #12
 8002bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e009      	b.n	8002c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <_sbrk+0x64>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <_sbrk+0x64>)
 8002c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20050000 	.word	0x20050000
 8002c14:	00000400 	.word	0x00000400
 8002c18:	20000628 	.word	0x20000628
 8002c1c:	20000cf0 	.word	0x20000cf0

08002c20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <SystemInit+0x20>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <SystemInit+0x20>)
 8002c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c62:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002c6c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002c70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <MX_TIM2_Init+0x9c>)
 8002c7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c8a:	4814      	ldr	r0, [pc, #80]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002c8c:	f003 f88e 	bl	8005dac <HAL_TIM_Base_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002c96:	f7ff fe1d 	bl	80028d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480d      	ldr	r0, [pc, #52]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002ca8:	f003 fce0 	bl	800666c <HAL_TIM_ConfigClockSource>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002cb2:	f7ff fe0f 	bl	80028d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4806      	ldr	r0, [pc, #24]	; (8002cdc <MX_TIM2_Init+0x98>)
 8002cc4:	f004 f982 	bl	8006fcc <HAL_TIMEx_MasterConfigSynchronization>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002cce:	f7ff fe01 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cd2:	bf00      	nop
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000808 	.word	0x20000808
 8002ce0:	0001869f 	.word	0x0001869f

08002ce4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08e      	sub	sp, #56	; 0x38
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf8:	f107 031c 	add.w	r3, r7, #28
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d04:	463b      	mov	r3, r7
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	611a      	str	r2, [r3, #16]
 8002d12:	615a      	str	r2, [r3, #20]
 8002d14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d18:	4a2d      	ldr	r2, [pc, #180]	; (8002dd0 <MX_TIM3_Init+0xec>)
 8002d1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d1e:	2247      	movs	r2, #71	; 0x47
 8002d20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002d28:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d3c:	4823      	ldr	r0, [pc, #140]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d3e:	f003 f835 	bl	8005dac <HAL_TIM_Base_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d48:	f7ff fdc4 	bl	80028d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d56:	4619      	mov	r1, r3
 8002d58:	481c      	ldr	r0, [pc, #112]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d5a:	f003 fc87 	bl	800666c <HAL_TIM_ConfigClockSource>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002d64:	f7ff fdb6 	bl	80028d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d68:	4818      	ldr	r0, [pc, #96]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d6a:	f003 f8ef 	bl	8005f4c <HAL_TIM_PWM_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002d74:	f7ff fdae 	bl	80028d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	4619      	mov	r1, r3
 8002d86:	4811      	ldr	r0, [pc, #68]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002d88:	f004 f920 	bl	8006fcc <HAL_TIMEx_MasterConfigSynchronization>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d92:	f7ff fd9f 	bl	80028d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d96:	2360      	movs	r3, #96	; 0x60
 8002d98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002da6:	463b      	mov	r3, r7
 8002da8:	2208      	movs	r2, #8
 8002daa:	4619      	mov	r1, r3
 8002dac:	4807      	ldr	r0, [pc, #28]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002dae:	f003 fb49 	bl	8006444 <HAL_TIM_PWM_ConfigChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002db8:	f7ff fd8c 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002dbc:	4803      	ldr	r0, [pc, #12]	; (8002dcc <MX_TIM3_Init+0xe8>)
 8002dbe:	f000 f841 	bl	8002e44 <HAL_TIM_MspPostInit>

}
 8002dc2:	bf00      	nop
 8002dc4:	3738      	adds	r7, #56	; 0x38
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200007bc 	.word	0x200007bc
 8002dd0:	40000400 	.word	0x40000400

08002dd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de4:	d114      	bne.n	8002e10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6413      	str	r3, [r2, #64]	; 0x40
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	201c      	movs	r0, #28
 8002e04:	f000 fb13 	bl	800342e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e08:	201c      	movs	r0, #28
 8002e0a:	f000 fb2c 	bl	8003466 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e0e:	e010      	b.n	8002e32 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_TIM_Base_MspInit+0x6c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10b      	bne.n	8002e32 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_TIM_Base_MspInit+0x68>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40000400 	.word	0x40000400

08002e44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_TIM_MspPostInit+0x64>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d11c      	bne.n	8002ea0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_TIM_MspPostInit+0x68>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_TIM_MspPostInit+0x68>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_TIM_MspPostInit+0x68>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e90:	2302      	movs	r3, #2
 8002e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <HAL_TIM_MspPostInit+0x6c>)
 8002e9c:	f000 fafe 	bl	800349c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ea0:	bf00      	nop
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40020800 	.word	0x40020800

08002eb4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <MX_USART3_UART_Init+0x5c>)
 8002ebc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ec4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002eda:	220c      	movs	r2, #12
 8002edc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <MX_USART3_UART_Init+0x58>)
 8002ef8:	f004 f914 	bl	8007124 <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002f02:	f7ff fce7 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000854 	.word	0x20000854
 8002f10:	40004800 	.word	0x40004800

08002f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b0aa      	sub	sp, #168	; 0xa8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f2c:	f107 0310 	add.w	r3, r7, #16
 8002f30:	2284      	movs	r2, #132	; 0x84
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f005 f8eb 	bl	8008110 <memset>
  if(uartHandle->Instance==USART3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <HAL_UART_MspInit+0xb4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d13c      	bne.n	8002fbe <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 fef4 	bl	8004d40 <HAL_RCCEx_PeriphCLKConfig>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f5e:	f7ff fcb9 	bl	80028d4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <HAL_UART_MspInit+0xb8>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <HAL_UART_MspInit+0xb8>)
 8002f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_UART_MspInit+0xb8>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_UART_MspInit+0xb8>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <HAL_UART_MspInit+0xb8>)
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <HAL_UART_MspInit+0xb8>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fac:	2307      	movs	r3, #7
 8002fae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <HAL_UART_MspInit+0xbc>)
 8002fba:	f000 fa6f 	bl	800349c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	37a8      	adds	r7, #168	; 0xa8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40004800 	.word	0x40004800
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020c00 	.word	0x40020c00

08002fd4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002fde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fe2:	2206      	movs	r2, #6
 8002fe4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fe8:	2202      	movs	r2, #2
 8002fea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003006:	2200      	movs	r2, #0
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800300c:	2201      	movs	r2, #1
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003018:	f001 f893 	bl	8004142 <HAL_PCD_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003022:	f7ff fc57 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200008d8 	.word	0x200008d8

08003030 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b0ac      	sub	sp, #176	; 0xb0
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003048:	f107 0318 	add.w	r3, r7, #24
 800304c:	2284      	movs	r2, #132	; 0x84
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f005 f85d 	bl	8008110 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305e:	d159      	bne.n	8003114 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003064:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800306c:	f107 0318 	add.w	r3, r7, #24
 8003070:	4618      	mov	r0, r3
 8003072:	f001 fe65 	bl	8004d40 <HAL_RCCEx_PeriphCLKConfig>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800307c:	f7ff fc2a 	bl	80028d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	4b26      	ldr	r3, [pc, #152]	; (800311c <HAL_PCD_MspInit+0xec>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4a25      	ldr	r2, [pc, #148]	; (800311c <HAL_PCD_MspInit+0xec>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6313      	str	r3, [r2, #48]	; 0x30
 800308c:	4b23      	ldr	r3, [pc, #140]	; (800311c <HAL_PCD_MspInit+0xec>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8003098:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800309c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030b2:	230a      	movs	r3, #10
 80030b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030bc:	4619      	mov	r1, r3
 80030be:	4818      	ldr	r0, [pc, #96]	; (8003120 <HAL_PCD_MspInit+0xf0>)
 80030c0:	f000 f9ec 	bl	800349c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80030c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80030d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030dc:	4619      	mov	r1, r3
 80030de:	4810      	ldr	r0, [pc, #64]	; (8003120 <HAL_PCD_MspInit+0xf0>)
 80030e0:	f000 f9dc 	bl	800349c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <HAL_PCD_MspInit+0xec>)
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	4a0c      	ldr	r2, [pc, #48]	; (800311c <HAL_PCD_MspInit+0xec>)
 80030ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ee:	6353      	str	r3, [r2, #52]	; 0x34
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_PCD_MspInit+0xec>)
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_PCD_MspInit+0xec>)
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	4a06      	ldr	r2, [pc, #24]	; (800311c <HAL_PCD_MspInit+0xec>)
 8003102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003106:	6453      	str	r3, [r2, #68]	; 0x44
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <HAL_PCD_MspInit+0xec>)
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003114:	bf00      	nop
 8003116:	37b0      	adds	r7, #176	; 0xb0
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	40020000 	.word	0x40020000

08003124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800315c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003128:	480d      	ldr	r0, [pc, #52]	; (8003160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800312a:	490e      	ldr	r1, [pc, #56]	; (8003164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800312e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003130:	e002      	b.n	8003138 <LoopCopyDataInit>

08003132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003136:	3304      	adds	r3, #4

08003138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800313a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800313c:	d3f9      	bcc.n	8003132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313e:	4a0b      	ldr	r2, [pc, #44]	; (800316c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003140:	4c0b      	ldr	r4, [pc, #44]	; (8003170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003144:	e001      	b.n	800314a <LoopFillZerobss>

08003146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003148:	3204      	adds	r2, #4

0800314a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800314a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800314c:	d3fb      	bcc.n	8003146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800314e:	f7ff fd67 	bl	8002c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003152:	f004 ffb9 	bl	80080c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003156:	f7ff f993 	bl	8002480 <main>
  bx  lr    
 800315a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800315c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003164:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003168:	0800b53c 	.word	0x0800b53c
  ldr r2, =_sbss
 800316c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003170:	20000cf0 	.word	0x20000cf0

08003174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003174:	e7fe      	b.n	8003174 <ADC_IRQHandler>

08003176 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800317a:	2003      	movs	r0, #3
 800317c:	f000 f94c 	bl	8003418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003180:	2000      	movs	r0, #0
 8003182:	f000 f805 	bl	8003190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003186:	f7ff fc2d 	bl	80029e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_InitTick+0x54>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_InitTick+0x58>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	4619      	mov	r1, r3
 80031a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f967 	bl	8003482 <HAL_SYSTICK_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00e      	b.n	80031dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b0f      	cmp	r3, #15
 80031c2:	d80a      	bhi.n	80031da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031c4:	2200      	movs	r2, #0
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	f000 f92f 	bl	800342e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031d0:	4a06      	ldr	r2, [pc, #24]	; (80031ec <HAL_InitTick+0x5c>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e000      	b.n	80031dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000028 	.word	0x20000028
 80031e8:	20000030 	.word	0x20000030
 80031ec:	2000002c 	.word	0x2000002c

080031f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_IncTick+0x20>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <HAL_IncTick+0x24>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	4a04      	ldr	r2, [pc, #16]	; (8003214 <HAL_IncTick+0x24>)
 8003202:	6013      	str	r3, [r2, #0]
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000030 	.word	0x20000030
 8003214:	20000cdc 	.word	0x20000cdc

08003218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return uwTick;
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_GetTick+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000cdc 	.word	0x20000cdc

08003230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003238:	f7ff ffee 	bl	8003218 <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d005      	beq.n	8003256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_Delay+0x44>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003256:	bf00      	nop
 8003258:	f7ff ffde 	bl	8003218 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	429a      	cmp	r2, r3
 8003266:	d8f7      	bhi.n	8003258 <HAL_Delay+0x28>
  {
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000030 	.word	0x20000030

08003278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <__NVIC_SetPriorityGrouping+0x40>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003294:	4013      	ands	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <__NVIC_SetPriorityGrouping+0x44>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a6:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <__NVIC_SetPriorityGrouping+0x40>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	60d3      	str	r3, [r2, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00
 80032bc:	05fa0000 	.word	0x05fa0000

080032c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <__NVIC_GetPriorityGrouping+0x18>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f003 0307 	and.w	r3, r3, #7
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	db0b      	blt.n	8003306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	f003 021f 	and.w	r2, r3, #31
 80032f4:	4907      	ldr	r1, [pc, #28]	; (8003314 <__NVIC_EnableIRQ+0x38>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2001      	movs	r0, #1
 80032fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000e100 	.word	0xe000e100

08003318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003328:	2b00      	cmp	r3, #0
 800332a:	db0a      	blt.n	8003342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	490c      	ldr	r1, [pc, #48]	; (8003364 <__NVIC_SetPriority+0x4c>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	440b      	add	r3, r1
 800333c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003340:	e00a      	b.n	8003358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4908      	ldr	r1, [pc, #32]	; (8003368 <__NVIC_SetPriority+0x50>)
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	3b04      	subs	r3, #4
 8003350:	0112      	lsls	r2, r2, #4
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	440b      	add	r3, r1
 8003356:	761a      	strb	r2, [r3, #24]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000e100 	.word	0xe000e100
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f1c3 0307 	rsb	r3, r3, #7
 8003386:	2b04      	cmp	r3, #4
 8003388:	bf28      	it	cs
 800338a:	2304      	movcs	r3, #4
 800338c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3304      	adds	r3, #4
 8003392:	2b06      	cmp	r3, #6
 8003394:	d902      	bls.n	800339c <NVIC_EncodePriority+0x30>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3b03      	subs	r3, #3
 800339a:	e000      	b.n	800339e <NVIC_EncodePriority+0x32>
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	401a      	ands	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b4:	f04f 31ff 	mov.w	r1, #4294967295
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	43d9      	mvns	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c4:	4313      	orrs	r3, r2
         );
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033e4:	d301      	bcc.n	80033ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00f      	b.n	800340a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <SysTick_Config+0x40>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033f2:	210f      	movs	r1, #15
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	f7ff ff8e 	bl	8003318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <SysTick_Config+0x40>)
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <SysTick_Config+0x40>)
 8003404:	2207      	movs	r2, #7
 8003406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	e000e010 	.word	0xe000e010

08003418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff29 	bl	8003278 <__NVIC_SetPriorityGrouping>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003440:	f7ff ff3e 	bl	80032c0 <__NVIC_GetPriorityGrouping>
 8003444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	6978      	ldr	r0, [r7, #20]
 800344c:	f7ff ff8e 	bl	800336c <NVIC_EncodePriority>
 8003450:	4602      	mov	r2, r0
 8003452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff5d 	bl	8003318 <__NVIC_SetPriority>
}
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff31 	bl	80032dc <__NVIC_EnableIRQ>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ffa2 	bl	80033d4 <SysTick_Config>
 8003490:	4603      	mov	r3, r0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	e175      	b.n	80037a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80034bc:	2201      	movs	r2, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f040 8164 	bne.w	80037a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d005      	beq.n	80034f2 <HAL_GPIO_Init+0x56>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d130      	bne.n	8003554 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003528:	2201      	movs	r2, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 0201 	and.w	r2, r3, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d017      	beq.n	8003590 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d123      	bne.n	80035e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	220f      	movs	r2, #15
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3208      	adds	r2, #8
 80035de:	69b9      	ldr	r1, [r7, #24]
 80035e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0203 	and.w	r2, r3, #3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80be 	beq.w	80037a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003626:	4b66      	ldr	r3, [pc, #408]	; (80037c0 <HAL_GPIO_Init+0x324>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	4a65      	ldr	r2, [pc, #404]	; (80037c0 <HAL_GPIO_Init+0x324>)
 800362c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003630:	6453      	str	r3, [r2, #68]	; 0x44
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_GPIO_Init+0x324>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800363e:	4a61      	ldr	r2, [pc, #388]	; (80037c4 <HAL_GPIO_Init+0x328>)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	089b      	lsrs	r3, r3, #2
 8003644:	3302      	adds	r3, #2
 8003646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	220f      	movs	r2, #15
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <HAL_GPIO_Init+0x32c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d037      	beq.n	80036da <HAL_GPIO_Init+0x23e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a57      	ldr	r2, [pc, #348]	; (80037cc <HAL_GPIO_Init+0x330>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d031      	beq.n	80036d6 <HAL_GPIO_Init+0x23a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <HAL_GPIO_Init+0x334>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02b      	beq.n	80036d2 <HAL_GPIO_Init+0x236>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a55      	ldr	r2, [pc, #340]	; (80037d4 <HAL_GPIO_Init+0x338>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d025      	beq.n	80036ce <HAL_GPIO_Init+0x232>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a54      	ldr	r2, [pc, #336]	; (80037d8 <HAL_GPIO_Init+0x33c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01f      	beq.n	80036ca <HAL_GPIO_Init+0x22e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a53      	ldr	r2, [pc, #332]	; (80037dc <HAL_GPIO_Init+0x340>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d019      	beq.n	80036c6 <HAL_GPIO_Init+0x22a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a52      	ldr	r2, [pc, #328]	; (80037e0 <HAL_GPIO_Init+0x344>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_GPIO_Init+0x226>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a51      	ldr	r2, [pc, #324]	; (80037e4 <HAL_GPIO_Init+0x348>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00d      	beq.n	80036be <HAL_GPIO_Init+0x222>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a50      	ldr	r2, [pc, #320]	; (80037e8 <HAL_GPIO_Init+0x34c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <HAL_GPIO_Init+0x21e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4f      	ldr	r2, [pc, #316]	; (80037ec <HAL_GPIO_Init+0x350>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_GPIO_Init+0x21a>
 80036b2:	2309      	movs	r3, #9
 80036b4:	e012      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036b6:	230a      	movs	r3, #10
 80036b8:	e010      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036ba:	2308      	movs	r3, #8
 80036bc:	e00e      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036be:	2307      	movs	r3, #7
 80036c0:	e00c      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036c2:	2306      	movs	r3, #6
 80036c4:	e00a      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036c6:	2305      	movs	r3, #5
 80036c8:	e008      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036ca:	2304      	movs	r3, #4
 80036cc:	e006      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036ce:	2303      	movs	r3, #3
 80036d0:	e004      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e002      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <HAL_GPIO_Init+0x240>
 80036da:	2300      	movs	r3, #0
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	f002 0203 	and.w	r2, r2, #3
 80036e2:	0092      	lsls	r2, r2, #2
 80036e4:	4093      	lsls	r3, r2
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036ec:	4935      	ldr	r1, [pc, #212]	; (80037c4 <HAL_GPIO_Init+0x328>)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fa:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <HAL_GPIO_Init+0x354>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800371e:	4a34      	ldr	r2, [pc, #208]	; (80037f0 <HAL_GPIO_Init+0x354>)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003724:	4b32      	ldr	r3, [pc, #200]	; (80037f0 <HAL_GPIO_Init+0x354>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003748:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <HAL_GPIO_Init+0x354>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800374e:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <HAL_GPIO_Init+0x354>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003772:	4a1f      	ldr	r2, [pc, #124]	; (80037f0 <HAL_GPIO_Init+0x354>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_GPIO_Init+0x354>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <HAL_GPIO_Init+0x354>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3301      	adds	r3, #1
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b0f      	cmp	r3, #15
 80037ac:	f67f ae86 	bls.w	80034bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40013800 	.word	0x40013800
 80037c8:	40020000 	.word	0x40020000
 80037cc:	40020400 	.word	0x40020400
 80037d0:	40020800 	.word	0x40020800
 80037d4:	40020c00 	.word	0x40020c00
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40021400 	.word	0x40021400
 80037e0:	40021800 	.word	0x40021800
 80037e4:	40021c00 	.word	0x40021c00
 80037e8:	40022000 	.word	0x40022000
 80037ec:	40022400 	.word	0x40022400
 80037f0:	40013c00 	.word	0x40013c00

080037f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	807b      	strh	r3, [r7, #2]
 8003800:	4613      	mov	r3, r2
 8003802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003804:	787b      	ldrb	r3, [r7, #1]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003810:	e003      	b.n	800381a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003812:	887b      	ldrh	r3, [r7, #2]
 8003814:	041a      	lsls	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	619a      	str	r2, [r3, #24]
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07f      	b.n	800393a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe fdb6 	bl	80023c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003878:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003888:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	e006      	b.n	80038b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d104      	bne.n	80038c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_I2C_Init+0x11c>)
 80038ce:	430b      	orrs	r3, r1
 80038d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69d9      	ldr	r1, [r3, #28]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	02008000 	.word	0x02008000

08003948 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4603      	mov	r3, r0
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	460b      	mov	r3, r1
 800395c:	813b      	strh	r3, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b20      	cmp	r3, #32
 800396c:	f040 80f9 	bne.w	8003b62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_I2C_Mem_Write+0x34>
 8003976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003982:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0ed      	b.n	8003b64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_I2C_Mem_Write+0x4e>
 8003992:	2302      	movs	r3, #2
 8003994:	e0e6      	b.n	8003b64 <HAL_I2C_Mem_Write+0x21c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800399e:	f7ff fc3b 	bl	8003218 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2319      	movs	r3, #25
 80039aa:	2201      	movs	r2, #1
 80039ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f955 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0d1      	b.n	8003b64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2221      	movs	r2, #33	; 0x21
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039e8:	88f8      	ldrh	r0, [r7, #6]
 80039ea:	893a      	ldrh	r2, [r7, #8]
 80039ec:	8979      	ldrh	r1, [r7, #10]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4603      	mov	r3, r0
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f8b9 	bl	8003b70 <I2C_RequestMemoryWrite>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0a9      	b.n	8003b64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2bff      	cmp	r3, #255	; 0xff
 8003a18:	d90e      	bls.n	8003a38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	22ff      	movs	r2, #255	; 0xff
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	8979      	ldrh	r1, [r7, #10]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fabd 	bl	8003fb0 <I2C_TransferConfig>
 8003a36:	e00f      	b.n	8003a58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	8979      	ldrh	r1, [r7, #10]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 faac 	bl	8003fb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f93f 	bl	8003ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e07b      	b.n	8003b64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d034      	beq.n	8003b10 <HAL_I2C_Mem_Write+0x1c8>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d130      	bne.n	8003b10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2180      	movs	r1, #128	; 0x80
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f8d1 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e04d      	b.n	8003b64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2bff      	cmp	r3, #255	; 0xff
 8003ad0:	d90e      	bls.n	8003af0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	22ff      	movs	r2, #255	; 0xff
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	8979      	ldrh	r1, [r7, #10]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fa61 	bl	8003fb0 <I2C_TransferConfig>
 8003aee:	e00f      	b.n	8003b10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	8979      	ldrh	r1, [r7, #10]
 8003b02:	2300      	movs	r3, #0
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 fa50 	bl	8003fb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d19e      	bne.n	8003a58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f91e 	bl	8003d60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e01a      	b.n	8003b64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2220      	movs	r2, #32
 8003b34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_I2C_Mem_Write+0x224>)
 8003b42:	400b      	ands	r3, r1
 8003b44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
  }
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	fe00e800 	.word	0xfe00e800

08003b70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	817b      	strh	r3, [r7, #10]
 8003b82:	460b      	mov	r3, r1
 8003b84:	813b      	strh	r3, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	8979      	ldrh	r1, [r7, #10]
 8003b90:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <I2C_RequestMemoryWrite+0xa4>)
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fa09 	bl	8003fb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f89c 	bl	8003ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e02c      	b.n	8003c0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb8:	893b      	ldrh	r3, [r7, #8]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc2:	e015      	b.n	8003bf0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bc4:	893b      	ldrh	r3, [r7, #8]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f882 	bl	8003ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e012      	b.n	8003c0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003be6:	893b      	ldrh	r3, [r7, #8]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f830 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	80002000 	.word	0x80002000

08003c18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d103      	bne.n	8003c36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d007      	beq.n	8003c54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	619a      	str	r2, [r3, #24]
  }
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c70:	e022      	b.n	8003cb8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d01e      	beq.n	8003cb8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7ff facd 	bl	8003218 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d113      	bne.n	8003cb8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e00f      	b.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d0cd      	beq.n	8003c72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cec:	e02c      	b.n	8003d48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f870 	bl	8003dd8 <I2C_IsErrorOccurred>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e02a      	b.n	8003d58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d01e      	beq.n	8003d48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0a:	f7ff fa85 	bl	8003218 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d113      	bne.n	8003d48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e007      	b.n	8003d58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d1cb      	bne.n	8003cee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d6c:	e028      	b.n	8003dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f830 	bl	8003dd8 <I2C_IsErrorOccurred>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e026      	b.n	8003dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d82:	f7ff fa49 	bl	8003218 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d113      	bne.n	8003dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e007      	b.n	8003dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d1cf      	bne.n	8003d6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d075      	beq.n	8003ef0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2210      	movs	r2, #16
 8003e0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e0c:	e056      	b.n	8003ebc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d052      	beq.n	8003ebc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e16:	f7ff f9ff 	bl	8003218 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_IsErrorOccurred+0x54>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d147      	bne.n	8003ebc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4e:	d12e      	bne.n	8003eae <I2C_IsErrorOccurred+0xd6>
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e56:	d02a      	beq.n	8003eae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d027      	beq.n	8003eae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e6e:	f7ff f9d3 	bl	8003218 <HAL_GetTick>
 8003e72:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e74:	e01b      	b.n	8003eae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e76:	f7ff f9cf 	bl	8003218 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b19      	cmp	r3, #25
 8003e82:	d914      	bls.n	8003eae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d1dc      	bne.n	8003e76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d003      	beq.n	8003ed2 <I2C_IsErrorOccurred+0xfa>
 8003eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d09d      	beq.n	8003e0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	f043 0304 	orr.w	r3, r3, #4
 8003ee8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00b      	beq.n	8003f3c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	f043 0308 	orr.w	r3, r3, #8
 8003f2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01c      	beq.n	8003fa0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff fe56 	bl	8003c18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6859      	ldr	r1, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <I2C_IsErrorOccurred+0x1d4>)
 8003f78:	400b      	ands	r3, r1
 8003f7a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3728      	adds	r7, #40	; 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	fe00e800 	.word	0xfe00e800

08003fb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	817b      	strh	r3, [r7, #10]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fc2:	897b      	ldrh	r3, [r7, #10]
 8003fc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fc8:	7a7b      	ldrb	r3, [r7, #9]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fd0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fde:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	0d5b      	lsrs	r3, r3, #21
 8003fea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003fee:	4b08      	ldr	r3, [pc, #32]	; (8004010 <I2C_TransferConfig+0x60>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	ea02 0103 	and.w	r1, r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	03ff63ff 	.word	0x03ff63ff

08004014 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	d138      	bne.n	800409c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004034:	2302      	movs	r3, #2
 8004036:	e032      	b.n	800409e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	; 0x24
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004066:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d139      	bne.n	8004134 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e033      	b.n	8004136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2224      	movs	r2, #36	; 0x24
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004144:	b08f      	sub	sp, #60	; 0x3c
 8004146:	af0a      	add	r7, sp, #40	; 0x28
 8004148:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e116      	b.n	8004382 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fe ff5e 	bl	8003030 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2203      	movs	r2, #3
 8004178:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d102      	bne.n	800418e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f003 fcfc 	bl	8007b90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	687e      	ldr	r6, [r7, #4]
 80041a0:	466d      	mov	r5, sp
 80041a2:	f106 0410 	add.w	r4, r6, #16
 80041a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80041b6:	1d33      	adds	r3, r6, #4
 80041b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ba:	6838      	ldr	r0, [r7, #0]
 80041bc:	f003 fc90 	bl	8007ae0 <USB_CoreInit>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0d7      	b.n	8004382 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2100      	movs	r1, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	f003 fcea 	bl	8007bb2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e04a      	b.n	800427a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	333d      	adds	r3, #61	; 0x3d
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	333c      	adds	r3, #60	; 0x3c
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	b298      	uxth	r0, r3
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	3342      	adds	r3, #66	; 0x42
 8004220:	4602      	mov	r2, r0
 8004222:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	333f      	adds	r3, #63	; 0x3f
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3344      	adds	r3, #68	; 0x44
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3348      	adds	r3, #72	; 0x48
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	3350      	adds	r3, #80	; 0x50
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	3301      	adds	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	7bfa      	ldrb	r2, [r7, #15]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d3af      	bcc.n	80041e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
 8004288:	e044      	b.n	8004314 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800428a:	7bfa      	ldrb	r2, [r7, #15]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80042b2:	7bfa      	ldrb	r2, [r7, #15]
 80042b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	3301      	adds	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d3b5      	bcc.n	800428a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	687e      	ldr	r6, [r7, #4]
 8004326:	466d      	mov	r5, sp
 8004328:	f106 0410 	add.w	r4, r6, #16
 800432c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800432e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004334:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004338:	e885 0003 	stmia.w	r5, {r0, r1}
 800433c:	1d33      	adds	r3, r6, #4
 800433e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004340:	6838      	ldr	r0, [r7, #0]
 8004342:	f003 fc83 	bl	8007c4c <USB_DevInit>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e014      	b.n	8004382 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	2b01      	cmp	r3, #1
 800436e:	d102      	bne.n	8004376 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f80b 	bl	800438c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f003 fe3d 	bl	8007ffa <USB_DevDisconnect>

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800438c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	10000003 	.word	0x10000003

080043d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40007000 	.word	0x40007000

080043f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043fc:	2300      	movs	r3, #0
 80043fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e291      	b.n	800492e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8087 	beq.w	8004526 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004418:	4b96      	ldr	r3, [pc, #600]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b04      	cmp	r3, #4
 8004422:	d00c      	beq.n	800443e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004424:	4b93      	ldr	r3, [pc, #588]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b08      	cmp	r3, #8
 800442e:	d112      	bne.n	8004456 <HAL_RCC_OscConfig+0x62>
 8004430:	4b90      	ldr	r3, [pc, #576]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800443c:	d10b      	bne.n	8004456 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443e:	4b8d      	ldr	r3, [pc, #564]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d06c      	beq.n	8004524 <HAL_RCC_OscConfig+0x130>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d168      	bne.n	8004524 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e26b      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x7a>
 8004460:	4b84      	ldr	r3, [pc, #528]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a83      	ldr	r2, [pc, #524]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e02e      	b.n	80044cc <HAL_RCC_OscConfig+0xd8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0x9c>
 8004476:	4b7f      	ldr	r3, [pc, #508]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a7e      	ldr	r2, [pc, #504]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 800447c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4b7c      	ldr	r3, [pc, #496]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7b      	ldr	r2, [pc, #492]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e01d      	b.n	80044cc <HAL_RCC_OscConfig+0xd8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0xc0>
 800449a:	4b76      	ldr	r3, [pc, #472]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a75      	ldr	r2, [pc, #468]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b73      	ldr	r3, [pc, #460]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a72      	ldr	r2, [pc, #456]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0xd8>
 80044b4:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b6c      	ldr	r3, [pc, #432]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a6b      	ldr	r2, [pc, #428]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fe fea0 	bl	8003218 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fe fe9c 	bl	8003218 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e21f      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b61      	ldr	r3, [pc, #388]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0xe8>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe fe8c 	bl	8003218 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004504:	f7fe fe88 	bl	8003218 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e20b      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	4b57      	ldr	r3, [pc, #348]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x110>
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d069      	beq.n	8004606 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004532:	4b50      	ldr	r3, [pc, #320]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b08      	cmp	r3, #8
 8004548:	d11c      	bne.n	8004584 <HAL_RCC_OscConfig+0x190>
 800454a:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	4b47      	ldr	r3, [pc, #284]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x17a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e1df      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	4b41      	ldr	r3, [pc, #260]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	493d      	ldr	r1, [pc, #244]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	e040      	b.n	8004606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800458c:	4b39      	ldr	r3, [pc, #228]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a38      	ldr	r2, [pc, #224]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe fe3e 	bl	8003218 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fe fe3a 	bl	8003218 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1bd      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	4b30      	ldr	r3, [pc, #192]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4929      	ldr	r1, [pc, #164]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
 80045d2:	e018      	b.n	8004606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a26      	ldr	r2, [pc, #152]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fe fe1a 	bl	8003218 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e8:	f7fe fe16 	bl	8003218 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e199      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fa:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d038      	beq.n	8004684 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d019      	beq.n	800464e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461a:	4b16      	ldr	r3, [pc, #88]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 800461c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461e:	4a15      	ldr	r2, [pc, #84]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fe fdf7 	bl	8003218 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462e:	f7fe fdf3 	bl	8003218 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e176      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x23a>
 800464c:	e01a      	b.n	8004684 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004652:	4a08      	ldr	r2, [pc, #32]	; (8004674 <HAL_RCC_OscConfig+0x280>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fe fddd 	bl	8003218 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004660:	e00a      	b.n	8004678 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004662:	f7fe fdd9 	bl	8003218 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d903      	bls.n	8004678 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e15c      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
 8004674:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	4b91      	ldr	r3, [pc, #580]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 800467a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ee      	bne.n	8004662 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80a4 	beq.w	80047da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004692:	4b8b      	ldr	r3, [pc, #556]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10d      	bne.n	80046ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800469e:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	4a87      	ldr	r2, [pc, #540]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6413      	str	r3, [r2, #64]	; 0x40
 80046aa:	4b85      	ldr	r3, [pc, #532]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b6:	2301      	movs	r3, #1
 80046b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ba:	4b82      	ldr	r3, [pc, #520]	; (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d118      	bne.n	80046f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046c6:	4b7f      	ldr	r3, [pc, #508]	; (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a7e      	ldr	r2, [pc, #504]	; (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d2:	f7fe fda1 	bl	8003218 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046da:	f7fe fd9d 	bl	8003218 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b64      	cmp	r3, #100	; 0x64
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e120      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ec:	4b75      	ldr	r3, [pc, #468]	; (80048c4 <HAL_RCC_OscConfig+0x4d0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d106      	bne.n	800470e <HAL_RCC_OscConfig+0x31a>
 8004700:	4b6f      	ldr	r3, [pc, #444]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a6e      	ldr	r2, [pc, #440]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	e02d      	b.n	800476a <HAL_RCC_OscConfig+0x376>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0x33c>
 8004716:	4b6a      	ldr	r3, [pc, #424]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a69      	ldr	r2, [pc, #420]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	4b67      	ldr	r3, [pc, #412]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a66      	ldr	r2, [pc, #408]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
 800472e:	e01c      	b.n	800476a <HAL_RCC_OscConfig+0x376>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b05      	cmp	r3, #5
 8004736:	d10c      	bne.n	8004752 <HAL_RCC_OscConfig+0x35e>
 8004738:	4b61      	ldr	r3, [pc, #388]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	4a60      	ldr	r2, [pc, #384]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	6713      	str	r3, [r2, #112]	; 0x70
 8004744:	4b5e      	ldr	r3, [pc, #376]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	4a5d      	ldr	r2, [pc, #372]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	6713      	str	r3, [r2, #112]	; 0x70
 8004750:	e00b      	b.n	800476a <HAL_RCC_OscConfig+0x376>
 8004752:	4b5b      	ldr	r3, [pc, #364]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	4a5a      	ldr	r2, [pc, #360]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	6713      	str	r3, [r2, #112]	; 0x70
 800475e:	4b58      	ldr	r3, [pc, #352]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4a57      	ldr	r2, [pc, #348]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004764:	f023 0304 	bic.w	r3, r3, #4
 8004768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d015      	beq.n	800479e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fe fd51 	bl	8003218 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477a:	f7fe fd4d 	bl	8003218 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	; 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0ce      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004790:	4b4b      	ldr	r3, [pc, #300]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ee      	beq.n	800477a <HAL_RCC_OscConfig+0x386>
 800479c:	e014      	b.n	80047c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479e:	f7fe fd3b 	bl	8003218 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fe fd37 	bl	8003218 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e0b8      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047bc:	4b40      	ldr	r3, [pc, #256]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1ee      	bne.n	80047a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d105      	bne.n	80047da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ce:	4b3c      	ldr	r3, [pc, #240]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	4a3b      	ldr	r2, [pc, #236]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80047d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80a4 	beq.w	800492c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e4:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d06b      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d149      	bne.n	800488c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a30      	ldr	r2, [pc, #192]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80047fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fe fd08 	bl	8003218 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fe fd04 	bl	8003218 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e087      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	3b01      	subs	r3, #1
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	4313      	orrs	r3, r2
 8004850:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004852:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004856:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fe fcd8 	bl	8003218 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486c:	f7fe fcd4 	bl	8003218 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e057      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x478>
 800488a:	e04f      	b.n	800492c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488c:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0b      	ldr	r2, [pc, #44]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 8004892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fe fcbe 	bl	8003218 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fe fcba 	bl	8003218 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e03d      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <HAL_RCC_OscConfig+0x4cc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4ac>
 80048be:	e035      	b.n	800492c <HAL_RCC_OscConfig+0x538>
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048c8:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x544>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d028      	beq.n	8004928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d121      	bne.n	8004928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d11a      	bne.n	8004928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004900:	4293      	cmp	r3, r2
 8004902:	d111      	bne.n	8004928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	3b01      	subs	r3, #1
 8004912:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d107      	bne.n	8004928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800

0800493c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0d0      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004954:	4b6a      	ldr	r3, [pc, #424]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d910      	bls.n	8004984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b67      	ldr	r3, [pc, #412]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 020f 	bic.w	r2, r3, #15
 800496a:	4965      	ldr	r1, [pc, #404]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004972:	4b63      	ldr	r3, [pc, #396]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0b8      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d020      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800499c:	4b59      	ldr	r3, [pc, #356]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4a58      	ldr	r2, [pc, #352]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 80049a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049b4:	4b53      	ldr	r3, [pc, #332]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4a52      	ldr	r2, [pc, #328]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 80049ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c0:	4b50      	ldr	r3, [pc, #320]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	494d      	ldr	r1, [pc, #308]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d040      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d107      	bne.n	80049f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e6:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d115      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e07f      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d107      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fe:	4b41      	ldr	r3, [pc, #260]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e073      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e06b      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1e:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f023 0203 	bic.w	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4936      	ldr	r1, [pc, #216]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a30:	f7fe fbf2 	bl	8003218 <HAL_GetTick>
 8004a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a38:	f7fe fbee 	bl	8003218 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e053      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	4b2d      	ldr	r3, [pc, #180]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 020c 	and.w	r2, r3, #12
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d1eb      	bne.n	8004a38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d210      	bcs.n	8004a90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6e:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f023 020f 	bic.w	r2, r3, #15
 8004a76:	4922      	ldr	r1, [pc, #136]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e032      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a9c:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4916      	ldr	r1, [pc, #88]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aba:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	490e      	ldr	r1, [pc, #56]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ace:	f000 f821 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	490a      	ldr	r1, [pc, #40]	; (8004b08 <HAL_RCC_ClockConfig+0x1cc>)
 8004ae0:	5ccb      	ldrb	r3, [r1, r3]
 8004ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae6:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <HAL_RCC_ClockConfig+0x1d0>)
 8004ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004aea:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_RCC_ClockConfig+0x1d4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fb4e 	bl	8003190 <HAL_InitTick>

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40023c00 	.word	0x40023c00
 8004b04:	40023800 	.word	0x40023800
 8004b08:	0800b130 	.word	0x0800b130
 8004b0c:	20000028 	.word	0x20000028
 8004b10:	2000002c 	.word	0x2000002c

08004b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	2300      	movs	r3, #0
 8004b26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b2c:	4b67      	ldr	r3, [pc, #412]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d00d      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0x40>
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	f200 80bd 	bhi.w	8004cb8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x34>
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d003      	beq.n	8004b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b46:	e0b7      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b48:	4b61      	ldr	r3, [pc, #388]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b4a:	60bb      	str	r3, [r7, #8]
      break;
 8004b4c:	e0b7      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b4e:	4b61      	ldr	r3, [pc, #388]	; (8004cd4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004b50:	60bb      	str	r3, [r7, #8]
      break;
 8004b52:	e0b4      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b54:	4b5d      	ldr	r3, [pc, #372]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d04d      	beq.n	8004c06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6a:	4b58      	ldr	r3, [pc, #352]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	099b      	lsrs	r3, r3, #6
 8004b70:	461a      	mov	r2, r3
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b7a:	f04f 0100 	mov.w	r1, #0
 8004b7e:	ea02 0800 	and.w	r8, r2, r0
 8004b82:	ea03 0901 	and.w	r9, r3, r1
 8004b86:	4640      	mov	r0, r8
 8004b88:	4649      	mov	r1, r9
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	014b      	lsls	r3, r1, #5
 8004b94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b98:	0142      	lsls	r2, r0, #5
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	ebb0 0008 	subs.w	r0, r0, r8
 8004ba2:	eb61 0109 	sbc.w	r1, r1, r9
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	018b      	lsls	r3, r1, #6
 8004bb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bb4:	0182      	lsls	r2, r0, #6
 8004bb6:	1a12      	subs	r2, r2, r0
 8004bb8:	eb63 0301 	sbc.w	r3, r3, r1
 8004bbc:	f04f 0000 	mov.w	r0, #0
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	00d9      	lsls	r1, r3, #3
 8004bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bca:	00d0      	lsls	r0, r2, #3
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	eb12 0208 	adds.w	r2, r2, r8
 8004bd4:	eb43 0309 	adc.w	r3, r3, r9
 8004bd8:	f04f 0000 	mov.w	r0, #0
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	0259      	lsls	r1, r3, #9
 8004be2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004be6:	0250      	lsls	r0, r2, #9
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4610      	mov	r0, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	f7fc f896 	bl	8000d28 <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4613      	mov	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e04a      	b.n	8004c9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	099b      	lsrs	r3, r3, #6
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c16:	f04f 0100 	mov.w	r1, #0
 8004c1a:	ea02 0400 	and.w	r4, r2, r0
 8004c1e:	ea03 0501 	and.w	r5, r3, r1
 8004c22:	4620      	mov	r0, r4
 8004c24:	4629      	mov	r1, r5
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	014b      	lsls	r3, r1, #5
 8004c30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c34:	0142      	lsls	r2, r0, #5
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	1b00      	subs	r0, r0, r4
 8004c3c:	eb61 0105 	sbc.w	r1, r1, r5
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	018b      	lsls	r3, r1, #6
 8004c4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c4e:	0182      	lsls	r2, r0, #6
 8004c50:	1a12      	subs	r2, r2, r0
 8004c52:	eb63 0301 	sbc.w	r3, r3, r1
 8004c56:	f04f 0000 	mov.w	r0, #0
 8004c5a:	f04f 0100 	mov.w	r1, #0
 8004c5e:	00d9      	lsls	r1, r3, #3
 8004c60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c64:	00d0      	lsls	r0, r2, #3
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	1912      	adds	r2, r2, r4
 8004c6c:	eb45 0303 	adc.w	r3, r5, r3
 8004c70:	f04f 0000 	mov.w	r0, #0
 8004c74:	f04f 0100 	mov.w	r1, #0
 8004c78:	0299      	lsls	r1, r3, #10
 8004c7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c7e:	0290      	lsls	r0, r2, #10
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	f7fc f84a 	bl	8000d28 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4613      	mov	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb4:	60bb      	str	r3, [r7, #8]
      break;
 8004cb6:	e002      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cba:	60bb      	str	r3, [r7, #8]
      break;
 8004cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	007a1200 	.word	0x007a1200

08004cd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_RCC_GetHCLKFreq+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000028 	.word	0x20000028

08004cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cf4:	f7ff fff0 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0a9b      	lsrs	r3, r3, #10
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4903      	ldr	r1, [pc, #12]	; (8004d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	0800b140 	.word	0x0800b140

08004d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d1c:	f7ff ffdc 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	0b5b      	lsrs	r3, r3, #13
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4903      	ldr	r1, [pc, #12]	; (8004d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	0800b140 	.word	0x0800b140

08004d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d012      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d68:	4b69      	ldr	r3, [pc, #420]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a68      	ldr	r2, [pc, #416]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d72:	6093      	str	r3, [r2, #8]
 8004d74:	4b66      	ldr	r3, [pc, #408]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	4964      	ldr	r1, [pc, #400]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	4959      	ldr	r1, [pc, #356]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db8:	d101      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d017      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dd6:	4b4e      	ldr	r3, [pc, #312]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ddc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	494a      	ldr	r1, [pc, #296]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df4:	d101      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 808b 	beq.w	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e24:	4b3a      	ldr	r3, [pc, #232]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	4a39      	ldr	r2, [pc, #228]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e30:	4b37      	ldr	r3, [pc, #220]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e3c:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a34      	ldr	r2, [pc, #208]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e48:	f7fe f9e6 	bl	8003218 <HAL_GetTick>
 8004e4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e50:	f7fe f9e2 	bl	8003218 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e357      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e6e:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d035      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d02e      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e8c:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e96:	4b1e      	ldr	r3, [pc, #120]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004eae:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eb4:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d114      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fe f9aa 	bl	8003218 <HAL_GetTick>
 8004ec4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec6:	e00a      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7fe f9a6 	bl	8003218 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e319      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0ee      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef6:	d111      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f04:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f06:	400b      	ands	r3, r1
 8004f08:	4901      	ldr	r1, [pc, #4]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
 8004f0e:	e00b      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40007000 	.word	0x40007000
 8004f18:	0ffffcff 	.word	0x0ffffcff
 8004f1c:	4bb1      	ldr	r3, [pc, #708]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4ab0      	ldr	r2, [pc, #704]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f26:	6093      	str	r3, [r2, #8]
 8004f28:	4bae      	ldr	r3, [pc, #696]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f34:	49ab      	ldr	r1, [pc, #684]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d010      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f46:	4ba7      	ldr	r3, [pc, #668]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f4c:	4aa5      	ldr	r2, [pc, #660]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f56:	4ba3      	ldr	r3, [pc, #652]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	49a0      	ldr	r1, [pc, #640]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f74:	4b9b      	ldr	r3, [pc, #620]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f82:	4998      	ldr	r1, [pc, #608]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f96:	4b93      	ldr	r3, [pc, #588]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fa4:	498f      	ldr	r1, [pc, #572]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fb8:	4b8a      	ldr	r3, [pc, #552]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc6:	4987      	ldr	r1, [pc, #540]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fda:	4b82      	ldr	r3, [pc, #520]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe8:	497e      	ldr	r1, [pc, #504]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ffc:	4b79      	ldr	r3, [pc, #484]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f023 0203 	bic.w	r2, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	4976      	ldr	r1, [pc, #472]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800501e:	4b71      	ldr	r3, [pc, #452]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005024:	f023 020c 	bic.w	r2, r3, #12
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502c:	496d      	ldr	r1, [pc, #436]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005040:	4b68      	ldr	r3, [pc, #416]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	4965      	ldr	r1, [pc, #404]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005062:	4b60      	ldr	r3, [pc, #384]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005068:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005070:	495c      	ldr	r1, [pc, #368]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005084:	4b57      	ldr	r3, [pc, #348]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	4954      	ldr	r1, [pc, #336]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050a6:	4b4f      	ldr	r3, [pc, #316]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	494b      	ldr	r1, [pc, #300]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050c8:	4b46      	ldr	r3, [pc, #280]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d6:	4943      	ldr	r1, [pc, #268]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050ea:	4b3e      	ldr	r3, [pc, #248]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f8:	493a      	ldr	r1, [pc, #232]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800510c:	4b35      	ldr	r3, [pc, #212]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800511a:	4932      	ldr	r1, [pc, #200]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d011      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800512e:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005134:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800513c:	4929      	ldr	r1, [pc, #164]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800514c:	d101      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800515e:	2301      	movs	r3, #1
 8005160:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800516e:	4b1d      	ldr	r3, [pc, #116]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005174:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517c:	4919      	ldr	r1, [pc, #100]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005190:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005196:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051a0:	4910      	ldr	r1, [pc, #64]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d006      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80d9 	beq.w	800536e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051bc:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c8:	f7fe f826 	bl	8003218 <HAL_GetTick>
 80051cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ce:	e00b      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051d0:	f7fe f822 	bl	8003218 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	; 0x64
 80051dc:	d904      	bls.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e197      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80051e2:	bf00      	nop
 80051e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051e8:	4b6c      	ldr	r3, [pc, #432]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ed      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d021      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11d      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005208:	4b64      	ldr	r3, [pc, #400]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520e:	0c1b      	lsrs	r3, r3, #16
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005216:	4b61      	ldr	r3, [pc, #388]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521c:	0e1b      	lsrs	r3, r3, #24
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	019a      	lsls	r2, r3, #6
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	431a      	orrs	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	071b      	lsls	r3, r3, #28
 800523c:	4957      	ldr	r1, [pc, #348]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02e      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526e:	d129      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005270:	4b4a      	ldr	r3, [pc, #296]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800527e:	4b47      	ldr	r3, [pc, #284]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005284:	0f1b      	lsrs	r3, r3, #28
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	019a      	lsls	r2, r3, #6
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	431a      	orrs	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	071b      	lsls	r3, r3, #28
 80052a4:	493d      	ldr	r1, [pc, #244]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052ac:	4b3b      	ldr	r3, [pc, #236]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b2:	f023 021f 	bic.w	r2, r3, #31
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	3b01      	subs	r3, #1
 80052bc:	4937      	ldr	r1, [pc, #220]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01d      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052d0:	4b32      	ldr	r3, [pc, #200]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d6:	0e1b      	lsrs	r3, r3, #24
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052de:	4b2f      	ldr	r3, [pc, #188]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e4:	0f1b      	lsrs	r3, r3, #28
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	019a      	lsls	r2, r3, #6
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	431a      	orrs	r2, r3
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	061b      	lsls	r3, r3, #24
 80052fe:	431a      	orrs	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	071b      	lsls	r3, r3, #28
 8005304:	4925      	ldr	r1, [pc, #148]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d011      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	019a      	lsls	r2, r3, #6
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	041b      	lsls	r3, r3, #16
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	071b      	lsls	r3, r3, #28
 8005334:	4919      	ldr	r1, [pc, #100]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a16      	ldr	r2, [pc, #88]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005342:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fd ff66 	bl	8003218 <HAL_GetTick>
 800534c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005350:	f7fd ff62 	bl	8003218 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0d7      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	2b01      	cmp	r3, #1
 8005372:	f040 80cd 	bne.w	8005510 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a08      	ldr	r2, [pc, #32]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800537c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005382:	f7fd ff49 	bl	8003218 <HAL_GetTick>
 8005386:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005388:	e00a      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800538a:	f7fd ff45 	bl	8003218 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b64      	cmp	r3, #100	; 0x64
 8005396:	d903      	bls.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e0ba      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800539c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053a0:	4b5e      	ldr	r3, [pc, #376]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ac:	d0ed      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d02e      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d12a      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053d6:	4b51      	ldr	r3, [pc, #324]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	0c1b      	lsrs	r3, r3, #16
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053e4:	4b4d      	ldr	r3, [pc, #308]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	0f1b      	lsrs	r3, r3, #28
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	019a      	lsls	r2, r3, #6
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	431a      	orrs	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	071b      	lsls	r3, r3, #28
 800540a:	4944      	ldr	r1, [pc, #272]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005412:	4b42      	ldr	r3, [pc, #264]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005418:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	3b01      	subs	r3, #1
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	493d      	ldr	r1, [pc, #244]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d022      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005440:	d11d      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005442:	4b36      	ldr	r3, [pc, #216]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	0e1b      	lsrs	r3, r3, #24
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005450:	4b32      	ldr	r3, [pc, #200]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	0f1b      	lsrs	r3, r3, #28
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	019a      	lsls	r2, r3, #6
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	431a      	orrs	r2, r3
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	061b      	lsls	r3, r3, #24
 8005470:	431a      	orrs	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	071b      	lsls	r3, r3, #28
 8005476:	4929      	ldr	r1, [pc, #164]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d028      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800548a:	4b24      	ldr	r3, [pc, #144]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005490:	0e1b      	lsrs	r3, r3, #24
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005498:	4b20      	ldr	r3, [pc, #128]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549e:	0c1b      	lsrs	r3, r3, #16
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	019a      	lsls	r2, r3, #6
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	431a      	orrs	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	061b      	lsls	r3, r3, #24
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	071b      	lsls	r3, r3, #28
 80054be:	4917      	ldr	r1, [pc, #92]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	4911      	ldr	r1, [pc, #68]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a0e      	ldr	r2, [pc, #56]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e8:	f7fd fe96 	bl	8003218 <HAL_GetTick>
 80054ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054f0:	f7fd fe92 	bl	8003218 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b64      	cmp	r3, #100	; 0x64
 80054fc:	d901      	bls.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e007      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800550a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550e:	d1ef      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023800 	.word	0x40023800

08005520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e09d      	b.n	800566e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d108      	bne.n	800554c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005542:	d009      	beq.n	8005558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	61da      	str	r2, [r3, #28]
 800554a:	e005      	b.n	8005558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd f9f2 	bl	800295c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005598:	d902      	bls.n	80055a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e002      	b.n	80055a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055ae:	d007      	beq.n	80055c0 <HAL_SPI_Init+0xa0>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055b8:	d002      	beq.n	80055c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005602:	ea42 0103 	orr.w	r1, r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	0c1b      	lsrs	r3, r3, #16
 800561c:	f003 0204 	and.w	r2, r3, #4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800563c:	ea42 0103 	orr.w	r1, r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800565c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b08a      	sub	sp, #40	; 0x28
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005684:	2301      	movs	r3, #1
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_SPI_TransmitReceive+0x26>
 8005698:	2302      	movs	r3, #2
 800569a:	e1fb      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x41e>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056a4:	f7fd fdb8 	bl	8003218 <HAL_GetTick>
 80056a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80056b8:	887b      	ldrh	r3, [r7, #2]
 80056ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80056bc:	887b      	ldrh	r3, [r7, #2]
 80056be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056c0:	7efb      	ldrb	r3, [r7, #27]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d00e      	beq.n	80056e4 <HAL_SPI_TransmitReceive+0x6e>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056cc:	d106      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <HAL_SPI_TransmitReceive+0x66>
 80056d6:	7efb      	ldrb	r3, [r7, #27]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d003      	beq.n	80056e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80056e2:	e1cd      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_SPI_TransmitReceive+0x80>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <HAL_SPI_TransmitReceive+0x80>
 80056f0:	887b      	ldrh	r3, [r7, #2]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80056fc:	e1c0      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b04      	cmp	r3, #4
 8005708:	d003      	beq.n	8005712 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2205      	movs	r2, #5
 800570e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	887a      	ldrh	r2, [r7, #2]
 8005722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	887a      	ldrh	r2, [r7, #2]
 800572a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	887a      	ldrh	r2, [r7, #2]
 8005738:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	887a      	ldrh	r2, [r7, #2]
 800573e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005754:	d802      	bhi.n	800575c <HAL_SPI_TransmitReceive+0xe6>
 8005756:	8a3b      	ldrh	r3, [r7, #16]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d908      	bls.n	800576e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	e007      	b.n	800577e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800577c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b40      	cmp	r3, #64	; 0x40
 800578a:	d007      	beq.n	800579c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800579a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057a4:	d97c      	bls.n	80058a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_SPI_TransmitReceive+0x13e>
 80057ae:	8a7b      	ldrh	r3, [r7, #18]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d169      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	881a      	ldrh	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	1c9a      	adds	r2, r3, #2
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d8:	e056      	b.n	8005888 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d11b      	bne.n	8005820 <HAL_SPI_TransmitReceive+0x1aa>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <HAL_SPI_TransmitReceive+0x1aa>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d113      	bne.n	8005820 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	881a      	ldrh	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	1c9a      	adds	r2, r3, #2
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d11c      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x1f2>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	b292      	uxth	r2, r2
 8005846:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	1c9a      	adds	r2, r3, #2
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005864:	2301      	movs	r3, #1
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005868:	f7fd fcd6 	bl	8003218 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005874:	429a      	cmp	r2, r3
 8005876:	d807      	bhi.n	8005888 <HAL_SPI_TransmitReceive+0x212>
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d003      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005886:	e0fb      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1a3      	bne.n	80057da <HAL_SPI_TransmitReceive+0x164>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d19d      	bne.n	80057da <HAL_SPI_TransmitReceive+0x164>
 800589e:	e0df      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_SPI_TransmitReceive+0x23a>
 80058a8:	8a7b      	ldrh	r3, [r7, #18]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	f040 80cb 	bne.w	8005a46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d912      	bls.n	80058e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	1c9a      	adds	r2, r3, #2
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b02      	subs	r3, #2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058de:	e0b2      	b.n	8005a46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	7812      	ldrb	r2, [r2, #0]
 80058ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005906:	e09e      	b.n	8005a46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b02      	cmp	r3, #2
 8005914:	d134      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x30a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d02f      	beq.n	8005980 <HAL_SPI_TransmitReceive+0x30a>
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	2b01      	cmp	r3, #1
 8005924:	d12c      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d912      	bls.n	8005956 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	881a      	ldrh	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b02      	subs	r3, #2
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005954:	e012      	b.n	800597c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	330c      	adds	r3, #12
 8005960:	7812      	ldrb	r2, [r2, #0]
 8005962:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d148      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x3aa>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d042      	beq.n	8005a20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d923      	bls.n	80059ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	b292      	uxth	r2, r2
 80059b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	1c9a      	adds	r2, r3, #2
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b02      	subs	r3, #2
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d81f      	bhi.n	8005a1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059ea:	605a      	str	r2, [r3, #4]
 80059ec:	e016      	b.n	8005a1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f103 020c 	add.w	r2, r3, #12
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	7812      	ldrb	r2, [r2, #0]
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a20:	f7fd fbfa 	bl	8003218 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d803      	bhi.n	8005a38 <HAL_SPI_TransmitReceive+0x3c2>
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d102      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x3c8>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a44:	e01c      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f47f af5b 	bne.w	8005908 <HAL_SPI_TransmitReceive+0x292>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f47f af54 	bne.w	8005908 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f937 	bl	8005cd8 <SPI_EndRxTxTransaction>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d006      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	661a      	str	r2, [r3, #96]	; 0x60
 8005a7c:	e000      	b.n	8005a80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005a7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3728      	adds	r7, #40	; 0x28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005aac:	f7fd fbb4 	bl	8003218 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	4413      	add	r3, r2
 8005aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005abc:	f7fd fbac 	bl	8003218 <HAL_GetTick>
 8005ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ac2:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	015b      	lsls	r3, r3, #5
 8005ac8:	0d1b      	lsrs	r3, r3, #20
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad2:	e054      	b.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d050      	beq.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005adc:	f7fd fb9c 	bl	8003218 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d902      	bls.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d13d      	bne.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0a:	d111      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b14:	d004      	beq.n	8005b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1e:	d107      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b38:	d10f      	bne.n	8005b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e017      	b.n	8005b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2301      	moveq	r3, #1
 8005b90:	2300      	movne	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d19b      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000028 	.word	0x20000028

08005bac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	; 0x28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bbe:	f7fd fb2b 	bl	8003218 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	4413      	add	r3, r2
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005bce:	f7fd fb23 	bl	8003218 <HAL_GetTick>
 8005bd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005bdc:	4b3d      	ldr	r3, [pc, #244]	; (8005cd4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	00da      	lsls	r2, r3, #3
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	0d1b      	lsrs	r3, r3, #20
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005bf4:	e060      	b.n	8005cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bfc:	d107      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d050      	beq.n	8005cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c16:	f7fd faff 	bl	8003218 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d902      	bls.n	8005c2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d13d      	bne.n	8005ca8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c44:	d111      	bne.n	8005c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4e:	d004      	beq.n	8005c5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c58:	d107      	bne.n	8005c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c72:	d10f      	bne.n	8005c94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e010      	b.n	8005cca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d196      	bne.n	8005bf6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3728      	adds	r7, #40	; 0x28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000028 	.word	0x20000028

08005cd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff ff5b 	bl	8005bac <SPI_WaitFifoStateUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	f043 0220 	orr.w	r2, r3, #32
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e046      	b.n	8005d9a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d0c:	4b25      	ldr	r3, [pc, #148]	; (8005da4 <SPI_EndRxTxTransaction+0xcc>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a25      	ldr	r2, [pc, #148]	; (8005da8 <SPI_EndRxTxTransaction+0xd0>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	0d5b      	lsrs	r3, r3, #21
 8005d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d1c:	fb02 f303 	mul.w	r3, r2, r3
 8005d20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2a:	d112      	bne.n	8005d52 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2200      	movs	r2, #0
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff feb0 	bl	8005a9c <SPI_WaitFlagStateUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d016      	beq.n	8005d70 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e023      	b.n	8005d9a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d68:	2b80      	cmp	r3, #128	; 0x80
 8005d6a:	d0f2      	beq.n	8005d52 <SPI_EndRxTxTransaction+0x7a>
 8005d6c:	e000      	b.n	8005d70 <SPI_EndRxTxTransaction+0x98>
        break;
 8005d6e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff ff15 	bl	8005bac <SPI_WaitFifoStateUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8c:	f043 0220 	orr.w	r2, r3, #32
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e000      	b.n	8005d9a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000028 	.word	0x20000028
 8005da8:	165e9f81 	.word	0x165e9f81

08005dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e049      	b.n	8005e52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fc fffe 	bl	8002dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f000 fd30 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d001      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e054      	b.n	8005f1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a26      	ldr	r2, [pc, #152]	; (8005f2c <HAL_TIM_Base_Start_IT+0xd0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d01d      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a22      	ldr	r2, [pc, #136]	; (8005f30 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a21      	ldr	r2, [pc, #132]	; (8005f34 <HAL_TIM_Base_Start_IT+0xd8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1f      	ldr	r2, [pc, #124]	; (8005f38 <HAL_TIM_Base_Start_IT+0xdc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <HAL_TIM_Base_Start_IT+0xe0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x80>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d115      	bne.n	8005f08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <HAL_TIM_Base_Start_IT+0xec>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d015      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0xbe>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef4:	d011      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0201 	orr.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f06:	e008      	b.n	8005f1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e000      	b.n	8005f1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40000800 	.word	0x40000800
 8005f38:	40000c00 	.word	0x40000c00
 8005f3c:	40010400 	.word	0x40010400
 8005f40:	40014000 	.word	0x40014000
 8005f44:	40001800 	.word	0x40001800
 8005f48:	00010007 	.word	0x00010007

08005f4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e049      	b.n	8005ff2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f841 	bl	8005ffa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f000 fc60 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
	...

08006010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <HAL_TIM_PWM_Start+0x24>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	bf14      	ite	ne
 800602c:	2301      	movne	r3, #1
 800602e:	2300      	moveq	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	e03c      	b.n	80060ae <HAL_TIM_PWM_Start+0x9e>
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b04      	cmp	r3, #4
 8006038:	d109      	bne.n	800604e <HAL_TIM_PWM_Start+0x3e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	bf14      	ite	ne
 8006046:	2301      	movne	r3, #1
 8006048:	2300      	moveq	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	e02f      	b.n	80060ae <HAL_TIM_PWM_Start+0x9e>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d109      	bne.n	8006068 <HAL_TIM_PWM_Start+0x58>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b01      	cmp	r3, #1
 800605e:	bf14      	ite	ne
 8006060:	2301      	movne	r3, #1
 8006062:	2300      	moveq	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	e022      	b.n	80060ae <HAL_TIM_PWM_Start+0x9e>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b0c      	cmp	r3, #12
 800606c:	d109      	bne.n	8006082 <HAL_TIM_PWM_Start+0x72>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	bf14      	ite	ne
 800607a:	2301      	movne	r3, #1
 800607c:	2300      	moveq	r3, #0
 800607e:	b2db      	uxtb	r3, r3
 8006080:	e015      	b.n	80060ae <HAL_TIM_PWM_Start+0x9e>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b10      	cmp	r3, #16
 8006086:	d109      	bne.n	800609c <HAL_TIM_PWM_Start+0x8c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	bf14      	ite	ne
 8006094:	2301      	movne	r3, #1
 8006096:	2300      	moveq	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	e008      	b.n	80060ae <HAL_TIM_PWM_Start+0x9e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e092      	b.n	80061dc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d104      	bne.n	80060c6 <HAL_TIM_PWM_Start+0xb6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c4:	e023      	b.n	800610e <HAL_TIM_PWM_Start+0xfe>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d104      	bne.n	80060d6 <HAL_TIM_PWM_Start+0xc6>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d4:	e01b      	b.n	800610e <HAL_TIM_PWM_Start+0xfe>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d104      	bne.n	80060e6 <HAL_TIM_PWM_Start+0xd6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e4:	e013      	b.n	800610e <HAL_TIM_PWM_Start+0xfe>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b0c      	cmp	r3, #12
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_PWM_Start+0xe6>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f4:	e00b      	b.n	800610e <HAL_TIM_PWM_Start+0xfe>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d104      	bne.n	8006106 <HAL_TIM_PWM_Start+0xf6>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006104:	e003      	b.n	800610e <HAL_TIM_PWM_Start+0xfe>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2201      	movs	r2, #1
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 ff32 	bl	8006f80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a30      	ldr	r2, [pc, #192]	; (80061e4 <HAL_TIM_PWM_Start+0x1d4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_TIM_PWM_Start+0x120>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2f      	ldr	r2, [pc, #188]	; (80061e8 <HAL_TIM_PWM_Start+0x1d8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d101      	bne.n	8006134 <HAL_TIM_PWM_Start+0x124>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <HAL_TIM_PWM_Start+0x126>
 8006134:	2300      	movs	r3, #0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006148:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a25      	ldr	r2, [pc, #148]	; (80061e4 <HAL_TIM_PWM_Start+0x1d4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d022      	beq.n	800619a <HAL_TIM_PWM_Start+0x18a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615c:	d01d      	beq.n	800619a <HAL_TIM_PWM_Start+0x18a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a22      	ldr	r2, [pc, #136]	; (80061ec <HAL_TIM_PWM_Start+0x1dc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d018      	beq.n	800619a <HAL_TIM_PWM_Start+0x18a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a20      	ldr	r2, [pc, #128]	; (80061f0 <HAL_TIM_PWM_Start+0x1e0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <HAL_TIM_PWM_Start+0x18a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1f      	ldr	r2, [pc, #124]	; (80061f4 <HAL_TIM_PWM_Start+0x1e4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00e      	beq.n	800619a <HAL_TIM_PWM_Start+0x18a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a19      	ldr	r2, [pc, #100]	; (80061e8 <HAL_TIM_PWM_Start+0x1d8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d009      	beq.n	800619a <HAL_TIM_PWM_Start+0x18a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <HAL_TIM_PWM_Start+0x1e8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d004      	beq.n	800619a <HAL_TIM_PWM_Start+0x18a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a19      	ldr	r2, [pc, #100]	; (80061fc <HAL_TIM_PWM_Start+0x1ec>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d115      	bne.n	80061c6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <HAL_TIM_PWM_Start+0x1f0>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b06      	cmp	r3, #6
 80061aa:	d015      	beq.n	80061d8 <HAL_TIM_PWM_Start+0x1c8>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b2:	d011      	beq.n	80061d8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c4:	e008      	b.n	80061d8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0201 	orr.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e000      	b.n	80061da <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40000c00 	.word	0x40000c00
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40001800 	.word	0x40001800
 8006200:	00010007 	.word	0x00010007

08006204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b02      	cmp	r3, #2
 8006218:	d122      	bne.n	8006260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b02      	cmp	r3, #2
 8006226:	d11b      	bne.n	8006260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0202 	mvn.w	r2, #2
 8006230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fae4 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fad6 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fae7 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b04      	cmp	r3, #4
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b04      	cmp	r3, #4
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0204 	mvn.w	r2, #4
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 faba 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 faac 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fabd 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0208 	mvn.w	r2, #8
 80062d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2204      	movs	r2, #4
 80062de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa90 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa82 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fa93 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b10      	cmp	r3, #16
 8006314:	d122      	bne.n	800635c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b10      	cmp	r3, #16
 8006322:	d11b      	bne.n	800635c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0210 	mvn.w	r2, #16
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2208      	movs	r2, #8
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa66 	bl	8006814 <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa58 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa69 	bl	8006828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b01      	cmp	r3, #1
 8006368:	d10e      	bne.n	8006388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d107      	bne.n	8006388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0201 	mvn.w	r2, #1
 8006380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fc fa6c 	bl	8002860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d10e      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a0:	2b80      	cmp	r3, #128	; 0x80
 80063a2:	d107      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fea4 	bl	80070fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c2:	d10e      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ce:	2b80      	cmp	r3, #128	; 0x80
 80063d0:	d107      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fe97 	bl	8007110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d10e      	bne.n	800640e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d107      	bne.n	800640e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa17 	bl	800683c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b20      	cmp	r3, #32
 800641a:	d10e      	bne.n	800643a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b20      	cmp	r3, #32
 8006428:	d107      	bne.n	800643a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f06f 0220 	mvn.w	r2, #32
 8006432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fe57 	bl	80070e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800645e:	2302      	movs	r3, #2
 8006460:	e0ff      	b.n	8006662 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b14      	cmp	r3, #20
 800646e:	f200 80f0 	bhi.w	8006652 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	080064cd 	.word	0x080064cd
 800647c:	08006653 	.word	0x08006653
 8006480:	08006653 	.word	0x08006653
 8006484:	08006653 	.word	0x08006653
 8006488:	0800650d 	.word	0x0800650d
 800648c:	08006653 	.word	0x08006653
 8006490:	08006653 	.word	0x08006653
 8006494:	08006653 	.word	0x08006653
 8006498:	0800654f 	.word	0x0800654f
 800649c:	08006653 	.word	0x08006653
 80064a0:	08006653 	.word	0x08006653
 80064a4:	08006653 	.word	0x08006653
 80064a8:	0800658f 	.word	0x0800658f
 80064ac:	08006653 	.word	0x08006653
 80064b0:	08006653 	.word	0x08006653
 80064b4:	08006653 	.word	0x08006653
 80064b8:	080065d1 	.word	0x080065d1
 80064bc:	08006653 	.word	0x08006653
 80064c0:	08006653 	.word	0x08006653
 80064c4:	08006653 	.word	0x08006653
 80064c8:	08006611 	.word	0x08006611
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fa5c 	bl	8006990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0208 	orr.w	r2, r2, #8
 80064e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0204 	bic.w	r2, r2, #4
 80064f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6999      	ldr	r1, [r3, #24]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	619a      	str	r2, [r3, #24]
      break;
 800650a:	e0a5      	b.n	8006658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 faae 	bl	8006a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6999      	ldr	r1, [r3, #24]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	021a      	lsls	r2, r3, #8
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	619a      	str	r2, [r3, #24]
      break;
 800654c:	e084      	b.n	8006658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fb05 	bl	8006b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0208 	orr.w	r2, r2, #8
 8006568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0204 	bic.w	r2, r2, #4
 8006578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69d9      	ldr	r1, [r3, #28]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	61da      	str	r2, [r3, #28]
      break;
 800658c:	e064      	b.n	8006658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fb5b 	bl	8006c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69d9      	ldr	r1, [r3, #28]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	021a      	lsls	r2, r3, #8
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	61da      	str	r2, [r3, #28]
      break;
 80065ce:	e043      	b.n	8006658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fb92 	bl	8006d00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0208 	orr.w	r2, r2, #8
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0204 	bic.w	r2, r2, #4
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800660e:	e023      	b.n	8006658 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fbc4 	bl	8006da4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800662a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006650:	e002      	b.n	8006658 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	75fb      	strb	r3, [r7, #23]
      break;
 8006656:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006660:	7dfb      	ldrb	r3, [r7, #23]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop

0800666c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_TIM_ConfigClockSource+0x1c>
 8006684:	2302      	movs	r3, #2
 8006686:	e0b4      	b.n	80067f2 <HAL_TIM_ConfigClockSource+0x186>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	4b56      	ldr	r3, [pc, #344]	; (80067fc <HAL_TIM_ConfigClockSource+0x190>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c0:	d03e      	beq.n	8006740 <HAL_TIM_ConfigClockSource+0xd4>
 80066c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c6:	f200 8087 	bhi.w	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ce:	f000 8086 	beq.w	80067de <HAL_TIM_ConfigClockSource+0x172>
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d6:	d87f      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066d8:	2b70      	cmp	r3, #112	; 0x70
 80066da:	d01a      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0xa6>
 80066dc:	2b70      	cmp	r3, #112	; 0x70
 80066de:	d87b      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e0:	2b60      	cmp	r3, #96	; 0x60
 80066e2:	d050      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0x11a>
 80066e4:	2b60      	cmp	r3, #96	; 0x60
 80066e6:	d877      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e8:	2b50      	cmp	r3, #80	; 0x50
 80066ea:	d03c      	beq.n	8006766 <HAL_TIM_ConfigClockSource+0xfa>
 80066ec:	2b50      	cmp	r3, #80	; 0x50
 80066ee:	d873      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b40      	cmp	r3, #64	; 0x40
 80066f2:	d058      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x13a>
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d86f      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b30      	cmp	r3, #48	; 0x30
 80066fa:	d064      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 80066fc:	2b30      	cmp	r3, #48	; 0x30
 80066fe:	d86b      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b20      	cmp	r3, #32
 8006702:	d060      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006704:	2b20      	cmp	r3, #32
 8006706:	d867      	bhi.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d05c      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 800670c:	2b10      	cmp	r3, #16
 800670e:	d05a      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006710:	e062      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6899      	ldr	r1, [r3, #8]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f000 fc0d 	bl	8006f40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	609a      	str	r2, [r3, #8]
      break;
 800673e:	e04f      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	6899      	ldr	r1, [r3, #8]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f000 fbf6 	bl	8006f40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006762:	609a      	str	r2, [r3, #8]
      break;
 8006764:	e03c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6859      	ldr	r1, [r3, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	461a      	mov	r2, r3
 8006774:	f000 fb6a 	bl	8006e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2150      	movs	r1, #80	; 0x50
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fbc3 	bl	8006f0a <TIM_ITRx_SetConfig>
      break;
 8006784:	e02c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	461a      	mov	r2, r3
 8006794:	f000 fb89 	bl	8006eaa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2160      	movs	r1, #96	; 0x60
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fbb3 	bl	8006f0a <TIM_ITRx_SetConfig>
      break;
 80067a4:	e01c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 fb4a 	bl	8006e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2140      	movs	r1, #64	; 0x40
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fba3 	bl	8006f0a <TIM_ITRx_SetConfig>
      break;
 80067c4:	e00c      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4619      	mov	r1, r3
 80067d0:	4610      	mov	r0, r2
 80067d2:	f000 fb9a 	bl	8006f0a <TIM_ITRx_SetConfig>
      break;
 80067d6:	e003      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
      break;
 80067dc:	e000      	b.n	80067e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	fffeff88 	.word	0xfffeff88

08006800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a40      	ldr	r2, [pc, #256]	; (8006964 <TIM_Base_SetConfig+0x114>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686e:	d00f      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a3d      	ldr	r2, [pc, #244]	; (8006968 <TIM_Base_SetConfig+0x118>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a3c      	ldr	r2, [pc, #240]	; (800696c <TIM_Base_SetConfig+0x11c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3b      	ldr	r2, [pc, #236]	; (8006970 <TIM_Base_SetConfig+0x120>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_Base_SetConfig+0x40>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a3a      	ldr	r2, [pc, #232]	; (8006974 <TIM_Base_SetConfig+0x124>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d108      	bne.n	80068a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a2f      	ldr	r2, [pc, #188]	; (8006964 <TIM_Base_SetConfig+0x114>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d02b      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b0:	d027      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a2c      	ldr	r2, [pc, #176]	; (8006968 <TIM_Base_SetConfig+0x118>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d023      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2b      	ldr	r2, [pc, #172]	; (800696c <TIM_Base_SetConfig+0x11c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01f      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a2a      	ldr	r2, [pc, #168]	; (8006970 <TIM_Base_SetConfig+0x120>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d01b      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a29      	ldr	r2, [pc, #164]	; (8006974 <TIM_Base_SetConfig+0x124>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d017      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a28      	ldr	r2, [pc, #160]	; (8006978 <TIM_Base_SetConfig+0x128>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a27      	ldr	r2, [pc, #156]	; (800697c <TIM_Base_SetConfig+0x12c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00f      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a26      	ldr	r2, [pc, #152]	; (8006980 <TIM_Base_SetConfig+0x130>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00b      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a25      	ldr	r2, [pc, #148]	; (8006984 <TIM_Base_SetConfig+0x134>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a24      	ldr	r2, [pc, #144]	; (8006988 <TIM_Base_SetConfig+0x138>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_Base_SetConfig+0xb2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a23      	ldr	r2, [pc, #140]	; (800698c <TIM_Base_SetConfig+0x13c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d108      	bne.n	8006914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a0a      	ldr	r2, [pc, #40]	; (8006964 <TIM_Base_SetConfig+0x114>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_Base_SetConfig+0xf8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a0c      	ldr	r2, [pc, #48]	; (8006974 <TIM_Base_SetConfig+0x124>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d103      	bne.n	8006950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	615a      	str	r2, [r3, #20]
}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40010000 	.word	0x40010000
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40010400 	.word	0x40010400
 8006978:	40014000 	.word	0x40014000
 800697c:	40014400 	.word	0x40014400
 8006980:	40014800 	.word	0x40014800
 8006984:	40001800 	.word	0x40001800
 8006988:	40001c00 	.word	0x40001c00
 800698c:	40002000 	.word	0x40002000

08006990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f023 0201 	bic.w	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4b2b      	ldr	r3, [pc, #172]	; (8006a68 <TIM_OC1_SetConfig+0xd8>)
 80069bc:	4013      	ands	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0303 	bic.w	r3, r3, #3
 80069c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f023 0302 	bic.w	r3, r3, #2
 80069d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a21      	ldr	r2, [pc, #132]	; (8006a6c <TIM_OC1_SetConfig+0xdc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_OC1_SetConfig+0x64>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a20      	ldr	r2, [pc, #128]	; (8006a70 <TIM_OC1_SetConfig+0xe0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d10c      	bne.n	8006a0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f023 0308 	bic.w	r3, r3, #8
 80069fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f023 0304 	bic.w	r3, r3, #4
 8006a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a16      	ldr	r2, [pc, #88]	; (8006a6c <TIM_OC1_SetConfig+0xdc>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_OC1_SetConfig+0x8e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <TIM_OC1_SetConfig+0xe0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d111      	bne.n	8006a42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	621a      	str	r2, [r3, #32]
}
 8006a5c:	bf00      	nop
 8006a5e:	371c      	adds	r7, #28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	fffeff8f 	.word	0xfffeff8f
 8006a6c:	40010000 	.word	0x40010000
 8006a70:	40010400 	.word	0x40010400

08006a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f023 0210 	bic.w	r2, r3, #16
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4b2e      	ldr	r3, [pc, #184]	; (8006b58 <TIM_OC2_SetConfig+0xe4>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0320 	bic.w	r3, r3, #32
 8006abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a23      	ldr	r2, [pc, #140]	; (8006b5c <TIM_OC2_SetConfig+0xe8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d003      	beq.n	8006adc <TIM_OC2_SetConfig+0x68>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <TIM_OC2_SetConfig+0xec>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d10d      	bne.n	8006af8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <TIM_OC2_SetConfig+0xe8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC2_SetConfig+0x94>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <TIM_OC2_SetConfig+0xec>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d113      	bne.n	8006b30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	feff8fff 	.word	0xfeff8fff
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40010400 	.word	0x40010400

08006b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4b2d      	ldr	r3, [pc, #180]	; (8006c44 <TIM_OC3_SetConfig+0xe0>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0303 	bic.w	r3, r3, #3
 8006b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a22      	ldr	r2, [pc, #136]	; (8006c48 <TIM_OC3_SetConfig+0xe4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_OC3_SetConfig+0x66>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a21      	ldr	r2, [pc, #132]	; (8006c4c <TIM_OC3_SetConfig+0xe8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10d      	bne.n	8006be6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <TIM_OC3_SetConfig+0xe4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_OC3_SetConfig+0x92>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a16      	ldr	r2, [pc, #88]	; (8006c4c <TIM_OC3_SetConfig+0xe8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d113      	bne.n	8006c1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	621a      	str	r2, [r3, #32]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	fffeff8f 	.word	0xfffeff8f
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	40010400 	.word	0x40010400

08006c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <TIM_OC4_SetConfig+0xa4>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	031b      	lsls	r3, r3, #12
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <TIM_OC4_SetConfig+0xa8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_OC4_SetConfig+0x68>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a12      	ldr	r2, [pc, #72]	; (8006cfc <TIM_OC4_SetConfig+0xac>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d109      	bne.n	8006ccc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	019b      	lsls	r3, r3, #6
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	621a      	str	r2, [r3, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	feff8fff 	.word	0xfeff8fff
 8006cf8:	40010000 	.word	0x40010000
 8006cfc:	40010400 	.word	0x40010400

08006d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <TIM_OC5_SetConfig+0x98>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a12      	ldr	r2, [pc, #72]	; (8006d9c <TIM_OC5_SetConfig+0x9c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d003      	beq.n	8006d5e <TIM_OC5_SetConfig+0x5e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a11      	ldr	r2, [pc, #68]	; (8006da0 <TIM_OC5_SetConfig+0xa0>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d109      	bne.n	8006d72 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	fffeff8f 	.word	0xfffeff8f
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40010400 	.word	0x40010400

08006da4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4b1c      	ldr	r3, [pc, #112]	; (8006e40 <TIM_OC6_SetConfig+0x9c>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	051b      	lsls	r3, r3, #20
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a13      	ldr	r2, [pc, #76]	; (8006e44 <TIM_OC6_SetConfig+0xa0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC6_SetConfig+0x60>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a12      	ldr	r2, [pc, #72]	; (8006e48 <TIM_OC6_SetConfig+0xa4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d109      	bne.n	8006e18 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	029b      	lsls	r3, r3, #10
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	feff8fff 	.word	0xfeff8fff
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40010400 	.word	0x40010400

08006e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	f023 0201 	bic.w	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f023 030a 	bic.w	r3, r3, #10
 8006e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b087      	sub	sp, #28
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f023 0210 	bic.w	r2, r3, #16
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	031b      	lsls	r3, r3, #12
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f043 0307 	orr.w	r3, r3, #7
 8006f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	609a      	str	r2, [r3, #8]
}
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	021a      	lsls	r2, r3, #8
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	609a      	str	r2, [r3, #8]
}
 8006f74:	bf00      	nop
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 031f 	and.w	r3, r3, #31
 8006f92:	2201      	movs	r2, #1
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1a      	ldr	r2, [r3, #32]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	401a      	ands	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a1a      	ldr	r2, [r3, #32]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	621a      	str	r2, [r3, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
	...

08006fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e06d      	b.n	80070c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a30      	ldr	r2, [pc, #192]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d004      	beq.n	8007018 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2f      	ldr	r2, [pc, #188]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d108      	bne.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800701e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007030:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a20      	ldr	r2, [pc, #128]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d022      	beq.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007056:	d01d      	beq.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1d      	ldr	r2, [pc, #116]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d018      	beq.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1a      	ldr	r2, [pc, #104]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00e      	beq.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a15      	ldr	r2, [pc, #84]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d009      	beq.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a15      	ldr	r2, [pc, #84]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d10c      	bne.n	80070ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800709a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40010400 	.word	0x40010400
 80070d4:	40000400 	.word	0x40000400
 80070d8:	40000800 	.word	0x40000800
 80070dc:	40000c00 	.word	0x40000c00
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40001800 	.word	0x40001800

080070e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e040      	b.n	80071b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fb fee4 	bl	8002f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2224      	movs	r2, #36	; 0x24
 8007150:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f8c0 	bl	80072e8 <UART_SetConfig>
 8007168:	4603      	mov	r3, r0
 800716a:	2b01      	cmp	r3, #1
 800716c:	d101      	bne.n	8007172 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e022      	b.n	80071b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fb16 	bl	80077ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800718e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800719e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fb9d 	bl	80078f0 <UART_CheckIdleState>
 80071b6:	4603      	mov	r3, r0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	; 0x28
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	4613      	mov	r3, r2
 80071ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	f040 8081 	bne.w	80072dc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_UART_Transmit+0x26>
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e079      	b.n	80072de <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_UART_Transmit+0x38>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e072      	b.n	80072de <HAL_UART_Transmit+0x11e>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2221      	movs	r2, #33	; 0x21
 800720c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800720e:	f7fc f803 	bl	8003218 <HAL_GetTick>
 8007212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	88fa      	ldrh	r2, [r7, #6]
 8007220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722c:	d108      	bne.n	8007240 <HAL_UART_Transmit+0x80>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	61bb      	str	r3, [r7, #24]
 800723e:	e003      	b.n	8007248 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007250:	e02c      	b.n	80072ac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2200      	movs	r2, #0
 800725a:	2180      	movs	r1, #128	; 0x80
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 fb7a 	bl	8007956 <UART_WaitOnFlagUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e038      	b.n	80072de <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007280:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	3302      	adds	r3, #2
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	e007      	b.n	800729a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	781a      	ldrb	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	3301      	adds	r3, #1
 8007298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1cc      	bne.n	8007252 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2200      	movs	r2, #0
 80072c0:	2140      	movs	r1, #64	; 0x40
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fb47 	bl	8007956 <UART_WaitOnFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e005      	b.n	80072de <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	e000      	b.n	80072de <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80072dc:	2302      	movs	r3, #2
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3720      	adds	r7, #32
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4ba7      	ldr	r3, [pc, #668]	; (80075b0 <UART_SetConfig+0x2c8>)
 8007314:	4013      	ands	r3, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	6979      	ldr	r1, [r7, #20]
 800731c:	430b      	orrs	r3, r1
 800731e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4313      	orrs	r3, r2
 8007344:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	430a      	orrs	r2, r1
 8007358:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a95      	ldr	r2, [pc, #596]	; (80075b4 <UART_SetConfig+0x2cc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d120      	bne.n	80073a6 <UART_SetConfig+0xbe>
 8007364:	4b94      	ldr	r3, [pc, #592]	; (80075b8 <UART_SetConfig+0x2d0>)
 8007366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b03      	cmp	r3, #3
 8007370:	d816      	bhi.n	80073a0 <UART_SetConfig+0xb8>
 8007372:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <UART_SetConfig+0x90>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	08007389 	.word	0x08007389
 800737c:	08007395 	.word	0x08007395
 8007380:	0800738f 	.word	0x0800738f
 8007384:	0800739b 	.word	0x0800739b
 8007388:	2301      	movs	r3, #1
 800738a:	77fb      	strb	r3, [r7, #31]
 800738c:	e14f      	b.n	800762e <UART_SetConfig+0x346>
 800738e:	2302      	movs	r3, #2
 8007390:	77fb      	strb	r3, [r7, #31]
 8007392:	e14c      	b.n	800762e <UART_SetConfig+0x346>
 8007394:	2304      	movs	r3, #4
 8007396:	77fb      	strb	r3, [r7, #31]
 8007398:	e149      	b.n	800762e <UART_SetConfig+0x346>
 800739a:	2308      	movs	r3, #8
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e146      	b.n	800762e <UART_SetConfig+0x346>
 80073a0:	2310      	movs	r3, #16
 80073a2:	77fb      	strb	r3, [r7, #31]
 80073a4:	e143      	b.n	800762e <UART_SetConfig+0x346>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a84      	ldr	r2, [pc, #528]	; (80075bc <UART_SetConfig+0x2d4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d132      	bne.n	8007416 <UART_SetConfig+0x12e>
 80073b0:	4b81      	ldr	r3, [pc, #516]	; (80075b8 <UART_SetConfig+0x2d0>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b6:	f003 030c 	and.w	r3, r3, #12
 80073ba:	2b0c      	cmp	r3, #12
 80073bc:	d828      	bhi.n	8007410 <UART_SetConfig+0x128>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <UART_SetConfig+0xdc>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073f9 	.word	0x080073f9
 80073c8:	08007411 	.word	0x08007411
 80073cc:	08007411 	.word	0x08007411
 80073d0:	08007411 	.word	0x08007411
 80073d4:	08007405 	.word	0x08007405
 80073d8:	08007411 	.word	0x08007411
 80073dc:	08007411 	.word	0x08007411
 80073e0:	08007411 	.word	0x08007411
 80073e4:	080073ff 	.word	0x080073ff
 80073e8:	08007411 	.word	0x08007411
 80073ec:	08007411 	.word	0x08007411
 80073f0:	08007411 	.word	0x08007411
 80073f4:	0800740b 	.word	0x0800740b
 80073f8:	2300      	movs	r3, #0
 80073fa:	77fb      	strb	r3, [r7, #31]
 80073fc:	e117      	b.n	800762e <UART_SetConfig+0x346>
 80073fe:	2302      	movs	r3, #2
 8007400:	77fb      	strb	r3, [r7, #31]
 8007402:	e114      	b.n	800762e <UART_SetConfig+0x346>
 8007404:	2304      	movs	r3, #4
 8007406:	77fb      	strb	r3, [r7, #31]
 8007408:	e111      	b.n	800762e <UART_SetConfig+0x346>
 800740a:	2308      	movs	r3, #8
 800740c:	77fb      	strb	r3, [r7, #31]
 800740e:	e10e      	b.n	800762e <UART_SetConfig+0x346>
 8007410:	2310      	movs	r3, #16
 8007412:	77fb      	strb	r3, [r7, #31]
 8007414:	e10b      	b.n	800762e <UART_SetConfig+0x346>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a69      	ldr	r2, [pc, #420]	; (80075c0 <UART_SetConfig+0x2d8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d120      	bne.n	8007462 <UART_SetConfig+0x17a>
 8007420:	4b65      	ldr	r3, [pc, #404]	; (80075b8 <UART_SetConfig+0x2d0>)
 8007422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007426:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800742a:	2b30      	cmp	r3, #48	; 0x30
 800742c:	d013      	beq.n	8007456 <UART_SetConfig+0x16e>
 800742e:	2b30      	cmp	r3, #48	; 0x30
 8007430:	d814      	bhi.n	800745c <UART_SetConfig+0x174>
 8007432:	2b20      	cmp	r3, #32
 8007434:	d009      	beq.n	800744a <UART_SetConfig+0x162>
 8007436:	2b20      	cmp	r3, #32
 8007438:	d810      	bhi.n	800745c <UART_SetConfig+0x174>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <UART_SetConfig+0x15c>
 800743e:	2b10      	cmp	r3, #16
 8007440:	d006      	beq.n	8007450 <UART_SetConfig+0x168>
 8007442:	e00b      	b.n	800745c <UART_SetConfig+0x174>
 8007444:	2300      	movs	r3, #0
 8007446:	77fb      	strb	r3, [r7, #31]
 8007448:	e0f1      	b.n	800762e <UART_SetConfig+0x346>
 800744a:	2302      	movs	r3, #2
 800744c:	77fb      	strb	r3, [r7, #31]
 800744e:	e0ee      	b.n	800762e <UART_SetConfig+0x346>
 8007450:	2304      	movs	r3, #4
 8007452:	77fb      	strb	r3, [r7, #31]
 8007454:	e0eb      	b.n	800762e <UART_SetConfig+0x346>
 8007456:	2308      	movs	r3, #8
 8007458:	77fb      	strb	r3, [r7, #31]
 800745a:	e0e8      	b.n	800762e <UART_SetConfig+0x346>
 800745c:	2310      	movs	r3, #16
 800745e:	77fb      	strb	r3, [r7, #31]
 8007460:	e0e5      	b.n	800762e <UART_SetConfig+0x346>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a57      	ldr	r2, [pc, #348]	; (80075c4 <UART_SetConfig+0x2dc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d120      	bne.n	80074ae <UART_SetConfig+0x1c6>
 800746c:	4b52      	ldr	r3, [pc, #328]	; (80075b8 <UART_SetConfig+0x2d0>)
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007476:	2bc0      	cmp	r3, #192	; 0xc0
 8007478:	d013      	beq.n	80074a2 <UART_SetConfig+0x1ba>
 800747a:	2bc0      	cmp	r3, #192	; 0xc0
 800747c:	d814      	bhi.n	80074a8 <UART_SetConfig+0x1c0>
 800747e:	2b80      	cmp	r3, #128	; 0x80
 8007480:	d009      	beq.n	8007496 <UART_SetConfig+0x1ae>
 8007482:	2b80      	cmp	r3, #128	; 0x80
 8007484:	d810      	bhi.n	80074a8 <UART_SetConfig+0x1c0>
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <UART_SetConfig+0x1a8>
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d006      	beq.n	800749c <UART_SetConfig+0x1b4>
 800748e:	e00b      	b.n	80074a8 <UART_SetConfig+0x1c0>
 8007490:	2300      	movs	r3, #0
 8007492:	77fb      	strb	r3, [r7, #31]
 8007494:	e0cb      	b.n	800762e <UART_SetConfig+0x346>
 8007496:	2302      	movs	r3, #2
 8007498:	77fb      	strb	r3, [r7, #31]
 800749a:	e0c8      	b.n	800762e <UART_SetConfig+0x346>
 800749c:	2304      	movs	r3, #4
 800749e:	77fb      	strb	r3, [r7, #31]
 80074a0:	e0c5      	b.n	800762e <UART_SetConfig+0x346>
 80074a2:	2308      	movs	r3, #8
 80074a4:	77fb      	strb	r3, [r7, #31]
 80074a6:	e0c2      	b.n	800762e <UART_SetConfig+0x346>
 80074a8:	2310      	movs	r3, #16
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e0bf      	b.n	800762e <UART_SetConfig+0x346>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a45      	ldr	r2, [pc, #276]	; (80075c8 <UART_SetConfig+0x2e0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d125      	bne.n	8007504 <UART_SetConfig+0x21c>
 80074b8:	4b3f      	ldr	r3, [pc, #252]	; (80075b8 <UART_SetConfig+0x2d0>)
 80074ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074c6:	d017      	beq.n	80074f8 <UART_SetConfig+0x210>
 80074c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074cc:	d817      	bhi.n	80074fe <UART_SetConfig+0x216>
 80074ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d2:	d00b      	beq.n	80074ec <UART_SetConfig+0x204>
 80074d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d8:	d811      	bhi.n	80074fe <UART_SetConfig+0x216>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <UART_SetConfig+0x1fe>
 80074de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e2:	d006      	beq.n	80074f2 <UART_SetConfig+0x20a>
 80074e4:	e00b      	b.n	80074fe <UART_SetConfig+0x216>
 80074e6:	2300      	movs	r3, #0
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e0a0      	b.n	800762e <UART_SetConfig+0x346>
 80074ec:	2302      	movs	r3, #2
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e09d      	b.n	800762e <UART_SetConfig+0x346>
 80074f2:	2304      	movs	r3, #4
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e09a      	b.n	800762e <UART_SetConfig+0x346>
 80074f8:	2308      	movs	r3, #8
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e097      	b.n	800762e <UART_SetConfig+0x346>
 80074fe:	2310      	movs	r3, #16
 8007500:	77fb      	strb	r3, [r7, #31]
 8007502:	e094      	b.n	800762e <UART_SetConfig+0x346>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a30      	ldr	r2, [pc, #192]	; (80075cc <UART_SetConfig+0x2e4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d125      	bne.n	800755a <UART_SetConfig+0x272>
 800750e:	4b2a      	ldr	r3, [pc, #168]	; (80075b8 <UART_SetConfig+0x2d0>)
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007514:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007518:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800751c:	d017      	beq.n	800754e <UART_SetConfig+0x266>
 800751e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007522:	d817      	bhi.n	8007554 <UART_SetConfig+0x26c>
 8007524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007528:	d00b      	beq.n	8007542 <UART_SetConfig+0x25a>
 800752a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800752e:	d811      	bhi.n	8007554 <UART_SetConfig+0x26c>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <UART_SetConfig+0x254>
 8007534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007538:	d006      	beq.n	8007548 <UART_SetConfig+0x260>
 800753a:	e00b      	b.n	8007554 <UART_SetConfig+0x26c>
 800753c:	2301      	movs	r3, #1
 800753e:	77fb      	strb	r3, [r7, #31]
 8007540:	e075      	b.n	800762e <UART_SetConfig+0x346>
 8007542:	2302      	movs	r3, #2
 8007544:	77fb      	strb	r3, [r7, #31]
 8007546:	e072      	b.n	800762e <UART_SetConfig+0x346>
 8007548:	2304      	movs	r3, #4
 800754a:	77fb      	strb	r3, [r7, #31]
 800754c:	e06f      	b.n	800762e <UART_SetConfig+0x346>
 800754e:	2308      	movs	r3, #8
 8007550:	77fb      	strb	r3, [r7, #31]
 8007552:	e06c      	b.n	800762e <UART_SetConfig+0x346>
 8007554:	2310      	movs	r3, #16
 8007556:	77fb      	strb	r3, [r7, #31]
 8007558:	e069      	b.n	800762e <UART_SetConfig+0x346>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1c      	ldr	r2, [pc, #112]	; (80075d0 <UART_SetConfig+0x2e8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d137      	bne.n	80075d4 <UART_SetConfig+0x2ec>
 8007564:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <UART_SetConfig+0x2d0>)
 8007566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800756e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007572:	d017      	beq.n	80075a4 <UART_SetConfig+0x2bc>
 8007574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007578:	d817      	bhi.n	80075aa <UART_SetConfig+0x2c2>
 800757a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757e:	d00b      	beq.n	8007598 <UART_SetConfig+0x2b0>
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007584:	d811      	bhi.n	80075aa <UART_SetConfig+0x2c2>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <UART_SetConfig+0x2aa>
 800758a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758e:	d006      	beq.n	800759e <UART_SetConfig+0x2b6>
 8007590:	e00b      	b.n	80075aa <UART_SetConfig+0x2c2>
 8007592:	2300      	movs	r3, #0
 8007594:	77fb      	strb	r3, [r7, #31]
 8007596:	e04a      	b.n	800762e <UART_SetConfig+0x346>
 8007598:	2302      	movs	r3, #2
 800759a:	77fb      	strb	r3, [r7, #31]
 800759c:	e047      	b.n	800762e <UART_SetConfig+0x346>
 800759e:	2304      	movs	r3, #4
 80075a0:	77fb      	strb	r3, [r7, #31]
 80075a2:	e044      	b.n	800762e <UART_SetConfig+0x346>
 80075a4:	2308      	movs	r3, #8
 80075a6:	77fb      	strb	r3, [r7, #31]
 80075a8:	e041      	b.n	800762e <UART_SetConfig+0x346>
 80075aa:	2310      	movs	r3, #16
 80075ac:	77fb      	strb	r3, [r7, #31]
 80075ae:	e03e      	b.n	800762e <UART_SetConfig+0x346>
 80075b0:	efff69f3 	.word	0xefff69f3
 80075b4:	40011000 	.word	0x40011000
 80075b8:	40023800 	.word	0x40023800
 80075bc:	40004400 	.word	0x40004400
 80075c0:	40004800 	.word	0x40004800
 80075c4:	40004c00 	.word	0x40004c00
 80075c8:	40005000 	.word	0x40005000
 80075cc:	40011400 	.word	0x40011400
 80075d0:	40007800 	.word	0x40007800
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a71      	ldr	r2, [pc, #452]	; (80077a0 <UART_SetConfig+0x4b8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d125      	bne.n	800762a <UART_SetConfig+0x342>
 80075de:	4b71      	ldr	r3, [pc, #452]	; (80077a4 <UART_SetConfig+0x4bc>)
 80075e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075ec:	d017      	beq.n	800761e <UART_SetConfig+0x336>
 80075ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075f2:	d817      	bhi.n	8007624 <UART_SetConfig+0x33c>
 80075f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f8:	d00b      	beq.n	8007612 <UART_SetConfig+0x32a>
 80075fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075fe:	d811      	bhi.n	8007624 <UART_SetConfig+0x33c>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <UART_SetConfig+0x324>
 8007604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007608:	d006      	beq.n	8007618 <UART_SetConfig+0x330>
 800760a:	e00b      	b.n	8007624 <UART_SetConfig+0x33c>
 800760c:	2300      	movs	r3, #0
 800760e:	77fb      	strb	r3, [r7, #31]
 8007610:	e00d      	b.n	800762e <UART_SetConfig+0x346>
 8007612:	2302      	movs	r3, #2
 8007614:	77fb      	strb	r3, [r7, #31]
 8007616:	e00a      	b.n	800762e <UART_SetConfig+0x346>
 8007618:	2304      	movs	r3, #4
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e007      	b.n	800762e <UART_SetConfig+0x346>
 800761e:	2308      	movs	r3, #8
 8007620:	77fb      	strb	r3, [r7, #31]
 8007622:	e004      	b.n	800762e <UART_SetConfig+0x346>
 8007624:	2310      	movs	r3, #16
 8007626:	77fb      	strb	r3, [r7, #31]
 8007628:	e001      	b.n	800762e <UART_SetConfig+0x346>
 800762a:	2310      	movs	r3, #16
 800762c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007636:	d15a      	bne.n	80076ee <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007638:	7ffb      	ldrb	r3, [r7, #31]
 800763a:	2b08      	cmp	r3, #8
 800763c:	d827      	bhi.n	800768e <UART_SetConfig+0x3a6>
 800763e:	a201      	add	r2, pc, #4	; (adr r2, 8007644 <UART_SetConfig+0x35c>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	08007669 	.word	0x08007669
 8007648:	08007671 	.word	0x08007671
 800764c:	08007679 	.word	0x08007679
 8007650:	0800768f 	.word	0x0800768f
 8007654:	0800767f 	.word	0x0800767f
 8007658:	0800768f 	.word	0x0800768f
 800765c:	0800768f 	.word	0x0800768f
 8007660:	0800768f 	.word	0x0800768f
 8007664:	08007687 	.word	0x08007687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007668:	f7fd fb42 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 800766c:	61b8      	str	r0, [r7, #24]
        break;
 800766e:	e013      	b.n	8007698 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007670:	f7fd fb52 	bl	8004d18 <HAL_RCC_GetPCLK2Freq>
 8007674:	61b8      	str	r0, [r7, #24]
        break;
 8007676:	e00f      	b.n	8007698 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007678:	4b4b      	ldr	r3, [pc, #300]	; (80077a8 <UART_SetConfig+0x4c0>)
 800767a:	61bb      	str	r3, [r7, #24]
        break;
 800767c:	e00c      	b.n	8007698 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767e:	f7fd fa49 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8007682:	61b8      	str	r0, [r7, #24]
        break;
 8007684:	e008      	b.n	8007698 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768a:	61bb      	str	r3, [r7, #24]
        break;
 800768c:	e004      	b.n	8007698 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	77bb      	strb	r3, [r7, #30]
        break;
 8007696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d074      	beq.n	8007788 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	005a      	lsls	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	441a      	add	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d916      	bls.n	80076e8 <UART_SetConfig+0x400>
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c0:	d212      	bcs.n	80076e8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f023 030f 	bic.w	r3, r3, #15
 80076ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	89fb      	ldrh	r3, [r7, #14]
 80076da:	4313      	orrs	r3, r2
 80076dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	89fa      	ldrh	r2, [r7, #14]
 80076e4:	60da      	str	r2, [r3, #12]
 80076e6:	e04f      	b.n	8007788 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	77bb      	strb	r3, [r7, #30]
 80076ec:	e04c      	b.n	8007788 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076ee:	7ffb      	ldrb	r3, [r7, #31]
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d828      	bhi.n	8007746 <UART_SetConfig+0x45e>
 80076f4:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <UART_SetConfig+0x414>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	08007721 	.word	0x08007721
 8007700:	08007729 	.word	0x08007729
 8007704:	08007731 	.word	0x08007731
 8007708:	08007747 	.word	0x08007747
 800770c:	08007737 	.word	0x08007737
 8007710:	08007747 	.word	0x08007747
 8007714:	08007747 	.word	0x08007747
 8007718:	08007747 	.word	0x08007747
 800771c:	0800773f 	.word	0x0800773f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fd fae6 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8007724:	61b8      	str	r0, [r7, #24]
        break;
 8007726:	e013      	b.n	8007750 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007728:	f7fd faf6 	bl	8004d18 <HAL_RCC_GetPCLK2Freq>
 800772c:	61b8      	str	r0, [r7, #24]
        break;
 800772e:	e00f      	b.n	8007750 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007730:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <UART_SetConfig+0x4c0>)
 8007732:	61bb      	str	r3, [r7, #24]
        break;
 8007734:	e00c      	b.n	8007750 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007736:	f7fd f9ed 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 800773a:	61b8      	str	r0, [r7, #24]
        break;
 800773c:	e008      	b.n	8007750 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007742:	61bb      	str	r3, [r7, #24]
        break;
 8007744:	e004      	b.n	8007750 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	77bb      	strb	r3, [r7, #30]
        break;
 800774e:	bf00      	nop
    }

    if (pclk != 0U)
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d018      	beq.n	8007788 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	085a      	lsrs	r2, r3, #1
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b0f      	cmp	r3, #15
 800776e:	d909      	bls.n	8007784 <UART_SetConfig+0x49c>
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007776:	d205      	bcs.n	8007784 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	e001      	b.n	8007788 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007794:	7fbb      	ldrb	r3, [r7, #30]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	40007c00 	.word	0x40007c00
 80077a4:	40023800 	.word	0x40023800
 80077a8:	00f42400 	.word	0x00f42400

080077ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01a      	beq.n	80078c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078aa:	d10a      	bne.n	80078c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	605a      	str	r2, [r3, #4]
  }
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007900:	f7fb fc8a 	bl	8003218 <HAL_GetTick>
 8007904:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b08      	cmp	r3, #8
 8007912:	d10e      	bne.n	8007932 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007914:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f817 	bl	8007956 <UART_WaitOnFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e00d      	b.n	800794e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2220      	movs	r2, #32
 8007936:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b09c      	sub	sp, #112	; 0x70
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	4613      	mov	r3, r2
 8007964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007966:	e0a5      	b.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	f000 80a1 	beq.w	8007ab4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007972:	f7fb fc51 	bl	8003218 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800797e:	429a      	cmp	r2, r3
 8007980:	d302      	bcc.n	8007988 <UART_WaitOnFlagUntilTimeout+0x32>
 8007982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007984:	2b00      	cmp	r3, #0
 8007986:	d13e      	bne.n	8007a06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007998:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800799c:	667b      	str	r3, [r7, #100]	; 0x64
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e6      	bne.n	8007988 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	f023 0301 	bic.w	r3, r3, #1
 80079d0:	663b      	str	r3, [r7, #96]	; 0x60
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3308      	adds	r3, #8
 80079d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079da:	64ba      	str	r2, [r7, #72]	; 0x48
 80079dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e5      	bne.n	80079ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2220      	movs	r2, #32
 80079f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2220      	movs	r2, #32
 80079f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e067      	b.n	8007ad6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d04f      	beq.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a22:	d147      	bne.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3308      	adds	r3, #8
 8007a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f023 0301 	bic.w	r3, r3, #1
 8007a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a80:	623a      	str	r2, [r7, #32]
 8007a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	69f9      	ldr	r1, [r7, #28]
 8007a86:	6a3a      	ldr	r2, [r7, #32]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e5      	bne.n	8007a60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2220      	movs	r2, #32
 8007a98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e010      	b.n	8007ad6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69da      	ldr	r2, [r3, #28]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	4013      	ands	r3, r2
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	bf0c      	ite	eq
 8007ac4:	2301      	moveq	r3, #1
 8007ac6:	2300      	movne	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	461a      	mov	r2, r3
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	f43f af4a 	beq.w	8007968 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3770      	adds	r7, #112	; 0x70
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	f107 001c 	add.w	r0, r7, #28
 8007aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d120      	bne.n	8007b3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	4b20      	ldr	r3, [pc, #128]	; (8007b8c <USB_CoreInit+0xac>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d105      	bne.n	8007b2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa92 	bl	8008058 <USB_CoreReset>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
 8007b38:	e010      	b.n	8007b5c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fa86 	bl	8008058 <USB_CoreReset>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d10b      	bne.n	8007b7a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f043 0206 	orr.w	r2, r3, #6
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f043 0220 	orr.w	r2, r3, #32
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b86:	b004      	add	sp, #16
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	ffbdffbf 	.word	0xffbdffbf

08007b90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f023 0201 	bic.w	r2, r3, #1
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bce:	78fb      	ldrb	r3, [r7, #3]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d115      	bne.n	8007c00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007be0:	2001      	movs	r0, #1
 8007be2:	f7fb fb25 	bl	8003230 <HAL_Delay>
      ms++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fa25 	bl	800803c <USB_GetMode>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d01e      	beq.n	8007c36 <USB_SetCurrentMode+0x84>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b31      	cmp	r3, #49	; 0x31
 8007bfc:	d9f0      	bls.n	8007be0 <USB_SetCurrentMode+0x2e>
 8007bfe:	e01a      	b.n	8007c36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d115      	bne.n	8007c32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c12:	2001      	movs	r0, #1
 8007c14:	f7fb fb0c 	bl	8003230 <HAL_Delay>
      ms++;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa0c 	bl	800803c <USB_GetMode>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <USB_SetCurrentMode+0x84>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b31      	cmp	r3, #49	; 0x31
 8007c2e:	d9f0      	bls.n	8007c12 <USB_SetCurrentMode+0x60>
 8007c30:	e001      	b.n	8007c36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e005      	b.n	8007c42 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2b32      	cmp	r3, #50	; 0x32
 8007c3a:	d101      	bne.n	8007c40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b086      	sub	sp, #24
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]
 8007c6a:	e009      	b.n	8007c80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3340      	adds	r3, #64	; 0x40
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	2200      	movs	r2, #0
 8007c78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b0e      	cmp	r3, #14
 8007c84:	d9f2      	bls.n	8007c6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11c      	bne.n	8007cc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c9a:	f043 0302 	orr.w	r3, r3, #2
 8007c9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	e005      	b.n	8007cd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cd8:	461a      	mov	r2, r3
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cec:	461a      	mov	r2, r3
 8007cee:	680b      	ldr	r3, [r1, #0]
 8007cf0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d10c      	bne.n	8007d12 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d104      	bne.n	8007d08 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007cfe:	2100      	movs	r1, #0
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f961 	bl	8007fc8 <USB_SetDevSpeed>
 8007d06:	e008      	b.n	8007d1a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d08:	2101      	movs	r1, #1
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f95c 	bl	8007fc8 <USB_SetDevSpeed>
 8007d10:	e003      	b.n	8007d1a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d12:	2103      	movs	r1, #3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f957 	bl	8007fc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d1a:	2110      	movs	r1, #16
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f8f3 	bl	8007f08 <USB_FlushTxFifo>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f91d 	bl	8007f6c <USB_FlushRxFifo>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d42:	461a      	mov	r2, r3
 8007d44:	2300      	movs	r3, #0
 8007d46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d4e:	461a      	mov	r2, r3
 8007d50:	2300      	movs	r3, #0
 8007d52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d60:	2300      	movs	r3, #0
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	e043      	b.n	8007dee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d7c:	d118      	bne.n	8007db0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d90:	461a      	mov	r2, r3
 8007d92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	e013      	b.n	8007dc2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da6:	461a      	mov	r2, r3
 8007da8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	e008      	b.n	8007dc2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de0:	461a      	mov	r2, r3
 8007de2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007de6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	3301      	adds	r3, #1
 8007dec:	613b      	str	r3, [r7, #16]
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d3b7      	bcc.n	8007d66 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007df6:	2300      	movs	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	e043      	b.n	8007e84 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e12:	d118      	bne.n	8007e46 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e26:	461a      	mov	r2, r3
 8007e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	e013      	b.n	8007e58 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	e008      	b.n	8007e58 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e52:	461a      	mov	r2, r3
 8007e54:	2300      	movs	r3, #0
 8007e56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e64:	461a      	mov	r2, r3
 8007e66:	2300      	movs	r3, #0
 8007e68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e76:	461a      	mov	r2, r3
 8007e78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	3301      	adds	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d3b7      	bcc.n	8007dfc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007eac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d105      	bne.n	8007ec0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f043 0210 	orr.w	r2, r3, #16
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699a      	ldr	r2, [r3, #24]
 8007ec4:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <USB_DevInit+0x2b4>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d005      	beq.n	8007ede <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	f043 0208 	orr.w	r2, r3, #8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d105      	bne.n	8007ef0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	699a      	ldr	r2, [r3, #24]
 8007ee8:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <USB_DevInit+0x2b8>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007efc:	b004      	add	sp, #16
 8007efe:	4770      	bx	lr
 8007f00:	803c3800 	.word	0x803c3800
 8007f04:	40000004 	.word	0x40000004

08007f08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	4a12      	ldr	r2, [pc, #72]	; (8007f68 <USB_FlushTxFifo+0x60>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d901      	bls.n	8007f26 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e01a      	b.n	8007f5c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	daf3      	bge.n	8007f16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	019b      	lsls	r3, r3, #6
 8007f36:	f043 0220 	orr.w	r2, r3, #32
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	4a08      	ldr	r2, [pc, #32]	; (8007f68 <USB_FlushTxFifo+0x60>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d901      	bls.n	8007f4e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e006      	b.n	8007f5c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d0f1      	beq.n	8007f3e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	00030d40 	.word	0x00030d40

08007f6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	4a11      	ldr	r2, [pc, #68]	; (8007fc4 <USB_FlushRxFifo+0x58>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d901      	bls.n	8007f88 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e017      	b.n	8007fb8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	daf3      	bge.n	8007f78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2210      	movs	r2, #16
 8007f98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	4a08      	ldr	r2, [pc, #32]	; (8007fc4 <USB_FlushRxFifo+0x58>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d901      	bls.n	8007faa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e006      	b.n	8007fb8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 0310 	and.w	r3, r3, #16
 8007fb2:	2b10      	cmp	r3, #16
 8007fb4:	d0f1      	beq.n	8007f9a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	00030d40 	.word	0x00030d40

08007fc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008014:	f023 0303 	bic.w	r3, r3, #3
 8008018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008028:	f043 0302 	orr.w	r3, r3, #2
 800802c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	f003 0301 	and.w	r3, r3, #1
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3301      	adds	r3, #1
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	4a13      	ldr	r2, [pc, #76]	; (80080b8 <USB_CoreReset+0x60>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d901      	bls.n	8008074 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e01a      	b.n	80080aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	daf3      	bge.n	8008064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	f043 0201 	orr.w	r2, r3, #1
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	4a09      	ldr	r2, [pc, #36]	; (80080b8 <USB_CoreReset+0x60>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d901      	bls.n	800809c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e006      	b.n	80080aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d0f1      	beq.n	800808c <USB_CoreReset+0x34>

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	00030d40 	.word	0x00030d40

080080bc <__errno>:
 80080bc:	4b01      	ldr	r3, [pc, #4]	; (80080c4 <__errno+0x8>)
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20000034 	.word	0x20000034

080080c8 <__libc_init_array>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	4d0d      	ldr	r5, [pc, #52]	; (8008100 <__libc_init_array+0x38>)
 80080cc:	4c0d      	ldr	r4, [pc, #52]	; (8008104 <__libc_init_array+0x3c>)
 80080ce:	1b64      	subs	r4, r4, r5
 80080d0:	10a4      	asrs	r4, r4, #2
 80080d2:	2600      	movs	r6, #0
 80080d4:	42a6      	cmp	r6, r4
 80080d6:	d109      	bne.n	80080ec <__libc_init_array+0x24>
 80080d8:	4d0b      	ldr	r5, [pc, #44]	; (8008108 <__libc_init_array+0x40>)
 80080da:	4c0c      	ldr	r4, [pc, #48]	; (800810c <__libc_init_array+0x44>)
 80080dc:	f002 feb6 	bl	800ae4c <_init>
 80080e0:	1b64      	subs	r4, r4, r5
 80080e2:	10a4      	asrs	r4, r4, #2
 80080e4:	2600      	movs	r6, #0
 80080e6:	42a6      	cmp	r6, r4
 80080e8:	d105      	bne.n	80080f6 <__libc_init_array+0x2e>
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f0:	4798      	blx	r3
 80080f2:	3601      	adds	r6, #1
 80080f4:	e7ee      	b.n	80080d4 <__libc_init_array+0xc>
 80080f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080fa:	4798      	blx	r3
 80080fc:	3601      	adds	r6, #1
 80080fe:	e7f2      	b.n	80080e6 <__libc_init_array+0x1e>
 8008100:	0800b534 	.word	0x0800b534
 8008104:	0800b534 	.word	0x0800b534
 8008108:	0800b534 	.word	0x0800b534
 800810c:	0800b538 	.word	0x0800b538

08008110 <memset>:
 8008110:	4402      	add	r2, r0
 8008112:	4603      	mov	r3, r0
 8008114:	4293      	cmp	r3, r2
 8008116:	d100      	bne.n	800811a <memset+0xa>
 8008118:	4770      	bx	lr
 800811a:	f803 1b01 	strb.w	r1, [r3], #1
 800811e:	e7f9      	b.n	8008114 <memset+0x4>

08008120 <__cvt>:
 8008120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008124:	ec55 4b10 	vmov	r4, r5, d0
 8008128:	2d00      	cmp	r5, #0
 800812a:	460e      	mov	r6, r1
 800812c:	4619      	mov	r1, r3
 800812e:	462b      	mov	r3, r5
 8008130:	bfbb      	ittet	lt
 8008132:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008136:	461d      	movlt	r5, r3
 8008138:	2300      	movge	r3, #0
 800813a:	232d      	movlt	r3, #45	; 0x2d
 800813c:	700b      	strb	r3, [r1, #0]
 800813e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008140:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008144:	4691      	mov	r9, r2
 8008146:	f023 0820 	bic.w	r8, r3, #32
 800814a:	bfbc      	itt	lt
 800814c:	4622      	movlt	r2, r4
 800814e:	4614      	movlt	r4, r2
 8008150:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008154:	d005      	beq.n	8008162 <__cvt+0x42>
 8008156:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800815a:	d100      	bne.n	800815e <__cvt+0x3e>
 800815c:	3601      	adds	r6, #1
 800815e:	2102      	movs	r1, #2
 8008160:	e000      	b.n	8008164 <__cvt+0x44>
 8008162:	2103      	movs	r1, #3
 8008164:	ab03      	add	r3, sp, #12
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	ab02      	add	r3, sp, #8
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	ec45 4b10 	vmov	d0, r4, r5
 8008170:	4653      	mov	r3, sl
 8008172:	4632      	mov	r2, r6
 8008174:	f000 fcec 	bl	8008b50 <_dtoa_r>
 8008178:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800817c:	4607      	mov	r7, r0
 800817e:	d102      	bne.n	8008186 <__cvt+0x66>
 8008180:	f019 0f01 	tst.w	r9, #1
 8008184:	d022      	beq.n	80081cc <__cvt+0xac>
 8008186:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800818a:	eb07 0906 	add.w	r9, r7, r6
 800818e:	d110      	bne.n	80081b2 <__cvt+0x92>
 8008190:	783b      	ldrb	r3, [r7, #0]
 8008192:	2b30      	cmp	r3, #48	; 0x30
 8008194:	d10a      	bne.n	80081ac <__cvt+0x8c>
 8008196:	2200      	movs	r2, #0
 8008198:	2300      	movs	r3, #0
 800819a:	4620      	mov	r0, r4
 800819c:	4629      	mov	r1, r5
 800819e:	f7f8 fcb3 	bl	8000b08 <__aeabi_dcmpeq>
 80081a2:	b918      	cbnz	r0, 80081ac <__cvt+0x8c>
 80081a4:	f1c6 0601 	rsb	r6, r6, #1
 80081a8:	f8ca 6000 	str.w	r6, [sl]
 80081ac:	f8da 3000 	ldr.w	r3, [sl]
 80081b0:	4499      	add	r9, r3
 80081b2:	2200      	movs	r2, #0
 80081b4:	2300      	movs	r3, #0
 80081b6:	4620      	mov	r0, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	f7f8 fca5 	bl	8000b08 <__aeabi_dcmpeq>
 80081be:	b108      	cbz	r0, 80081c4 <__cvt+0xa4>
 80081c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80081c4:	2230      	movs	r2, #48	; 0x30
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	454b      	cmp	r3, r9
 80081ca:	d307      	bcc.n	80081dc <__cvt+0xbc>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081d0:	1bdb      	subs	r3, r3, r7
 80081d2:	4638      	mov	r0, r7
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	b004      	add	sp, #16
 80081d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081dc:	1c59      	adds	r1, r3, #1
 80081de:	9103      	str	r1, [sp, #12]
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	e7f0      	b.n	80081c6 <__cvt+0xa6>

080081e4 <__exponent>:
 80081e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081e6:	4603      	mov	r3, r0
 80081e8:	2900      	cmp	r1, #0
 80081ea:	bfb8      	it	lt
 80081ec:	4249      	neglt	r1, r1
 80081ee:	f803 2b02 	strb.w	r2, [r3], #2
 80081f2:	bfb4      	ite	lt
 80081f4:	222d      	movlt	r2, #45	; 0x2d
 80081f6:	222b      	movge	r2, #43	; 0x2b
 80081f8:	2909      	cmp	r1, #9
 80081fa:	7042      	strb	r2, [r0, #1]
 80081fc:	dd2a      	ble.n	8008254 <__exponent+0x70>
 80081fe:	f10d 0407 	add.w	r4, sp, #7
 8008202:	46a4      	mov	ip, r4
 8008204:	270a      	movs	r7, #10
 8008206:	46a6      	mov	lr, r4
 8008208:	460a      	mov	r2, r1
 800820a:	fb91 f6f7 	sdiv	r6, r1, r7
 800820e:	fb07 1516 	mls	r5, r7, r6, r1
 8008212:	3530      	adds	r5, #48	; 0x30
 8008214:	2a63      	cmp	r2, #99	; 0x63
 8008216:	f104 34ff 	add.w	r4, r4, #4294967295
 800821a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800821e:	4631      	mov	r1, r6
 8008220:	dcf1      	bgt.n	8008206 <__exponent+0x22>
 8008222:	3130      	adds	r1, #48	; 0x30
 8008224:	f1ae 0502 	sub.w	r5, lr, #2
 8008228:	f804 1c01 	strb.w	r1, [r4, #-1]
 800822c:	1c44      	adds	r4, r0, #1
 800822e:	4629      	mov	r1, r5
 8008230:	4561      	cmp	r1, ip
 8008232:	d30a      	bcc.n	800824a <__exponent+0x66>
 8008234:	f10d 0209 	add.w	r2, sp, #9
 8008238:	eba2 020e 	sub.w	r2, r2, lr
 800823c:	4565      	cmp	r5, ip
 800823e:	bf88      	it	hi
 8008240:	2200      	movhi	r2, #0
 8008242:	4413      	add	r3, r2
 8008244:	1a18      	subs	r0, r3, r0
 8008246:	b003      	add	sp, #12
 8008248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800824a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800824e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008252:	e7ed      	b.n	8008230 <__exponent+0x4c>
 8008254:	2330      	movs	r3, #48	; 0x30
 8008256:	3130      	adds	r1, #48	; 0x30
 8008258:	7083      	strb	r3, [r0, #2]
 800825a:	70c1      	strb	r1, [r0, #3]
 800825c:	1d03      	adds	r3, r0, #4
 800825e:	e7f1      	b.n	8008244 <__exponent+0x60>

08008260 <_printf_float>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	ed2d 8b02 	vpush	{d8}
 8008268:	b08d      	sub	sp, #52	; 0x34
 800826a:	460c      	mov	r4, r1
 800826c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008270:	4616      	mov	r6, r2
 8008272:	461f      	mov	r7, r3
 8008274:	4605      	mov	r5, r0
 8008276:	f001 fa57 	bl	8009728 <_localeconv_r>
 800827a:	f8d0 a000 	ldr.w	sl, [r0]
 800827e:	4650      	mov	r0, sl
 8008280:	f7f7 ffc6 	bl	8000210 <strlen>
 8008284:	2300      	movs	r3, #0
 8008286:	930a      	str	r3, [sp, #40]	; 0x28
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	f8d8 3000 	ldr.w	r3, [r8]
 8008290:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008294:	3307      	adds	r3, #7
 8008296:	f023 0307 	bic.w	r3, r3, #7
 800829a:	f103 0208 	add.w	r2, r3, #8
 800829e:	f8c8 2000 	str.w	r2, [r8]
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80082aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80082ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082b2:	9307      	str	r3, [sp, #28]
 80082b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80082b8:	ee08 0a10 	vmov	s16, r0
 80082bc:	4b9f      	ldr	r3, [pc, #636]	; (800853c <_printf_float+0x2dc>)
 80082be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082c2:	f04f 32ff 	mov.w	r2, #4294967295
 80082c6:	f7f8 fc51 	bl	8000b6c <__aeabi_dcmpun>
 80082ca:	bb88      	cbnz	r0, 8008330 <_printf_float+0xd0>
 80082cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082d0:	4b9a      	ldr	r3, [pc, #616]	; (800853c <_printf_float+0x2dc>)
 80082d2:	f04f 32ff 	mov.w	r2, #4294967295
 80082d6:	f7f8 fc2b 	bl	8000b30 <__aeabi_dcmple>
 80082da:	bb48      	cbnz	r0, 8008330 <_printf_float+0xd0>
 80082dc:	2200      	movs	r2, #0
 80082de:	2300      	movs	r3, #0
 80082e0:	4640      	mov	r0, r8
 80082e2:	4649      	mov	r1, r9
 80082e4:	f7f8 fc1a 	bl	8000b1c <__aeabi_dcmplt>
 80082e8:	b110      	cbz	r0, 80082f0 <_printf_float+0x90>
 80082ea:	232d      	movs	r3, #45	; 0x2d
 80082ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f0:	4b93      	ldr	r3, [pc, #588]	; (8008540 <_printf_float+0x2e0>)
 80082f2:	4894      	ldr	r0, [pc, #592]	; (8008544 <_printf_float+0x2e4>)
 80082f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80082f8:	bf94      	ite	ls
 80082fa:	4698      	movls	r8, r3
 80082fc:	4680      	movhi	r8, r0
 80082fe:	2303      	movs	r3, #3
 8008300:	6123      	str	r3, [r4, #16]
 8008302:	9b05      	ldr	r3, [sp, #20]
 8008304:	f023 0204 	bic.w	r2, r3, #4
 8008308:	6022      	str	r2, [r4, #0]
 800830a:	f04f 0900 	mov.w	r9, #0
 800830e:	9700      	str	r7, [sp, #0]
 8008310:	4633      	mov	r3, r6
 8008312:	aa0b      	add	r2, sp, #44	; 0x2c
 8008314:	4621      	mov	r1, r4
 8008316:	4628      	mov	r0, r5
 8008318:	f000 f9d8 	bl	80086cc <_printf_common>
 800831c:	3001      	adds	r0, #1
 800831e:	f040 8090 	bne.w	8008442 <_printf_float+0x1e2>
 8008322:	f04f 30ff 	mov.w	r0, #4294967295
 8008326:	b00d      	add	sp, #52	; 0x34
 8008328:	ecbd 8b02 	vpop	{d8}
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	4642      	mov	r2, r8
 8008332:	464b      	mov	r3, r9
 8008334:	4640      	mov	r0, r8
 8008336:	4649      	mov	r1, r9
 8008338:	f7f8 fc18 	bl	8000b6c <__aeabi_dcmpun>
 800833c:	b140      	cbz	r0, 8008350 <_printf_float+0xf0>
 800833e:	464b      	mov	r3, r9
 8008340:	2b00      	cmp	r3, #0
 8008342:	bfbc      	itt	lt
 8008344:	232d      	movlt	r3, #45	; 0x2d
 8008346:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800834a:	487f      	ldr	r0, [pc, #508]	; (8008548 <_printf_float+0x2e8>)
 800834c:	4b7f      	ldr	r3, [pc, #508]	; (800854c <_printf_float+0x2ec>)
 800834e:	e7d1      	b.n	80082f4 <_printf_float+0x94>
 8008350:	6863      	ldr	r3, [r4, #4]
 8008352:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008356:	9206      	str	r2, [sp, #24]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	d13f      	bne.n	80083dc <_printf_float+0x17c>
 800835c:	2306      	movs	r3, #6
 800835e:	6063      	str	r3, [r4, #4]
 8008360:	9b05      	ldr	r3, [sp, #20]
 8008362:	6861      	ldr	r1, [r4, #4]
 8008364:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008368:	2300      	movs	r3, #0
 800836a:	9303      	str	r3, [sp, #12]
 800836c:	ab0a      	add	r3, sp, #40	; 0x28
 800836e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008372:	ab09      	add	r3, sp, #36	; 0x24
 8008374:	ec49 8b10 	vmov	d0, r8, r9
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	6022      	str	r2, [r4, #0]
 800837c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008380:	4628      	mov	r0, r5
 8008382:	f7ff fecd 	bl	8008120 <__cvt>
 8008386:	9b06      	ldr	r3, [sp, #24]
 8008388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800838a:	2b47      	cmp	r3, #71	; 0x47
 800838c:	4680      	mov	r8, r0
 800838e:	d108      	bne.n	80083a2 <_printf_float+0x142>
 8008390:	1cc8      	adds	r0, r1, #3
 8008392:	db02      	blt.n	800839a <_printf_float+0x13a>
 8008394:	6863      	ldr	r3, [r4, #4]
 8008396:	4299      	cmp	r1, r3
 8008398:	dd41      	ble.n	800841e <_printf_float+0x1be>
 800839a:	f1ab 0b02 	sub.w	fp, fp, #2
 800839e:	fa5f fb8b 	uxtb.w	fp, fp
 80083a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083a6:	d820      	bhi.n	80083ea <_printf_float+0x18a>
 80083a8:	3901      	subs	r1, #1
 80083aa:	465a      	mov	r2, fp
 80083ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083b0:	9109      	str	r1, [sp, #36]	; 0x24
 80083b2:	f7ff ff17 	bl	80081e4 <__exponent>
 80083b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083b8:	1813      	adds	r3, r2, r0
 80083ba:	2a01      	cmp	r2, #1
 80083bc:	4681      	mov	r9, r0
 80083be:	6123      	str	r3, [r4, #16]
 80083c0:	dc02      	bgt.n	80083c8 <_printf_float+0x168>
 80083c2:	6822      	ldr	r2, [r4, #0]
 80083c4:	07d2      	lsls	r2, r2, #31
 80083c6:	d501      	bpl.n	80083cc <_printf_float+0x16c>
 80083c8:	3301      	adds	r3, #1
 80083ca:	6123      	str	r3, [r4, #16]
 80083cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d09c      	beq.n	800830e <_printf_float+0xae>
 80083d4:	232d      	movs	r3, #45	; 0x2d
 80083d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083da:	e798      	b.n	800830e <_printf_float+0xae>
 80083dc:	9a06      	ldr	r2, [sp, #24]
 80083de:	2a47      	cmp	r2, #71	; 0x47
 80083e0:	d1be      	bne.n	8008360 <_printf_float+0x100>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1bc      	bne.n	8008360 <_printf_float+0x100>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e7b9      	b.n	800835e <_printf_float+0xfe>
 80083ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80083ee:	d118      	bne.n	8008422 <_printf_float+0x1c2>
 80083f0:	2900      	cmp	r1, #0
 80083f2:	6863      	ldr	r3, [r4, #4]
 80083f4:	dd0b      	ble.n	800840e <_printf_float+0x1ae>
 80083f6:	6121      	str	r1, [r4, #16]
 80083f8:	b913      	cbnz	r3, 8008400 <_printf_float+0x1a0>
 80083fa:	6822      	ldr	r2, [r4, #0]
 80083fc:	07d0      	lsls	r0, r2, #31
 80083fe:	d502      	bpl.n	8008406 <_printf_float+0x1a6>
 8008400:	3301      	adds	r3, #1
 8008402:	440b      	add	r3, r1
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	65a1      	str	r1, [r4, #88]	; 0x58
 8008408:	f04f 0900 	mov.w	r9, #0
 800840c:	e7de      	b.n	80083cc <_printf_float+0x16c>
 800840e:	b913      	cbnz	r3, 8008416 <_printf_float+0x1b6>
 8008410:	6822      	ldr	r2, [r4, #0]
 8008412:	07d2      	lsls	r2, r2, #31
 8008414:	d501      	bpl.n	800841a <_printf_float+0x1ba>
 8008416:	3302      	adds	r3, #2
 8008418:	e7f4      	b.n	8008404 <_printf_float+0x1a4>
 800841a:	2301      	movs	r3, #1
 800841c:	e7f2      	b.n	8008404 <_printf_float+0x1a4>
 800841e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008424:	4299      	cmp	r1, r3
 8008426:	db05      	blt.n	8008434 <_printf_float+0x1d4>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	6121      	str	r1, [r4, #16]
 800842c:	07d8      	lsls	r0, r3, #31
 800842e:	d5ea      	bpl.n	8008406 <_printf_float+0x1a6>
 8008430:	1c4b      	adds	r3, r1, #1
 8008432:	e7e7      	b.n	8008404 <_printf_float+0x1a4>
 8008434:	2900      	cmp	r1, #0
 8008436:	bfd4      	ite	le
 8008438:	f1c1 0202 	rsble	r2, r1, #2
 800843c:	2201      	movgt	r2, #1
 800843e:	4413      	add	r3, r2
 8008440:	e7e0      	b.n	8008404 <_printf_float+0x1a4>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	055a      	lsls	r2, r3, #21
 8008446:	d407      	bmi.n	8008458 <_printf_float+0x1f8>
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	4642      	mov	r2, r8
 800844c:	4631      	mov	r1, r6
 800844e:	4628      	mov	r0, r5
 8008450:	47b8      	blx	r7
 8008452:	3001      	adds	r0, #1
 8008454:	d12c      	bne.n	80084b0 <_printf_float+0x250>
 8008456:	e764      	b.n	8008322 <_printf_float+0xc2>
 8008458:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800845c:	f240 80e0 	bls.w	8008620 <_printf_float+0x3c0>
 8008460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008464:	2200      	movs	r2, #0
 8008466:	2300      	movs	r3, #0
 8008468:	f7f8 fb4e 	bl	8000b08 <__aeabi_dcmpeq>
 800846c:	2800      	cmp	r0, #0
 800846e:	d034      	beq.n	80084da <_printf_float+0x27a>
 8008470:	4a37      	ldr	r2, [pc, #220]	; (8008550 <_printf_float+0x2f0>)
 8008472:	2301      	movs	r3, #1
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	47b8      	blx	r7
 800847a:	3001      	adds	r0, #1
 800847c:	f43f af51 	beq.w	8008322 <_printf_float+0xc2>
 8008480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008484:	429a      	cmp	r2, r3
 8008486:	db02      	blt.n	800848e <_printf_float+0x22e>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	07d8      	lsls	r0, r3, #31
 800848c:	d510      	bpl.n	80084b0 <_printf_float+0x250>
 800848e:	ee18 3a10 	vmov	r3, s16
 8008492:	4652      	mov	r2, sl
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	47b8      	blx	r7
 800849a:	3001      	adds	r0, #1
 800849c:	f43f af41 	beq.w	8008322 <_printf_float+0xc2>
 80084a0:	f04f 0800 	mov.w	r8, #0
 80084a4:	f104 091a 	add.w	r9, r4, #26
 80084a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084aa:	3b01      	subs	r3, #1
 80084ac:	4543      	cmp	r3, r8
 80084ae:	dc09      	bgt.n	80084c4 <_printf_float+0x264>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	079b      	lsls	r3, r3, #30
 80084b4:	f100 8105 	bmi.w	80086c2 <_printf_float+0x462>
 80084b8:	68e0      	ldr	r0, [r4, #12]
 80084ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084bc:	4298      	cmp	r0, r3
 80084be:	bfb8      	it	lt
 80084c0:	4618      	movlt	r0, r3
 80084c2:	e730      	b.n	8008326 <_printf_float+0xc6>
 80084c4:	2301      	movs	r3, #1
 80084c6:	464a      	mov	r2, r9
 80084c8:	4631      	mov	r1, r6
 80084ca:	4628      	mov	r0, r5
 80084cc:	47b8      	blx	r7
 80084ce:	3001      	adds	r0, #1
 80084d0:	f43f af27 	beq.w	8008322 <_printf_float+0xc2>
 80084d4:	f108 0801 	add.w	r8, r8, #1
 80084d8:	e7e6      	b.n	80084a8 <_printf_float+0x248>
 80084da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dc39      	bgt.n	8008554 <_printf_float+0x2f4>
 80084e0:	4a1b      	ldr	r2, [pc, #108]	; (8008550 <_printf_float+0x2f0>)
 80084e2:	2301      	movs	r3, #1
 80084e4:	4631      	mov	r1, r6
 80084e6:	4628      	mov	r0, r5
 80084e8:	47b8      	blx	r7
 80084ea:	3001      	adds	r0, #1
 80084ec:	f43f af19 	beq.w	8008322 <_printf_float+0xc2>
 80084f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f4:	4313      	orrs	r3, r2
 80084f6:	d102      	bne.n	80084fe <_printf_float+0x29e>
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	07d9      	lsls	r1, r3, #31
 80084fc:	d5d8      	bpl.n	80084b0 <_printf_float+0x250>
 80084fe:	ee18 3a10 	vmov	r3, s16
 8008502:	4652      	mov	r2, sl
 8008504:	4631      	mov	r1, r6
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	f43f af09 	beq.w	8008322 <_printf_float+0xc2>
 8008510:	f04f 0900 	mov.w	r9, #0
 8008514:	f104 0a1a 	add.w	sl, r4, #26
 8008518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851a:	425b      	negs	r3, r3
 800851c:	454b      	cmp	r3, r9
 800851e:	dc01      	bgt.n	8008524 <_printf_float+0x2c4>
 8008520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008522:	e792      	b.n	800844a <_printf_float+0x1ea>
 8008524:	2301      	movs	r3, #1
 8008526:	4652      	mov	r2, sl
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	f43f aef7 	beq.w	8008322 <_printf_float+0xc2>
 8008534:	f109 0901 	add.w	r9, r9, #1
 8008538:	e7ee      	b.n	8008518 <_printf_float+0x2b8>
 800853a:	bf00      	nop
 800853c:	7fefffff 	.word	0x7fefffff
 8008540:	0800b14c 	.word	0x0800b14c
 8008544:	0800b150 	.word	0x0800b150
 8008548:	0800b158 	.word	0x0800b158
 800854c:	0800b154 	.word	0x0800b154
 8008550:	0800b15c 	.word	0x0800b15c
 8008554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008558:	429a      	cmp	r2, r3
 800855a:	bfa8      	it	ge
 800855c:	461a      	movge	r2, r3
 800855e:	2a00      	cmp	r2, #0
 8008560:	4691      	mov	r9, r2
 8008562:	dc37      	bgt.n	80085d4 <_printf_float+0x374>
 8008564:	f04f 0b00 	mov.w	fp, #0
 8008568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800856c:	f104 021a 	add.w	r2, r4, #26
 8008570:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008572:	9305      	str	r3, [sp, #20]
 8008574:	eba3 0309 	sub.w	r3, r3, r9
 8008578:	455b      	cmp	r3, fp
 800857a:	dc33      	bgt.n	80085e4 <_printf_float+0x384>
 800857c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008580:	429a      	cmp	r2, r3
 8008582:	db3b      	blt.n	80085fc <_printf_float+0x39c>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	07da      	lsls	r2, r3, #31
 8008588:	d438      	bmi.n	80085fc <_printf_float+0x39c>
 800858a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800858c:	9b05      	ldr	r3, [sp, #20]
 800858e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	eba2 0901 	sub.w	r9, r2, r1
 8008596:	4599      	cmp	r9, r3
 8008598:	bfa8      	it	ge
 800859a:	4699      	movge	r9, r3
 800859c:	f1b9 0f00 	cmp.w	r9, #0
 80085a0:	dc35      	bgt.n	800860e <_printf_float+0x3ae>
 80085a2:	f04f 0800 	mov.w	r8, #0
 80085a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085aa:	f104 0a1a 	add.w	sl, r4, #26
 80085ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	eba3 0309 	sub.w	r3, r3, r9
 80085b8:	4543      	cmp	r3, r8
 80085ba:	f77f af79 	ble.w	80084b0 <_printf_float+0x250>
 80085be:	2301      	movs	r3, #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	4631      	mov	r1, r6
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f aeaa 	beq.w	8008322 <_printf_float+0xc2>
 80085ce:	f108 0801 	add.w	r8, r8, #1
 80085d2:	e7ec      	b.n	80085ae <_printf_float+0x34e>
 80085d4:	4613      	mov	r3, r2
 80085d6:	4631      	mov	r1, r6
 80085d8:	4642      	mov	r2, r8
 80085da:	4628      	mov	r0, r5
 80085dc:	47b8      	blx	r7
 80085de:	3001      	adds	r0, #1
 80085e0:	d1c0      	bne.n	8008564 <_printf_float+0x304>
 80085e2:	e69e      	b.n	8008322 <_printf_float+0xc2>
 80085e4:	2301      	movs	r3, #1
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	9205      	str	r2, [sp, #20]
 80085ec:	47b8      	blx	r7
 80085ee:	3001      	adds	r0, #1
 80085f0:	f43f ae97 	beq.w	8008322 <_printf_float+0xc2>
 80085f4:	9a05      	ldr	r2, [sp, #20]
 80085f6:	f10b 0b01 	add.w	fp, fp, #1
 80085fa:	e7b9      	b.n	8008570 <_printf_float+0x310>
 80085fc:	ee18 3a10 	vmov	r3, s16
 8008600:	4652      	mov	r2, sl
 8008602:	4631      	mov	r1, r6
 8008604:	4628      	mov	r0, r5
 8008606:	47b8      	blx	r7
 8008608:	3001      	adds	r0, #1
 800860a:	d1be      	bne.n	800858a <_printf_float+0x32a>
 800860c:	e689      	b.n	8008322 <_printf_float+0xc2>
 800860e:	9a05      	ldr	r2, [sp, #20]
 8008610:	464b      	mov	r3, r9
 8008612:	4442      	add	r2, r8
 8008614:	4631      	mov	r1, r6
 8008616:	4628      	mov	r0, r5
 8008618:	47b8      	blx	r7
 800861a:	3001      	adds	r0, #1
 800861c:	d1c1      	bne.n	80085a2 <_printf_float+0x342>
 800861e:	e680      	b.n	8008322 <_printf_float+0xc2>
 8008620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008622:	2a01      	cmp	r2, #1
 8008624:	dc01      	bgt.n	800862a <_printf_float+0x3ca>
 8008626:	07db      	lsls	r3, r3, #31
 8008628:	d538      	bpl.n	800869c <_printf_float+0x43c>
 800862a:	2301      	movs	r3, #1
 800862c:	4642      	mov	r2, r8
 800862e:	4631      	mov	r1, r6
 8008630:	4628      	mov	r0, r5
 8008632:	47b8      	blx	r7
 8008634:	3001      	adds	r0, #1
 8008636:	f43f ae74 	beq.w	8008322 <_printf_float+0xc2>
 800863a:	ee18 3a10 	vmov	r3, s16
 800863e:	4652      	mov	r2, sl
 8008640:	4631      	mov	r1, r6
 8008642:	4628      	mov	r0, r5
 8008644:	47b8      	blx	r7
 8008646:	3001      	adds	r0, #1
 8008648:	f43f ae6b 	beq.w	8008322 <_printf_float+0xc2>
 800864c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008650:	2200      	movs	r2, #0
 8008652:	2300      	movs	r3, #0
 8008654:	f7f8 fa58 	bl	8000b08 <__aeabi_dcmpeq>
 8008658:	b9d8      	cbnz	r0, 8008692 <_printf_float+0x432>
 800865a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800865c:	f108 0201 	add.w	r2, r8, #1
 8008660:	3b01      	subs	r3, #1
 8008662:	4631      	mov	r1, r6
 8008664:	4628      	mov	r0, r5
 8008666:	47b8      	blx	r7
 8008668:	3001      	adds	r0, #1
 800866a:	d10e      	bne.n	800868a <_printf_float+0x42a>
 800866c:	e659      	b.n	8008322 <_printf_float+0xc2>
 800866e:	2301      	movs	r3, #1
 8008670:	4652      	mov	r2, sl
 8008672:	4631      	mov	r1, r6
 8008674:	4628      	mov	r0, r5
 8008676:	47b8      	blx	r7
 8008678:	3001      	adds	r0, #1
 800867a:	f43f ae52 	beq.w	8008322 <_printf_float+0xc2>
 800867e:	f108 0801 	add.w	r8, r8, #1
 8008682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008684:	3b01      	subs	r3, #1
 8008686:	4543      	cmp	r3, r8
 8008688:	dcf1      	bgt.n	800866e <_printf_float+0x40e>
 800868a:	464b      	mov	r3, r9
 800868c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008690:	e6dc      	b.n	800844c <_printf_float+0x1ec>
 8008692:	f04f 0800 	mov.w	r8, #0
 8008696:	f104 0a1a 	add.w	sl, r4, #26
 800869a:	e7f2      	b.n	8008682 <_printf_float+0x422>
 800869c:	2301      	movs	r3, #1
 800869e:	4642      	mov	r2, r8
 80086a0:	e7df      	b.n	8008662 <_printf_float+0x402>
 80086a2:	2301      	movs	r3, #1
 80086a4:	464a      	mov	r2, r9
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	f43f ae38 	beq.w	8008322 <_printf_float+0xc2>
 80086b2:	f108 0801 	add.w	r8, r8, #1
 80086b6:	68e3      	ldr	r3, [r4, #12]
 80086b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086ba:	1a5b      	subs	r3, r3, r1
 80086bc:	4543      	cmp	r3, r8
 80086be:	dcf0      	bgt.n	80086a2 <_printf_float+0x442>
 80086c0:	e6fa      	b.n	80084b8 <_printf_float+0x258>
 80086c2:	f04f 0800 	mov.w	r8, #0
 80086c6:	f104 0919 	add.w	r9, r4, #25
 80086ca:	e7f4      	b.n	80086b6 <_printf_float+0x456>

080086cc <_printf_common>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	4616      	mov	r6, r2
 80086d2:	4699      	mov	r9, r3
 80086d4:	688a      	ldr	r2, [r1, #8]
 80086d6:	690b      	ldr	r3, [r1, #16]
 80086d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086dc:	4293      	cmp	r3, r2
 80086de:	bfb8      	it	lt
 80086e0:	4613      	movlt	r3, r2
 80086e2:	6033      	str	r3, [r6, #0]
 80086e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086e8:	4607      	mov	r7, r0
 80086ea:	460c      	mov	r4, r1
 80086ec:	b10a      	cbz	r2, 80086f2 <_printf_common+0x26>
 80086ee:	3301      	adds	r3, #1
 80086f0:	6033      	str	r3, [r6, #0]
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	0699      	lsls	r1, r3, #26
 80086f6:	bf42      	ittt	mi
 80086f8:	6833      	ldrmi	r3, [r6, #0]
 80086fa:	3302      	addmi	r3, #2
 80086fc:	6033      	strmi	r3, [r6, #0]
 80086fe:	6825      	ldr	r5, [r4, #0]
 8008700:	f015 0506 	ands.w	r5, r5, #6
 8008704:	d106      	bne.n	8008714 <_printf_common+0x48>
 8008706:	f104 0a19 	add.w	sl, r4, #25
 800870a:	68e3      	ldr	r3, [r4, #12]
 800870c:	6832      	ldr	r2, [r6, #0]
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	42ab      	cmp	r3, r5
 8008712:	dc26      	bgt.n	8008762 <_printf_common+0x96>
 8008714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008718:	1e13      	subs	r3, r2, #0
 800871a:	6822      	ldr	r2, [r4, #0]
 800871c:	bf18      	it	ne
 800871e:	2301      	movne	r3, #1
 8008720:	0692      	lsls	r2, r2, #26
 8008722:	d42b      	bmi.n	800877c <_printf_common+0xb0>
 8008724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008728:	4649      	mov	r1, r9
 800872a:	4638      	mov	r0, r7
 800872c:	47c0      	blx	r8
 800872e:	3001      	adds	r0, #1
 8008730:	d01e      	beq.n	8008770 <_printf_common+0xa4>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	68e5      	ldr	r5, [r4, #12]
 8008736:	6832      	ldr	r2, [r6, #0]
 8008738:	f003 0306 	and.w	r3, r3, #6
 800873c:	2b04      	cmp	r3, #4
 800873e:	bf08      	it	eq
 8008740:	1aad      	subeq	r5, r5, r2
 8008742:	68a3      	ldr	r3, [r4, #8]
 8008744:	6922      	ldr	r2, [r4, #16]
 8008746:	bf0c      	ite	eq
 8008748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800874c:	2500      	movne	r5, #0
 800874e:	4293      	cmp	r3, r2
 8008750:	bfc4      	itt	gt
 8008752:	1a9b      	subgt	r3, r3, r2
 8008754:	18ed      	addgt	r5, r5, r3
 8008756:	2600      	movs	r6, #0
 8008758:	341a      	adds	r4, #26
 800875a:	42b5      	cmp	r5, r6
 800875c:	d11a      	bne.n	8008794 <_printf_common+0xc8>
 800875e:	2000      	movs	r0, #0
 8008760:	e008      	b.n	8008774 <_printf_common+0xa8>
 8008762:	2301      	movs	r3, #1
 8008764:	4652      	mov	r2, sl
 8008766:	4649      	mov	r1, r9
 8008768:	4638      	mov	r0, r7
 800876a:	47c0      	blx	r8
 800876c:	3001      	adds	r0, #1
 800876e:	d103      	bne.n	8008778 <_printf_common+0xac>
 8008770:	f04f 30ff 	mov.w	r0, #4294967295
 8008774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008778:	3501      	adds	r5, #1
 800877a:	e7c6      	b.n	800870a <_printf_common+0x3e>
 800877c:	18e1      	adds	r1, r4, r3
 800877e:	1c5a      	adds	r2, r3, #1
 8008780:	2030      	movs	r0, #48	; 0x30
 8008782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008786:	4422      	add	r2, r4
 8008788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800878c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008790:	3302      	adds	r3, #2
 8008792:	e7c7      	b.n	8008724 <_printf_common+0x58>
 8008794:	2301      	movs	r3, #1
 8008796:	4622      	mov	r2, r4
 8008798:	4649      	mov	r1, r9
 800879a:	4638      	mov	r0, r7
 800879c:	47c0      	blx	r8
 800879e:	3001      	adds	r0, #1
 80087a0:	d0e6      	beq.n	8008770 <_printf_common+0xa4>
 80087a2:	3601      	adds	r6, #1
 80087a4:	e7d9      	b.n	800875a <_printf_common+0x8e>
	...

080087a8 <_printf_i>:
 80087a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	460c      	mov	r4, r1
 80087ae:	4691      	mov	r9, r2
 80087b0:	7e27      	ldrb	r7, [r4, #24]
 80087b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80087b4:	2f78      	cmp	r7, #120	; 0x78
 80087b6:	4680      	mov	r8, r0
 80087b8:	469a      	mov	sl, r3
 80087ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087be:	d807      	bhi.n	80087d0 <_printf_i+0x28>
 80087c0:	2f62      	cmp	r7, #98	; 0x62
 80087c2:	d80a      	bhi.n	80087da <_printf_i+0x32>
 80087c4:	2f00      	cmp	r7, #0
 80087c6:	f000 80d8 	beq.w	800897a <_printf_i+0x1d2>
 80087ca:	2f58      	cmp	r7, #88	; 0x58
 80087cc:	f000 80a3 	beq.w	8008916 <_printf_i+0x16e>
 80087d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087d8:	e03a      	b.n	8008850 <_printf_i+0xa8>
 80087da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087de:	2b15      	cmp	r3, #21
 80087e0:	d8f6      	bhi.n	80087d0 <_printf_i+0x28>
 80087e2:	a001      	add	r0, pc, #4	; (adr r0, 80087e8 <_printf_i+0x40>)
 80087e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087e8:	08008841 	.word	0x08008841
 80087ec:	08008855 	.word	0x08008855
 80087f0:	080087d1 	.word	0x080087d1
 80087f4:	080087d1 	.word	0x080087d1
 80087f8:	080087d1 	.word	0x080087d1
 80087fc:	080087d1 	.word	0x080087d1
 8008800:	08008855 	.word	0x08008855
 8008804:	080087d1 	.word	0x080087d1
 8008808:	080087d1 	.word	0x080087d1
 800880c:	080087d1 	.word	0x080087d1
 8008810:	080087d1 	.word	0x080087d1
 8008814:	08008961 	.word	0x08008961
 8008818:	08008885 	.word	0x08008885
 800881c:	08008943 	.word	0x08008943
 8008820:	080087d1 	.word	0x080087d1
 8008824:	080087d1 	.word	0x080087d1
 8008828:	08008983 	.word	0x08008983
 800882c:	080087d1 	.word	0x080087d1
 8008830:	08008885 	.word	0x08008885
 8008834:	080087d1 	.word	0x080087d1
 8008838:	080087d1 	.word	0x080087d1
 800883c:	0800894b 	.word	0x0800894b
 8008840:	680b      	ldr	r3, [r1, #0]
 8008842:	1d1a      	adds	r2, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	600a      	str	r2, [r1, #0]
 8008848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800884c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008850:	2301      	movs	r3, #1
 8008852:	e0a3      	b.n	800899c <_printf_i+0x1f4>
 8008854:	6825      	ldr	r5, [r4, #0]
 8008856:	6808      	ldr	r0, [r1, #0]
 8008858:	062e      	lsls	r6, r5, #24
 800885a:	f100 0304 	add.w	r3, r0, #4
 800885e:	d50a      	bpl.n	8008876 <_printf_i+0xce>
 8008860:	6805      	ldr	r5, [r0, #0]
 8008862:	600b      	str	r3, [r1, #0]
 8008864:	2d00      	cmp	r5, #0
 8008866:	da03      	bge.n	8008870 <_printf_i+0xc8>
 8008868:	232d      	movs	r3, #45	; 0x2d
 800886a:	426d      	negs	r5, r5
 800886c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008870:	485e      	ldr	r0, [pc, #376]	; (80089ec <_printf_i+0x244>)
 8008872:	230a      	movs	r3, #10
 8008874:	e019      	b.n	80088aa <_printf_i+0x102>
 8008876:	f015 0f40 	tst.w	r5, #64	; 0x40
 800887a:	6805      	ldr	r5, [r0, #0]
 800887c:	600b      	str	r3, [r1, #0]
 800887e:	bf18      	it	ne
 8008880:	b22d      	sxthne	r5, r5
 8008882:	e7ef      	b.n	8008864 <_printf_i+0xbc>
 8008884:	680b      	ldr	r3, [r1, #0]
 8008886:	6825      	ldr	r5, [r4, #0]
 8008888:	1d18      	adds	r0, r3, #4
 800888a:	6008      	str	r0, [r1, #0]
 800888c:	0628      	lsls	r0, r5, #24
 800888e:	d501      	bpl.n	8008894 <_printf_i+0xec>
 8008890:	681d      	ldr	r5, [r3, #0]
 8008892:	e002      	b.n	800889a <_printf_i+0xf2>
 8008894:	0669      	lsls	r1, r5, #25
 8008896:	d5fb      	bpl.n	8008890 <_printf_i+0xe8>
 8008898:	881d      	ldrh	r5, [r3, #0]
 800889a:	4854      	ldr	r0, [pc, #336]	; (80089ec <_printf_i+0x244>)
 800889c:	2f6f      	cmp	r7, #111	; 0x6f
 800889e:	bf0c      	ite	eq
 80088a0:	2308      	moveq	r3, #8
 80088a2:	230a      	movne	r3, #10
 80088a4:	2100      	movs	r1, #0
 80088a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088aa:	6866      	ldr	r6, [r4, #4]
 80088ac:	60a6      	str	r6, [r4, #8]
 80088ae:	2e00      	cmp	r6, #0
 80088b0:	bfa2      	ittt	ge
 80088b2:	6821      	ldrge	r1, [r4, #0]
 80088b4:	f021 0104 	bicge.w	r1, r1, #4
 80088b8:	6021      	strge	r1, [r4, #0]
 80088ba:	b90d      	cbnz	r5, 80088c0 <_printf_i+0x118>
 80088bc:	2e00      	cmp	r6, #0
 80088be:	d04d      	beq.n	800895c <_printf_i+0x1b4>
 80088c0:	4616      	mov	r6, r2
 80088c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80088c6:	fb03 5711 	mls	r7, r3, r1, r5
 80088ca:	5dc7      	ldrb	r7, [r0, r7]
 80088cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088d0:	462f      	mov	r7, r5
 80088d2:	42bb      	cmp	r3, r7
 80088d4:	460d      	mov	r5, r1
 80088d6:	d9f4      	bls.n	80088c2 <_printf_i+0x11a>
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d10b      	bne.n	80088f4 <_printf_i+0x14c>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	07df      	lsls	r7, r3, #31
 80088e0:	d508      	bpl.n	80088f4 <_printf_i+0x14c>
 80088e2:	6923      	ldr	r3, [r4, #16]
 80088e4:	6861      	ldr	r1, [r4, #4]
 80088e6:	4299      	cmp	r1, r3
 80088e8:	bfde      	ittt	le
 80088ea:	2330      	movle	r3, #48	; 0x30
 80088ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088f4:	1b92      	subs	r2, r2, r6
 80088f6:	6122      	str	r2, [r4, #16]
 80088f8:	f8cd a000 	str.w	sl, [sp]
 80088fc:	464b      	mov	r3, r9
 80088fe:	aa03      	add	r2, sp, #12
 8008900:	4621      	mov	r1, r4
 8008902:	4640      	mov	r0, r8
 8008904:	f7ff fee2 	bl	80086cc <_printf_common>
 8008908:	3001      	adds	r0, #1
 800890a:	d14c      	bne.n	80089a6 <_printf_i+0x1fe>
 800890c:	f04f 30ff 	mov.w	r0, #4294967295
 8008910:	b004      	add	sp, #16
 8008912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008916:	4835      	ldr	r0, [pc, #212]	; (80089ec <_printf_i+0x244>)
 8008918:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	680e      	ldr	r6, [r1, #0]
 8008920:	061f      	lsls	r7, r3, #24
 8008922:	f856 5b04 	ldr.w	r5, [r6], #4
 8008926:	600e      	str	r6, [r1, #0]
 8008928:	d514      	bpl.n	8008954 <_printf_i+0x1ac>
 800892a:	07d9      	lsls	r1, r3, #31
 800892c:	bf44      	itt	mi
 800892e:	f043 0320 	orrmi.w	r3, r3, #32
 8008932:	6023      	strmi	r3, [r4, #0]
 8008934:	b91d      	cbnz	r5, 800893e <_printf_i+0x196>
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	f023 0320 	bic.w	r3, r3, #32
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	2310      	movs	r3, #16
 8008940:	e7b0      	b.n	80088a4 <_printf_i+0xfc>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	f043 0320 	orr.w	r3, r3, #32
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	2378      	movs	r3, #120	; 0x78
 800894c:	4828      	ldr	r0, [pc, #160]	; (80089f0 <_printf_i+0x248>)
 800894e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008952:	e7e3      	b.n	800891c <_printf_i+0x174>
 8008954:	065e      	lsls	r6, r3, #25
 8008956:	bf48      	it	mi
 8008958:	b2ad      	uxthmi	r5, r5
 800895a:	e7e6      	b.n	800892a <_printf_i+0x182>
 800895c:	4616      	mov	r6, r2
 800895e:	e7bb      	b.n	80088d8 <_printf_i+0x130>
 8008960:	680b      	ldr	r3, [r1, #0]
 8008962:	6826      	ldr	r6, [r4, #0]
 8008964:	6960      	ldr	r0, [r4, #20]
 8008966:	1d1d      	adds	r5, r3, #4
 8008968:	600d      	str	r5, [r1, #0]
 800896a:	0635      	lsls	r5, r6, #24
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	d501      	bpl.n	8008974 <_printf_i+0x1cc>
 8008970:	6018      	str	r0, [r3, #0]
 8008972:	e002      	b.n	800897a <_printf_i+0x1d2>
 8008974:	0671      	lsls	r1, r6, #25
 8008976:	d5fb      	bpl.n	8008970 <_printf_i+0x1c8>
 8008978:	8018      	strh	r0, [r3, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	6123      	str	r3, [r4, #16]
 800897e:	4616      	mov	r6, r2
 8008980:	e7ba      	b.n	80088f8 <_printf_i+0x150>
 8008982:	680b      	ldr	r3, [r1, #0]
 8008984:	1d1a      	adds	r2, r3, #4
 8008986:	600a      	str	r2, [r1, #0]
 8008988:	681e      	ldr	r6, [r3, #0]
 800898a:	6862      	ldr	r2, [r4, #4]
 800898c:	2100      	movs	r1, #0
 800898e:	4630      	mov	r0, r6
 8008990:	f7f7 fc46 	bl	8000220 <memchr>
 8008994:	b108      	cbz	r0, 800899a <_printf_i+0x1f2>
 8008996:	1b80      	subs	r0, r0, r6
 8008998:	6060      	str	r0, [r4, #4]
 800899a:	6863      	ldr	r3, [r4, #4]
 800899c:	6123      	str	r3, [r4, #16]
 800899e:	2300      	movs	r3, #0
 80089a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a4:	e7a8      	b.n	80088f8 <_printf_i+0x150>
 80089a6:	6923      	ldr	r3, [r4, #16]
 80089a8:	4632      	mov	r2, r6
 80089aa:	4649      	mov	r1, r9
 80089ac:	4640      	mov	r0, r8
 80089ae:	47d0      	blx	sl
 80089b0:	3001      	adds	r0, #1
 80089b2:	d0ab      	beq.n	800890c <_printf_i+0x164>
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	079b      	lsls	r3, r3, #30
 80089b8:	d413      	bmi.n	80089e2 <_printf_i+0x23a>
 80089ba:	68e0      	ldr	r0, [r4, #12]
 80089bc:	9b03      	ldr	r3, [sp, #12]
 80089be:	4298      	cmp	r0, r3
 80089c0:	bfb8      	it	lt
 80089c2:	4618      	movlt	r0, r3
 80089c4:	e7a4      	b.n	8008910 <_printf_i+0x168>
 80089c6:	2301      	movs	r3, #1
 80089c8:	4632      	mov	r2, r6
 80089ca:	4649      	mov	r1, r9
 80089cc:	4640      	mov	r0, r8
 80089ce:	47d0      	blx	sl
 80089d0:	3001      	adds	r0, #1
 80089d2:	d09b      	beq.n	800890c <_printf_i+0x164>
 80089d4:	3501      	adds	r5, #1
 80089d6:	68e3      	ldr	r3, [r4, #12]
 80089d8:	9903      	ldr	r1, [sp, #12]
 80089da:	1a5b      	subs	r3, r3, r1
 80089dc:	42ab      	cmp	r3, r5
 80089de:	dcf2      	bgt.n	80089c6 <_printf_i+0x21e>
 80089e0:	e7eb      	b.n	80089ba <_printf_i+0x212>
 80089e2:	2500      	movs	r5, #0
 80089e4:	f104 0619 	add.w	r6, r4, #25
 80089e8:	e7f5      	b.n	80089d6 <_printf_i+0x22e>
 80089ea:	bf00      	nop
 80089ec:	0800b15e 	.word	0x0800b15e
 80089f0:	0800b16f 	.word	0x0800b16f

080089f4 <siprintf>:
 80089f4:	b40e      	push	{r1, r2, r3}
 80089f6:	b500      	push	{lr}
 80089f8:	b09c      	sub	sp, #112	; 0x70
 80089fa:	ab1d      	add	r3, sp, #116	; 0x74
 80089fc:	9002      	str	r0, [sp, #8]
 80089fe:	9006      	str	r0, [sp, #24]
 8008a00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a04:	4809      	ldr	r0, [pc, #36]	; (8008a2c <siprintf+0x38>)
 8008a06:	9107      	str	r1, [sp, #28]
 8008a08:	9104      	str	r1, [sp, #16]
 8008a0a:	4909      	ldr	r1, [pc, #36]	; (8008a30 <siprintf+0x3c>)
 8008a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a10:	9105      	str	r1, [sp, #20]
 8008a12:	6800      	ldr	r0, [r0, #0]
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	a902      	add	r1, sp, #8
 8008a18:	f001 fb34 	bl	800a084 <_svfiprintf_r>
 8008a1c:	9b02      	ldr	r3, [sp, #8]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
 8008a22:	b01c      	add	sp, #112	; 0x70
 8008a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a28:	b003      	add	sp, #12
 8008a2a:	4770      	bx	lr
 8008a2c:	20000034 	.word	0x20000034
 8008a30:	ffff0208 	.word	0xffff0208

08008a34 <quorem>:
 8008a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	6903      	ldr	r3, [r0, #16]
 8008a3a:	690c      	ldr	r4, [r1, #16]
 8008a3c:	42a3      	cmp	r3, r4
 8008a3e:	4607      	mov	r7, r0
 8008a40:	f2c0 8081 	blt.w	8008b46 <quorem+0x112>
 8008a44:	3c01      	subs	r4, #1
 8008a46:	f101 0814 	add.w	r8, r1, #20
 8008a4a:	f100 0514 	add.w	r5, r0, #20
 8008a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a68:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a6c:	d331      	bcc.n	8008ad2 <quorem+0x9e>
 8008a6e:	f04f 0e00 	mov.w	lr, #0
 8008a72:	4640      	mov	r0, r8
 8008a74:	46ac      	mov	ip, r5
 8008a76:	46f2      	mov	sl, lr
 8008a78:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a7c:	b293      	uxth	r3, r2
 8008a7e:	fb06 e303 	mla	r3, r6, r3, lr
 8008a82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	ebaa 0303 	sub.w	r3, sl, r3
 8008a8c:	0c12      	lsrs	r2, r2, #16
 8008a8e:	f8dc a000 	ldr.w	sl, [ip]
 8008a92:	fb06 e202 	mla	r2, r6, r2, lr
 8008a96:	fa13 f38a 	uxtah	r3, r3, sl
 8008a9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a9e:	fa1f fa82 	uxth.w	sl, r2
 8008aa2:	f8dc 2000 	ldr.w	r2, [ip]
 8008aa6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008aaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ab4:	4581      	cmp	r9, r0
 8008ab6:	f84c 3b04 	str.w	r3, [ip], #4
 8008aba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008abe:	d2db      	bcs.n	8008a78 <quorem+0x44>
 8008ac0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ac4:	b92b      	cbnz	r3, 8008ad2 <quorem+0x9e>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	3b04      	subs	r3, #4
 8008aca:	429d      	cmp	r5, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	d32e      	bcc.n	8008b2e <quorem+0xfa>
 8008ad0:	613c      	str	r4, [r7, #16]
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	f001 f8c0 	bl	8009c58 <__mcmp>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	db24      	blt.n	8008b26 <quorem+0xf2>
 8008adc:	3601      	adds	r6, #1
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f04f 0c00 	mov.w	ip, #0
 8008ae4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ae8:	f8d0 e000 	ldr.w	lr, [r0]
 8008aec:	b293      	uxth	r3, r2
 8008aee:	ebac 0303 	sub.w	r3, ip, r3
 8008af2:	0c12      	lsrs	r2, r2, #16
 8008af4:	fa13 f38e 	uxtah	r3, r3, lr
 8008af8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008afc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b06:	45c1      	cmp	r9, r8
 8008b08:	f840 3b04 	str.w	r3, [r0], #4
 8008b0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b10:	d2e8      	bcs.n	8008ae4 <quorem+0xb0>
 8008b12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b1a:	b922      	cbnz	r2, 8008b26 <quorem+0xf2>
 8008b1c:	3b04      	subs	r3, #4
 8008b1e:	429d      	cmp	r5, r3
 8008b20:	461a      	mov	r2, r3
 8008b22:	d30a      	bcc.n	8008b3a <quorem+0x106>
 8008b24:	613c      	str	r4, [r7, #16]
 8008b26:	4630      	mov	r0, r6
 8008b28:	b003      	add	sp, #12
 8008b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2e:	6812      	ldr	r2, [r2, #0]
 8008b30:	3b04      	subs	r3, #4
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	d1cc      	bne.n	8008ad0 <quorem+0x9c>
 8008b36:	3c01      	subs	r4, #1
 8008b38:	e7c7      	b.n	8008aca <quorem+0x96>
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	3b04      	subs	r3, #4
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	d1f0      	bne.n	8008b24 <quorem+0xf0>
 8008b42:	3c01      	subs	r4, #1
 8008b44:	e7eb      	b.n	8008b1e <quorem+0xea>
 8008b46:	2000      	movs	r0, #0
 8008b48:	e7ee      	b.n	8008b28 <quorem+0xf4>
 8008b4a:	0000      	movs	r0, r0
 8008b4c:	0000      	movs	r0, r0
	...

08008b50 <_dtoa_r>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	ed2d 8b02 	vpush	{d8}
 8008b58:	ec57 6b10 	vmov	r6, r7, d0
 8008b5c:	b095      	sub	sp, #84	; 0x54
 8008b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b64:	9105      	str	r1, [sp, #20]
 8008b66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b70:	b975      	cbnz	r5, 8008b90 <_dtoa_r+0x40>
 8008b72:	2010      	movs	r0, #16
 8008b74:	f000 fddc 	bl	8009730 <malloc>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b7c:	b920      	cbnz	r0, 8008b88 <_dtoa_r+0x38>
 8008b7e:	4bb2      	ldr	r3, [pc, #712]	; (8008e48 <_dtoa_r+0x2f8>)
 8008b80:	21ea      	movs	r1, #234	; 0xea
 8008b82:	48b2      	ldr	r0, [pc, #712]	; (8008e4c <_dtoa_r+0x2fc>)
 8008b84:	f001 fb8e 	bl	800a2a4 <__assert_func>
 8008b88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b8c:	6005      	str	r5, [r0, #0]
 8008b8e:	60c5      	str	r5, [r0, #12]
 8008b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b92:	6819      	ldr	r1, [r3, #0]
 8008b94:	b151      	cbz	r1, 8008bac <_dtoa_r+0x5c>
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	604a      	str	r2, [r1, #4]
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4093      	lsls	r3, r2
 8008b9e:	608b      	str	r3, [r1, #8]
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fe1b 	bl	80097dc <_Bfree>
 8008ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	1e3b      	subs	r3, r7, #0
 8008bae:	bfb9      	ittee	lt
 8008bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bb4:	9303      	strlt	r3, [sp, #12]
 8008bb6:	2300      	movge	r3, #0
 8008bb8:	f8c8 3000 	strge.w	r3, [r8]
 8008bbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008bc0:	4ba3      	ldr	r3, [pc, #652]	; (8008e50 <_dtoa_r+0x300>)
 8008bc2:	bfbc      	itt	lt
 8008bc4:	2201      	movlt	r2, #1
 8008bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8008bca:	ea33 0309 	bics.w	r3, r3, r9
 8008bce:	d11b      	bne.n	8008c08 <_dtoa_r+0xb8>
 8008bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bdc:	4333      	orrs	r3, r6
 8008bde:	f000 857a 	beq.w	80096d6 <_dtoa_r+0xb86>
 8008be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008be4:	b963      	cbnz	r3, 8008c00 <_dtoa_r+0xb0>
 8008be6:	4b9b      	ldr	r3, [pc, #620]	; (8008e54 <_dtoa_r+0x304>)
 8008be8:	e024      	b.n	8008c34 <_dtoa_r+0xe4>
 8008bea:	4b9b      	ldr	r3, [pc, #620]	; (8008e58 <_dtoa_r+0x308>)
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	3308      	adds	r3, #8
 8008bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	9800      	ldr	r0, [sp, #0]
 8008bf6:	b015      	add	sp, #84	; 0x54
 8008bf8:	ecbd 8b02 	vpop	{d8}
 8008bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c00:	4b94      	ldr	r3, [pc, #592]	; (8008e54 <_dtoa_r+0x304>)
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	3303      	adds	r3, #3
 8008c06:	e7f3      	b.n	8008bf0 <_dtoa_r+0xa0>
 8008c08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	ec51 0b17 	vmov	r0, r1, d7
 8008c12:	2300      	movs	r3, #0
 8008c14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008c18:	f7f7 ff76 	bl	8000b08 <__aeabi_dcmpeq>
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	b158      	cbz	r0, 8008c38 <_dtoa_r+0xe8>
 8008c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c22:	2301      	movs	r3, #1
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 8551 	beq.w	80096d0 <_dtoa_r+0xb80>
 8008c2e:	488b      	ldr	r0, [pc, #556]	; (8008e5c <_dtoa_r+0x30c>)
 8008c30:	6018      	str	r0, [r3, #0]
 8008c32:	1e43      	subs	r3, r0, #1
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	e7dd      	b.n	8008bf4 <_dtoa_r+0xa4>
 8008c38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008c3c:	aa12      	add	r2, sp, #72	; 0x48
 8008c3e:	a913      	add	r1, sp, #76	; 0x4c
 8008c40:	4620      	mov	r0, r4
 8008c42:	f001 f8ad 	bl	8009da0 <__d2b>
 8008c46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c4a:	4683      	mov	fp, r0
 8008c4c:	2d00      	cmp	r5, #0
 8008c4e:	d07c      	beq.n	8008d4a <_dtoa_r+0x1fa>
 8008c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008c5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c6a:	4b7d      	ldr	r3, [pc, #500]	; (8008e60 <_dtoa_r+0x310>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	4630      	mov	r0, r6
 8008c70:	4639      	mov	r1, r7
 8008c72:	f7f7 fb29 	bl	80002c8 <__aeabi_dsub>
 8008c76:	a36e      	add	r3, pc, #440	; (adr r3, 8008e30 <_dtoa_r+0x2e0>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f7f7 fcdc 	bl	8000638 <__aeabi_dmul>
 8008c80:	a36d      	add	r3, pc, #436	; (adr r3, 8008e38 <_dtoa_r+0x2e8>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fb21 	bl	80002cc <__adddf3>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	460f      	mov	r7, r1
 8008c90:	f7f7 fc68 	bl	8000564 <__aeabi_i2d>
 8008c94:	a36a      	add	r3, pc, #424	; (adr r3, 8008e40 <_dtoa_r+0x2f0>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f7f7 fccd 	bl	8000638 <__aeabi_dmul>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	f7f7 fb11 	bl	80002cc <__adddf3>
 8008caa:	4606      	mov	r6, r0
 8008cac:	460f      	mov	r7, r1
 8008cae:	f7f7 ff73 	bl	8000b98 <__aeabi_d2iz>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4682      	mov	sl, r0
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	4630      	mov	r0, r6
 8008cba:	4639      	mov	r1, r7
 8008cbc:	f7f7 ff2e 	bl	8000b1c <__aeabi_dcmplt>
 8008cc0:	b148      	cbz	r0, 8008cd6 <_dtoa_r+0x186>
 8008cc2:	4650      	mov	r0, sl
 8008cc4:	f7f7 fc4e 	bl	8000564 <__aeabi_i2d>
 8008cc8:	4632      	mov	r2, r6
 8008cca:	463b      	mov	r3, r7
 8008ccc:	f7f7 ff1c 	bl	8000b08 <__aeabi_dcmpeq>
 8008cd0:	b908      	cbnz	r0, 8008cd6 <_dtoa_r+0x186>
 8008cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cd6:	f1ba 0f16 	cmp.w	sl, #22
 8008cda:	d854      	bhi.n	8008d86 <_dtoa_r+0x236>
 8008cdc:	4b61      	ldr	r3, [pc, #388]	; (8008e64 <_dtoa_r+0x314>)
 8008cde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cea:	f7f7 ff17 	bl	8000b1c <__aeabi_dcmplt>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d04b      	beq.n	8008d8a <_dtoa_r+0x23a>
 8008cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	930e      	str	r3, [sp, #56]	; 0x38
 8008cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cfc:	1b5d      	subs	r5, r3, r5
 8008cfe:	1e6b      	subs	r3, r5, #1
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	bf43      	ittte	mi
 8008d04:	2300      	movmi	r3, #0
 8008d06:	f1c5 0801 	rsbmi	r8, r5, #1
 8008d0a:	9304      	strmi	r3, [sp, #16]
 8008d0c:	f04f 0800 	movpl.w	r8, #0
 8008d10:	f1ba 0f00 	cmp.w	sl, #0
 8008d14:	db3b      	blt.n	8008d8e <_dtoa_r+0x23e>
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008d1c:	4453      	add	r3, sl
 8008d1e:	9304      	str	r3, [sp, #16]
 8008d20:	2300      	movs	r3, #0
 8008d22:	9306      	str	r3, [sp, #24]
 8008d24:	9b05      	ldr	r3, [sp, #20]
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d869      	bhi.n	8008dfe <_dtoa_r+0x2ae>
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	bfc4      	itt	gt
 8008d2e:	3b04      	subgt	r3, #4
 8008d30:	9305      	strgt	r3, [sp, #20]
 8008d32:	9b05      	ldr	r3, [sp, #20]
 8008d34:	f1a3 0302 	sub.w	r3, r3, #2
 8008d38:	bfcc      	ite	gt
 8008d3a:	2500      	movgt	r5, #0
 8008d3c:	2501      	movle	r5, #1
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	d869      	bhi.n	8008e16 <_dtoa_r+0x2c6>
 8008d42:	e8df f003 	tbb	[pc, r3]
 8008d46:	4e2c      	.short	0x4e2c
 8008d48:	5a4c      	.short	0x5a4c
 8008d4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008d4e:	441d      	add	r5, r3
 8008d50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	bfc1      	itttt	gt
 8008d58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d60:	fa09 f303 	lslgt.w	r3, r9, r3
 8008d64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d68:	bfda      	itte	le
 8008d6a:	f1c3 0320 	rsble	r3, r3, #32
 8008d6e:	fa06 f003 	lslle.w	r0, r6, r3
 8008d72:	4318      	orrgt	r0, r3
 8008d74:	f7f7 fbe6 	bl	8000544 <__aeabi_ui2d>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d80:	3d01      	subs	r5, #1
 8008d82:	9310      	str	r3, [sp, #64]	; 0x40
 8008d84:	e771      	b.n	8008c6a <_dtoa_r+0x11a>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e7b6      	b.n	8008cf8 <_dtoa_r+0x1a8>
 8008d8a:	900e      	str	r0, [sp, #56]	; 0x38
 8008d8c:	e7b5      	b.n	8008cfa <_dtoa_r+0x1aa>
 8008d8e:	f1ca 0300 	rsb	r3, sl, #0
 8008d92:	9306      	str	r3, [sp, #24]
 8008d94:	2300      	movs	r3, #0
 8008d96:	eba8 080a 	sub.w	r8, r8, sl
 8008d9a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d9c:	e7c2      	b.n	8008d24 <_dtoa_r+0x1d4>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	9308      	str	r3, [sp, #32]
 8008da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dc39      	bgt.n	8008e1c <_dtoa_r+0x2cc>
 8008da8:	f04f 0901 	mov.w	r9, #1
 8008dac:	f8cd 9004 	str.w	r9, [sp, #4]
 8008db0:	464b      	mov	r3, r9
 8008db2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008db6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008db8:	2200      	movs	r2, #0
 8008dba:	6042      	str	r2, [r0, #4]
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	f102 0614 	add.w	r6, r2, #20
 8008dc2:	429e      	cmp	r6, r3
 8008dc4:	6841      	ldr	r1, [r0, #4]
 8008dc6:	d92f      	bls.n	8008e28 <_dtoa_r+0x2d8>
 8008dc8:	4620      	mov	r0, r4
 8008dca:	f000 fcc7 	bl	800975c <_Balloc>
 8008dce:	9000      	str	r0, [sp, #0]
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d14b      	bne.n	8008e6c <_dtoa_r+0x31c>
 8008dd4:	4b24      	ldr	r3, [pc, #144]	; (8008e68 <_dtoa_r+0x318>)
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ddc:	e6d1      	b.n	8008b82 <_dtoa_r+0x32>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e7de      	b.n	8008da0 <_dtoa_r+0x250>
 8008de2:	2300      	movs	r3, #0
 8008de4:	9308      	str	r3, [sp, #32]
 8008de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de8:	eb0a 0903 	add.w	r9, sl, r3
 8008dec:	f109 0301 	add.w	r3, r9, #1
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	bfb8      	it	lt
 8008df6:	2301      	movlt	r3, #1
 8008df8:	e7dd      	b.n	8008db6 <_dtoa_r+0x266>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e7f2      	b.n	8008de4 <_dtoa_r+0x294>
 8008dfe:	2501      	movs	r5, #1
 8008e00:	2300      	movs	r3, #0
 8008e02:	9305      	str	r3, [sp, #20]
 8008e04:	9508      	str	r5, [sp, #32]
 8008e06:	f04f 39ff 	mov.w	r9, #4294967295
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e10:	2312      	movs	r3, #18
 8008e12:	9209      	str	r2, [sp, #36]	; 0x24
 8008e14:	e7cf      	b.n	8008db6 <_dtoa_r+0x266>
 8008e16:	2301      	movs	r3, #1
 8008e18:	9308      	str	r3, [sp, #32]
 8008e1a:	e7f4      	b.n	8008e06 <_dtoa_r+0x2b6>
 8008e1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008e20:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e24:	464b      	mov	r3, r9
 8008e26:	e7c6      	b.n	8008db6 <_dtoa_r+0x266>
 8008e28:	3101      	adds	r1, #1
 8008e2a:	6041      	str	r1, [r0, #4]
 8008e2c:	0052      	lsls	r2, r2, #1
 8008e2e:	e7c6      	b.n	8008dbe <_dtoa_r+0x26e>
 8008e30:	636f4361 	.word	0x636f4361
 8008e34:	3fd287a7 	.word	0x3fd287a7
 8008e38:	8b60c8b3 	.word	0x8b60c8b3
 8008e3c:	3fc68a28 	.word	0x3fc68a28
 8008e40:	509f79fb 	.word	0x509f79fb
 8008e44:	3fd34413 	.word	0x3fd34413
 8008e48:	0800b18d 	.word	0x0800b18d
 8008e4c:	0800b1a4 	.word	0x0800b1a4
 8008e50:	7ff00000 	.word	0x7ff00000
 8008e54:	0800b189 	.word	0x0800b189
 8008e58:	0800b180 	.word	0x0800b180
 8008e5c:	0800b15d 	.word	0x0800b15d
 8008e60:	3ff80000 	.word	0x3ff80000
 8008e64:	0800b2a0 	.word	0x0800b2a0
 8008e68:	0800b203 	.word	0x0800b203
 8008e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e6e:	9a00      	ldr	r2, [sp, #0]
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	9b01      	ldr	r3, [sp, #4]
 8008e74:	2b0e      	cmp	r3, #14
 8008e76:	f200 80ad 	bhi.w	8008fd4 <_dtoa_r+0x484>
 8008e7a:	2d00      	cmp	r5, #0
 8008e7c:	f000 80aa 	beq.w	8008fd4 <_dtoa_r+0x484>
 8008e80:	f1ba 0f00 	cmp.w	sl, #0
 8008e84:	dd36      	ble.n	8008ef4 <_dtoa_r+0x3a4>
 8008e86:	4ac3      	ldr	r2, [pc, #780]	; (8009194 <_dtoa_r+0x644>)
 8008e88:	f00a 030f 	and.w	r3, sl, #15
 8008e8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e90:	ed93 7b00 	vldr	d7, [r3]
 8008e94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008e98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008e9c:	eeb0 8a47 	vmov.f32	s16, s14
 8008ea0:	eef0 8a67 	vmov.f32	s17, s15
 8008ea4:	d016      	beq.n	8008ed4 <_dtoa_r+0x384>
 8008ea6:	4bbc      	ldr	r3, [pc, #752]	; (8009198 <_dtoa_r+0x648>)
 8008ea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008eb0:	f7f7 fcec 	bl	800088c <__aeabi_ddiv>
 8008eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb8:	f007 070f 	and.w	r7, r7, #15
 8008ebc:	2503      	movs	r5, #3
 8008ebe:	4eb6      	ldr	r6, [pc, #728]	; (8009198 <_dtoa_r+0x648>)
 8008ec0:	b957      	cbnz	r7, 8008ed8 <_dtoa_r+0x388>
 8008ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec6:	ec53 2b18 	vmov	r2, r3, d8
 8008eca:	f7f7 fcdf 	bl	800088c <__aeabi_ddiv>
 8008ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed2:	e029      	b.n	8008f28 <_dtoa_r+0x3d8>
 8008ed4:	2502      	movs	r5, #2
 8008ed6:	e7f2      	b.n	8008ebe <_dtoa_r+0x36e>
 8008ed8:	07f9      	lsls	r1, r7, #31
 8008eda:	d508      	bpl.n	8008eee <_dtoa_r+0x39e>
 8008edc:	ec51 0b18 	vmov	r0, r1, d8
 8008ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ee4:	f7f7 fba8 	bl	8000638 <__aeabi_dmul>
 8008ee8:	ec41 0b18 	vmov	d8, r0, r1
 8008eec:	3501      	adds	r5, #1
 8008eee:	107f      	asrs	r7, r7, #1
 8008ef0:	3608      	adds	r6, #8
 8008ef2:	e7e5      	b.n	8008ec0 <_dtoa_r+0x370>
 8008ef4:	f000 80a6 	beq.w	8009044 <_dtoa_r+0x4f4>
 8008ef8:	f1ca 0600 	rsb	r6, sl, #0
 8008efc:	4ba5      	ldr	r3, [pc, #660]	; (8009194 <_dtoa_r+0x644>)
 8008efe:	4fa6      	ldr	r7, [pc, #664]	; (8009198 <_dtoa_r+0x648>)
 8008f00:	f006 020f 	and.w	r2, r6, #15
 8008f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f10:	f7f7 fb92 	bl	8000638 <__aeabi_dmul>
 8008f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f18:	1136      	asrs	r6, r6, #4
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	2502      	movs	r5, #2
 8008f1e:	2e00      	cmp	r6, #0
 8008f20:	f040 8085 	bne.w	800902e <_dtoa_r+0x4de>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1d2      	bne.n	8008ece <_dtoa_r+0x37e>
 8008f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 808c 	beq.w	8009048 <_dtoa_r+0x4f8>
 8008f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f34:	4b99      	ldr	r3, [pc, #612]	; (800919c <_dtoa_r+0x64c>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	4630      	mov	r0, r6
 8008f3a:	4639      	mov	r1, r7
 8008f3c:	f7f7 fdee 	bl	8000b1c <__aeabi_dcmplt>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	f000 8081 	beq.w	8009048 <_dtoa_r+0x4f8>
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d07d      	beq.n	8009048 <_dtoa_r+0x4f8>
 8008f4c:	f1b9 0f00 	cmp.w	r9, #0
 8008f50:	dd3c      	ble.n	8008fcc <_dtoa_r+0x47c>
 8008f52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008f56:	9307      	str	r3, [sp, #28]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4b91      	ldr	r3, [pc, #580]	; (80091a0 <_dtoa_r+0x650>)
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	4639      	mov	r1, r7
 8008f60:	f7f7 fb6a 	bl	8000638 <__aeabi_dmul>
 8008f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f68:	3501      	adds	r5, #1
 8008f6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008f6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f72:	4628      	mov	r0, r5
 8008f74:	f7f7 faf6 	bl	8000564 <__aeabi_i2d>
 8008f78:	4632      	mov	r2, r6
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	f7f7 fb5c 	bl	8000638 <__aeabi_dmul>
 8008f80:	4b88      	ldr	r3, [pc, #544]	; (80091a4 <_dtoa_r+0x654>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	f7f7 f9a2 	bl	80002cc <__adddf3>
 8008f88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f90:	9303      	str	r3, [sp, #12]
 8008f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d15c      	bne.n	8009052 <_dtoa_r+0x502>
 8008f98:	4b83      	ldr	r3, [pc, #524]	; (80091a8 <_dtoa_r+0x658>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 f992 	bl	80002c8 <__aeabi_dsub>
 8008fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fa8:	4606      	mov	r6, r0
 8008faa:	460f      	mov	r7, r1
 8008fac:	f7f7 fdd4 	bl	8000b58 <__aeabi_dcmpgt>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	f040 8296 	bne.w	80094e2 <_dtoa_r+0x992>
 8008fb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 fdab 	bl	8000b1c <__aeabi_dcmplt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f040 8288 	bne.w	80094dc <_dtoa_r+0x98c>
 8008fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f2c0 8158 	blt.w	800928c <_dtoa_r+0x73c>
 8008fdc:	f1ba 0f0e 	cmp.w	sl, #14
 8008fe0:	f300 8154 	bgt.w	800928c <_dtoa_r+0x73c>
 8008fe4:	4b6b      	ldr	r3, [pc, #428]	; (8009194 <_dtoa_r+0x644>)
 8008fe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008fea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f280 80e3 	bge.w	80091bc <_dtoa_r+0x66c>
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f300 80df 	bgt.w	80091bc <_dtoa_r+0x66c>
 8008ffe:	f040 826d 	bne.w	80094dc <_dtoa_r+0x98c>
 8009002:	4b69      	ldr	r3, [pc, #420]	; (80091a8 <_dtoa_r+0x658>)
 8009004:	2200      	movs	r2, #0
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fb15 	bl	8000638 <__aeabi_dmul>
 800900e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009012:	f7f7 fd97 	bl	8000b44 <__aeabi_dcmpge>
 8009016:	9e01      	ldr	r6, [sp, #4]
 8009018:	4637      	mov	r7, r6
 800901a:	2800      	cmp	r0, #0
 800901c:	f040 8243 	bne.w	80094a6 <_dtoa_r+0x956>
 8009020:	9d00      	ldr	r5, [sp, #0]
 8009022:	2331      	movs	r3, #49	; 0x31
 8009024:	f805 3b01 	strb.w	r3, [r5], #1
 8009028:	f10a 0a01 	add.w	sl, sl, #1
 800902c:	e23f      	b.n	80094ae <_dtoa_r+0x95e>
 800902e:	07f2      	lsls	r2, r6, #31
 8009030:	d505      	bpl.n	800903e <_dtoa_r+0x4ee>
 8009032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009036:	f7f7 faff 	bl	8000638 <__aeabi_dmul>
 800903a:	3501      	adds	r5, #1
 800903c:	2301      	movs	r3, #1
 800903e:	1076      	asrs	r6, r6, #1
 8009040:	3708      	adds	r7, #8
 8009042:	e76c      	b.n	8008f1e <_dtoa_r+0x3ce>
 8009044:	2502      	movs	r5, #2
 8009046:	e76f      	b.n	8008f28 <_dtoa_r+0x3d8>
 8009048:	9b01      	ldr	r3, [sp, #4]
 800904a:	f8cd a01c 	str.w	sl, [sp, #28]
 800904e:	930c      	str	r3, [sp, #48]	; 0x30
 8009050:	e78d      	b.n	8008f6e <_dtoa_r+0x41e>
 8009052:	9900      	ldr	r1, [sp, #0]
 8009054:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009058:	4b4e      	ldr	r3, [pc, #312]	; (8009194 <_dtoa_r+0x644>)
 800905a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800905e:	4401      	add	r1, r0
 8009060:	9102      	str	r1, [sp, #8]
 8009062:	9908      	ldr	r1, [sp, #32]
 8009064:	eeb0 8a47 	vmov.f32	s16, s14
 8009068:	eef0 8a67 	vmov.f32	s17, s15
 800906c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009070:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009074:	2900      	cmp	r1, #0
 8009076:	d045      	beq.n	8009104 <_dtoa_r+0x5b4>
 8009078:	494c      	ldr	r1, [pc, #304]	; (80091ac <_dtoa_r+0x65c>)
 800907a:	2000      	movs	r0, #0
 800907c:	f7f7 fc06 	bl	800088c <__aeabi_ddiv>
 8009080:	ec53 2b18 	vmov	r2, r3, d8
 8009084:	f7f7 f920 	bl	80002c8 <__aeabi_dsub>
 8009088:	9d00      	ldr	r5, [sp, #0]
 800908a:	ec41 0b18 	vmov	d8, r0, r1
 800908e:	4639      	mov	r1, r7
 8009090:	4630      	mov	r0, r6
 8009092:	f7f7 fd81 	bl	8000b98 <__aeabi_d2iz>
 8009096:	900c      	str	r0, [sp, #48]	; 0x30
 8009098:	f7f7 fa64 	bl	8000564 <__aeabi_i2d>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4630      	mov	r0, r6
 80090a2:	4639      	mov	r1, r7
 80090a4:	f7f7 f910 	bl	80002c8 <__aeabi_dsub>
 80090a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090aa:	3330      	adds	r3, #48	; 0x30
 80090ac:	f805 3b01 	strb.w	r3, [r5], #1
 80090b0:	ec53 2b18 	vmov	r2, r3, d8
 80090b4:	4606      	mov	r6, r0
 80090b6:	460f      	mov	r7, r1
 80090b8:	f7f7 fd30 	bl	8000b1c <__aeabi_dcmplt>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d165      	bne.n	800918c <_dtoa_r+0x63c>
 80090c0:	4632      	mov	r2, r6
 80090c2:	463b      	mov	r3, r7
 80090c4:	4935      	ldr	r1, [pc, #212]	; (800919c <_dtoa_r+0x64c>)
 80090c6:	2000      	movs	r0, #0
 80090c8:	f7f7 f8fe 	bl	80002c8 <__aeabi_dsub>
 80090cc:	ec53 2b18 	vmov	r2, r3, d8
 80090d0:	f7f7 fd24 	bl	8000b1c <__aeabi_dcmplt>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f040 80b9 	bne.w	800924c <_dtoa_r+0x6fc>
 80090da:	9b02      	ldr	r3, [sp, #8]
 80090dc:	429d      	cmp	r5, r3
 80090de:	f43f af75 	beq.w	8008fcc <_dtoa_r+0x47c>
 80090e2:	4b2f      	ldr	r3, [pc, #188]	; (80091a0 <_dtoa_r+0x650>)
 80090e4:	ec51 0b18 	vmov	r0, r1, d8
 80090e8:	2200      	movs	r2, #0
 80090ea:	f7f7 faa5 	bl	8000638 <__aeabi_dmul>
 80090ee:	4b2c      	ldr	r3, [pc, #176]	; (80091a0 <_dtoa_r+0x650>)
 80090f0:	ec41 0b18 	vmov	d8, r0, r1
 80090f4:	2200      	movs	r2, #0
 80090f6:	4630      	mov	r0, r6
 80090f8:	4639      	mov	r1, r7
 80090fa:	f7f7 fa9d 	bl	8000638 <__aeabi_dmul>
 80090fe:	4606      	mov	r6, r0
 8009100:	460f      	mov	r7, r1
 8009102:	e7c4      	b.n	800908e <_dtoa_r+0x53e>
 8009104:	ec51 0b17 	vmov	r0, r1, d7
 8009108:	f7f7 fa96 	bl	8000638 <__aeabi_dmul>
 800910c:	9b02      	ldr	r3, [sp, #8]
 800910e:	9d00      	ldr	r5, [sp, #0]
 8009110:	930c      	str	r3, [sp, #48]	; 0x30
 8009112:	ec41 0b18 	vmov	d8, r0, r1
 8009116:	4639      	mov	r1, r7
 8009118:	4630      	mov	r0, r6
 800911a:	f7f7 fd3d 	bl	8000b98 <__aeabi_d2iz>
 800911e:	9011      	str	r0, [sp, #68]	; 0x44
 8009120:	f7f7 fa20 	bl	8000564 <__aeabi_i2d>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4630      	mov	r0, r6
 800912a:	4639      	mov	r1, r7
 800912c:	f7f7 f8cc 	bl	80002c8 <__aeabi_dsub>
 8009130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009132:	3330      	adds	r3, #48	; 0x30
 8009134:	f805 3b01 	strb.w	r3, [r5], #1
 8009138:	9b02      	ldr	r3, [sp, #8]
 800913a:	429d      	cmp	r5, r3
 800913c:	4606      	mov	r6, r0
 800913e:	460f      	mov	r7, r1
 8009140:	f04f 0200 	mov.w	r2, #0
 8009144:	d134      	bne.n	80091b0 <_dtoa_r+0x660>
 8009146:	4b19      	ldr	r3, [pc, #100]	; (80091ac <_dtoa_r+0x65c>)
 8009148:	ec51 0b18 	vmov	r0, r1, d8
 800914c:	f7f7 f8be 	bl	80002cc <__adddf3>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4630      	mov	r0, r6
 8009156:	4639      	mov	r1, r7
 8009158:	f7f7 fcfe 	bl	8000b58 <__aeabi_dcmpgt>
 800915c:	2800      	cmp	r0, #0
 800915e:	d175      	bne.n	800924c <_dtoa_r+0x6fc>
 8009160:	ec53 2b18 	vmov	r2, r3, d8
 8009164:	4911      	ldr	r1, [pc, #68]	; (80091ac <_dtoa_r+0x65c>)
 8009166:	2000      	movs	r0, #0
 8009168:	f7f7 f8ae 	bl	80002c8 <__aeabi_dsub>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4630      	mov	r0, r6
 8009172:	4639      	mov	r1, r7
 8009174:	f7f7 fcd2 	bl	8000b1c <__aeabi_dcmplt>
 8009178:	2800      	cmp	r0, #0
 800917a:	f43f af27 	beq.w	8008fcc <_dtoa_r+0x47c>
 800917e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009180:	1e6b      	subs	r3, r5, #1
 8009182:	930c      	str	r3, [sp, #48]	; 0x30
 8009184:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009188:	2b30      	cmp	r3, #48	; 0x30
 800918a:	d0f8      	beq.n	800917e <_dtoa_r+0x62e>
 800918c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009190:	e04a      	b.n	8009228 <_dtoa_r+0x6d8>
 8009192:	bf00      	nop
 8009194:	0800b2a0 	.word	0x0800b2a0
 8009198:	0800b278 	.word	0x0800b278
 800919c:	3ff00000 	.word	0x3ff00000
 80091a0:	40240000 	.word	0x40240000
 80091a4:	401c0000 	.word	0x401c0000
 80091a8:	40140000 	.word	0x40140000
 80091ac:	3fe00000 	.word	0x3fe00000
 80091b0:	4baf      	ldr	r3, [pc, #700]	; (8009470 <_dtoa_r+0x920>)
 80091b2:	f7f7 fa41 	bl	8000638 <__aeabi_dmul>
 80091b6:	4606      	mov	r6, r0
 80091b8:	460f      	mov	r7, r1
 80091ba:	e7ac      	b.n	8009116 <_dtoa_r+0x5c6>
 80091bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091c0:	9d00      	ldr	r5, [sp, #0]
 80091c2:	4642      	mov	r2, r8
 80091c4:	464b      	mov	r3, r9
 80091c6:	4630      	mov	r0, r6
 80091c8:	4639      	mov	r1, r7
 80091ca:	f7f7 fb5f 	bl	800088c <__aeabi_ddiv>
 80091ce:	f7f7 fce3 	bl	8000b98 <__aeabi_d2iz>
 80091d2:	9002      	str	r0, [sp, #8]
 80091d4:	f7f7 f9c6 	bl	8000564 <__aeabi_i2d>
 80091d8:	4642      	mov	r2, r8
 80091da:	464b      	mov	r3, r9
 80091dc:	f7f7 fa2c 	bl	8000638 <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f7f7 f86e 	bl	80002c8 <__aeabi_dsub>
 80091ec:	9e02      	ldr	r6, [sp, #8]
 80091ee:	9f01      	ldr	r7, [sp, #4]
 80091f0:	3630      	adds	r6, #48	; 0x30
 80091f2:	f805 6b01 	strb.w	r6, [r5], #1
 80091f6:	9e00      	ldr	r6, [sp, #0]
 80091f8:	1bae      	subs	r6, r5, r6
 80091fa:	42b7      	cmp	r7, r6
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	d137      	bne.n	8009272 <_dtoa_r+0x722>
 8009202:	f7f7 f863 	bl	80002cc <__adddf3>
 8009206:	4642      	mov	r2, r8
 8009208:	464b      	mov	r3, r9
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	f7f7 fca3 	bl	8000b58 <__aeabi_dcmpgt>
 8009212:	b9c8      	cbnz	r0, 8009248 <_dtoa_r+0x6f8>
 8009214:	4642      	mov	r2, r8
 8009216:	464b      	mov	r3, r9
 8009218:	4630      	mov	r0, r6
 800921a:	4639      	mov	r1, r7
 800921c:	f7f7 fc74 	bl	8000b08 <__aeabi_dcmpeq>
 8009220:	b110      	cbz	r0, 8009228 <_dtoa_r+0x6d8>
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	07d9      	lsls	r1, r3, #31
 8009226:	d40f      	bmi.n	8009248 <_dtoa_r+0x6f8>
 8009228:	4620      	mov	r0, r4
 800922a:	4659      	mov	r1, fp
 800922c:	f000 fad6 	bl	80097dc <_Bfree>
 8009230:	2300      	movs	r3, #0
 8009232:	702b      	strb	r3, [r5, #0]
 8009234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009236:	f10a 0001 	add.w	r0, sl, #1
 800923a:	6018      	str	r0, [r3, #0]
 800923c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800923e:	2b00      	cmp	r3, #0
 8009240:	f43f acd8 	beq.w	8008bf4 <_dtoa_r+0xa4>
 8009244:	601d      	str	r5, [r3, #0]
 8009246:	e4d5      	b.n	8008bf4 <_dtoa_r+0xa4>
 8009248:	f8cd a01c 	str.w	sl, [sp, #28]
 800924c:	462b      	mov	r3, r5
 800924e:	461d      	mov	r5, r3
 8009250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009254:	2a39      	cmp	r2, #57	; 0x39
 8009256:	d108      	bne.n	800926a <_dtoa_r+0x71a>
 8009258:	9a00      	ldr	r2, [sp, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d1f7      	bne.n	800924e <_dtoa_r+0x6fe>
 800925e:	9a07      	ldr	r2, [sp, #28]
 8009260:	9900      	ldr	r1, [sp, #0]
 8009262:	3201      	adds	r2, #1
 8009264:	9207      	str	r2, [sp, #28]
 8009266:	2230      	movs	r2, #48	; 0x30
 8009268:	700a      	strb	r2, [r1, #0]
 800926a:	781a      	ldrb	r2, [r3, #0]
 800926c:	3201      	adds	r2, #1
 800926e:	701a      	strb	r2, [r3, #0]
 8009270:	e78c      	b.n	800918c <_dtoa_r+0x63c>
 8009272:	4b7f      	ldr	r3, [pc, #508]	; (8009470 <_dtoa_r+0x920>)
 8009274:	2200      	movs	r2, #0
 8009276:	f7f7 f9df 	bl	8000638 <__aeabi_dmul>
 800927a:	2200      	movs	r2, #0
 800927c:	2300      	movs	r3, #0
 800927e:	4606      	mov	r6, r0
 8009280:	460f      	mov	r7, r1
 8009282:	f7f7 fc41 	bl	8000b08 <__aeabi_dcmpeq>
 8009286:	2800      	cmp	r0, #0
 8009288:	d09b      	beq.n	80091c2 <_dtoa_r+0x672>
 800928a:	e7cd      	b.n	8009228 <_dtoa_r+0x6d8>
 800928c:	9a08      	ldr	r2, [sp, #32]
 800928e:	2a00      	cmp	r2, #0
 8009290:	f000 80c4 	beq.w	800941c <_dtoa_r+0x8cc>
 8009294:	9a05      	ldr	r2, [sp, #20]
 8009296:	2a01      	cmp	r2, #1
 8009298:	f300 80a8 	bgt.w	80093ec <_dtoa_r+0x89c>
 800929c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800929e:	2a00      	cmp	r2, #0
 80092a0:	f000 80a0 	beq.w	80093e4 <_dtoa_r+0x894>
 80092a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092a8:	9e06      	ldr	r6, [sp, #24]
 80092aa:	4645      	mov	r5, r8
 80092ac:	9a04      	ldr	r2, [sp, #16]
 80092ae:	2101      	movs	r1, #1
 80092b0:	441a      	add	r2, r3
 80092b2:	4620      	mov	r0, r4
 80092b4:	4498      	add	r8, r3
 80092b6:	9204      	str	r2, [sp, #16]
 80092b8:	f000 fb4c 	bl	8009954 <__i2b>
 80092bc:	4607      	mov	r7, r0
 80092be:	2d00      	cmp	r5, #0
 80092c0:	dd0b      	ble.n	80092da <_dtoa_r+0x78a>
 80092c2:	9b04      	ldr	r3, [sp, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dd08      	ble.n	80092da <_dtoa_r+0x78a>
 80092c8:	42ab      	cmp	r3, r5
 80092ca:	9a04      	ldr	r2, [sp, #16]
 80092cc:	bfa8      	it	ge
 80092ce:	462b      	movge	r3, r5
 80092d0:	eba8 0803 	sub.w	r8, r8, r3
 80092d4:	1aed      	subs	r5, r5, r3
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	9304      	str	r3, [sp, #16]
 80092da:	9b06      	ldr	r3, [sp, #24]
 80092dc:	b1fb      	cbz	r3, 800931e <_dtoa_r+0x7ce>
 80092de:	9b08      	ldr	r3, [sp, #32]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 809f 	beq.w	8009424 <_dtoa_r+0x8d4>
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	dd11      	ble.n	800930e <_dtoa_r+0x7be>
 80092ea:	4639      	mov	r1, r7
 80092ec:	4632      	mov	r2, r6
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 fbec 	bl	8009acc <__pow5mult>
 80092f4:	465a      	mov	r2, fp
 80092f6:	4601      	mov	r1, r0
 80092f8:	4607      	mov	r7, r0
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fb40 	bl	8009980 <__multiply>
 8009300:	4659      	mov	r1, fp
 8009302:	9007      	str	r0, [sp, #28]
 8009304:	4620      	mov	r0, r4
 8009306:	f000 fa69 	bl	80097dc <_Bfree>
 800930a:	9b07      	ldr	r3, [sp, #28]
 800930c:	469b      	mov	fp, r3
 800930e:	9b06      	ldr	r3, [sp, #24]
 8009310:	1b9a      	subs	r2, r3, r6
 8009312:	d004      	beq.n	800931e <_dtoa_r+0x7ce>
 8009314:	4659      	mov	r1, fp
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fbd8 	bl	8009acc <__pow5mult>
 800931c:	4683      	mov	fp, r0
 800931e:	2101      	movs	r1, #1
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fb17 	bl	8009954 <__i2b>
 8009326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009328:	2b00      	cmp	r3, #0
 800932a:	4606      	mov	r6, r0
 800932c:	dd7c      	ble.n	8009428 <_dtoa_r+0x8d8>
 800932e:	461a      	mov	r2, r3
 8009330:	4601      	mov	r1, r0
 8009332:	4620      	mov	r0, r4
 8009334:	f000 fbca 	bl	8009acc <__pow5mult>
 8009338:	9b05      	ldr	r3, [sp, #20]
 800933a:	2b01      	cmp	r3, #1
 800933c:	4606      	mov	r6, r0
 800933e:	dd76      	ble.n	800942e <_dtoa_r+0x8de>
 8009340:	2300      	movs	r3, #0
 8009342:	9306      	str	r3, [sp, #24]
 8009344:	6933      	ldr	r3, [r6, #16]
 8009346:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800934a:	6918      	ldr	r0, [r3, #16]
 800934c:	f000 fab2 	bl	80098b4 <__hi0bits>
 8009350:	f1c0 0020 	rsb	r0, r0, #32
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	4418      	add	r0, r3
 8009358:	f010 001f 	ands.w	r0, r0, #31
 800935c:	f000 8086 	beq.w	800946c <_dtoa_r+0x91c>
 8009360:	f1c0 0320 	rsb	r3, r0, #32
 8009364:	2b04      	cmp	r3, #4
 8009366:	dd7f      	ble.n	8009468 <_dtoa_r+0x918>
 8009368:	f1c0 001c 	rsb	r0, r0, #28
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	4403      	add	r3, r0
 8009370:	4480      	add	r8, r0
 8009372:	4405      	add	r5, r0
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	f1b8 0f00 	cmp.w	r8, #0
 800937a:	dd05      	ble.n	8009388 <_dtoa_r+0x838>
 800937c:	4659      	mov	r1, fp
 800937e:	4642      	mov	r2, r8
 8009380:	4620      	mov	r0, r4
 8009382:	f000 fbfd 	bl	8009b80 <__lshift>
 8009386:	4683      	mov	fp, r0
 8009388:	9b04      	ldr	r3, [sp, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	dd05      	ble.n	800939a <_dtoa_r+0x84a>
 800938e:	4631      	mov	r1, r6
 8009390:	461a      	mov	r2, r3
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fbf4 	bl	8009b80 <__lshift>
 8009398:	4606      	mov	r6, r0
 800939a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800939c:	2b00      	cmp	r3, #0
 800939e:	d069      	beq.n	8009474 <_dtoa_r+0x924>
 80093a0:	4631      	mov	r1, r6
 80093a2:	4658      	mov	r0, fp
 80093a4:	f000 fc58 	bl	8009c58 <__mcmp>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	da63      	bge.n	8009474 <_dtoa_r+0x924>
 80093ac:	2300      	movs	r3, #0
 80093ae:	4659      	mov	r1, fp
 80093b0:	220a      	movs	r2, #10
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 fa34 	bl	8009820 <__multadd>
 80093b8:	9b08      	ldr	r3, [sp, #32]
 80093ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093be:	4683      	mov	fp, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 818f 	beq.w	80096e4 <_dtoa_r+0xb94>
 80093c6:	4639      	mov	r1, r7
 80093c8:	2300      	movs	r3, #0
 80093ca:	220a      	movs	r2, #10
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 fa27 	bl	8009820 <__multadd>
 80093d2:	f1b9 0f00 	cmp.w	r9, #0
 80093d6:	4607      	mov	r7, r0
 80093d8:	f300 808e 	bgt.w	80094f8 <_dtoa_r+0x9a8>
 80093dc:	9b05      	ldr	r3, [sp, #20]
 80093de:	2b02      	cmp	r3, #2
 80093e0:	dc50      	bgt.n	8009484 <_dtoa_r+0x934>
 80093e2:	e089      	b.n	80094f8 <_dtoa_r+0x9a8>
 80093e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093ea:	e75d      	b.n	80092a8 <_dtoa_r+0x758>
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	1e5e      	subs	r6, r3, #1
 80093f0:	9b06      	ldr	r3, [sp, #24]
 80093f2:	42b3      	cmp	r3, r6
 80093f4:	bfbf      	itttt	lt
 80093f6:	9b06      	ldrlt	r3, [sp, #24]
 80093f8:	9606      	strlt	r6, [sp, #24]
 80093fa:	1af2      	sublt	r2, r6, r3
 80093fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80093fe:	bfb6      	itet	lt
 8009400:	189b      	addlt	r3, r3, r2
 8009402:	1b9e      	subge	r6, r3, r6
 8009404:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	bfb8      	it	lt
 800940a:	2600      	movlt	r6, #0
 800940c:	2b00      	cmp	r3, #0
 800940e:	bfb5      	itete	lt
 8009410:	eba8 0503 	sublt.w	r5, r8, r3
 8009414:	9b01      	ldrge	r3, [sp, #4]
 8009416:	2300      	movlt	r3, #0
 8009418:	4645      	movge	r5, r8
 800941a:	e747      	b.n	80092ac <_dtoa_r+0x75c>
 800941c:	9e06      	ldr	r6, [sp, #24]
 800941e:	9f08      	ldr	r7, [sp, #32]
 8009420:	4645      	mov	r5, r8
 8009422:	e74c      	b.n	80092be <_dtoa_r+0x76e>
 8009424:	9a06      	ldr	r2, [sp, #24]
 8009426:	e775      	b.n	8009314 <_dtoa_r+0x7c4>
 8009428:	9b05      	ldr	r3, [sp, #20]
 800942a:	2b01      	cmp	r3, #1
 800942c:	dc18      	bgt.n	8009460 <_dtoa_r+0x910>
 800942e:	9b02      	ldr	r3, [sp, #8]
 8009430:	b9b3      	cbnz	r3, 8009460 <_dtoa_r+0x910>
 8009432:	9b03      	ldr	r3, [sp, #12]
 8009434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009438:	b9a3      	cbnz	r3, 8009464 <_dtoa_r+0x914>
 800943a:	9b03      	ldr	r3, [sp, #12]
 800943c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009440:	0d1b      	lsrs	r3, r3, #20
 8009442:	051b      	lsls	r3, r3, #20
 8009444:	b12b      	cbz	r3, 8009452 <_dtoa_r+0x902>
 8009446:	9b04      	ldr	r3, [sp, #16]
 8009448:	3301      	adds	r3, #1
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	f108 0801 	add.w	r8, r8, #1
 8009450:	2301      	movs	r3, #1
 8009452:	9306      	str	r3, [sp, #24]
 8009454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	f47f af74 	bne.w	8009344 <_dtoa_r+0x7f4>
 800945c:	2001      	movs	r0, #1
 800945e:	e779      	b.n	8009354 <_dtoa_r+0x804>
 8009460:	2300      	movs	r3, #0
 8009462:	e7f6      	b.n	8009452 <_dtoa_r+0x902>
 8009464:	9b02      	ldr	r3, [sp, #8]
 8009466:	e7f4      	b.n	8009452 <_dtoa_r+0x902>
 8009468:	d085      	beq.n	8009376 <_dtoa_r+0x826>
 800946a:	4618      	mov	r0, r3
 800946c:	301c      	adds	r0, #28
 800946e:	e77d      	b.n	800936c <_dtoa_r+0x81c>
 8009470:	40240000 	.word	0x40240000
 8009474:	9b01      	ldr	r3, [sp, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	dc38      	bgt.n	80094ec <_dtoa_r+0x99c>
 800947a:	9b05      	ldr	r3, [sp, #20]
 800947c:	2b02      	cmp	r3, #2
 800947e:	dd35      	ble.n	80094ec <_dtoa_r+0x99c>
 8009480:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009484:	f1b9 0f00 	cmp.w	r9, #0
 8009488:	d10d      	bne.n	80094a6 <_dtoa_r+0x956>
 800948a:	4631      	mov	r1, r6
 800948c:	464b      	mov	r3, r9
 800948e:	2205      	movs	r2, #5
 8009490:	4620      	mov	r0, r4
 8009492:	f000 f9c5 	bl	8009820 <__multadd>
 8009496:	4601      	mov	r1, r0
 8009498:	4606      	mov	r6, r0
 800949a:	4658      	mov	r0, fp
 800949c:	f000 fbdc 	bl	8009c58 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	f73f adbd 	bgt.w	8009020 <_dtoa_r+0x4d0>
 80094a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a8:	9d00      	ldr	r5, [sp, #0]
 80094aa:	ea6f 0a03 	mvn.w	sl, r3
 80094ae:	f04f 0800 	mov.w	r8, #0
 80094b2:	4631      	mov	r1, r6
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 f991 	bl	80097dc <_Bfree>
 80094ba:	2f00      	cmp	r7, #0
 80094bc:	f43f aeb4 	beq.w	8009228 <_dtoa_r+0x6d8>
 80094c0:	f1b8 0f00 	cmp.w	r8, #0
 80094c4:	d005      	beq.n	80094d2 <_dtoa_r+0x982>
 80094c6:	45b8      	cmp	r8, r7
 80094c8:	d003      	beq.n	80094d2 <_dtoa_r+0x982>
 80094ca:	4641      	mov	r1, r8
 80094cc:	4620      	mov	r0, r4
 80094ce:	f000 f985 	bl	80097dc <_Bfree>
 80094d2:	4639      	mov	r1, r7
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 f981 	bl	80097dc <_Bfree>
 80094da:	e6a5      	b.n	8009228 <_dtoa_r+0x6d8>
 80094dc:	2600      	movs	r6, #0
 80094de:	4637      	mov	r7, r6
 80094e0:	e7e1      	b.n	80094a6 <_dtoa_r+0x956>
 80094e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80094e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80094e8:	4637      	mov	r7, r6
 80094ea:	e599      	b.n	8009020 <_dtoa_r+0x4d0>
 80094ec:	9b08      	ldr	r3, [sp, #32]
 80094ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 80fd 	beq.w	80096f2 <_dtoa_r+0xba2>
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	dd05      	ble.n	8009508 <_dtoa_r+0x9b8>
 80094fc:	4639      	mov	r1, r7
 80094fe:	462a      	mov	r2, r5
 8009500:	4620      	mov	r0, r4
 8009502:	f000 fb3d 	bl	8009b80 <__lshift>
 8009506:	4607      	mov	r7, r0
 8009508:	9b06      	ldr	r3, [sp, #24]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d05c      	beq.n	80095c8 <_dtoa_r+0xa78>
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4620      	mov	r0, r4
 8009512:	f000 f923 	bl	800975c <_Balloc>
 8009516:	4605      	mov	r5, r0
 8009518:	b928      	cbnz	r0, 8009526 <_dtoa_r+0x9d6>
 800951a:	4b80      	ldr	r3, [pc, #512]	; (800971c <_dtoa_r+0xbcc>)
 800951c:	4602      	mov	r2, r0
 800951e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009522:	f7ff bb2e 	b.w	8008b82 <_dtoa_r+0x32>
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	3202      	adds	r2, #2
 800952a:	0092      	lsls	r2, r2, #2
 800952c:	f107 010c 	add.w	r1, r7, #12
 8009530:	300c      	adds	r0, #12
 8009532:	f000 f905 	bl	8009740 <memcpy>
 8009536:	2201      	movs	r2, #1
 8009538:	4629      	mov	r1, r5
 800953a:	4620      	mov	r0, r4
 800953c:	f000 fb20 	bl	8009b80 <__lshift>
 8009540:	9b00      	ldr	r3, [sp, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	9b00      	ldr	r3, [sp, #0]
 8009548:	444b      	add	r3, r9
 800954a:	9307      	str	r3, [sp, #28]
 800954c:	9b02      	ldr	r3, [sp, #8]
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	46b8      	mov	r8, r7
 8009554:	9306      	str	r3, [sp, #24]
 8009556:	4607      	mov	r7, r0
 8009558:	9b01      	ldr	r3, [sp, #4]
 800955a:	4631      	mov	r1, r6
 800955c:	3b01      	subs	r3, #1
 800955e:	4658      	mov	r0, fp
 8009560:	9302      	str	r3, [sp, #8]
 8009562:	f7ff fa67 	bl	8008a34 <quorem>
 8009566:	4603      	mov	r3, r0
 8009568:	3330      	adds	r3, #48	; 0x30
 800956a:	9004      	str	r0, [sp, #16]
 800956c:	4641      	mov	r1, r8
 800956e:	4658      	mov	r0, fp
 8009570:	9308      	str	r3, [sp, #32]
 8009572:	f000 fb71 	bl	8009c58 <__mcmp>
 8009576:	463a      	mov	r2, r7
 8009578:	4681      	mov	r9, r0
 800957a:	4631      	mov	r1, r6
 800957c:	4620      	mov	r0, r4
 800957e:	f000 fb87 	bl	8009c90 <__mdiff>
 8009582:	68c2      	ldr	r2, [r0, #12]
 8009584:	9b08      	ldr	r3, [sp, #32]
 8009586:	4605      	mov	r5, r0
 8009588:	bb02      	cbnz	r2, 80095cc <_dtoa_r+0xa7c>
 800958a:	4601      	mov	r1, r0
 800958c:	4658      	mov	r0, fp
 800958e:	f000 fb63 	bl	8009c58 <__mcmp>
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	4602      	mov	r2, r0
 8009596:	4629      	mov	r1, r5
 8009598:	4620      	mov	r0, r4
 800959a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800959e:	f000 f91d 	bl	80097dc <_Bfree>
 80095a2:	9b05      	ldr	r3, [sp, #20]
 80095a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095a6:	9d01      	ldr	r5, [sp, #4]
 80095a8:	ea43 0102 	orr.w	r1, r3, r2
 80095ac:	9b06      	ldr	r3, [sp, #24]
 80095ae:	430b      	orrs	r3, r1
 80095b0:	9b08      	ldr	r3, [sp, #32]
 80095b2:	d10d      	bne.n	80095d0 <_dtoa_r+0xa80>
 80095b4:	2b39      	cmp	r3, #57	; 0x39
 80095b6:	d029      	beq.n	800960c <_dtoa_r+0xabc>
 80095b8:	f1b9 0f00 	cmp.w	r9, #0
 80095bc:	dd01      	ble.n	80095c2 <_dtoa_r+0xa72>
 80095be:	9b04      	ldr	r3, [sp, #16]
 80095c0:	3331      	adds	r3, #49	; 0x31
 80095c2:	9a02      	ldr	r2, [sp, #8]
 80095c4:	7013      	strb	r3, [r2, #0]
 80095c6:	e774      	b.n	80094b2 <_dtoa_r+0x962>
 80095c8:	4638      	mov	r0, r7
 80095ca:	e7b9      	b.n	8009540 <_dtoa_r+0x9f0>
 80095cc:	2201      	movs	r2, #1
 80095ce:	e7e2      	b.n	8009596 <_dtoa_r+0xa46>
 80095d0:	f1b9 0f00 	cmp.w	r9, #0
 80095d4:	db06      	blt.n	80095e4 <_dtoa_r+0xa94>
 80095d6:	9905      	ldr	r1, [sp, #20]
 80095d8:	ea41 0909 	orr.w	r9, r1, r9
 80095dc:	9906      	ldr	r1, [sp, #24]
 80095de:	ea59 0101 	orrs.w	r1, r9, r1
 80095e2:	d120      	bne.n	8009626 <_dtoa_r+0xad6>
 80095e4:	2a00      	cmp	r2, #0
 80095e6:	ddec      	ble.n	80095c2 <_dtoa_r+0xa72>
 80095e8:	4659      	mov	r1, fp
 80095ea:	2201      	movs	r2, #1
 80095ec:	4620      	mov	r0, r4
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	f000 fac6 	bl	8009b80 <__lshift>
 80095f4:	4631      	mov	r1, r6
 80095f6:	4683      	mov	fp, r0
 80095f8:	f000 fb2e 	bl	8009c58 <__mcmp>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	9b01      	ldr	r3, [sp, #4]
 8009600:	dc02      	bgt.n	8009608 <_dtoa_r+0xab8>
 8009602:	d1de      	bne.n	80095c2 <_dtoa_r+0xa72>
 8009604:	07da      	lsls	r2, r3, #31
 8009606:	d5dc      	bpl.n	80095c2 <_dtoa_r+0xa72>
 8009608:	2b39      	cmp	r3, #57	; 0x39
 800960a:	d1d8      	bne.n	80095be <_dtoa_r+0xa6e>
 800960c:	9a02      	ldr	r2, [sp, #8]
 800960e:	2339      	movs	r3, #57	; 0x39
 8009610:	7013      	strb	r3, [r2, #0]
 8009612:	462b      	mov	r3, r5
 8009614:	461d      	mov	r5, r3
 8009616:	3b01      	subs	r3, #1
 8009618:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800961c:	2a39      	cmp	r2, #57	; 0x39
 800961e:	d050      	beq.n	80096c2 <_dtoa_r+0xb72>
 8009620:	3201      	adds	r2, #1
 8009622:	701a      	strb	r2, [r3, #0]
 8009624:	e745      	b.n	80094b2 <_dtoa_r+0x962>
 8009626:	2a00      	cmp	r2, #0
 8009628:	dd03      	ble.n	8009632 <_dtoa_r+0xae2>
 800962a:	2b39      	cmp	r3, #57	; 0x39
 800962c:	d0ee      	beq.n	800960c <_dtoa_r+0xabc>
 800962e:	3301      	adds	r3, #1
 8009630:	e7c7      	b.n	80095c2 <_dtoa_r+0xa72>
 8009632:	9a01      	ldr	r2, [sp, #4]
 8009634:	9907      	ldr	r1, [sp, #28]
 8009636:	f802 3c01 	strb.w	r3, [r2, #-1]
 800963a:	428a      	cmp	r2, r1
 800963c:	d02a      	beq.n	8009694 <_dtoa_r+0xb44>
 800963e:	4659      	mov	r1, fp
 8009640:	2300      	movs	r3, #0
 8009642:	220a      	movs	r2, #10
 8009644:	4620      	mov	r0, r4
 8009646:	f000 f8eb 	bl	8009820 <__multadd>
 800964a:	45b8      	cmp	r8, r7
 800964c:	4683      	mov	fp, r0
 800964e:	f04f 0300 	mov.w	r3, #0
 8009652:	f04f 020a 	mov.w	r2, #10
 8009656:	4641      	mov	r1, r8
 8009658:	4620      	mov	r0, r4
 800965a:	d107      	bne.n	800966c <_dtoa_r+0xb1c>
 800965c:	f000 f8e0 	bl	8009820 <__multadd>
 8009660:	4680      	mov	r8, r0
 8009662:	4607      	mov	r7, r0
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	3301      	adds	r3, #1
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	e775      	b.n	8009558 <_dtoa_r+0xa08>
 800966c:	f000 f8d8 	bl	8009820 <__multadd>
 8009670:	4639      	mov	r1, r7
 8009672:	4680      	mov	r8, r0
 8009674:	2300      	movs	r3, #0
 8009676:	220a      	movs	r2, #10
 8009678:	4620      	mov	r0, r4
 800967a:	f000 f8d1 	bl	8009820 <__multadd>
 800967e:	4607      	mov	r7, r0
 8009680:	e7f0      	b.n	8009664 <_dtoa_r+0xb14>
 8009682:	f1b9 0f00 	cmp.w	r9, #0
 8009686:	9a00      	ldr	r2, [sp, #0]
 8009688:	bfcc      	ite	gt
 800968a:	464d      	movgt	r5, r9
 800968c:	2501      	movle	r5, #1
 800968e:	4415      	add	r5, r2
 8009690:	f04f 0800 	mov.w	r8, #0
 8009694:	4659      	mov	r1, fp
 8009696:	2201      	movs	r2, #1
 8009698:	4620      	mov	r0, r4
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	f000 fa70 	bl	8009b80 <__lshift>
 80096a0:	4631      	mov	r1, r6
 80096a2:	4683      	mov	fp, r0
 80096a4:	f000 fad8 	bl	8009c58 <__mcmp>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	dcb2      	bgt.n	8009612 <_dtoa_r+0xac2>
 80096ac:	d102      	bne.n	80096b4 <_dtoa_r+0xb64>
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	07db      	lsls	r3, r3, #31
 80096b2:	d4ae      	bmi.n	8009612 <_dtoa_r+0xac2>
 80096b4:	462b      	mov	r3, r5
 80096b6:	461d      	mov	r5, r3
 80096b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096bc:	2a30      	cmp	r2, #48	; 0x30
 80096be:	d0fa      	beq.n	80096b6 <_dtoa_r+0xb66>
 80096c0:	e6f7      	b.n	80094b2 <_dtoa_r+0x962>
 80096c2:	9a00      	ldr	r2, [sp, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d1a5      	bne.n	8009614 <_dtoa_r+0xac4>
 80096c8:	f10a 0a01 	add.w	sl, sl, #1
 80096cc:	2331      	movs	r3, #49	; 0x31
 80096ce:	e779      	b.n	80095c4 <_dtoa_r+0xa74>
 80096d0:	4b13      	ldr	r3, [pc, #76]	; (8009720 <_dtoa_r+0xbd0>)
 80096d2:	f7ff baaf 	b.w	8008c34 <_dtoa_r+0xe4>
 80096d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f47f aa86 	bne.w	8008bea <_dtoa_r+0x9a>
 80096de:	4b11      	ldr	r3, [pc, #68]	; (8009724 <_dtoa_r+0xbd4>)
 80096e0:	f7ff baa8 	b.w	8008c34 <_dtoa_r+0xe4>
 80096e4:	f1b9 0f00 	cmp.w	r9, #0
 80096e8:	dc03      	bgt.n	80096f2 <_dtoa_r+0xba2>
 80096ea:	9b05      	ldr	r3, [sp, #20]
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	f73f aec9 	bgt.w	8009484 <_dtoa_r+0x934>
 80096f2:	9d00      	ldr	r5, [sp, #0]
 80096f4:	4631      	mov	r1, r6
 80096f6:	4658      	mov	r0, fp
 80096f8:	f7ff f99c 	bl	8008a34 <quorem>
 80096fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009700:	f805 3b01 	strb.w	r3, [r5], #1
 8009704:	9a00      	ldr	r2, [sp, #0]
 8009706:	1aaa      	subs	r2, r5, r2
 8009708:	4591      	cmp	r9, r2
 800970a:	ddba      	ble.n	8009682 <_dtoa_r+0xb32>
 800970c:	4659      	mov	r1, fp
 800970e:	2300      	movs	r3, #0
 8009710:	220a      	movs	r2, #10
 8009712:	4620      	mov	r0, r4
 8009714:	f000 f884 	bl	8009820 <__multadd>
 8009718:	4683      	mov	fp, r0
 800971a:	e7eb      	b.n	80096f4 <_dtoa_r+0xba4>
 800971c:	0800b203 	.word	0x0800b203
 8009720:	0800b15c 	.word	0x0800b15c
 8009724:	0800b180 	.word	0x0800b180

08009728 <_localeconv_r>:
 8009728:	4800      	ldr	r0, [pc, #0]	; (800972c <_localeconv_r+0x4>)
 800972a:	4770      	bx	lr
 800972c:	20000188 	.word	0x20000188

08009730 <malloc>:
 8009730:	4b02      	ldr	r3, [pc, #8]	; (800973c <malloc+0xc>)
 8009732:	4601      	mov	r1, r0
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	f000 bbef 	b.w	8009f18 <_malloc_r>
 800973a:	bf00      	nop
 800973c:	20000034 	.word	0x20000034

08009740 <memcpy>:
 8009740:	440a      	add	r2, r1
 8009742:	4291      	cmp	r1, r2
 8009744:	f100 33ff 	add.w	r3, r0, #4294967295
 8009748:	d100      	bne.n	800974c <memcpy+0xc>
 800974a:	4770      	bx	lr
 800974c:	b510      	push	{r4, lr}
 800974e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009756:	4291      	cmp	r1, r2
 8009758:	d1f9      	bne.n	800974e <memcpy+0xe>
 800975a:	bd10      	pop	{r4, pc}

0800975c <_Balloc>:
 800975c:	b570      	push	{r4, r5, r6, lr}
 800975e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009760:	4604      	mov	r4, r0
 8009762:	460d      	mov	r5, r1
 8009764:	b976      	cbnz	r6, 8009784 <_Balloc+0x28>
 8009766:	2010      	movs	r0, #16
 8009768:	f7ff ffe2 	bl	8009730 <malloc>
 800976c:	4602      	mov	r2, r0
 800976e:	6260      	str	r0, [r4, #36]	; 0x24
 8009770:	b920      	cbnz	r0, 800977c <_Balloc+0x20>
 8009772:	4b18      	ldr	r3, [pc, #96]	; (80097d4 <_Balloc+0x78>)
 8009774:	4818      	ldr	r0, [pc, #96]	; (80097d8 <_Balloc+0x7c>)
 8009776:	2166      	movs	r1, #102	; 0x66
 8009778:	f000 fd94 	bl	800a2a4 <__assert_func>
 800977c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009780:	6006      	str	r6, [r0, #0]
 8009782:	60c6      	str	r6, [r0, #12]
 8009784:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009786:	68f3      	ldr	r3, [r6, #12]
 8009788:	b183      	cbz	r3, 80097ac <_Balloc+0x50>
 800978a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009792:	b9b8      	cbnz	r0, 80097c4 <_Balloc+0x68>
 8009794:	2101      	movs	r1, #1
 8009796:	fa01 f605 	lsl.w	r6, r1, r5
 800979a:	1d72      	adds	r2, r6, #5
 800979c:	0092      	lsls	r2, r2, #2
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 fb5a 	bl	8009e58 <_calloc_r>
 80097a4:	b160      	cbz	r0, 80097c0 <_Balloc+0x64>
 80097a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097aa:	e00e      	b.n	80097ca <_Balloc+0x6e>
 80097ac:	2221      	movs	r2, #33	; 0x21
 80097ae:	2104      	movs	r1, #4
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fb51 	bl	8009e58 <_calloc_r>
 80097b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097b8:	60f0      	str	r0, [r6, #12]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e4      	bne.n	800978a <_Balloc+0x2e>
 80097c0:	2000      	movs	r0, #0
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	6802      	ldr	r2, [r0, #0]
 80097c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097ca:	2300      	movs	r3, #0
 80097cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097d0:	e7f7      	b.n	80097c2 <_Balloc+0x66>
 80097d2:	bf00      	nop
 80097d4:	0800b18d 	.word	0x0800b18d
 80097d8:	0800b214 	.word	0x0800b214

080097dc <_Bfree>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097e0:	4605      	mov	r5, r0
 80097e2:	460c      	mov	r4, r1
 80097e4:	b976      	cbnz	r6, 8009804 <_Bfree+0x28>
 80097e6:	2010      	movs	r0, #16
 80097e8:	f7ff ffa2 	bl	8009730 <malloc>
 80097ec:	4602      	mov	r2, r0
 80097ee:	6268      	str	r0, [r5, #36]	; 0x24
 80097f0:	b920      	cbnz	r0, 80097fc <_Bfree+0x20>
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <_Bfree+0x3c>)
 80097f4:	4809      	ldr	r0, [pc, #36]	; (800981c <_Bfree+0x40>)
 80097f6:	218a      	movs	r1, #138	; 0x8a
 80097f8:	f000 fd54 	bl	800a2a4 <__assert_func>
 80097fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009800:	6006      	str	r6, [r0, #0]
 8009802:	60c6      	str	r6, [r0, #12]
 8009804:	b13c      	cbz	r4, 8009816 <_Bfree+0x3a>
 8009806:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009808:	6862      	ldr	r2, [r4, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009810:	6021      	str	r1, [r4, #0]
 8009812:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	0800b18d 	.word	0x0800b18d
 800981c:	0800b214 	.word	0x0800b214

08009820 <__multadd>:
 8009820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009824:	690e      	ldr	r6, [r1, #16]
 8009826:	4607      	mov	r7, r0
 8009828:	4698      	mov	r8, r3
 800982a:	460c      	mov	r4, r1
 800982c:	f101 0014 	add.w	r0, r1, #20
 8009830:	2300      	movs	r3, #0
 8009832:	6805      	ldr	r5, [r0, #0]
 8009834:	b2a9      	uxth	r1, r5
 8009836:	fb02 8101 	mla	r1, r2, r1, r8
 800983a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800983e:	0c2d      	lsrs	r5, r5, #16
 8009840:	fb02 c505 	mla	r5, r2, r5, ip
 8009844:	b289      	uxth	r1, r1
 8009846:	3301      	adds	r3, #1
 8009848:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800984c:	429e      	cmp	r6, r3
 800984e:	f840 1b04 	str.w	r1, [r0], #4
 8009852:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009856:	dcec      	bgt.n	8009832 <__multadd+0x12>
 8009858:	f1b8 0f00 	cmp.w	r8, #0
 800985c:	d022      	beq.n	80098a4 <__multadd+0x84>
 800985e:	68a3      	ldr	r3, [r4, #8]
 8009860:	42b3      	cmp	r3, r6
 8009862:	dc19      	bgt.n	8009898 <__multadd+0x78>
 8009864:	6861      	ldr	r1, [r4, #4]
 8009866:	4638      	mov	r0, r7
 8009868:	3101      	adds	r1, #1
 800986a:	f7ff ff77 	bl	800975c <_Balloc>
 800986e:	4605      	mov	r5, r0
 8009870:	b928      	cbnz	r0, 800987e <__multadd+0x5e>
 8009872:	4602      	mov	r2, r0
 8009874:	4b0d      	ldr	r3, [pc, #52]	; (80098ac <__multadd+0x8c>)
 8009876:	480e      	ldr	r0, [pc, #56]	; (80098b0 <__multadd+0x90>)
 8009878:	21b5      	movs	r1, #181	; 0xb5
 800987a:	f000 fd13 	bl	800a2a4 <__assert_func>
 800987e:	6922      	ldr	r2, [r4, #16]
 8009880:	3202      	adds	r2, #2
 8009882:	f104 010c 	add.w	r1, r4, #12
 8009886:	0092      	lsls	r2, r2, #2
 8009888:	300c      	adds	r0, #12
 800988a:	f7ff ff59 	bl	8009740 <memcpy>
 800988e:	4621      	mov	r1, r4
 8009890:	4638      	mov	r0, r7
 8009892:	f7ff ffa3 	bl	80097dc <_Bfree>
 8009896:	462c      	mov	r4, r5
 8009898:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800989c:	3601      	adds	r6, #1
 800989e:	f8c3 8014 	str.w	r8, [r3, #20]
 80098a2:	6126      	str	r6, [r4, #16]
 80098a4:	4620      	mov	r0, r4
 80098a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098aa:	bf00      	nop
 80098ac:	0800b203 	.word	0x0800b203
 80098b0:	0800b214 	.word	0x0800b214

080098b4 <__hi0bits>:
 80098b4:	0c03      	lsrs	r3, r0, #16
 80098b6:	041b      	lsls	r3, r3, #16
 80098b8:	b9d3      	cbnz	r3, 80098f0 <__hi0bits+0x3c>
 80098ba:	0400      	lsls	r0, r0, #16
 80098bc:	2310      	movs	r3, #16
 80098be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098c2:	bf04      	itt	eq
 80098c4:	0200      	lsleq	r0, r0, #8
 80098c6:	3308      	addeq	r3, #8
 80098c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80098cc:	bf04      	itt	eq
 80098ce:	0100      	lsleq	r0, r0, #4
 80098d0:	3304      	addeq	r3, #4
 80098d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80098d6:	bf04      	itt	eq
 80098d8:	0080      	lsleq	r0, r0, #2
 80098da:	3302      	addeq	r3, #2
 80098dc:	2800      	cmp	r0, #0
 80098de:	db05      	blt.n	80098ec <__hi0bits+0x38>
 80098e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80098e4:	f103 0301 	add.w	r3, r3, #1
 80098e8:	bf08      	it	eq
 80098ea:	2320      	moveq	r3, #32
 80098ec:	4618      	mov	r0, r3
 80098ee:	4770      	bx	lr
 80098f0:	2300      	movs	r3, #0
 80098f2:	e7e4      	b.n	80098be <__hi0bits+0xa>

080098f4 <__lo0bits>:
 80098f4:	6803      	ldr	r3, [r0, #0]
 80098f6:	f013 0207 	ands.w	r2, r3, #7
 80098fa:	4601      	mov	r1, r0
 80098fc:	d00b      	beq.n	8009916 <__lo0bits+0x22>
 80098fe:	07da      	lsls	r2, r3, #31
 8009900:	d424      	bmi.n	800994c <__lo0bits+0x58>
 8009902:	0798      	lsls	r0, r3, #30
 8009904:	bf49      	itett	mi
 8009906:	085b      	lsrmi	r3, r3, #1
 8009908:	089b      	lsrpl	r3, r3, #2
 800990a:	2001      	movmi	r0, #1
 800990c:	600b      	strmi	r3, [r1, #0]
 800990e:	bf5c      	itt	pl
 8009910:	600b      	strpl	r3, [r1, #0]
 8009912:	2002      	movpl	r0, #2
 8009914:	4770      	bx	lr
 8009916:	b298      	uxth	r0, r3
 8009918:	b9b0      	cbnz	r0, 8009948 <__lo0bits+0x54>
 800991a:	0c1b      	lsrs	r3, r3, #16
 800991c:	2010      	movs	r0, #16
 800991e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009922:	bf04      	itt	eq
 8009924:	0a1b      	lsreq	r3, r3, #8
 8009926:	3008      	addeq	r0, #8
 8009928:	071a      	lsls	r2, r3, #28
 800992a:	bf04      	itt	eq
 800992c:	091b      	lsreq	r3, r3, #4
 800992e:	3004      	addeq	r0, #4
 8009930:	079a      	lsls	r2, r3, #30
 8009932:	bf04      	itt	eq
 8009934:	089b      	lsreq	r3, r3, #2
 8009936:	3002      	addeq	r0, #2
 8009938:	07da      	lsls	r2, r3, #31
 800993a:	d403      	bmi.n	8009944 <__lo0bits+0x50>
 800993c:	085b      	lsrs	r3, r3, #1
 800993e:	f100 0001 	add.w	r0, r0, #1
 8009942:	d005      	beq.n	8009950 <__lo0bits+0x5c>
 8009944:	600b      	str	r3, [r1, #0]
 8009946:	4770      	bx	lr
 8009948:	4610      	mov	r0, r2
 800994a:	e7e8      	b.n	800991e <__lo0bits+0x2a>
 800994c:	2000      	movs	r0, #0
 800994e:	4770      	bx	lr
 8009950:	2020      	movs	r0, #32
 8009952:	4770      	bx	lr

08009954 <__i2b>:
 8009954:	b510      	push	{r4, lr}
 8009956:	460c      	mov	r4, r1
 8009958:	2101      	movs	r1, #1
 800995a:	f7ff feff 	bl	800975c <_Balloc>
 800995e:	4602      	mov	r2, r0
 8009960:	b928      	cbnz	r0, 800996e <__i2b+0x1a>
 8009962:	4b05      	ldr	r3, [pc, #20]	; (8009978 <__i2b+0x24>)
 8009964:	4805      	ldr	r0, [pc, #20]	; (800997c <__i2b+0x28>)
 8009966:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800996a:	f000 fc9b 	bl	800a2a4 <__assert_func>
 800996e:	2301      	movs	r3, #1
 8009970:	6144      	str	r4, [r0, #20]
 8009972:	6103      	str	r3, [r0, #16]
 8009974:	bd10      	pop	{r4, pc}
 8009976:	bf00      	nop
 8009978:	0800b203 	.word	0x0800b203
 800997c:	0800b214 	.word	0x0800b214

08009980 <__multiply>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	4614      	mov	r4, r2
 8009986:	690a      	ldr	r2, [r1, #16]
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	429a      	cmp	r2, r3
 800998c:	bfb8      	it	lt
 800998e:	460b      	movlt	r3, r1
 8009990:	460d      	mov	r5, r1
 8009992:	bfbc      	itt	lt
 8009994:	4625      	movlt	r5, r4
 8009996:	461c      	movlt	r4, r3
 8009998:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800999c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099a0:	68ab      	ldr	r3, [r5, #8]
 80099a2:	6869      	ldr	r1, [r5, #4]
 80099a4:	eb0a 0709 	add.w	r7, sl, r9
 80099a8:	42bb      	cmp	r3, r7
 80099aa:	b085      	sub	sp, #20
 80099ac:	bfb8      	it	lt
 80099ae:	3101      	addlt	r1, #1
 80099b0:	f7ff fed4 	bl	800975c <_Balloc>
 80099b4:	b930      	cbnz	r0, 80099c4 <__multiply+0x44>
 80099b6:	4602      	mov	r2, r0
 80099b8:	4b42      	ldr	r3, [pc, #264]	; (8009ac4 <__multiply+0x144>)
 80099ba:	4843      	ldr	r0, [pc, #268]	; (8009ac8 <__multiply+0x148>)
 80099bc:	f240 115d 	movw	r1, #349	; 0x15d
 80099c0:	f000 fc70 	bl	800a2a4 <__assert_func>
 80099c4:	f100 0614 	add.w	r6, r0, #20
 80099c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80099cc:	4633      	mov	r3, r6
 80099ce:	2200      	movs	r2, #0
 80099d0:	4543      	cmp	r3, r8
 80099d2:	d31e      	bcc.n	8009a12 <__multiply+0x92>
 80099d4:	f105 0c14 	add.w	ip, r5, #20
 80099d8:	f104 0314 	add.w	r3, r4, #20
 80099dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80099e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80099e4:	9202      	str	r2, [sp, #8]
 80099e6:	ebac 0205 	sub.w	r2, ip, r5
 80099ea:	3a15      	subs	r2, #21
 80099ec:	f022 0203 	bic.w	r2, r2, #3
 80099f0:	3204      	adds	r2, #4
 80099f2:	f105 0115 	add.w	r1, r5, #21
 80099f6:	458c      	cmp	ip, r1
 80099f8:	bf38      	it	cc
 80099fa:	2204      	movcc	r2, #4
 80099fc:	9201      	str	r2, [sp, #4]
 80099fe:	9a02      	ldr	r2, [sp, #8]
 8009a00:	9303      	str	r3, [sp, #12]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d808      	bhi.n	8009a18 <__multiply+0x98>
 8009a06:	2f00      	cmp	r7, #0
 8009a08:	dc55      	bgt.n	8009ab6 <__multiply+0x136>
 8009a0a:	6107      	str	r7, [r0, #16]
 8009a0c:	b005      	add	sp, #20
 8009a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a12:	f843 2b04 	str.w	r2, [r3], #4
 8009a16:	e7db      	b.n	80099d0 <__multiply+0x50>
 8009a18:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a1c:	f1ba 0f00 	cmp.w	sl, #0
 8009a20:	d020      	beq.n	8009a64 <__multiply+0xe4>
 8009a22:	f105 0e14 	add.w	lr, r5, #20
 8009a26:	46b1      	mov	r9, r6
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009a2e:	f8d9 b000 	ldr.w	fp, [r9]
 8009a32:	b2a1      	uxth	r1, r4
 8009a34:	fa1f fb8b 	uxth.w	fp, fp
 8009a38:	fb0a b101 	mla	r1, sl, r1, fp
 8009a3c:	4411      	add	r1, r2
 8009a3e:	f8d9 2000 	ldr.w	r2, [r9]
 8009a42:	0c24      	lsrs	r4, r4, #16
 8009a44:	0c12      	lsrs	r2, r2, #16
 8009a46:	fb0a 2404 	mla	r4, sl, r4, r2
 8009a4a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009a4e:	b289      	uxth	r1, r1
 8009a50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a54:	45f4      	cmp	ip, lr
 8009a56:	f849 1b04 	str.w	r1, [r9], #4
 8009a5a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009a5e:	d8e4      	bhi.n	8009a2a <__multiply+0xaa>
 8009a60:	9901      	ldr	r1, [sp, #4]
 8009a62:	5072      	str	r2, [r6, r1]
 8009a64:	9a03      	ldr	r2, [sp, #12]
 8009a66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	f1b9 0f00 	cmp.w	r9, #0
 8009a70:	d01f      	beq.n	8009ab2 <__multiply+0x132>
 8009a72:	6834      	ldr	r4, [r6, #0]
 8009a74:	f105 0114 	add.w	r1, r5, #20
 8009a78:	46b6      	mov	lr, r6
 8009a7a:	f04f 0a00 	mov.w	sl, #0
 8009a7e:	880a      	ldrh	r2, [r1, #0]
 8009a80:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a84:	fb09 b202 	mla	r2, r9, r2, fp
 8009a88:	4492      	add	sl, r2
 8009a8a:	b2a4      	uxth	r4, r4
 8009a8c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a90:	f84e 4b04 	str.w	r4, [lr], #4
 8009a94:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a98:	f8be 2000 	ldrh.w	r2, [lr]
 8009a9c:	0c24      	lsrs	r4, r4, #16
 8009a9e:	fb09 2404 	mla	r4, r9, r4, r2
 8009aa2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009aa6:	458c      	cmp	ip, r1
 8009aa8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009aac:	d8e7      	bhi.n	8009a7e <__multiply+0xfe>
 8009aae:	9a01      	ldr	r2, [sp, #4]
 8009ab0:	50b4      	str	r4, [r6, r2]
 8009ab2:	3604      	adds	r6, #4
 8009ab4:	e7a3      	b.n	80099fe <__multiply+0x7e>
 8009ab6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1a5      	bne.n	8009a0a <__multiply+0x8a>
 8009abe:	3f01      	subs	r7, #1
 8009ac0:	e7a1      	b.n	8009a06 <__multiply+0x86>
 8009ac2:	bf00      	nop
 8009ac4:	0800b203 	.word	0x0800b203
 8009ac8:	0800b214 	.word	0x0800b214

08009acc <__pow5mult>:
 8009acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad0:	4615      	mov	r5, r2
 8009ad2:	f012 0203 	ands.w	r2, r2, #3
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460f      	mov	r7, r1
 8009ada:	d007      	beq.n	8009aec <__pow5mult+0x20>
 8009adc:	4c25      	ldr	r4, [pc, #148]	; (8009b74 <__pow5mult+0xa8>)
 8009ade:	3a01      	subs	r2, #1
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ae6:	f7ff fe9b 	bl	8009820 <__multadd>
 8009aea:	4607      	mov	r7, r0
 8009aec:	10ad      	asrs	r5, r5, #2
 8009aee:	d03d      	beq.n	8009b6c <__pow5mult+0xa0>
 8009af0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009af2:	b97c      	cbnz	r4, 8009b14 <__pow5mult+0x48>
 8009af4:	2010      	movs	r0, #16
 8009af6:	f7ff fe1b 	bl	8009730 <malloc>
 8009afa:	4602      	mov	r2, r0
 8009afc:	6270      	str	r0, [r6, #36]	; 0x24
 8009afe:	b928      	cbnz	r0, 8009b0c <__pow5mult+0x40>
 8009b00:	4b1d      	ldr	r3, [pc, #116]	; (8009b78 <__pow5mult+0xac>)
 8009b02:	481e      	ldr	r0, [pc, #120]	; (8009b7c <__pow5mult+0xb0>)
 8009b04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b08:	f000 fbcc 	bl	800a2a4 <__assert_func>
 8009b0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b10:	6004      	str	r4, [r0, #0]
 8009b12:	60c4      	str	r4, [r0, #12]
 8009b14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b1c:	b94c      	cbnz	r4, 8009b32 <__pow5mult+0x66>
 8009b1e:	f240 2171 	movw	r1, #625	; 0x271
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7ff ff16 	bl	8009954 <__i2b>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b2e:	4604      	mov	r4, r0
 8009b30:	6003      	str	r3, [r0, #0]
 8009b32:	f04f 0900 	mov.w	r9, #0
 8009b36:	07eb      	lsls	r3, r5, #31
 8009b38:	d50a      	bpl.n	8009b50 <__pow5mult+0x84>
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	4622      	mov	r2, r4
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f7ff ff1e 	bl	8009980 <__multiply>
 8009b44:	4639      	mov	r1, r7
 8009b46:	4680      	mov	r8, r0
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7ff fe47 	bl	80097dc <_Bfree>
 8009b4e:	4647      	mov	r7, r8
 8009b50:	106d      	asrs	r5, r5, #1
 8009b52:	d00b      	beq.n	8009b6c <__pow5mult+0xa0>
 8009b54:	6820      	ldr	r0, [r4, #0]
 8009b56:	b938      	cbnz	r0, 8009b68 <__pow5mult+0x9c>
 8009b58:	4622      	mov	r2, r4
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f7ff ff0f 	bl	8009980 <__multiply>
 8009b62:	6020      	str	r0, [r4, #0]
 8009b64:	f8c0 9000 	str.w	r9, [r0]
 8009b68:	4604      	mov	r4, r0
 8009b6a:	e7e4      	b.n	8009b36 <__pow5mult+0x6a>
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b72:	bf00      	nop
 8009b74:	0800b368 	.word	0x0800b368
 8009b78:	0800b18d 	.word	0x0800b18d
 8009b7c:	0800b214 	.word	0x0800b214

08009b80 <__lshift>:
 8009b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b84:	460c      	mov	r4, r1
 8009b86:	6849      	ldr	r1, [r1, #4]
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	4607      	mov	r7, r0
 8009b92:	4691      	mov	r9, r2
 8009b94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b98:	f108 0601 	add.w	r6, r8, #1
 8009b9c:	42b3      	cmp	r3, r6
 8009b9e:	db0b      	blt.n	8009bb8 <__lshift+0x38>
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f7ff fddb 	bl	800975c <_Balloc>
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	b948      	cbnz	r0, 8009bbe <__lshift+0x3e>
 8009baa:	4602      	mov	r2, r0
 8009bac:	4b28      	ldr	r3, [pc, #160]	; (8009c50 <__lshift+0xd0>)
 8009bae:	4829      	ldr	r0, [pc, #164]	; (8009c54 <__lshift+0xd4>)
 8009bb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009bb4:	f000 fb76 	bl	800a2a4 <__assert_func>
 8009bb8:	3101      	adds	r1, #1
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	e7ee      	b.n	8009b9c <__lshift+0x1c>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f100 0114 	add.w	r1, r0, #20
 8009bc4:	f100 0210 	add.w	r2, r0, #16
 8009bc8:	4618      	mov	r0, r3
 8009bca:	4553      	cmp	r3, sl
 8009bcc:	db33      	blt.n	8009c36 <__lshift+0xb6>
 8009bce:	6920      	ldr	r0, [r4, #16]
 8009bd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bd4:	f104 0314 	add.w	r3, r4, #20
 8009bd8:	f019 091f 	ands.w	r9, r9, #31
 8009bdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009be0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009be4:	d02b      	beq.n	8009c3e <__lshift+0xbe>
 8009be6:	f1c9 0e20 	rsb	lr, r9, #32
 8009bea:	468a      	mov	sl, r1
 8009bec:	2200      	movs	r2, #0
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	fa00 f009 	lsl.w	r0, r0, r9
 8009bf4:	4302      	orrs	r2, r0
 8009bf6:	f84a 2b04 	str.w	r2, [sl], #4
 8009bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bfe:	459c      	cmp	ip, r3
 8009c00:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c04:	d8f3      	bhi.n	8009bee <__lshift+0x6e>
 8009c06:	ebac 0304 	sub.w	r3, ip, r4
 8009c0a:	3b15      	subs	r3, #21
 8009c0c:	f023 0303 	bic.w	r3, r3, #3
 8009c10:	3304      	adds	r3, #4
 8009c12:	f104 0015 	add.w	r0, r4, #21
 8009c16:	4584      	cmp	ip, r0
 8009c18:	bf38      	it	cc
 8009c1a:	2304      	movcc	r3, #4
 8009c1c:	50ca      	str	r2, [r1, r3]
 8009c1e:	b10a      	cbz	r2, 8009c24 <__lshift+0xa4>
 8009c20:	f108 0602 	add.w	r6, r8, #2
 8009c24:	3e01      	subs	r6, #1
 8009c26:	4638      	mov	r0, r7
 8009c28:	612e      	str	r6, [r5, #16]
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	f7ff fdd6 	bl	80097dc <_Bfree>
 8009c30:	4628      	mov	r0, r5
 8009c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c36:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	e7c5      	b.n	8009bca <__lshift+0x4a>
 8009c3e:	3904      	subs	r1, #4
 8009c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c44:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c48:	459c      	cmp	ip, r3
 8009c4a:	d8f9      	bhi.n	8009c40 <__lshift+0xc0>
 8009c4c:	e7ea      	b.n	8009c24 <__lshift+0xa4>
 8009c4e:	bf00      	nop
 8009c50:	0800b203 	.word	0x0800b203
 8009c54:	0800b214 	.word	0x0800b214

08009c58 <__mcmp>:
 8009c58:	b530      	push	{r4, r5, lr}
 8009c5a:	6902      	ldr	r2, [r0, #16]
 8009c5c:	690c      	ldr	r4, [r1, #16]
 8009c5e:	1b12      	subs	r2, r2, r4
 8009c60:	d10e      	bne.n	8009c80 <__mcmp+0x28>
 8009c62:	f100 0314 	add.w	r3, r0, #20
 8009c66:	3114      	adds	r1, #20
 8009c68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c78:	42a5      	cmp	r5, r4
 8009c7a:	d003      	beq.n	8009c84 <__mcmp+0x2c>
 8009c7c:	d305      	bcc.n	8009c8a <__mcmp+0x32>
 8009c7e:	2201      	movs	r2, #1
 8009c80:	4610      	mov	r0, r2
 8009c82:	bd30      	pop	{r4, r5, pc}
 8009c84:	4283      	cmp	r3, r0
 8009c86:	d3f3      	bcc.n	8009c70 <__mcmp+0x18>
 8009c88:	e7fa      	b.n	8009c80 <__mcmp+0x28>
 8009c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8e:	e7f7      	b.n	8009c80 <__mcmp+0x28>

08009c90 <__mdiff>:
 8009c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	460c      	mov	r4, r1
 8009c96:	4606      	mov	r6, r0
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	4617      	mov	r7, r2
 8009c9e:	f7ff ffdb 	bl	8009c58 <__mcmp>
 8009ca2:	1e05      	subs	r5, r0, #0
 8009ca4:	d110      	bne.n	8009cc8 <__mdiff+0x38>
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7ff fd57 	bl	800975c <_Balloc>
 8009cae:	b930      	cbnz	r0, 8009cbe <__mdiff+0x2e>
 8009cb0:	4b39      	ldr	r3, [pc, #228]	; (8009d98 <__mdiff+0x108>)
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f240 2132 	movw	r1, #562	; 0x232
 8009cb8:	4838      	ldr	r0, [pc, #224]	; (8009d9c <__mdiff+0x10c>)
 8009cba:	f000 faf3 	bl	800a2a4 <__assert_func>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc8:	bfa4      	itt	ge
 8009cca:	463b      	movge	r3, r7
 8009ccc:	4627      	movge	r7, r4
 8009cce:	4630      	mov	r0, r6
 8009cd0:	6879      	ldr	r1, [r7, #4]
 8009cd2:	bfa6      	itte	ge
 8009cd4:	461c      	movge	r4, r3
 8009cd6:	2500      	movge	r5, #0
 8009cd8:	2501      	movlt	r5, #1
 8009cda:	f7ff fd3f 	bl	800975c <_Balloc>
 8009cde:	b920      	cbnz	r0, 8009cea <__mdiff+0x5a>
 8009ce0:	4b2d      	ldr	r3, [pc, #180]	; (8009d98 <__mdiff+0x108>)
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ce8:	e7e6      	b.n	8009cb8 <__mdiff+0x28>
 8009cea:	693e      	ldr	r6, [r7, #16]
 8009cec:	60c5      	str	r5, [r0, #12]
 8009cee:	6925      	ldr	r5, [r4, #16]
 8009cf0:	f107 0114 	add.w	r1, r7, #20
 8009cf4:	f104 0914 	add.w	r9, r4, #20
 8009cf8:	f100 0e14 	add.w	lr, r0, #20
 8009cfc:	f107 0210 	add.w	r2, r7, #16
 8009d00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009d04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009d08:	46f2      	mov	sl, lr
 8009d0a:	2700      	movs	r7, #0
 8009d0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009d14:	fa1f f883 	uxth.w	r8, r3
 8009d18:	fa17 f78b 	uxtah	r7, r7, fp
 8009d1c:	0c1b      	lsrs	r3, r3, #16
 8009d1e:	eba7 0808 	sub.w	r8, r7, r8
 8009d22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d2a:	fa1f f888 	uxth.w	r8, r8
 8009d2e:	141f      	asrs	r7, r3, #16
 8009d30:	454d      	cmp	r5, r9
 8009d32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d36:	f84a 3b04 	str.w	r3, [sl], #4
 8009d3a:	d8e7      	bhi.n	8009d0c <__mdiff+0x7c>
 8009d3c:	1b2b      	subs	r3, r5, r4
 8009d3e:	3b15      	subs	r3, #21
 8009d40:	f023 0303 	bic.w	r3, r3, #3
 8009d44:	3304      	adds	r3, #4
 8009d46:	3415      	adds	r4, #21
 8009d48:	42a5      	cmp	r5, r4
 8009d4a:	bf38      	it	cc
 8009d4c:	2304      	movcc	r3, #4
 8009d4e:	4419      	add	r1, r3
 8009d50:	4473      	add	r3, lr
 8009d52:	469e      	mov	lr, r3
 8009d54:	460d      	mov	r5, r1
 8009d56:	4565      	cmp	r5, ip
 8009d58:	d30e      	bcc.n	8009d78 <__mdiff+0xe8>
 8009d5a:	f10c 0203 	add.w	r2, ip, #3
 8009d5e:	1a52      	subs	r2, r2, r1
 8009d60:	f022 0203 	bic.w	r2, r2, #3
 8009d64:	3903      	subs	r1, #3
 8009d66:	458c      	cmp	ip, r1
 8009d68:	bf38      	it	cc
 8009d6a:	2200      	movcc	r2, #0
 8009d6c:	441a      	add	r2, r3
 8009d6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d72:	b17b      	cbz	r3, 8009d94 <__mdiff+0x104>
 8009d74:	6106      	str	r6, [r0, #16]
 8009d76:	e7a5      	b.n	8009cc4 <__mdiff+0x34>
 8009d78:	f855 8b04 	ldr.w	r8, [r5], #4
 8009d7c:	fa17 f488 	uxtah	r4, r7, r8
 8009d80:	1422      	asrs	r2, r4, #16
 8009d82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009d86:	b2a4      	uxth	r4, r4
 8009d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009d8c:	f84e 4b04 	str.w	r4, [lr], #4
 8009d90:	1417      	asrs	r7, r2, #16
 8009d92:	e7e0      	b.n	8009d56 <__mdiff+0xc6>
 8009d94:	3e01      	subs	r6, #1
 8009d96:	e7ea      	b.n	8009d6e <__mdiff+0xde>
 8009d98:	0800b203 	.word	0x0800b203
 8009d9c:	0800b214 	.word	0x0800b214

08009da0 <__d2b>:
 8009da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009da4:	4689      	mov	r9, r1
 8009da6:	2101      	movs	r1, #1
 8009da8:	ec57 6b10 	vmov	r6, r7, d0
 8009dac:	4690      	mov	r8, r2
 8009dae:	f7ff fcd5 	bl	800975c <_Balloc>
 8009db2:	4604      	mov	r4, r0
 8009db4:	b930      	cbnz	r0, 8009dc4 <__d2b+0x24>
 8009db6:	4602      	mov	r2, r0
 8009db8:	4b25      	ldr	r3, [pc, #148]	; (8009e50 <__d2b+0xb0>)
 8009dba:	4826      	ldr	r0, [pc, #152]	; (8009e54 <__d2b+0xb4>)
 8009dbc:	f240 310a 	movw	r1, #778	; 0x30a
 8009dc0:	f000 fa70 	bl	800a2a4 <__assert_func>
 8009dc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dcc:	bb35      	cbnz	r5, 8009e1c <__d2b+0x7c>
 8009dce:	2e00      	cmp	r6, #0
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	d028      	beq.n	8009e26 <__d2b+0x86>
 8009dd4:	4668      	mov	r0, sp
 8009dd6:	9600      	str	r6, [sp, #0]
 8009dd8:	f7ff fd8c 	bl	80098f4 <__lo0bits>
 8009ddc:	9900      	ldr	r1, [sp, #0]
 8009dde:	b300      	cbz	r0, 8009e22 <__d2b+0x82>
 8009de0:	9a01      	ldr	r2, [sp, #4]
 8009de2:	f1c0 0320 	rsb	r3, r0, #32
 8009de6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dea:	430b      	orrs	r3, r1
 8009dec:	40c2      	lsrs	r2, r0
 8009dee:	6163      	str	r3, [r4, #20]
 8009df0:	9201      	str	r2, [sp, #4]
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	61a3      	str	r3, [r4, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	bf14      	ite	ne
 8009dfa:	2202      	movne	r2, #2
 8009dfc:	2201      	moveq	r2, #1
 8009dfe:	6122      	str	r2, [r4, #16]
 8009e00:	b1d5      	cbz	r5, 8009e38 <__d2b+0x98>
 8009e02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e06:	4405      	add	r5, r0
 8009e08:	f8c9 5000 	str.w	r5, [r9]
 8009e0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e10:	f8c8 0000 	str.w	r0, [r8]
 8009e14:	4620      	mov	r0, r4
 8009e16:	b003      	add	sp, #12
 8009e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e20:	e7d5      	b.n	8009dce <__d2b+0x2e>
 8009e22:	6161      	str	r1, [r4, #20]
 8009e24:	e7e5      	b.n	8009df2 <__d2b+0x52>
 8009e26:	a801      	add	r0, sp, #4
 8009e28:	f7ff fd64 	bl	80098f4 <__lo0bits>
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	6163      	str	r3, [r4, #20]
 8009e30:	2201      	movs	r2, #1
 8009e32:	6122      	str	r2, [r4, #16]
 8009e34:	3020      	adds	r0, #32
 8009e36:	e7e3      	b.n	8009e00 <__d2b+0x60>
 8009e38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e40:	f8c9 0000 	str.w	r0, [r9]
 8009e44:	6918      	ldr	r0, [r3, #16]
 8009e46:	f7ff fd35 	bl	80098b4 <__hi0bits>
 8009e4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e4e:	e7df      	b.n	8009e10 <__d2b+0x70>
 8009e50:	0800b203 	.word	0x0800b203
 8009e54:	0800b214 	.word	0x0800b214

08009e58 <_calloc_r>:
 8009e58:	b513      	push	{r0, r1, r4, lr}
 8009e5a:	434a      	muls	r2, r1
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	9201      	str	r2, [sp, #4]
 8009e60:	f000 f85a 	bl	8009f18 <_malloc_r>
 8009e64:	4604      	mov	r4, r0
 8009e66:	b118      	cbz	r0, 8009e70 <_calloc_r+0x18>
 8009e68:	9a01      	ldr	r2, [sp, #4]
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	f7fe f950 	bl	8008110 <memset>
 8009e70:	4620      	mov	r0, r4
 8009e72:	b002      	add	sp, #8
 8009e74:	bd10      	pop	{r4, pc}
	...

08009e78 <_free_r>:
 8009e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e7a:	2900      	cmp	r1, #0
 8009e7c:	d048      	beq.n	8009f10 <_free_r+0x98>
 8009e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e82:	9001      	str	r0, [sp, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f1a1 0404 	sub.w	r4, r1, #4
 8009e8a:	bfb8      	it	lt
 8009e8c:	18e4      	addlt	r4, r4, r3
 8009e8e:	f000 fa65 	bl	800a35c <__malloc_lock>
 8009e92:	4a20      	ldr	r2, [pc, #128]	; (8009f14 <_free_r+0x9c>)
 8009e94:	9801      	ldr	r0, [sp, #4]
 8009e96:	6813      	ldr	r3, [r2, #0]
 8009e98:	4615      	mov	r5, r2
 8009e9a:	b933      	cbnz	r3, 8009eaa <_free_r+0x32>
 8009e9c:	6063      	str	r3, [r4, #4]
 8009e9e:	6014      	str	r4, [r2, #0]
 8009ea0:	b003      	add	sp, #12
 8009ea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ea6:	f000 ba5f 	b.w	800a368 <__malloc_unlock>
 8009eaa:	42a3      	cmp	r3, r4
 8009eac:	d90b      	bls.n	8009ec6 <_free_r+0x4e>
 8009eae:	6821      	ldr	r1, [r4, #0]
 8009eb0:	1862      	adds	r2, r4, r1
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	bf04      	itt	eq
 8009eb6:	681a      	ldreq	r2, [r3, #0]
 8009eb8:	685b      	ldreq	r3, [r3, #4]
 8009eba:	6063      	str	r3, [r4, #4]
 8009ebc:	bf04      	itt	eq
 8009ebe:	1852      	addeq	r2, r2, r1
 8009ec0:	6022      	streq	r2, [r4, #0]
 8009ec2:	602c      	str	r4, [r5, #0]
 8009ec4:	e7ec      	b.n	8009ea0 <_free_r+0x28>
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	b10b      	cbz	r3, 8009ed0 <_free_r+0x58>
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	d9fa      	bls.n	8009ec6 <_free_r+0x4e>
 8009ed0:	6811      	ldr	r1, [r2, #0]
 8009ed2:	1855      	adds	r5, r2, r1
 8009ed4:	42a5      	cmp	r5, r4
 8009ed6:	d10b      	bne.n	8009ef0 <_free_r+0x78>
 8009ed8:	6824      	ldr	r4, [r4, #0]
 8009eda:	4421      	add	r1, r4
 8009edc:	1854      	adds	r4, r2, r1
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	6011      	str	r1, [r2, #0]
 8009ee2:	d1dd      	bne.n	8009ea0 <_free_r+0x28>
 8009ee4:	681c      	ldr	r4, [r3, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	6053      	str	r3, [r2, #4]
 8009eea:	4421      	add	r1, r4
 8009eec:	6011      	str	r1, [r2, #0]
 8009eee:	e7d7      	b.n	8009ea0 <_free_r+0x28>
 8009ef0:	d902      	bls.n	8009ef8 <_free_r+0x80>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	e7d3      	b.n	8009ea0 <_free_r+0x28>
 8009ef8:	6825      	ldr	r5, [r4, #0]
 8009efa:	1961      	adds	r1, r4, r5
 8009efc:	428b      	cmp	r3, r1
 8009efe:	bf04      	itt	eq
 8009f00:	6819      	ldreq	r1, [r3, #0]
 8009f02:	685b      	ldreq	r3, [r3, #4]
 8009f04:	6063      	str	r3, [r4, #4]
 8009f06:	bf04      	itt	eq
 8009f08:	1949      	addeq	r1, r1, r5
 8009f0a:	6021      	streq	r1, [r4, #0]
 8009f0c:	6054      	str	r4, [r2, #4]
 8009f0e:	e7c7      	b.n	8009ea0 <_free_r+0x28>
 8009f10:	b003      	add	sp, #12
 8009f12:	bd30      	pop	{r4, r5, pc}
 8009f14:	2000062c 	.word	0x2000062c

08009f18 <_malloc_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	1ccd      	adds	r5, r1, #3
 8009f1c:	f025 0503 	bic.w	r5, r5, #3
 8009f20:	3508      	adds	r5, #8
 8009f22:	2d0c      	cmp	r5, #12
 8009f24:	bf38      	it	cc
 8009f26:	250c      	movcc	r5, #12
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	db01      	blt.n	8009f32 <_malloc_r+0x1a>
 8009f2e:	42a9      	cmp	r1, r5
 8009f30:	d903      	bls.n	8009f3a <_malloc_r+0x22>
 8009f32:	230c      	movs	r3, #12
 8009f34:	6033      	str	r3, [r6, #0]
 8009f36:	2000      	movs	r0, #0
 8009f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f3a:	f000 fa0f 	bl	800a35c <__malloc_lock>
 8009f3e:	4921      	ldr	r1, [pc, #132]	; (8009fc4 <_malloc_r+0xac>)
 8009f40:	680a      	ldr	r2, [r1, #0]
 8009f42:	4614      	mov	r4, r2
 8009f44:	b99c      	cbnz	r4, 8009f6e <_malloc_r+0x56>
 8009f46:	4f20      	ldr	r7, [pc, #128]	; (8009fc8 <_malloc_r+0xb0>)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	b923      	cbnz	r3, 8009f56 <_malloc_r+0x3e>
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f000 f998 	bl	800a284 <_sbrk_r>
 8009f54:	6038      	str	r0, [r7, #0]
 8009f56:	4629      	mov	r1, r5
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 f993 	bl	800a284 <_sbrk_r>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	d123      	bne.n	8009faa <_malloc_r+0x92>
 8009f62:	230c      	movs	r3, #12
 8009f64:	6033      	str	r3, [r6, #0]
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 f9fe 	bl	800a368 <__malloc_unlock>
 8009f6c:	e7e3      	b.n	8009f36 <_malloc_r+0x1e>
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	1b5b      	subs	r3, r3, r5
 8009f72:	d417      	bmi.n	8009fa4 <_malloc_r+0x8c>
 8009f74:	2b0b      	cmp	r3, #11
 8009f76:	d903      	bls.n	8009f80 <_malloc_r+0x68>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	441c      	add	r4, r3
 8009f7c:	6025      	str	r5, [r4, #0]
 8009f7e:	e004      	b.n	8009f8a <_malloc_r+0x72>
 8009f80:	6863      	ldr	r3, [r4, #4]
 8009f82:	42a2      	cmp	r2, r4
 8009f84:	bf0c      	ite	eq
 8009f86:	600b      	streq	r3, [r1, #0]
 8009f88:	6053      	strne	r3, [r2, #4]
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 f9ec 	bl	800a368 <__malloc_unlock>
 8009f90:	f104 000b 	add.w	r0, r4, #11
 8009f94:	1d23      	adds	r3, r4, #4
 8009f96:	f020 0007 	bic.w	r0, r0, #7
 8009f9a:	1ac2      	subs	r2, r0, r3
 8009f9c:	d0cc      	beq.n	8009f38 <_malloc_r+0x20>
 8009f9e:	1a1b      	subs	r3, r3, r0
 8009fa0:	50a3      	str	r3, [r4, r2]
 8009fa2:	e7c9      	b.n	8009f38 <_malloc_r+0x20>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	6864      	ldr	r4, [r4, #4]
 8009fa8:	e7cc      	b.n	8009f44 <_malloc_r+0x2c>
 8009faa:	1cc4      	adds	r4, r0, #3
 8009fac:	f024 0403 	bic.w	r4, r4, #3
 8009fb0:	42a0      	cmp	r0, r4
 8009fb2:	d0e3      	beq.n	8009f7c <_malloc_r+0x64>
 8009fb4:	1a21      	subs	r1, r4, r0
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f000 f964 	bl	800a284 <_sbrk_r>
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d1dd      	bne.n	8009f7c <_malloc_r+0x64>
 8009fc0:	e7cf      	b.n	8009f62 <_malloc_r+0x4a>
 8009fc2:	bf00      	nop
 8009fc4:	2000062c 	.word	0x2000062c
 8009fc8:	20000630 	.word	0x20000630

08009fcc <__ssputs_r>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	688e      	ldr	r6, [r1, #8]
 8009fd2:	429e      	cmp	r6, r3
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4690      	mov	r8, r2
 8009fda:	461f      	mov	r7, r3
 8009fdc:	d838      	bhi.n	800a050 <__ssputs_r+0x84>
 8009fde:	898a      	ldrh	r2, [r1, #12]
 8009fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fe4:	d032      	beq.n	800a04c <__ssputs_r+0x80>
 8009fe6:	6825      	ldr	r5, [r4, #0]
 8009fe8:	6909      	ldr	r1, [r1, #16]
 8009fea:	eba5 0901 	sub.w	r9, r5, r1
 8009fee:	6965      	ldr	r5, [r4, #20]
 8009ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	444b      	add	r3, r9
 8009ffc:	106d      	asrs	r5, r5, #1
 8009ffe:	429d      	cmp	r5, r3
 800a000:	bf38      	it	cc
 800a002:	461d      	movcc	r5, r3
 800a004:	0553      	lsls	r3, r2, #21
 800a006:	d531      	bpl.n	800a06c <__ssputs_r+0xa0>
 800a008:	4629      	mov	r1, r5
 800a00a:	f7ff ff85 	bl	8009f18 <_malloc_r>
 800a00e:	4606      	mov	r6, r0
 800a010:	b950      	cbnz	r0, 800a028 <__ssputs_r+0x5c>
 800a012:	230c      	movs	r3, #12
 800a014:	f8ca 3000 	str.w	r3, [sl]
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a028:	6921      	ldr	r1, [r4, #16]
 800a02a:	464a      	mov	r2, r9
 800a02c:	f7ff fb88 	bl	8009740 <memcpy>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	6126      	str	r6, [r4, #16]
 800a03e:	6165      	str	r5, [r4, #20]
 800a040:	444e      	add	r6, r9
 800a042:	eba5 0509 	sub.w	r5, r5, r9
 800a046:	6026      	str	r6, [r4, #0]
 800a048:	60a5      	str	r5, [r4, #8]
 800a04a:	463e      	mov	r6, r7
 800a04c:	42be      	cmp	r6, r7
 800a04e:	d900      	bls.n	800a052 <__ssputs_r+0x86>
 800a050:	463e      	mov	r6, r7
 800a052:	4632      	mov	r2, r6
 800a054:	6820      	ldr	r0, [r4, #0]
 800a056:	4641      	mov	r1, r8
 800a058:	f000 f966 	bl	800a328 <memmove>
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	1b9b      	subs	r3, r3, r6
 800a062:	4432      	add	r2, r6
 800a064:	60a3      	str	r3, [r4, #8]
 800a066:	6022      	str	r2, [r4, #0]
 800a068:	2000      	movs	r0, #0
 800a06a:	e7db      	b.n	800a024 <__ssputs_r+0x58>
 800a06c:	462a      	mov	r2, r5
 800a06e:	f000 f981 	bl	800a374 <_realloc_r>
 800a072:	4606      	mov	r6, r0
 800a074:	2800      	cmp	r0, #0
 800a076:	d1e1      	bne.n	800a03c <__ssputs_r+0x70>
 800a078:	6921      	ldr	r1, [r4, #16]
 800a07a:	4650      	mov	r0, sl
 800a07c:	f7ff fefc 	bl	8009e78 <_free_r>
 800a080:	e7c7      	b.n	800a012 <__ssputs_r+0x46>
	...

0800a084 <_svfiprintf_r>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	4698      	mov	r8, r3
 800a08a:	898b      	ldrh	r3, [r1, #12]
 800a08c:	061b      	lsls	r3, r3, #24
 800a08e:	b09d      	sub	sp, #116	; 0x74
 800a090:	4607      	mov	r7, r0
 800a092:	460d      	mov	r5, r1
 800a094:	4614      	mov	r4, r2
 800a096:	d50e      	bpl.n	800a0b6 <_svfiprintf_r+0x32>
 800a098:	690b      	ldr	r3, [r1, #16]
 800a09a:	b963      	cbnz	r3, 800a0b6 <_svfiprintf_r+0x32>
 800a09c:	2140      	movs	r1, #64	; 0x40
 800a09e:	f7ff ff3b 	bl	8009f18 <_malloc_r>
 800a0a2:	6028      	str	r0, [r5, #0]
 800a0a4:	6128      	str	r0, [r5, #16]
 800a0a6:	b920      	cbnz	r0, 800a0b2 <_svfiprintf_r+0x2e>
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	603b      	str	r3, [r7, #0]
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	e0d1      	b.n	800a256 <_svfiprintf_r+0x1d2>
 800a0b2:	2340      	movs	r3, #64	; 0x40
 800a0b4:	616b      	str	r3, [r5, #20]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ba:	2320      	movs	r3, #32
 800a0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c4:	2330      	movs	r3, #48	; 0x30
 800a0c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a270 <_svfiprintf_r+0x1ec>
 800a0ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ce:	f04f 0901 	mov.w	r9, #1
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	469a      	mov	sl, r3
 800a0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0da:	b10a      	cbz	r2, 800a0e0 <_svfiprintf_r+0x5c>
 800a0dc:	2a25      	cmp	r2, #37	; 0x25
 800a0de:	d1f9      	bne.n	800a0d4 <_svfiprintf_r+0x50>
 800a0e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e4:	d00b      	beq.n	800a0fe <_svfiprintf_r+0x7a>
 800a0e6:	465b      	mov	r3, fp
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f7ff ff6d 	bl	8009fcc <__ssputs_r>
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f000 80aa 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fa:	445a      	add	r2, fp
 800a0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 80a2 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a108:	2300      	movs	r3, #0
 800a10a:	f04f 32ff 	mov.w	r2, #4294967295
 800a10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a112:	f10a 0a01 	add.w	sl, sl, #1
 800a116:	9304      	str	r3, [sp, #16]
 800a118:	9307      	str	r3, [sp, #28]
 800a11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a11e:	931a      	str	r3, [sp, #104]	; 0x68
 800a120:	4654      	mov	r4, sl
 800a122:	2205      	movs	r2, #5
 800a124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a128:	4851      	ldr	r0, [pc, #324]	; (800a270 <_svfiprintf_r+0x1ec>)
 800a12a:	f7f6 f879 	bl	8000220 <memchr>
 800a12e:	9a04      	ldr	r2, [sp, #16]
 800a130:	b9d8      	cbnz	r0, 800a16a <_svfiprintf_r+0xe6>
 800a132:	06d0      	lsls	r0, r2, #27
 800a134:	bf44      	itt	mi
 800a136:	2320      	movmi	r3, #32
 800a138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13c:	0711      	lsls	r1, r2, #28
 800a13e:	bf44      	itt	mi
 800a140:	232b      	movmi	r3, #43	; 0x2b
 800a142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a146:	f89a 3000 	ldrb.w	r3, [sl]
 800a14a:	2b2a      	cmp	r3, #42	; 0x2a
 800a14c:	d015      	beq.n	800a17a <_svfiprintf_r+0xf6>
 800a14e:	9a07      	ldr	r2, [sp, #28]
 800a150:	4654      	mov	r4, sl
 800a152:	2000      	movs	r0, #0
 800a154:	f04f 0c0a 	mov.w	ip, #10
 800a158:	4621      	mov	r1, r4
 800a15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15e:	3b30      	subs	r3, #48	; 0x30
 800a160:	2b09      	cmp	r3, #9
 800a162:	d94e      	bls.n	800a202 <_svfiprintf_r+0x17e>
 800a164:	b1b0      	cbz	r0, 800a194 <_svfiprintf_r+0x110>
 800a166:	9207      	str	r2, [sp, #28]
 800a168:	e014      	b.n	800a194 <_svfiprintf_r+0x110>
 800a16a:	eba0 0308 	sub.w	r3, r0, r8
 800a16e:	fa09 f303 	lsl.w	r3, r9, r3
 800a172:	4313      	orrs	r3, r2
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	46a2      	mov	sl, r4
 800a178:	e7d2      	b.n	800a120 <_svfiprintf_r+0x9c>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	1d19      	adds	r1, r3, #4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	9103      	str	r1, [sp, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	bfbb      	ittet	lt
 800a186:	425b      	neglt	r3, r3
 800a188:	f042 0202 	orrlt.w	r2, r2, #2
 800a18c:	9307      	strge	r3, [sp, #28]
 800a18e:	9307      	strlt	r3, [sp, #28]
 800a190:	bfb8      	it	lt
 800a192:	9204      	strlt	r2, [sp, #16]
 800a194:	7823      	ldrb	r3, [r4, #0]
 800a196:	2b2e      	cmp	r3, #46	; 0x2e
 800a198:	d10c      	bne.n	800a1b4 <_svfiprintf_r+0x130>
 800a19a:	7863      	ldrb	r3, [r4, #1]
 800a19c:	2b2a      	cmp	r3, #42	; 0x2a
 800a19e:	d135      	bne.n	800a20c <_svfiprintf_r+0x188>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	1d1a      	adds	r2, r3, #4
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	9203      	str	r2, [sp, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bfb8      	it	lt
 800a1ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b0:	3402      	adds	r4, #2
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a280 <_svfiprintf_r+0x1fc>
 800a1b8:	7821      	ldrb	r1, [r4, #0]
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	4650      	mov	r0, sl
 800a1be:	f7f6 f82f 	bl	8000220 <memchr>
 800a1c2:	b140      	cbz	r0, 800a1d6 <_svfiprintf_r+0x152>
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	eba0 000a 	sub.w	r0, r0, sl
 800a1ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	4303      	orrs	r3, r0
 800a1d2:	3401      	adds	r4, #1
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1da:	4826      	ldr	r0, [pc, #152]	; (800a274 <_svfiprintf_r+0x1f0>)
 800a1dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e0:	2206      	movs	r2, #6
 800a1e2:	f7f6 f81d 	bl	8000220 <memchr>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d038      	beq.n	800a25c <_svfiprintf_r+0x1d8>
 800a1ea:	4b23      	ldr	r3, [pc, #140]	; (800a278 <_svfiprintf_r+0x1f4>)
 800a1ec:	bb1b      	cbnz	r3, 800a236 <_svfiprintf_r+0x1b2>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	f023 0307 	bic.w	r3, r3, #7
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fc:	4433      	add	r3, r6
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	e767      	b.n	800a0d2 <_svfiprintf_r+0x4e>
 800a202:	fb0c 3202 	mla	r2, ip, r2, r3
 800a206:	460c      	mov	r4, r1
 800a208:	2001      	movs	r0, #1
 800a20a:	e7a5      	b.n	800a158 <_svfiprintf_r+0xd4>
 800a20c:	2300      	movs	r3, #0
 800a20e:	3401      	adds	r4, #1
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	4619      	mov	r1, r3
 800a214:	f04f 0c0a 	mov.w	ip, #10
 800a218:	4620      	mov	r0, r4
 800a21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21e:	3a30      	subs	r2, #48	; 0x30
 800a220:	2a09      	cmp	r2, #9
 800a222:	d903      	bls.n	800a22c <_svfiprintf_r+0x1a8>
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0c5      	beq.n	800a1b4 <_svfiprintf_r+0x130>
 800a228:	9105      	str	r1, [sp, #20]
 800a22a:	e7c3      	b.n	800a1b4 <_svfiprintf_r+0x130>
 800a22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a230:	4604      	mov	r4, r0
 800a232:	2301      	movs	r3, #1
 800a234:	e7f0      	b.n	800a218 <_svfiprintf_r+0x194>
 800a236:	ab03      	add	r3, sp, #12
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	462a      	mov	r2, r5
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a23e:	a904      	add	r1, sp, #16
 800a240:	4638      	mov	r0, r7
 800a242:	f7fe f80d 	bl	8008260 <_printf_float>
 800a246:	1c42      	adds	r2, r0, #1
 800a248:	4606      	mov	r6, r0
 800a24a:	d1d6      	bne.n	800a1fa <_svfiprintf_r+0x176>
 800a24c:	89ab      	ldrh	r3, [r5, #12]
 800a24e:	065b      	lsls	r3, r3, #25
 800a250:	f53f af2c 	bmi.w	800a0ac <_svfiprintf_r+0x28>
 800a254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a256:	b01d      	add	sp, #116	; 0x74
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	462a      	mov	r2, r5
 800a262:	4b06      	ldr	r3, [pc, #24]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a264:	a904      	add	r1, sp, #16
 800a266:	4638      	mov	r0, r7
 800a268:	f7fe fa9e 	bl	80087a8 <_printf_i>
 800a26c:	e7eb      	b.n	800a246 <_svfiprintf_r+0x1c2>
 800a26e:	bf00      	nop
 800a270:	0800b374 	.word	0x0800b374
 800a274:	0800b37e 	.word	0x0800b37e
 800a278:	08008261 	.word	0x08008261
 800a27c:	08009fcd 	.word	0x08009fcd
 800a280:	0800b37a 	.word	0x0800b37a

0800a284 <_sbrk_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d06      	ldr	r5, [pc, #24]	; (800a2a0 <_sbrk_r+0x1c>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f8 fc90 	bl	8002bb4 <_sbrk>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_sbrk_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_sbrk_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20000ce0 	.word	0x20000ce0

0800a2a4 <__assert_func>:
 800a2a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2a6:	4614      	mov	r4, r2
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <__assert_func+0x2c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	68d8      	ldr	r0, [r3, #12]
 800a2b2:	b14c      	cbz	r4, 800a2c8 <__assert_func+0x24>
 800a2b4:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <__assert_func+0x30>)
 800a2b6:	9100      	str	r1, [sp, #0]
 800a2b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2bc:	4906      	ldr	r1, [pc, #24]	; (800a2d8 <__assert_func+0x34>)
 800a2be:	462b      	mov	r3, r5
 800a2c0:	f000 f80e 	bl	800a2e0 <fiprintf>
 800a2c4:	f000 faa4 	bl	800a810 <abort>
 800a2c8:	4b04      	ldr	r3, [pc, #16]	; (800a2dc <__assert_func+0x38>)
 800a2ca:	461c      	mov	r4, r3
 800a2cc:	e7f3      	b.n	800a2b6 <__assert_func+0x12>
 800a2ce:	bf00      	nop
 800a2d0:	20000034 	.word	0x20000034
 800a2d4:	0800b385 	.word	0x0800b385
 800a2d8:	0800b392 	.word	0x0800b392
 800a2dc:	0800b3c0 	.word	0x0800b3c0

0800a2e0 <fiprintf>:
 800a2e0:	b40e      	push	{r1, r2, r3}
 800a2e2:	b503      	push	{r0, r1, lr}
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	ab03      	add	r3, sp, #12
 800a2e8:	4805      	ldr	r0, [pc, #20]	; (800a300 <fiprintf+0x20>)
 800a2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ee:	6800      	ldr	r0, [r0, #0]
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	f000 f88f 	bl	800a414 <_vfiprintf_r>
 800a2f6:	b002      	add	sp, #8
 800a2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2fc:	b003      	add	sp, #12
 800a2fe:	4770      	bx	lr
 800a300:	20000034 	.word	0x20000034

0800a304 <__ascii_mbtowc>:
 800a304:	b082      	sub	sp, #8
 800a306:	b901      	cbnz	r1, 800a30a <__ascii_mbtowc+0x6>
 800a308:	a901      	add	r1, sp, #4
 800a30a:	b142      	cbz	r2, 800a31e <__ascii_mbtowc+0x1a>
 800a30c:	b14b      	cbz	r3, 800a322 <__ascii_mbtowc+0x1e>
 800a30e:	7813      	ldrb	r3, [r2, #0]
 800a310:	600b      	str	r3, [r1, #0]
 800a312:	7812      	ldrb	r2, [r2, #0]
 800a314:	1e10      	subs	r0, r2, #0
 800a316:	bf18      	it	ne
 800a318:	2001      	movne	r0, #1
 800a31a:	b002      	add	sp, #8
 800a31c:	4770      	bx	lr
 800a31e:	4610      	mov	r0, r2
 800a320:	e7fb      	b.n	800a31a <__ascii_mbtowc+0x16>
 800a322:	f06f 0001 	mvn.w	r0, #1
 800a326:	e7f8      	b.n	800a31a <__ascii_mbtowc+0x16>

0800a328 <memmove>:
 800a328:	4288      	cmp	r0, r1
 800a32a:	b510      	push	{r4, lr}
 800a32c:	eb01 0402 	add.w	r4, r1, r2
 800a330:	d902      	bls.n	800a338 <memmove+0x10>
 800a332:	4284      	cmp	r4, r0
 800a334:	4623      	mov	r3, r4
 800a336:	d807      	bhi.n	800a348 <memmove+0x20>
 800a338:	1e43      	subs	r3, r0, #1
 800a33a:	42a1      	cmp	r1, r4
 800a33c:	d008      	beq.n	800a350 <memmove+0x28>
 800a33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a346:	e7f8      	b.n	800a33a <memmove+0x12>
 800a348:	4402      	add	r2, r0
 800a34a:	4601      	mov	r1, r0
 800a34c:	428a      	cmp	r2, r1
 800a34e:	d100      	bne.n	800a352 <memmove+0x2a>
 800a350:	bd10      	pop	{r4, pc}
 800a352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a35a:	e7f7      	b.n	800a34c <memmove+0x24>

0800a35c <__malloc_lock>:
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <__malloc_lock+0x8>)
 800a35e:	f000 bc17 	b.w	800ab90 <__retarget_lock_acquire_recursive>
 800a362:	bf00      	nop
 800a364:	20000ce8 	.word	0x20000ce8

0800a368 <__malloc_unlock>:
 800a368:	4801      	ldr	r0, [pc, #4]	; (800a370 <__malloc_unlock+0x8>)
 800a36a:	f000 bc12 	b.w	800ab92 <__retarget_lock_release_recursive>
 800a36e:	bf00      	nop
 800a370:	20000ce8 	.word	0x20000ce8

0800a374 <_realloc_r>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	4607      	mov	r7, r0
 800a378:	4614      	mov	r4, r2
 800a37a:	460e      	mov	r6, r1
 800a37c:	b921      	cbnz	r1, 800a388 <_realloc_r+0x14>
 800a37e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a382:	4611      	mov	r1, r2
 800a384:	f7ff bdc8 	b.w	8009f18 <_malloc_r>
 800a388:	b922      	cbnz	r2, 800a394 <_realloc_r+0x20>
 800a38a:	f7ff fd75 	bl	8009e78 <_free_r>
 800a38e:	4625      	mov	r5, r4
 800a390:	4628      	mov	r0, r5
 800a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a394:	f000 fc62 	bl	800ac5c <_malloc_usable_size_r>
 800a398:	42a0      	cmp	r0, r4
 800a39a:	d20f      	bcs.n	800a3bc <_realloc_r+0x48>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4638      	mov	r0, r7
 800a3a0:	f7ff fdba 	bl	8009f18 <_malloc_r>
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d0f2      	beq.n	800a390 <_realloc_r+0x1c>
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	f7ff f9c7 	bl	8009740 <memcpy>
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f7ff fd5f 	bl	8009e78 <_free_r>
 800a3ba:	e7e9      	b.n	800a390 <_realloc_r+0x1c>
 800a3bc:	4635      	mov	r5, r6
 800a3be:	e7e7      	b.n	800a390 <_realloc_r+0x1c>

0800a3c0 <__sfputc_r>:
 800a3c0:	6893      	ldr	r3, [r2, #8]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	b410      	push	{r4}
 800a3c8:	6093      	str	r3, [r2, #8]
 800a3ca:	da08      	bge.n	800a3de <__sfputc_r+0x1e>
 800a3cc:	6994      	ldr	r4, [r2, #24]
 800a3ce:	42a3      	cmp	r3, r4
 800a3d0:	db01      	blt.n	800a3d6 <__sfputc_r+0x16>
 800a3d2:	290a      	cmp	r1, #10
 800a3d4:	d103      	bne.n	800a3de <__sfputc_r+0x1e>
 800a3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3da:	f000 b94b 	b.w	800a674 <__swbuf_r>
 800a3de:	6813      	ldr	r3, [r2, #0]
 800a3e0:	1c58      	adds	r0, r3, #1
 800a3e2:	6010      	str	r0, [r2, #0]
 800a3e4:	7019      	strb	r1, [r3, #0]
 800a3e6:	4608      	mov	r0, r1
 800a3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <__sfputs_r>:
 800a3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	18d5      	adds	r5, r2, r3
 800a3f8:	42ac      	cmp	r4, r5
 800a3fa:	d101      	bne.n	800a400 <__sfputs_r+0x12>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e007      	b.n	800a410 <__sfputs_r+0x22>
 800a400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a404:	463a      	mov	r2, r7
 800a406:	4630      	mov	r0, r6
 800a408:	f7ff ffda 	bl	800a3c0 <__sfputc_r>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d1f3      	bne.n	800a3f8 <__sfputs_r+0xa>
 800a410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a414 <_vfiprintf_r>:
 800a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	460d      	mov	r5, r1
 800a41a:	b09d      	sub	sp, #116	; 0x74
 800a41c:	4614      	mov	r4, r2
 800a41e:	4698      	mov	r8, r3
 800a420:	4606      	mov	r6, r0
 800a422:	b118      	cbz	r0, 800a42c <_vfiprintf_r+0x18>
 800a424:	6983      	ldr	r3, [r0, #24]
 800a426:	b90b      	cbnz	r3, 800a42c <_vfiprintf_r+0x18>
 800a428:	f000 fb14 	bl	800aa54 <__sinit>
 800a42c:	4b89      	ldr	r3, [pc, #548]	; (800a654 <_vfiprintf_r+0x240>)
 800a42e:	429d      	cmp	r5, r3
 800a430:	d11b      	bne.n	800a46a <_vfiprintf_r+0x56>
 800a432:	6875      	ldr	r5, [r6, #4]
 800a434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a436:	07d9      	lsls	r1, r3, #31
 800a438:	d405      	bmi.n	800a446 <_vfiprintf_r+0x32>
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	059a      	lsls	r2, r3, #22
 800a43e:	d402      	bmi.n	800a446 <_vfiprintf_r+0x32>
 800a440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a442:	f000 fba5 	bl	800ab90 <__retarget_lock_acquire_recursive>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	071b      	lsls	r3, r3, #28
 800a44a:	d501      	bpl.n	800a450 <_vfiprintf_r+0x3c>
 800a44c:	692b      	ldr	r3, [r5, #16]
 800a44e:	b9eb      	cbnz	r3, 800a48c <_vfiprintf_r+0x78>
 800a450:	4629      	mov	r1, r5
 800a452:	4630      	mov	r0, r6
 800a454:	f000 f96e 	bl	800a734 <__swsetup_r>
 800a458:	b1c0      	cbz	r0, 800a48c <_vfiprintf_r+0x78>
 800a45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a45c:	07dc      	lsls	r4, r3, #31
 800a45e:	d50e      	bpl.n	800a47e <_vfiprintf_r+0x6a>
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	b01d      	add	sp, #116	; 0x74
 800a466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46a:	4b7b      	ldr	r3, [pc, #492]	; (800a658 <_vfiprintf_r+0x244>)
 800a46c:	429d      	cmp	r5, r3
 800a46e:	d101      	bne.n	800a474 <_vfiprintf_r+0x60>
 800a470:	68b5      	ldr	r5, [r6, #8]
 800a472:	e7df      	b.n	800a434 <_vfiprintf_r+0x20>
 800a474:	4b79      	ldr	r3, [pc, #484]	; (800a65c <_vfiprintf_r+0x248>)
 800a476:	429d      	cmp	r5, r3
 800a478:	bf08      	it	eq
 800a47a:	68f5      	ldreq	r5, [r6, #12]
 800a47c:	e7da      	b.n	800a434 <_vfiprintf_r+0x20>
 800a47e:	89ab      	ldrh	r3, [r5, #12]
 800a480:	0598      	lsls	r0, r3, #22
 800a482:	d4ed      	bmi.n	800a460 <_vfiprintf_r+0x4c>
 800a484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a486:	f000 fb84 	bl	800ab92 <__retarget_lock_release_recursive>
 800a48a:	e7e9      	b.n	800a460 <_vfiprintf_r+0x4c>
 800a48c:	2300      	movs	r3, #0
 800a48e:	9309      	str	r3, [sp, #36]	; 0x24
 800a490:	2320      	movs	r3, #32
 800a492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a496:	f8cd 800c 	str.w	r8, [sp, #12]
 800a49a:	2330      	movs	r3, #48	; 0x30
 800a49c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a660 <_vfiprintf_r+0x24c>
 800a4a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4a4:	f04f 0901 	mov.w	r9, #1
 800a4a8:	4623      	mov	r3, r4
 800a4aa:	469a      	mov	sl, r3
 800a4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4b0:	b10a      	cbz	r2, 800a4b6 <_vfiprintf_r+0xa2>
 800a4b2:	2a25      	cmp	r2, #37	; 0x25
 800a4b4:	d1f9      	bne.n	800a4aa <_vfiprintf_r+0x96>
 800a4b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ba:	d00b      	beq.n	800a4d4 <_vfiprintf_r+0xc0>
 800a4bc:	465b      	mov	r3, fp
 800a4be:	4622      	mov	r2, r4
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff ff93 	bl	800a3ee <__sfputs_r>
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	f000 80aa 	beq.w	800a622 <_vfiprintf_r+0x20e>
 800a4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d0:	445a      	add	r2, fp
 800a4d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 80a2 	beq.w	800a622 <_vfiprintf_r+0x20e>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4e8:	f10a 0a01 	add.w	sl, sl, #1
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	9307      	str	r3, [sp, #28]
 800a4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a4f6:	4654      	mov	r4, sl
 800a4f8:	2205      	movs	r2, #5
 800a4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fe:	4858      	ldr	r0, [pc, #352]	; (800a660 <_vfiprintf_r+0x24c>)
 800a500:	f7f5 fe8e 	bl	8000220 <memchr>
 800a504:	9a04      	ldr	r2, [sp, #16]
 800a506:	b9d8      	cbnz	r0, 800a540 <_vfiprintf_r+0x12c>
 800a508:	06d1      	lsls	r1, r2, #27
 800a50a:	bf44      	itt	mi
 800a50c:	2320      	movmi	r3, #32
 800a50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a512:	0713      	lsls	r3, r2, #28
 800a514:	bf44      	itt	mi
 800a516:	232b      	movmi	r3, #43	; 0x2b
 800a518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a51c:	f89a 3000 	ldrb.w	r3, [sl]
 800a520:	2b2a      	cmp	r3, #42	; 0x2a
 800a522:	d015      	beq.n	800a550 <_vfiprintf_r+0x13c>
 800a524:	9a07      	ldr	r2, [sp, #28]
 800a526:	4654      	mov	r4, sl
 800a528:	2000      	movs	r0, #0
 800a52a:	f04f 0c0a 	mov.w	ip, #10
 800a52e:	4621      	mov	r1, r4
 800a530:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a534:	3b30      	subs	r3, #48	; 0x30
 800a536:	2b09      	cmp	r3, #9
 800a538:	d94e      	bls.n	800a5d8 <_vfiprintf_r+0x1c4>
 800a53a:	b1b0      	cbz	r0, 800a56a <_vfiprintf_r+0x156>
 800a53c:	9207      	str	r2, [sp, #28]
 800a53e:	e014      	b.n	800a56a <_vfiprintf_r+0x156>
 800a540:	eba0 0308 	sub.w	r3, r0, r8
 800a544:	fa09 f303 	lsl.w	r3, r9, r3
 800a548:	4313      	orrs	r3, r2
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	46a2      	mov	sl, r4
 800a54e:	e7d2      	b.n	800a4f6 <_vfiprintf_r+0xe2>
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	1d19      	adds	r1, r3, #4
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	9103      	str	r1, [sp, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	bfbb      	ittet	lt
 800a55c:	425b      	neglt	r3, r3
 800a55e:	f042 0202 	orrlt.w	r2, r2, #2
 800a562:	9307      	strge	r3, [sp, #28]
 800a564:	9307      	strlt	r3, [sp, #28]
 800a566:	bfb8      	it	lt
 800a568:	9204      	strlt	r2, [sp, #16]
 800a56a:	7823      	ldrb	r3, [r4, #0]
 800a56c:	2b2e      	cmp	r3, #46	; 0x2e
 800a56e:	d10c      	bne.n	800a58a <_vfiprintf_r+0x176>
 800a570:	7863      	ldrb	r3, [r4, #1]
 800a572:	2b2a      	cmp	r3, #42	; 0x2a
 800a574:	d135      	bne.n	800a5e2 <_vfiprintf_r+0x1ce>
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	1d1a      	adds	r2, r3, #4
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	9203      	str	r2, [sp, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	bfb8      	it	lt
 800a582:	f04f 33ff 	movlt.w	r3, #4294967295
 800a586:	3402      	adds	r4, #2
 800a588:	9305      	str	r3, [sp, #20]
 800a58a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a670 <_vfiprintf_r+0x25c>
 800a58e:	7821      	ldrb	r1, [r4, #0]
 800a590:	2203      	movs	r2, #3
 800a592:	4650      	mov	r0, sl
 800a594:	f7f5 fe44 	bl	8000220 <memchr>
 800a598:	b140      	cbz	r0, 800a5ac <_vfiprintf_r+0x198>
 800a59a:	2340      	movs	r3, #64	; 0x40
 800a59c:	eba0 000a 	sub.w	r0, r0, sl
 800a5a0:	fa03 f000 	lsl.w	r0, r3, r0
 800a5a4:	9b04      	ldr	r3, [sp, #16]
 800a5a6:	4303      	orrs	r3, r0
 800a5a8:	3401      	adds	r4, #1
 800a5aa:	9304      	str	r3, [sp, #16]
 800a5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b0:	482c      	ldr	r0, [pc, #176]	; (800a664 <_vfiprintf_r+0x250>)
 800a5b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5b6:	2206      	movs	r2, #6
 800a5b8:	f7f5 fe32 	bl	8000220 <memchr>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d03f      	beq.n	800a640 <_vfiprintf_r+0x22c>
 800a5c0:	4b29      	ldr	r3, [pc, #164]	; (800a668 <_vfiprintf_r+0x254>)
 800a5c2:	bb1b      	cbnz	r3, 800a60c <_vfiprintf_r+0x1f8>
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	3307      	adds	r3, #7
 800a5c8:	f023 0307 	bic.w	r3, r3, #7
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	9303      	str	r3, [sp, #12]
 800a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d2:	443b      	add	r3, r7
 800a5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d6:	e767      	b.n	800a4a8 <_vfiprintf_r+0x94>
 800a5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5dc:	460c      	mov	r4, r1
 800a5de:	2001      	movs	r0, #1
 800a5e0:	e7a5      	b.n	800a52e <_vfiprintf_r+0x11a>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	3401      	adds	r4, #1
 800a5e6:	9305      	str	r3, [sp, #20]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f04f 0c0a 	mov.w	ip, #10
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f4:	3a30      	subs	r2, #48	; 0x30
 800a5f6:	2a09      	cmp	r2, #9
 800a5f8:	d903      	bls.n	800a602 <_vfiprintf_r+0x1ee>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0c5      	beq.n	800a58a <_vfiprintf_r+0x176>
 800a5fe:	9105      	str	r1, [sp, #20]
 800a600:	e7c3      	b.n	800a58a <_vfiprintf_r+0x176>
 800a602:	fb0c 2101 	mla	r1, ip, r1, r2
 800a606:	4604      	mov	r4, r0
 800a608:	2301      	movs	r3, #1
 800a60a:	e7f0      	b.n	800a5ee <_vfiprintf_r+0x1da>
 800a60c:	ab03      	add	r3, sp, #12
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	462a      	mov	r2, r5
 800a612:	4b16      	ldr	r3, [pc, #88]	; (800a66c <_vfiprintf_r+0x258>)
 800a614:	a904      	add	r1, sp, #16
 800a616:	4630      	mov	r0, r6
 800a618:	f7fd fe22 	bl	8008260 <_printf_float>
 800a61c:	4607      	mov	r7, r0
 800a61e:	1c78      	adds	r0, r7, #1
 800a620:	d1d6      	bne.n	800a5d0 <_vfiprintf_r+0x1bc>
 800a622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a624:	07d9      	lsls	r1, r3, #31
 800a626:	d405      	bmi.n	800a634 <_vfiprintf_r+0x220>
 800a628:	89ab      	ldrh	r3, [r5, #12]
 800a62a:	059a      	lsls	r2, r3, #22
 800a62c:	d402      	bmi.n	800a634 <_vfiprintf_r+0x220>
 800a62e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a630:	f000 faaf 	bl	800ab92 <__retarget_lock_release_recursive>
 800a634:	89ab      	ldrh	r3, [r5, #12]
 800a636:	065b      	lsls	r3, r3, #25
 800a638:	f53f af12 	bmi.w	800a460 <_vfiprintf_r+0x4c>
 800a63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a63e:	e711      	b.n	800a464 <_vfiprintf_r+0x50>
 800a640:	ab03      	add	r3, sp, #12
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	462a      	mov	r2, r5
 800a646:	4b09      	ldr	r3, [pc, #36]	; (800a66c <_vfiprintf_r+0x258>)
 800a648:	a904      	add	r1, sp, #16
 800a64a:	4630      	mov	r0, r6
 800a64c:	f7fe f8ac 	bl	80087a8 <_printf_i>
 800a650:	e7e4      	b.n	800a61c <_vfiprintf_r+0x208>
 800a652:	bf00      	nop
 800a654:	0800b4ec 	.word	0x0800b4ec
 800a658:	0800b50c 	.word	0x0800b50c
 800a65c:	0800b4cc 	.word	0x0800b4cc
 800a660:	0800b374 	.word	0x0800b374
 800a664:	0800b37e 	.word	0x0800b37e
 800a668:	08008261 	.word	0x08008261
 800a66c:	0800a3ef 	.word	0x0800a3ef
 800a670:	0800b37a 	.word	0x0800b37a

0800a674 <__swbuf_r>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	460e      	mov	r6, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	4605      	mov	r5, r0
 800a67c:	b118      	cbz	r0, 800a686 <__swbuf_r+0x12>
 800a67e:	6983      	ldr	r3, [r0, #24]
 800a680:	b90b      	cbnz	r3, 800a686 <__swbuf_r+0x12>
 800a682:	f000 f9e7 	bl	800aa54 <__sinit>
 800a686:	4b21      	ldr	r3, [pc, #132]	; (800a70c <__swbuf_r+0x98>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	d12b      	bne.n	800a6e4 <__swbuf_r+0x70>
 800a68c:	686c      	ldr	r4, [r5, #4]
 800a68e:	69a3      	ldr	r3, [r4, #24]
 800a690:	60a3      	str	r3, [r4, #8]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	071a      	lsls	r2, r3, #28
 800a696:	d52f      	bpl.n	800a6f8 <__swbuf_r+0x84>
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	b36b      	cbz	r3, 800a6f8 <__swbuf_r+0x84>
 800a69c:	6923      	ldr	r3, [r4, #16]
 800a69e:	6820      	ldr	r0, [r4, #0]
 800a6a0:	1ac0      	subs	r0, r0, r3
 800a6a2:	6963      	ldr	r3, [r4, #20]
 800a6a4:	b2f6      	uxtb	r6, r6
 800a6a6:	4283      	cmp	r3, r0
 800a6a8:	4637      	mov	r7, r6
 800a6aa:	dc04      	bgt.n	800a6b6 <__swbuf_r+0x42>
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 f93c 	bl	800a92c <_fflush_r>
 800a6b4:	bb30      	cbnz	r0, 800a704 <__swbuf_r+0x90>
 800a6b6:	68a3      	ldr	r3, [r4, #8]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	60a3      	str	r3, [r4, #8]
 800a6bc:	6823      	ldr	r3, [r4, #0]
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	6022      	str	r2, [r4, #0]
 800a6c2:	701e      	strb	r6, [r3, #0]
 800a6c4:	6963      	ldr	r3, [r4, #20]
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	4283      	cmp	r3, r0
 800a6ca:	d004      	beq.n	800a6d6 <__swbuf_r+0x62>
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	07db      	lsls	r3, r3, #31
 800a6d0:	d506      	bpl.n	800a6e0 <__swbuf_r+0x6c>
 800a6d2:	2e0a      	cmp	r6, #10
 800a6d4:	d104      	bne.n	800a6e0 <__swbuf_r+0x6c>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f000 f927 	bl	800a92c <_fflush_r>
 800a6de:	b988      	cbnz	r0, 800a704 <__swbuf_r+0x90>
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e4:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <__swbuf_r+0x9c>)
 800a6e6:	429c      	cmp	r4, r3
 800a6e8:	d101      	bne.n	800a6ee <__swbuf_r+0x7a>
 800a6ea:	68ac      	ldr	r4, [r5, #8]
 800a6ec:	e7cf      	b.n	800a68e <__swbuf_r+0x1a>
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <__swbuf_r+0xa0>)
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	bf08      	it	eq
 800a6f4:	68ec      	ldreq	r4, [r5, #12]
 800a6f6:	e7ca      	b.n	800a68e <__swbuf_r+0x1a>
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f000 f81a 	bl	800a734 <__swsetup_r>
 800a700:	2800      	cmp	r0, #0
 800a702:	d0cb      	beq.n	800a69c <__swbuf_r+0x28>
 800a704:	f04f 37ff 	mov.w	r7, #4294967295
 800a708:	e7ea      	b.n	800a6e0 <__swbuf_r+0x6c>
 800a70a:	bf00      	nop
 800a70c:	0800b4ec 	.word	0x0800b4ec
 800a710:	0800b50c 	.word	0x0800b50c
 800a714:	0800b4cc 	.word	0x0800b4cc

0800a718 <__ascii_wctomb>:
 800a718:	b149      	cbz	r1, 800a72e <__ascii_wctomb+0x16>
 800a71a:	2aff      	cmp	r2, #255	; 0xff
 800a71c:	bf85      	ittet	hi
 800a71e:	238a      	movhi	r3, #138	; 0x8a
 800a720:	6003      	strhi	r3, [r0, #0]
 800a722:	700a      	strbls	r2, [r1, #0]
 800a724:	f04f 30ff 	movhi.w	r0, #4294967295
 800a728:	bf98      	it	ls
 800a72a:	2001      	movls	r0, #1
 800a72c:	4770      	bx	lr
 800a72e:	4608      	mov	r0, r1
 800a730:	4770      	bx	lr
	...

0800a734 <__swsetup_r>:
 800a734:	4b32      	ldr	r3, [pc, #200]	; (800a800 <__swsetup_r+0xcc>)
 800a736:	b570      	push	{r4, r5, r6, lr}
 800a738:	681d      	ldr	r5, [r3, #0]
 800a73a:	4606      	mov	r6, r0
 800a73c:	460c      	mov	r4, r1
 800a73e:	b125      	cbz	r5, 800a74a <__swsetup_r+0x16>
 800a740:	69ab      	ldr	r3, [r5, #24]
 800a742:	b913      	cbnz	r3, 800a74a <__swsetup_r+0x16>
 800a744:	4628      	mov	r0, r5
 800a746:	f000 f985 	bl	800aa54 <__sinit>
 800a74a:	4b2e      	ldr	r3, [pc, #184]	; (800a804 <__swsetup_r+0xd0>)
 800a74c:	429c      	cmp	r4, r3
 800a74e:	d10f      	bne.n	800a770 <__swsetup_r+0x3c>
 800a750:	686c      	ldr	r4, [r5, #4]
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a758:	0719      	lsls	r1, r3, #28
 800a75a:	d42c      	bmi.n	800a7b6 <__swsetup_r+0x82>
 800a75c:	06dd      	lsls	r5, r3, #27
 800a75e:	d411      	bmi.n	800a784 <__swsetup_r+0x50>
 800a760:	2309      	movs	r3, #9
 800a762:	6033      	str	r3, [r6, #0]
 800a764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	f04f 30ff 	mov.w	r0, #4294967295
 800a76e:	e03e      	b.n	800a7ee <__swsetup_r+0xba>
 800a770:	4b25      	ldr	r3, [pc, #148]	; (800a808 <__swsetup_r+0xd4>)
 800a772:	429c      	cmp	r4, r3
 800a774:	d101      	bne.n	800a77a <__swsetup_r+0x46>
 800a776:	68ac      	ldr	r4, [r5, #8]
 800a778:	e7eb      	b.n	800a752 <__swsetup_r+0x1e>
 800a77a:	4b24      	ldr	r3, [pc, #144]	; (800a80c <__swsetup_r+0xd8>)
 800a77c:	429c      	cmp	r4, r3
 800a77e:	bf08      	it	eq
 800a780:	68ec      	ldreq	r4, [r5, #12]
 800a782:	e7e6      	b.n	800a752 <__swsetup_r+0x1e>
 800a784:	0758      	lsls	r0, r3, #29
 800a786:	d512      	bpl.n	800a7ae <__swsetup_r+0x7a>
 800a788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a78a:	b141      	cbz	r1, 800a79e <__swsetup_r+0x6a>
 800a78c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a790:	4299      	cmp	r1, r3
 800a792:	d002      	beq.n	800a79a <__swsetup_r+0x66>
 800a794:	4630      	mov	r0, r6
 800a796:	f7ff fb6f 	bl	8009e78 <_free_r>
 800a79a:	2300      	movs	r3, #0
 800a79c:	6363      	str	r3, [r4, #52]	; 0x34
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	6063      	str	r3, [r4, #4]
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	f043 0308 	orr.w	r3, r3, #8
 800a7b4:	81a3      	strh	r3, [r4, #12]
 800a7b6:	6923      	ldr	r3, [r4, #16]
 800a7b8:	b94b      	cbnz	r3, 800a7ce <__swsetup_r+0x9a>
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7c4:	d003      	beq.n	800a7ce <__swsetup_r+0x9a>
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f000 fa07 	bl	800abdc <__smakebuf_r>
 800a7ce:	89a0      	ldrh	r0, [r4, #12]
 800a7d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7d4:	f010 0301 	ands.w	r3, r0, #1
 800a7d8:	d00a      	beq.n	800a7f0 <__swsetup_r+0xbc>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60a3      	str	r3, [r4, #8]
 800a7de:	6963      	ldr	r3, [r4, #20]
 800a7e0:	425b      	negs	r3, r3
 800a7e2:	61a3      	str	r3, [r4, #24]
 800a7e4:	6923      	ldr	r3, [r4, #16]
 800a7e6:	b943      	cbnz	r3, 800a7fa <__swsetup_r+0xc6>
 800a7e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7ec:	d1ba      	bne.n	800a764 <__swsetup_r+0x30>
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}
 800a7f0:	0781      	lsls	r1, r0, #30
 800a7f2:	bf58      	it	pl
 800a7f4:	6963      	ldrpl	r3, [r4, #20]
 800a7f6:	60a3      	str	r3, [r4, #8]
 800a7f8:	e7f4      	b.n	800a7e4 <__swsetup_r+0xb0>
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	e7f7      	b.n	800a7ee <__swsetup_r+0xba>
 800a7fe:	bf00      	nop
 800a800:	20000034 	.word	0x20000034
 800a804:	0800b4ec 	.word	0x0800b4ec
 800a808:	0800b50c 	.word	0x0800b50c
 800a80c:	0800b4cc 	.word	0x0800b4cc

0800a810 <abort>:
 800a810:	b508      	push	{r3, lr}
 800a812:	2006      	movs	r0, #6
 800a814:	f000 fa52 	bl	800acbc <raise>
 800a818:	2001      	movs	r0, #1
 800a81a:	f7f8 f953 	bl	8002ac4 <_exit>
	...

0800a820 <__sflush_r>:
 800a820:	898a      	ldrh	r2, [r1, #12]
 800a822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a826:	4605      	mov	r5, r0
 800a828:	0710      	lsls	r0, r2, #28
 800a82a:	460c      	mov	r4, r1
 800a82c:	d458      	bmi.n	800a8e0 <__sflush_r+0xc0>
 800a82e:	684b      	ldr	r3, [r1, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	dc05      	bgt.n	800a840 <__sflush_r+0x20>
 800a834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a836:	2b00      	cmp	r3, #0
 800a838:	dc02      	bgt.n	800a840 <__sflush_r+0x20>
 800a83a:	2000      	movs	r0, #0
 800a83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a842:	2e00      	cmp	r6, #0
 800a844:	d0f9      	beq.n	800a83a <__sflush_r+0x1a>
 800a846:	2300      	movs	r3, #0
 800a848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a84c:	682f      	ldr	r7, [r5, #0]
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	d032      	beq.n	800a8b8 <__sflush_r+0x98>
 800a852:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	075a      	lsls	r2, r3, #29
 800a858:	d505      	bpl.n	800a866 <__sflush_r+0x46>
 800a85a:	6863      	ldr	r3, [r4, #4]
 800a85c:	1ac0      	subs	r0, r0, r3
 800a85e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a860:	b10b      	cbz	r3, 800a866 <__sflush_r+0x46>
 800a862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a864:	1ac0      	subs	r0, r0, r3
 800a866:	2300      	movs	r3, #0
 800a868:	4602      	mov	r2, r0
 800a86a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a86c:	6a21      	ldr	r1, [r4, #32]
 800a86e:	4628      	mov	r0, r5
 800a870:	47b0      	blx	r6
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	89a3      	ldrh	r3, [r4, #12]
 800a876:	d106      	bne.n	800a886 <__sflush_r+0x66>
 800a878:	6829      	ldr	r1, [r5, #0]
 800a87a:	291d      	cmp	r1, #29
 800a87c:	d82c      	bhi.n	800a8d8 <__sflush_r+0xb8>
 800a87e:	4a2a      	ldr	r2, [pc, #168]	; (800a928 <__sflush_r+0x108>)
 800a880:	40ca      	lsrs	r2, r1
 800a882:	07d6      	lsls	r6, r2, #31
 800a884:	d528      	bpl.n	800a8d8 <__sflush_r+0xb8>
 800a886:	2200      	movs	r2, #0
 800a888:	6062      	str	r2, [r4, #4]
 800a88a:	04d9      	lsls	r1, r3, #19
 800a88c:	6922      	ldr	r2, [r4, #16]
 800a88e:	6022      	str	r2, [r4, #0]
 800a890:	d504      	bpl.n	800a89c <__sflush_r+0x7c>
 800a892:	1c42      	adds	r2, r0, #1
 800a894:	d101      	bne.n	800a89a <__sflush_r+0x7a>
 800a896:	682b      	ldr	r3, [r5, #0]
 800a898:	b903      	cbnz	r3, 800a89c <__sflush_r+0x7c>
 800a89a:	6560      	str	r0, [r4, #84]	; 0x54
 800a89c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a89e:	602f      	str	r7, [r5, #0]
 800a8a0:	2900      	cmp	r1, #0
 800a8a2:	d0ca      	beq.n	800a83a <__sflush_r+0x1a>
 800a8a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8a8:	4299      	cmp	r1, r3
 800a8aa:	d002      	beq.n	800a8b2 <__sflush_r+0x92>
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	f7ff fae3 	bl	8009e78 <_free_r>
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	6360      	str	r0, [r4, #52]	; 0x34
 800a8b6:	e7c1      	b.n	800a83c <__sflush_r+0x1c>
 800a8b8:	6a21      	ldr	r1, [r4, #32]
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b0      	blx	r6
 800a8c0:	1c41      	adds	r1, r0, #1
 800a8c2:	d1c7      	bne.n	800a854 <__sflush_r+0x34>
 800a8c4:	682b      	ldr	r3, [r5, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0c4      	beq.n	800a854 <__sflush_r+0x34>
 800a8ca:	2b1d      	cmp	r3, #29
 800a8cc:	d001      	beq.n	800a8d2 <__sflush_r+0xb2>
 800a8ce:	2b16      	cmp	r3, #22
 800a8d0:	d101      	bne.n	800a8d6 <__sflush_r+0xb6>
 800a8d2:	602f      	str	r7, [r5, #0]
 800a8d4:	e7b1      	b.n	800a83a <__sflush_r+0x1a>
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8dc:	81a3      	strh	r3, [r4, #12]
 800a8de:	e7ad      	b.n	800a83c <__sflush_r+0x1c>
 800a8e0:	690f      	ldr	r7, [r1, #16]
 800a8e2:	2f00      	cmp	r7, #0
 800a8e4:	d0a9      	beq.n	800a83a <__sflush_r+0x1a>
 800a8e6:	0793      	lsls	r3, r2, #30
 800a8e8:	680e      	ldr	r6, [r1, #0]
 800a8ea:	bf08      	it	eq
 800a8ec:	694b      	ldreq	r3, [r1, #20]
 800a8ee:	600f      	str	r7, [r1, #0]
 800a8f0:	bf18      	it	ne
 800a8f2:	2300      	movne	r3, #0
 800a8f4:	eba6 0807 	sub.w	r8, r6, r7
 800a8f8:	608b      	str	r3, [r1, #8]
 800a8fa:	f1b8 0f00 	cmp.w	r8, #0
 800a8fe:	dd9c      	ble.n	800a83a <__sflush_r+0x1a>
 800a900:	6a21      	ldr	r1, [r4, #32]
 800a902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a904:	4643      	mov	r3, r8
 800a906:	463a      	mov	r2, r7
 800a908:	4628      	mov	r0, r5
 800a90a:	47b0      	blx	r6
 800a90c:	2800      	cmp	r0, #0
 800a90e:	dc06      	bgt.n	800a91e <__sflush_r+0xfe>
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a916:	81a3      	strh	r3, [r4, #12]
 800a918:	f04f 30ff 	mov.w	r0, #4294967295
 800a91c:	e78e      	b.n	800a83c <__sflush_r+0x1c>
 800a91e:	4407      	add	r7, r0
 800a920:	eba8 0800 	sub.w	r8, r8, r0
 800a924:	e7e9      	b.n	800a8fa <__sflush_r+0xda>
 800a926:	bf00      	nop
 800a928:	20400001 	.word	0x20400001

0800a92c <_fflush_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	690b      	ldr	r3, [r1, #16]
 800a930:	4605      	mov	r5, r0
 800a932:	460c      	mov	r4, r1
 800a934:	b913      	cbnz	r3, 800a93c <_fflush_r+0x10>
 800a936:	2500      	movs	r5, #0
 800a938:	4628      	mov	r0, r5
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	b118      	cbz	r0, 800a946 <_fflush_r+0x1a>
 800a93e:	6983      	ldr	r3, [r0, #24]
 800a940:	b90b      	cbnz	r3, 800a946 <_fflush_r+0x1a>
 800a942:	f000 f887 	bl	800aa54 <__sinit>
 800a946:	4b14      	ldr	r3, [pc, #80]	; (800a998 <_fflush_r+0x6c>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	d11b      	bne.n	800a984 <_fflush_r+0x58>
 800a94c:	686c      	ldr	r4, [r5, #4]
 800a94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0ef      	beq.n	800a936 <_fflush_r+0xa>
 800a956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a958:	07d0      	lsls	r0, r2, #31
 800a95a:	d404      	bmi.n	800a966 <_fflush_r+0x3a>
 800a95c:	0599      	lsls	r1, r3, #22
 800a95e:	d402      	bmi.n	800a966 <_fflush_r+0x3a>
 800a960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a962:	f000 f915 	bl	800ab90 <__retarget_lock_acquire_recursive>
 800a966:	4628      	mov	r0, r5
 800a968:	4621      	mov	r1, r4
 800a96a:	f7ff ff59 	bl	800a820 <__sflush_r>
 800a96e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a970:	07da      	lsls	r2, r3, #31
 800a972:	4605      	mov	r5, r0
 800a974:	d4e0      	bmi.n	800a938 <_fflush_r+0xc>
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	059b      	lsls	r3, r3, #22
 800a97a:	d4dd      	bmi.n	800a938 <_fflush_r+0xc>
 800a97c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a97e:	f000 f908 	bl	800ab92 <__retarget_lock_release_recursive>
 800a982:	e7d9      	b.n	800a938 <_fflush_r+0xc>
 800a984:	4b05      	ldr	r3, [pc, #20]	; (800a99c <_fflush_r+0x70>)
 800a986:	429c      	cmp	r4, r3
 800a988:	d101      	bne.n	800a98e <_fflush_r+0x62>
 800a98a:	68ac      	ldr	r4, [r5, #8]
 800a98c:	e7df      	b.n	800a94e <_fflush_r+0x22>
 800a98e:	4b04      	ldr	r3, [pc, #16]	; (800a9a0 <_fflush_r+0x74>)
 800a990:	429c      	cmp	r4, r3
 800a992:	bf08      	it	eq
 800a994:	68ec      	ldreq	r4, [r5, #12]
 800a996:	e7da      	b.n	800a94e <_fflush_r+0x22>
 800a998:	0800b4ec 	.word	0x0800b4ec
 800a99c:	0800b50c 	.word	0x0800b50c
 800a9a0:	0800b4cc 	.word	0x0800b4cc

0800a9a4 <std>:
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	b510      	push	{r4, lr}
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a9ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9b2:	6083      	str	r3, [r0, #8]
 800a9b4:	8181      	strh	r1, [r0, #12]
 800a9b6:	6643      	str	r3, [r0, #100]	; 0x64
 800a9b8:	81c2      	strh	r2, [r0, #14]
 800a9ba:	6183      	str	r3, [r0, #24]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	2208      	movs	r2, #8
 800a9c0:	305c      	adds	r0, #92	; 0x5c
 800a9c2:	f7fd fba5 	bl	8008110 <memset>
 800a9c6:	4b05      	ldr	r3, [pc, #20]	; (800a9dc <std+0x38>)
 800a9c8:	6263      	str	r3, [r4, #36]	; 0x24
 800a9ca:	4b05      	ldr	r3, [pc, #20]	; (800a9e0 <std+0x3c>)
 800a9cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9ce:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <std+0x40>)
 800a9d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9d2:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <std+0x44>)
 800a9d4:	6224      	str	r4, [r4, #32]
 800a9d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a9d8:	bd10      	pop	{r4, pc}
 800a9da:	bf00      	nop
 800a9dc:	0800acf5 	.word	0x0800acf5
 800a9e0:	0800ad17 	.word	0x0800ad17
 800a9e4:	0800ad4f 	.word	0x0800ad4f
 800a9e8:	0800ad73 	.word	0x0800ad73

0800a9ec <_cleanup_r>:
 800a9ec:	4901      	ldr	r1, [pc, #4]	; (800a9f4 <_cleanup_r+0x8>)
 800a9ee:	f000 b8af 	b.w	800ab50 <_fwalk_reent>
 800a9f2:	bf00      	nop
 800a9f4:	0800a92d 	.word	0x0800a92d

0800a9f8 <__sfmoreglue>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	1e4a      	subs	r2, r1, #1
 800a9fc:	2568      	movs	r5, #104	; 0x68
 800a9fe:	4355      	muls	r5, r2
 800aa00:	460e      	mov	r6, r1
 800aa02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa06:	f7ff fa87 	bl	8009f18 <_malloc_r>
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	b140      	cbz	r0, 800aa20 <__sfmoreglue+0x28>
 800aa0e:	2100      	movs	r1, #0
 800aa10:	e9c0 1600 	strd	r1, r6, [r0]
 800aa14:	300c      	adds	r0, #12
 800aa16:	60a0      	str	r0, [r4, #8]
 800aa18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa1c:	f7fd fb78 	bl	8008110 <memset>
 800aa20:	4620      	mov	r0, r4
 800aa22:	bd70      	pop	{r4, r5, r6, pc}

0800aa24 <__sfp_lock_acquire>:
 800aa24:	4801      	ldr	r0, [pc, #4]	; (800aa2c <__sfp_lock_acquire+0x8>)
 800aa26:	f000 b8b3 	b.w	800ab90 <__retarget_lock_acquire_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	20000cec 	.word	0x20000cec

0800aa30 <__sfp_lock_release>:
 800aa30:	4801      	ldr	r0, [pc, #4]	; (800aa38 <__sfp_lock_release+0x8>)
 800aa32:	f000 b8ae 	b.w	800ab92 <__retarget_lock_release_recursive>
 800aa36:	bf00      	nop
 800aa38:	20000cec 	.word	0x20000cec

0800aa3c <__sinit_lock_acquire>:
 800aa3c:	4801      	ldr	r0, [pc, #4]	; (800aa44 <__sinit_lock_acquire+0x8>)
 800aa3e:	f000 b8a7 	b.w	800ab90 <__retarget_lock_acquire_recursive>
 800aa42:	bf00      	nop
 800aa44:	20000ce7 	.word	0x20000ce7

0800aa48 <__sinit_lock_release>:
 800aa48:	4801      	ldr	r0, [pc, #4]	; (800aa50 <__sinit_lock_release+0x8>)
 800aa4a:	f000 b8a2 	b.w	800ab92 <__retarget_lock_release_recursive>
 800aa4e:	bf00      	nop
 800aa50:	20000ce7 	.word	0x20000ce7

0800aa54 <__sinit>:
 800aa54:	b510      	push	{r4, lr}
 800aa56:	4604      	mov	r4, r0
 800aa58:	f7ff fff0 	bl	800aa3c <__sinit_lock_acquire>
 800aa5c:	69a3      	ldr	r3, [r4, #24]
 800aa5e:	b11b      	cbz	r3, 800aa68 <__sinit+0x14>
 800aa60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa64:	f7ff bff0 	b.w	800aa48 <__sinit_lock_release>
 800aa68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa6c:	6523      	str	r3, [r4, #80]	; 0x50
 800aa6e:	4b13      	ldr	r3, [pc, #76]	; (800aabc <__sinit+0x68>)
 800aa70:	4a13      	ldr	r2, [pc, #76]	; (800aac0 <__sinit+0x6c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	bf04      	itt	eq
 800aa7a:	2301      	moveq	r3, #1
 800aa7c:	61a3      	streq	r3, [r4, #24]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 f820 	bl	800aac4 <__sfp>
 800aa84:	6060      	str	r0, [r4, #4]
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 f81c 	bl	800aac4 <__sfp>
 800aa8c:	60a0      	str	r0, [r4, #8]
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 f818 	bl	800aac4 <__sfp>
 800aa94:	2200      	movs	r2, #0
 800aa96:	60e0      	str	r0, [r4, #12]
 800aa98:	2104      	movs	r1, #4
 800aa9a:	6860      	ldr	r0, [r4, #4]
 800aa9c:	f7ff ff82 	bl	800a9a4 <std>
 800aaa0:	68a0      	ldr	r0, [r4, #8]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	2109      	movs	r1, #9
 800aaa6:	f7ff ff7d 	bl	800a9a4 <std>
 800aaaa:	68e0      	ldr	r0, [r4, #12]
 800aaac:	2202      	movs	r2, #2
 800aaae:	2112      	movs	r1, #18
 800aab0:	f7ff ff78 	bl	800a9a4 <std>
 800aab4:	2301      	movs	r3, #1
 800aab6:	61a3      	str	r3, [r4, #24]
 800aab8:	e7d2      	b.n	800aa60 <__sinit+0xc>
 800aaba:	bf00      	nop
 800aabc:	0800b148 	.word	0x0800b148
 800aac0:	0800a9ed 	.word	0x0800a9ed

0800aac4 <__sfp>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	4607      	mov	r7, r0
 800aac8:	f7ff ffac 	bl	800aa24 <__sfp_lock_acquire>
 800aacc:	4b1e      	ldr	r3, [pc, #120]	; (800ab48 <__sfp+0x84>)
 800aace:	681e      	ldr	r6, [r3, #0]
 800aad0:	69b3      	ldr	r3, [r6, #24]
 800aad2:	b913      	cbnz	r3, 800aada <__sfp+0x16>
 800aad4:	4630      	mov	r0, r6
 800aad6:	f7ff ffbd 	bl	800aa54 <__sinit>
 800aada:	3648      	adds	r6, #72	; 0x48
 800aadc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	d503      	bpl.n	800aaec <__sfp+0x28>
 800aae4:	6833      	ldr	r3, [r6, #0]
 800aae6:	b30b      	cbz	r3, 800ab2c <__sfp+0x68>
 800aae8:	6836      	ldr	r6, [r6, #0]
 800aaea:	e7f7      	b.n	800aadc <__sfp+0x18>
 800aaec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aaf0:	b9d5      	cbnz	r5, 800ab28 <__sfp+0x64>
 800aaf2:	4b16      	ldr	r3, [pc, #88]	; (800ab4c <__sfp+0x88>)
 800aaf4:	60e3      	str	r3, [r4, #12]
 800aaf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aafa:	6665      	str	r5, [r4, #100]	; 0x64
 800aafc:	f000 f847 	bl	800ab8e <__retarget_lock_init_recursive>
 800ab00:	f7ff ff96 	bl	800aa30 <__sfp_lock_release>
 800ab04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab0c:	6025      	str	r5, [r4, #0]
 800ab0e:	61a5      	str	r5, [r4, #24]
 800ab10:	2208      	movs	r2, #8
 800ab12:	4629      	mov	r1, r5
 800ab14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab18:	f7fd fafa 	bl	8008110 <memset>
 800ab1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab24:	4620      	mov	r0, r4
 800ab26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab28:	3468      	adds	r4, #104	; 0x68
 800ab2a:	e7d9      	b.n	800aae0 <__sfp+0x1c>
 800ab2c:	2104      	movs	r1, #4
 800ab2e:	4638      	mov	r0, r7
 800ab30:	f7ff ff62 	bl	800a9f8 <__sfmoreglue>
 800ab34:	4604      	mov	r4, r0
 800ab36:	6030      	str	r0, [r6, #0]
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d1d5      	bne.n	800aae8 <__sfp+0x24>
 800ab3c:	f7ff ff78 	bl	800aa30 <__sfp_lock_release>
 800ab40:	230c      	movs	r3, #12
 800ab42:	603b      	str	r3, [r7, #0]
 800ab44:	e7ee      	b.n	800ab24 <__sfp+0x60>
 800ab46:	bf00      	nop
 800ab48:	0800b148 	.word	0x0800b148
 800ab4c:	ffff0001 	.word	0xffff0001

0800ab50 <_fwalk_reent>:
 800ab50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab54:	4606      	mov	r6, r0
 800ab56:	4688      	mov	r8, r1
 800ab58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab5c:	2700      	movs	r7, #0
 800ab5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab62:	f1b9 0901 	subs.w	r9, r9, #1
 800ab66:	d505      	bpl.n	800ab74 <_fwalk_reent+0x24>
 800ab68:	6824      	ldr	r4, [r4, #0]
 800ab6a:	2c00      	cmp	r4, #0
 800ab6c:	d1f7      	bne.n	800ab5e <_fwalk_reent+0xe>
 800ab6e:	4638      	mov	r0, r7
 800ab70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab74:	89ab      	ldrh	r3, [r5, #12]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d907      	bls.n	800ab8a <_fwalk_reent+0x3a>
 800ab7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	d003      	beq.n	800ab8a <_fwalk_reent+0x3a>
 800ab82:	4629      	mov	r1, r5
 800ab84:	4630      	mov	r0, r6
 800ab86:	47c0      	blx	r8
 800ab88:	4307      	orrs	r7, r0
 800ab8a:	3568      	adds	r5, #104	; 0x68
 800ab8c:	e7e9      	b.n	800ab62 <_fwalk_reent+0x12>

0800ab8e <__retarget_lock_init_recursive>:
 800ab8e:	4770      	bx	lr

0800ab90 <__retarget_lock_acquire_recursive>:
 800ab90:	4770      	bx	lr

0800ab92 <__retarget_lock_release_recursive>:
 800ab92:	4770      	bx	lr

0800ab94 <__swhatbuf_r>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	460e      	mov	r6, r1
 800ab98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9c:	2900      	cmp	r1, #0
 800ab9e:	b096      	sub	sp, #88	; 0x58
 800aba0:	4614      	mov	r4, r2
 800aba2:	461d      	mov	r5, r3
 800aba4:	da07      	bge.n	800abb6 <__swhatbuf_r+0x22>
 800aba6:	2300      	movs	r3, #0
 800aba8:	602b      	str	r3, [r5, #0]
 800abaa:	89b3      	ldrh	r3, [r6, #12]
 800abac:	061a      	lsls	r2, r3, #24
 800abae:	d410      	bmi.n	800abd2 <__swhatbuf_r+0x3e>
 800abb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abb4:	e00e      	b.n	800abd4 <__swhatbuf_r+0x40>
 800abb6:	466a      	mov	r2, sp
 800abb8:	f000 f902 	bl	800adc0 <_fstat_r>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	dbf2      	blt.n	800aba6 <__swhatbuf_r+0x12>
 800abc0:	9a01      	ldr	r2, [sp, #4]
 800abc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abca:	425a      	negs	r2, r3
 800abcc:	415a      	adcs	r2, r3
 800abce:	602a      	str	r2, [r5, #0]
 800abd0:	e7ee      	b.n	800abb0 <__swhatbuf_r+0x1c>
 800abd2:	2340      	movs	r3, #64	; 0x40
 800abd4:	2000      	movs	r0, #0
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	b016      	add	sp, #88	; 0x58
 800abda:	bd70      	pop	{r4, r5, r6, pc}

0800abdc <__smakebuf_r>:
 800abdc:	898b      	ldrh	r3, [r1, #12]
 800abde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abe0:	079d      	lsls	r5, r3, #30
 800abe2:	4606      	mov	r6, r0
 800abe4:	460c      	mov	r4, r1
 800abe6:	d507      	bpl.n	800abf8 <__smakebuf_r+0x1c>
 800abe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	6123      	str	r3, [r4, #16]
 800abf0:	2301      	movs	r3, #1
 800abf2:	6163      	str	r3, [r4, #20]
 800abf4:	b002      	add	sp, #8
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	ab01      	add	r3, sp, #4
 800abfa:	466a      	mov	r2, sp
 800abfc:	f7ff ffca 	bl	800ab94 <__swhatbuf_r>
 800ac00:	9900      	ldr	r1, [sp, #0]
 800ac02:	4605      	mov	r5, r0
 800ac04:	4630      	mov	r0, r6
 800ac06:	f7ff f987 	bl	8009f18 <_malloc_r>
 800ac0a:	b948      	cbnz	r0, 800ac20 <__smakebuf_r+0x44>
 800ac0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac10:	059a      	lsls	r2, r3, #22
 800ac12:	d4ef      	bmi.n	800abf4 <__smakebuf_r+0x18>
 800ac14:	f023 0303 	bic.w	r3, r3, #3
 800ac18:	f043 0302 	orr.w	r3, r3, #2
 800ac1c:	81a3      	strh	r3, [r4, #12]
 800ac1e:	e7e3      	b.n	800abe8 <__smakebuf_r+0xc>
 800ac20:	4b0d      	ldr	r3, [pc, #52]	; (800ac58 <__smakebuf_r+0x7c>)
 800ac22:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	6020      	str	r0, [r4, #0]
 800ac28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	9b00      	ldr	r3, [sp, #0]
 800ac30:	6163      	str	r3, [r4, #20]
 800ac32:	9b01      	ldr	r3, [sp, #4]
 800ac34:	6120      	str	r0, [r4, #16]
 800ac36:	b15b      	cbz	r3, 800ac50 <__smakebuf_r+0x74>
 800ac38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f000 f8d1 	bl	800ade4 <_isatty_r>
 800ac42:	b128      	cbz	r0, 800ac50 <__smakebuf_r+0x74>
 800ac44:	89a3      	ldrh	r3, [r4, #12]
 800ac46:	f023 0303 	bic.w	r3, r3, #3
 800ac4a:	f043 0301 	orr.w	r3, r3, #1
 800ac4e:	81a3      	strh	r3, [r4, #12]
 800ac50:	89a0      	ldrh	r0, [r4, #12]
 800ac52:	4305      	orrs	r5, r0
 800ac54:	81a5      	strh	r5, [r4, #12]
 800ac56:	e7cd      	b.n	800abf4 <__smakebuf_r+0x18>
 800ac58:	0800a9ed 	.word	0x0800a9ed

0800ac5c <_malloc_usable_size_r>:
 800ac5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac60:	1f18      	subs	r0, r3, #4
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	bfbc      	itt	lt
 800ac66:	580b      	ldrlt	r3, [r1, r0]
 800ac68:	18c0      	addlt	r0, r0, r3
 800ac6a:	4770      	bx	lr

0800ac6c <_raise_r>:
 800ac6c:	291f      	cmp	r1, #31
 800ac6e:	b538      	push	{r3, r4, r5, lr}
 800ac70:	4604      	mov	r4, r0
 800ac72:	460d      	mov	r5, r1
 800ac74:	d904      	bls.n	800ac80 <_raise_r+0x14>
 800ac76:	2316      	movs	r3, #22
 800ac78:	6003      	str	r3, [r0, #0]
 800ac7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}
 800ac80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac82:	b112      	cbz	r2, 800ac8a <_raise_r+0x1e>
 800ac84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac88:	b94b      	cbnz	r3, 800ac9e <_raise_r+0x32>
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 f830 	bl	800acf0 <_getpid_r>
 800ac90:	462a      	mov	r2, r5
 800ac92:	4601      	mov	r1, r0
 800ac94:	4620      	mov	r0, r4
 800ac96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac9a:	f000 b817 	b.w	800accc <_kill_r>
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d00a      	beq.n	800acb8 <_raise_r+0x4c>
 800aca2:	1c59      	adds	r1, r3, #1
 800aca4:	d103      	bne.n	800acae <_raise_r+0x42>
 800aca6:	2316      	movs	r3, #22
 800aca8:	6003      	str	r3, [r0, #0]
 800acaa:	2001      	movs	r0, #1
 800acac:	e7e7      	b.n	800ac7e <_raise_r+0x12>
 800acae:	2400      	movs	r4, #0
 800acb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acb4:	4628      	mov	r0, r5
 800acb6:	4798      	blx	r3
 800acb8:	2000      	movs	r0, #0
 800acba:	e7e0      	b.n	800ac7e <_raise_r+0x12>

0800acbc <raise>:
 800acbc:	4b02      	ldr	r3, [pc, #8]	; (800acc8 <raise+0xc>)
 800acbe:	4601      	mov	r1, r0
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	f7ff bfd3 	b.w	800ac6c <_raise_r>
 800acc6:	bf00      	nop
 800acc8:	20000034 	.word	0x20000034

0800accc <_kill_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	; (800acec <_kill_r+0x20>)
 800acd0:	2300      	movs	r3, #0
 800acd2:	4604      	mov	r4, r0
 800acd4:	4608      	mov	r0, r1
 800acd6:	4611      	mov	r1, r2
 800acd8:	602b      	str	r3, [r5, #0]
 800acda:	f7f7 fee3 	bl	8002aa4 <_kill>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	d102      	bne.n	800ace8 <_kill_r+0x1c>
 800ace2:	682b      	ldr	r3, [r5, #0]
 800ace4:	b103      	cbz	r3, 800ace8 <_kill_r+0x1c>
 800ace6:	6023      	str	r3, [r4, #0]
 800ace8:	bd38      	pop	{r3, r4, r5, pc}
 800acea:	bf00      	nop
 800acec:	20000ce0 	.word	0x20000ce0

0800acf0 <_getpid_r>:
 800acf0:	f7f7 bed0 	b.w	8002a94 <_getpid>

0800acf4 <__sread>:
 800acf4:	b510      	push	{r4, lr}
 800acf6:	460c      	mov	r4, r1
 800acf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfc:	f000 f894 	bl	800ae28 <_read_r>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	bfab      	itete	ge
 800ad04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad06:	89a3      	ldrhlt	r3, [r4, #12]
 800ad08:	181b      	addge	r3, r3, r0
 800ad0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad0e:	bfac      	ite	ge
 800ad10:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad12:	81a3      	strhlt	r3, [r4, #12]
 800ad14:	bd10      	pop	{r4, pc}

0800ad16 <__swrite>:
 800ad16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1a:	461f      	mov	r7, r3
 800ad1c:	898b      	ldrh	r3, [r1, #12]
 800ad1e:	05db      	lsls	r3, r3, #23
 800ad20:	4605      	mov	r5, r0
 800ad22:	460c      	mov	r4, r1
 800ad24:	4616      	mov	r6, r2
 800ad26:	d505      	bpl.n	800ad34 <__swrite+0x1e>
 800ad28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad2c:	2302      	movs	r3, #2
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f000 f868 	bl	800ae04 <_lseek_r>
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	4632      	mov	r2, r6
 800ad42:	463b      	mov	r3, r7
 800ad44:	4628      	mov	r0, r5
 800ad46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4a:	f000 b817 	b.w	800ad7c <_write_r>

0800ad4e <__sseek>:
 800ad4e:	b510      	push	{r4, lr}
 800ad50:	460c      	mov	r4, r1
 800ad52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad56:	f000 f855 	bl	800ae04 <_lseek_r>
 800ad5a:	1c43      	adds	r3, r0, #1
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	bf15      	itete	ne
 800ad60:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad6a:	81a3      	strheq	r3, [r4, #12]
 800ad6c:	bf18      	it	ne
 800ad6e:	81a3      	strhne	r3, [r4, #12]
 800ad70:	bd10      	pop	{r4, pc}

0800ad72 <__sclose>:
 800ad72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad76:	f000 b813 	b.w	800ada0 <_close_r>
	...

0800ad7c <_write_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d07      	ldr	r5, [pc, #28]	; (800ad9c <_write_r+0x20>)
 800ad80:	4604      	mov	r4, r0
 800ad82:	4608      	mov	r0, r1
 800ad84:	4611      	mov	r1, r2
 800ad86:	2200      	movs	r2, #0
 800ad88:	602a      	str	r2, [r5, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f7f7 fec1 	bl	8002b12 <_write>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_write_r+0x1e>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_write_r+0x1e>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	20000ce0 	.word	0x20000ce0

0800ada0 <_close_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d06      	ldr	r5, [pc, #24]	; (800adbc <_close_r+0x1c>)
 800ada4:	2300      	movs	r3, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7f7 fecd 	bl	8002b4a <_close>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_close_r+0x1a>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_close_r+0x1a>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	20000ce0 	.word	0x20000ce0

0800adc0 <_fstat_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d07      	ldr	r5, [pc, #28]	; (800ade0 <_fstat_r+0x20>)
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	4611      	mov	r1, r2
 800adcc:	602b      	str	r3, [r5, #0]
 800adce:	f7f7 fec8 	bl	8002b62 <_fstat>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d102      	bne.n	800addc <_fstat_r+0x1c>
 800add6:	682b      	ldr	r3, [r5, #0]
 800add8:	b103      	cbz	r3, 800addc <_fstat_r+0x1c>
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	bd38      	pop	{r3, r4, r5, pc}
 800adde:	bf00      	nop
 800ade0:	20000ce0 	.word	0x20000ce0

0800ade4 <_isatty_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d06      	ldr	r5, [pc, #24]	; (800ae00 <_isatty_r+0x1c>)
 800ade8:	2300      	movs	r3, #0
 800adea:	4604      	mov	r4, r0
 800adec:	4608      	mov	r0, r1
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	f7f7 fec7 	bl	8002b82 <_isatty>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_isatty_r+0x1a>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_isatty_r+0x1a>
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	20000ce0 	.word	0x20000ce0

0800ae04 <_lseek_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d07      	ldr	r5, [pc, #28]	; (800ae24 <_lseek_r+0x20>)
 800ae08:	4604      	mov	r4, r0
 800ae0a:	4608      	mov	r0, r1
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	2200      	movs	r2, #0
 800ae10:	602a      	str	r2, [r5, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f7f7 fec0 	bl	8002b98 <_lseek>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_lseek_r+0x1e>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_lseek_r+0x1e>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	20000ce0 	.word	0x20000ce0

0800ae28 <_read_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d07      	ldr	r5, [pc, #28]	; (800ae48 <_read_r+0x20>)
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	4608      	mov	r0, r1
 800ae30:	4611      	mov	r1, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	602a      	str	r2, [r5, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f7f7 fe4e 	bl	8002ad8 <_read>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_read_r+0x1e>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_read_r+0x1e>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	20000ce0 	.word	0x20000ce0

0800ae4c <_init>:
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	bf00      	nop
 800ae50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae52:	bc08      	pop	{r3}
 800ae54:	469e      	mov	lr, r3
 800ae56:	4770      	bx	lr

0800ae58 <_fini>:
 800ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5a:	bf00      	nop
 800ae5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae5e:	bc08      	pop	{r3}
 800ae60:	469e      	mov	lr, r3
 800ae62:	4770      	bx	lr
